course_id,course_text,KA_label
CSCI 140,"This class covers basic techniques used to analyze problems and algorithms (including asymptotics, upper/lower bounds, best/average/worst case analysis, amortized analysis, complexity), basic techniques used to design algorithms (including divide & conquer / greedy / dynamic programming / heuristics, choosing appropriate data structures), and important classical algorithms (including sorting, string, matrix, and graph algorithms). The goal is for students to be able to apply all of the above to designing solutions for real-world problems.","SDF
AL
PD"
COS 226,"Classical algorithms and data structures, with an emphasis on implementing them in modern programming environments, and using them to solve real-world problems. Particular emphasis is given to algorithms for sorting, searching, string processing, and graph algorithms. Fundamental algorithms in a number of other areas are covered as well, including geometric algorithms and some algorithms from operations research. The course concentrates on developing implementations, understanding their performance characteristics, and estimating their potential effectiveness in applications.
Analysis of algorithms, with an emphasis on using the scientific method to validate hypotheses about algorithm performance.
Data types, APIs, encapsulation.
Linked data structures, resizing arrays, and implementations of container types such as stacks and queues. Sorting algorithms, including insertion sort, selection sort, shellsort, mergesort, randomized quicksort, heapsort.
Priority queue data types and implementations, including binary heaps.
Symbol table data types and implementations (searching algorithms), including binary search trees, red- black trees, and hash tables.
Geometric algorithms (searching in point sets and intersection).
Graph algorithms (breadth-first search, depth-first search, MST, shortest paths, topological sort, strong components, maxflow)
Tries, string sorting, substring search, regular expression pattern matching. Data compression (Huffman, LZW).
Reductions, combinatorial search, P vs. NP, and NP-completeness.
","SDF
PL
AL"
CS 256,"Analysis: asymptotic analysis including lower bounds on sorting, recurrence relations and their solutions. Graphs: directed, undirected, planar, and bipartite.
Greedy Algorithms: shortest paths, minimum spanning trees, and the union-find data structure (including amortized analysis).
Divide and Conquer Algorithms: integer and matrix multiplication, the fast-fourier transform. Dynamic Programming: matrix parenthesization, subset sum, RNA secondary structure, DP on trees. Network Flow: Max-Flow, Min-Cut (equivalence, duality, algorithms).
Randomization: randomized quicksort, median, min-cut, universal hashing, skip lists. String Algorithms: string matching, suffix trees and suffix arrays.
Complexity Theory: Complexity classes, reductions, and approximation algorithms.
","AL
DS"
CSE332,"The core of this course is fundamental “classical” data structures and algorithms including balanced trees, hashtables, sorting, priority queues, graphs and graph algorithms like shortest paths, etc. The course includes asymptotic complexity (e.g., big-O notation). The course also includes an introduction to concurrency and parallelism grounded in the data structure material. Concurrent access to shared data motivates mutual exclusion. Independent subcomputations (e.g., recursive calls to mergesort) motivate parallelism and cost models that account for time-to-completion in the presence of parallelism.
More general goals of the course include (1) exposing students to non-obvious algorithms (to make the point that algorithm selection and design is an important and non-trivial part of computer science & engineering) and (2) giving students substantial programming experience in a modern high-level programming language such as Java (to continue developing their software-development maturity).
Asymptotic complexity, algorithm analysis, recurrence relations Review of stacks, queues, and binary search trees (covered in CS2) Priority queues and binary heaps
Dictionaries and AVL trees, B trees, and hashtables
Insertion sort, selection sort, heap sort, merge sort, quicksort, bucket sort, radix sort Lower bound for comparison sorting
Graphs, graph representations, graph traversals, topological sort, shortest paths, minimum spanning trees Simple examples of amortized analysis (e.g., resizing arrays)
Introduction to multiple explicit threads of execution Parallelism via fork-join computations
Basic parallel algorithms: maps, reduces, parallel-prefix computations Parallel-algorithm analysis: Amdahl’s Law, work, span
Concurrent use of shared resources, mutual exclusion via locks
Data races and higher-level race conditions Deadlock
Condition variables
","AL
DS
PD
SDF"
CS/ECE 552,"The goal of the course is to teach the design and operation of a digital computer. It serves students in two ways. First, for those who want to continue studying computer architecture, embedded systems, and other low-level aspects of computer systems, it lays the foundation of detailed implementation experience needed to make the quantitative tradeoffs in more advanced courses meaningful. Second, for those students interested in other areas of computer science, it solidifies an intuition about why hardware is as it is and how software interacts with  hardware.
The subject matter covered in the course includes technology trends and their implications, performance measurement, instruction sets, computer arithmetic, design and control of a datapath, pipelining, memory hierarchies, input and output, and brief introduction to multiprocessors.
The full list of course topics is:
Introduction and Performance Technology trends Measuring CPU performance
Amdahl’s law and averaging performance metrics
Instruction Sets
Components of an instruction set
Understanding instruction sets from an implementation perspective RISC and CISC and example instruction sets
Computer Arithmetic
Ripple carry, carry lookahead, and other adder designs ALU and Shifters
Floating-point arithmetic and floating-point hardware design
Datapath and Control
Single-cycle and multi-cycle datapaths
Control of datapaths and implementing control finite-state machines
Pipelining
Basic pipelined datapath and control
Data dependences, data hazards, bypassing, code scheduling Branch hazards, delayed branches, branch prediction
Memory Hierarchies
Caches (direct mapped, fully associative, set associative) Main memories
Memory hierarchy performance metrics and their use Virtual memory, address translation, TLBs
Input and Output
Common I/O device types and characteristics
Memory mapped I/O, DMA, program-controlled I/O, polling, interrupts Networks
Multiprocessors
Introduction to multiprocessors Cache coherence problem",AR
CS150,"Design of synchronous digital systems using modern tools and methodologies, in particular, digital logic synthesis tools, digital hardware simulation tools, and field programmable gate array architectures.
Understand the principles and methodology of digital logic design at the gate and switch level, including both combinational and sequential logic elements. Gain experience developing a relatively large and complex digital system. Gain experience with modern computer-aided design tools for digital logic design. Understand clocking methodologies used to control the flow of information and manage circuit state. Appreciate methods for specifying digital logic, as well as the process by which a high-level specification of a circuit is synthesized into logic networks. Appreciate the tradeoffs between hardware and software implementations of a given function.
Appreciate the uses and capabilities of a modern FPGA platform.
",AR
CC152,"Historical Perspectives: RISC vs. CISC, Pipelining, Memory Hierarchy, Virtual Memory, Complex Pipelines and Out-of-Order Execution, Superscaler and VLIW Architecture, Synchronization, Cache Coherency.
The course is intended to provide a foundation for students interested in performance programming, compilers,   and operating systems, as well as computer architecture and engineering. Our goal is for you to better understand how software interacts with hardware, and to understand how trends in technology, applications, and economics drive continuing changes in the field. The course will cover the different forms of parallelism found in applications (instruction-level, data-level, thread-level, gate-level) and how these can be exploited with various architectural features. We will cover pipelining, superscalar, speculative and out-of-order execution, vector machines, VLIW machines, multithreading, graphics processing units, and parallel microprocessors. We will also explore the design of memory systems including caches, virtual memory, and DRAM. An important part of the course is a series of  lab assignments using detailed simulation tools to evaluate and develop architectural ideas while running real applications and operating systems. Our objective is that you will understand all the major concepts used in  modern microprocessors by the end of the semester.",AR
eScience,"eScience’s basic premise is that in addition to the two accepted scientific inquiry methods: theoretical/mathematical formulation and experimentation, computational simulation/modeling has become the third method for doing science. eScience introduces the application of computational methods to scientific exploration and discovery in the social and natural sciences. Both the class and the laboratory include a broad range of well-defined experiments, verified data inputs, predictable/repeatable outcomes, and open questions to be explored. We begin with an Introduction to eScience, Scientific Method, and Models. Thereafter, we have weekly topics including Spread of Epidemics, Spread of Fire, Movement of Ants and Problem Solving, Predator-prey relationships,Altruism/Collaboration/Competition, Economics, Art and Music, Climate Change, E. coli metabolism of lactose, Cancer and Tumors, Games, Complex Systems and Chaos, Networks, and Fractals. Both theory and practice of computational simulation and modeling techniques are examined as tools to support the scientific method. No computer programming knowledge or calculus is required. By popular student demand, Netlogo5 is predominantly used as the modeling tool for this course due to its ease of use and extensive library of relevant models. Such tools have the advantage of embodying principles of a systems approach to non-linear, self-organizing, and emergent phenomena that characterize most interesting problems that societies face today. They also offer a bottom-up approach to problem-solution and experimentation in a non-threatening way that does not require the knowledge of programming. At the same time, these tools also provide more adventurous students with the opportunity to modify the natural language-like computer code to test their own ideas about modeling the societal challenge under consideration.
The first lesson of the week uncovers the nature of the societal problem targeted in that particular knowledge unit. The second lesson of the week offers examples of computer-based simulations and models of the problem. The lessons are followed by a laboratory  session that uses well-defined protocols to guide students through hands-on exploration of computer simulations and models. In the Spring 2013 semester we introduced the use of Audience Response Systems6 (clickers) for quizzes at the end of each lesson or topic; each quiz consisted of four to five questions about the current topic plus one or two review questions from previous topics. We also experimented with “flipped classroom” methods during some of the clicker quizzes. 
Rate of Change, Constrained Growth, Unconstrained Growth and Decay, Drug Dosage, Modeling Falling and Skydiving, Competition, Spread of SARS, Predator-Prey, Errors, Euler's Method, Runge-Kutta Method, Empirical Models, Simulations, Area Through Monte Carlo Simulation, Random Walk, Spreading of Fire, and Movement of Ants. We used Mathematica8 and Vensim9 for lab experiments.
These methods and tools include the science of complexity, the science of networks, fractals, chaos theory, problem solving techniques, and game theory.","CN
IS"
COSC/MATH 201,"The modeling process
Two system dynamics tool tutorials
System dynamics problems with rate proportional to amount: unconstrained growth and decay, constrained growth, drug dosage
System dynamics models with interactions: competition, predator-prey models, spread of disease models Computational error
Simulation techniques: Euler's method, Runge-Kutta 2 method
Additional system dynamics projects throughout, such as modeling falling and skydiving, enzyme kinetics, the carbon cycle, economics and fishing
Six computational toolbox tutorials Empirical models
Introduction to Monte Carlo simulations Cellular automaton random walk simulations
Cellular automaton diffusion simulations: spreading of fire, formation of biofilms
High-performance computing: concurrent processing, parallel algorithms
Additional cellular automaton simulations throughout such as simulating polymer formation, solidification, foraging, pit vipers, mushroom fairy rings, clouds
","CN
GV
SDF
IS
SE"
MAT 267,"This course will develop advanced mathematics skills appropriate for students pursuing STEM studies such as Engineering, Science, Computer Science, and Mathematics. Topics include sets, numbers, algorithms, logic, computer arithmetic, applied modern algebra, combinations, recursion principles, graph theory, trees, discrete probability, and digraphs.",DS
CS103,"Sets
Functions and Relations
Proof techniques (including direct, contradiction, diagonalization and induction) Graphs
Logic (proposition and predicate) Finite Automata (DFAs, NFAs, PDAs) Regular and Context-Free Languages Turing Machines
Complexity Classes (P, NP, Exp) NP-Completeness
Counting
Combinations and Permutations
Probability (including conditional probability, independence, and conditional independence) Expectation and Variance
Covariance and Correlation
Discrete distributions (including Binomial, Negative Binomial, Poisson, and Hypergeometric) Continuous distributions (including Uniform, Normal, Exponential, and Beta) Limit/Concentration results (including Central Limit Theorem, Markov/Chebyshev bounds) Parameter estimation (including maximum likelihood and Bayesian estimation)
Classification (including Naive Bayes Classifier and Logistic Regression) Simulation
","DS
AL
IS"
CS 250,"Introduction to the Peano Axioms and construction of the natural numbers, integer numbers, rational numbers, and real numbers.
Construction and basic properties of monoids, groups, rings, fields, and vector spaces.  Introduction to transfinite ordinals and transfinite cardinals, and Cantor’s diagonalization methods Representation of large finite natural numbers using Knuth’s “arrow notation”
Introduction to first order propositional logic, logical equivalence, valid and invalid arguments Introduction to digital circuits
Introduction to first order monadic predicate logic, universal and existential quantification, and predicate arguments
Elementary number theory, prime factors, Euclid’s algorithm Finite arithmetic, Galois Fields, and RSA encryption
Proof techniques, including direct and indirect proofs, proving universal statements, proving existential statements, proof forms, common errors in proofs
Sequences, definite and indefinite series, recursive sequences and series Developing and validating closed-form solutions for series
Well ordering and mathematical induction Introduction to proving algorithm correctness
Second order linear homogeneous recurrence relations with constant coefficients General recursive definitions and structural induction
Introduction to classical (Cantor) set theory, Russell’s Paradox, introduction to axiomatic set theory (Zermelo-Fraenkel with Axiom of Choice).
Set-theoretic proofs Boolean algebras Halting Problem
","DS
AL
IS"
CS 251,"Set-based theory of functions, Boolean functions Injection, surjection, bijection
Function composition
Function cardinality and computability General set relations
Equivalence relations Total and partial orderings
Basic counting techniques: multiplication rule, addition rule, Dirichlet’s Box Principle Combinations and permutations
Pascal’s Formula and the Binomial Theorem Kolmogorov Axioms and expected value Markov processes
Conditional probability and Bayes’ Theorem Classical graph theory: Euler and Hamilton circuits Introduction to spectral graph theory, isomorphisms Trees, weighted graphs, spanning trees
Algorithm analysis Formal languages Regular expressions Finite-state automata
","AL
DS"
CS 175,"Shader-based OpenGL programming Coordinate systems and transformations Quaternions and the Arcball interface Camera modeling and projection
OpenGL fixed functionality including rasterization Material simulation
Basic and advanced use of textures including shadow mapping Image sampling including alpha matting
Image resampling including mip-maps Human color perception
Geometric representations Physical simulation in animation Ray tracing
","GV
SDF
AR
CN
SE"
CS371,"Computer graphics and its place in computer science Surface modeling
Light modeling
The Rendering Equation Ray casting
Surface scattering (BSDFs) Spatial data structures Photon  mapping Refraction
Texture Mapping Transformations Rasterization
The graphics pipeline GPU architecture
Film production and effects Deferred shading
Collision detection Shadow maps
","GV
SDF
AR
CN
SE"
Human Aspects of Computer Science,"Experimental design and data representation
Inferential statistics Writing up experiments User-Centered Design
Developing requirements through personas and scenarios Conceptual design, interface design
Prototyping: lo-fi and paper Visual Design
Evaluation techniques: heuristics, cognitive walkthrough, experiments
Human-Computer Interaction",HCI
FIT3063,"This unit provides a detailed understanding of the underpinning theories, principles and practices of interface design for computer-based systems. It examines issues in the design of system interfaces from a number of perspectives: user, programmer, designer. It explores the application of the relevant theories in practice. The unit will cover topics such as methods and tools for developing effective user interfaces, evaluation methods such as the conduct of usability and heuristic evaluations, design of appropriate interface elements including the design of menus and other interaction styles. The unit also focuses on designing for a diverse range of users and environments.
Background and motivation for HCI Human factors
Theoretical foundations: theories, models, principles, standards, guidelines Interface design elements
Interface design: methods and principles Interface design: data gathering and task analysis Interaction styles
Usability Accessibility Interaction devices Future of HCI
",HCI
CO328,"This module provides an introduction to human-computer interaction. Fundamental aspects of human physiology  and psychology are introduced and key features of interaction and common interaction styles delineated. A variety   of analysis and design methods are introduced (e.g., GOMS, heuristic evaluation, user-centred and contextual design techniques). Throughout the course, the quality of design and the need for a professional, integrated and user- centered approach to interface development is emphasized. Rapid and low-fidelity prototyping feature as one aspect of this.
Evaluating interfaces: heuristic evaluation, GOMS Evaluation Data & Empirical Data
Lo-fi Prototyping
Color, Vision & Perception
Some Features of Human Memory Errors
Controls, widgets, icons & symbols Elements of visual design Documentation
",HCI
Human Computer Interaction,"The goal is to present HCI as a discipline that is concerned with technical advance, and that must integrate different disciplinary perspectives. Fundamental theoretical issues deal with principles of human perception, visual representation and purposeful action, discussed in the context of novel interactive technologies. Building on a first year course in professional software design, the course ends with an overview of systematic approaches to the design and analysis of user interfaces.
propose design approaches that are suitable to different classes of user and application; identify appropriate techniques for analysis and critique of user interfaces;
be able to design and undertake quantitative and qualitative studies in order to improve the design of interactive systems;
understand the history and purpose of the features of contemporary user interfaces.
The scope and challenges of HCI and Interaction Design. Visual representation
Text and gesture interaction Inference-based approaches
Augmented reality and tangible user interfaces Usability of programming languages
User-centered design research Usability evaluation methods
",HCI
Human-Computer Interaction,"Short-form description: Helping you build human-centered design skills, so that you have the principles and methods to create excellent interfaces with any technology.
Long-form description: In this course, you will learn how to design technologies that bring people joy, rather than frustration. You'll learn several techniques for rapidly prototyping and evaluating multiple interface alternatives -- and why rapid prototyping and comparative evaluation are essential to excellent interaction design. You'll learn how to conduct fieldwork with people to help you get design ideas. How to make paper prototypes and low-fidelity mockups that are interactive -- and how to use these designs to get feedback from other stakeholders like your teammates, clients, and users. You'll learn principles of visual design so that you can effectively organize and  present information with your interfaces. You'll learn principles of perception and cognition that inform effective interaction design. And you'll learn how to perform and analyze controlled experiments online. In many cases, we'll use Web design as the anchoring domain. A lot of the examples will come from the Web, and we'll talk just a bit about Web technologies in particular. When we do so, it will be to support the main goal of this course, which is helping you build human-centered design skills, so that you have the principles and methods to create excellent interfaces with any technology.
",HCI
Human Information Processing (HIP),"Senses: Short term sensory memory – receptors – stimuli; Perception;
Attention;
Memory: Long-term memory – working memory; Mental models;
Intention: Decision making and response selection;
Action: Response execution (motion or behavior) – responses","CN
GV
HCI"
Software and Interface Design,"This course introduces principles and methods for the design of software systems in professional contexts. The whole of the software development lifecycle is considered, but with special emphasis on user-centered design, including approaches to capture and analysis of user requirements, iterative prototyping and testing of interactive systems.
The goal is to present HCI as a discipline that is concerned with technical advance, and that must integrate different disciplinary perspectives. Fundamental theoretical issues deal with principles of human perception, visual representation and purposeful action, discussed in the context of novel interactive technologies. Building on a first year course in professional software design, the course ends with an overview of systematic approaches to the design and analysis of user interfaces.
undertake system design in a methodical manner
proceed from a general system or product requirement to a design that addresses user needs develop design models and prototypes in an iterative manner recognizing managerial risks evaluate interactive systems, including identification and correction of faults.
Mental models, leading to gulfs of execution and evaluation. Observing and describing the needs of users in context Methods for iterative modelling and prototyping
Observational and experimental methods for usability evaluation
",HCI
CS-475,"This course covers the fundamental concepts and practical applications of computing systems security with a holistic view and an applied approach. Topics include: security concepts and services, physical, operational, and organizational security, the role of people in systems security, introduction to cryptography and public key infrastructure, computing systems hardening, secure code, and secure applications development.
The course emphasis is on developing, deploying, and maintaining a secure computing infrastructure with a hands- on approach.","AR
HCI
IAS
NC
OS
PL
SP"
CS430,"Introduction to DBMS concepts 
Data modeling and database design 
Relational database design
Query languages 
Storage and indexing 
Query processing 
Transaction processing 
Recovery","IM
IAS"
CSE 262,"Formulate and defend a position on an ethical question related to technology.
Describe the main ethical challenges currently posed by technology.
Describe the results of group discussion on ethical issues as a consensus position or mutually acceptable differences of opinion.
Analyze a proposed course of action in the context of various cultures, communities, and countries.
Demonstrate effective oral and written communication methods to explain a position on the social responsibilities of software developers and IT workers.
Moral theories and reasoning. Includes applying utilitarianism, deontological ethics, and virtue ethics. Discussion of relativism and religious ethics. 
Professional ethics. Includes definitions of “profession,” codes of ethics, and ACM-IEEE Software Engineering Code of Ethics and Professional Practice. 
Privacy. Definitions of privacy, the role of computing in contemporary privacy dilemmas. 
Intellectual and intangible property. Definitions of copyright, trademark, and patent, especially as they apply to computer applications and products. Fair use and other limitations to the rights of creators. Intangible property that is not “creative” in nature. 
Trust, safety, and reliability. Causes of computer failure, case studies (including Therac-25). 
Review and exams. 
Public presentations of independent research projects.
Effects of computing on society and personal identity. Social network analysis, Marshall McLuhan, bullying and trolling, crowd-sourced knowledge, cybernetics. 
Democracy, freedom of speech, and computing. The First Amendment, protection of children, state censorship, corporate censorship, case studies.
Computing and vulnerable groups. Case studies of effects of computing on prisoners, the elderly, the young, racial and ethnic minorities, religious minorities, people with disabilities, people with chronic diseases, developing countries, and so on. 
Autonomous and pervasive technologies. Cases related to data surveillance, moral responsibility for autonomous systems, robots, and systems that function with little human oversight.","SP
HCI
GV"
CS 662,"An overview of AI, including search, knowledge representation, probabilistic reasoning and decision making under uncertainty, machine learning, and topics from NLP, information retrieval, knowledge engineering and multi-agent systems.",IS
Intelligenza Artificiale (Artificial Intelligence),"INTRODUCTION TO AI. Historical outline of the discipline. Fundamental concepts. Main research areas and application fields.
PROBLEM SOLVING AND SEARCH. State spaces and search methods. Non-informed and informed search strategies. Constraint satisfaction problems. Games and adversarial search.
LOGIC AND REASONING. The use of propositional and first order logic for the representation of knowledge. Knowledge-based reasoning as logical deduction. Inference procedures (forward chaining, backward chaining, resolution).
PLANNING. Plan formation and execution. The STRIPS model. Search in plan spaces. FOUNDATIONS OF AI. Some critical concepts and philosophical problems of AI.",IS
CMSC 471,"Course description: “This course will serve as an introduction to artificial intelligence concepts and techniques. We will use the Lisp programming language as a computational vehicle for exploring the techniques and their application. Specific topics we will cover include the history and philosophy of AI, Lisp and functional programming, the agent paradigm in AI systems, search, game playing, knowledge representation and reasoning, logical reasoning, uncertain reasoning and Bayes nets, planning, and machine learning. If time permits, we may also briefly touch on multi-agent systems, robotics, perception, and/or natural language processing.”","IS
PL"
Introduction to Artificial Intelligence,"Problem solving with search: uninformed, informed search, search for optimization (hill climbing, simulated annealing, genetic algorithms), adversarial search (minimax, game trees)
Logic and Planning: Propositional Logic, syntactic and model-based inference, first order logic (FOL), FOL inference complexity, unification and resolution, planning as FOL inference, STRIPS encoding, state space and plan space planning, partial order planning.
Probability and Machine Learning: Axioms of probability, basic statistics (expectation and variance), inference by enumeration, Bayesian networks, inference through variable elimination and Monte Carlo, intro to supervised machine learning, probabilistic classification with naive Bayes, parameter estimation with maximum likelihood, Perceptrons, parameter estimation with gradient descent, evaluating algorithms with cross validation, confusion matrices and hypothesis testing.
Decision making under uncertainty: Intro to sequential decision making, Markov decision processes, Bellman equation/optimality, value and policy iteration, model-based and model free reinforcement learning, temporal difference methods, Q learning, Function approximation.
I also have one lecture on natural language processing with a very brief introduction to language models, information retrieval and question answering (Watson), but students are not evaluated on this material.",IS
CS188,"This course will introduce the basic ideas and techniques underlying the design of intelligent computer systems. A specific emphasis will be on the statistical and decision-theoretic modeling paradigm. By the end of this course, you will have built autonomous agents that efficiently make decisions in fully informed, partially observable and adversarial settings. Your agents will draw inferences in uncertain environments and optimize actions for arbitrary reward structures. Your machine learning algorithms will classify handwritten digits and photographs. The techniques you learn in this course apply to a wide variety of artificial intelligence problems and will serve as the foundation for further study in any application area you choose to pursue.
Introduction to AI Search
Constraint Satisfaction Game Playing
Markov Decision Processes Reinforcement Learning Bayes Nets
Hidden Markov Modeling Speech
Neural Nets Robotics Computer Vision",IS
Introduction to Artificial Intelligence,"What is AI? Foundations of AI, History of AI. Intelligent Agents
Agents and Environments, Structure of Agents. Problem Solving by Searching
Problem Solving Agents, Searching for Solutions, Uninformed Search Strategies:
Breadth-First Search, Depth-First Search, Depth-limited Search, Iterative Deepening Depth-first Search, Comparison of Uninformed Search Strategies.
Informed Search and Exploration
Informed (Heuristic) Search Strategies: Greedy Best-first Search, A* Search, Heuristic Functions, Local Search Algorithms, Optimization Problems.
Constraint Satisfaction Problems
Backtracking Search for CSPs, Local Search for CSPs. Adversarial Search
Games, Minimax Algorithm, Alpha-Beta Pruning. Reasoning and Knowledge Representation
Introduction to Reasoning and Knowledge Representation, Propositional Logic, First Order Logic, Semantic Nets, Other Knowledge Representation Schemes.
Reasoning with Uncertainty & Probabilistic Reasoning
Acting Under Uncertainty, Bayes’ Rule, Representing Knowledge in an Uncertain Domain, Bayesian Networks.
Machine Learning
Forms of Learning, Decision Trees and the ID3 Algorithm, Nearest Neighbor, Statistical Learning.",IS
Computer Networks I,"The course covers various aspects of computer networking, including (1) application layer protocols such as HTTP and SMTP, (2) transport layer (TCP/UDP) and congestion control, (3) routing and IP, and (4) link layer access protocols including Ethernet and 802.11.
Typical schedule:
Week 1: Network architecture, layering, and protocols.
Week 2: Principles of application-layer, application-layer protocols: FTP, SMTP, DNS. Week 3: HTTP, Web Caching and content delivery networks. Peer-to-peer applications. Week 4: Socket programming, introduction to transport layer protocols.
Week 5: Principles of reliable transfer, TCP reliable transfer implementation.
Week 6: TCP reliable transfer cont’d, RTT and timer, flow control, TCP connection management, state transition. Principles of congestion control.
Week 7: TCP congestion control. TCP performance: response time. TCP throughput Week 8: Introduction to network layer. Inside a router.
Week 9: IPv4 and IP Addressing. IPv6 and ICMP. Routing algorithms. Week 10: Internet routing architecture and protocols. Multicast routing. Week 11: Introduction to link layer. Multiple access protocols.
Week 12: Aloha protocol, CSMA. Efficiency of CSMA/CD. Ethernet. Week 13: LAN addressing and ARP. ATM networks.
Week 14: Wireless and mobile networks.",NC
CS144,"CS144 is an introductory course on computer networking, specifiically the Internet. The course how the Internet works, ranging from how bits are modulated on wireless networks to application-level protocols like BitTorrent and HTTP. It also explains the principles of network design, such as layering, packet switching, and the end-to-end argument. Students implement a handful of low-level protocols and services, including reliable transport, IP forwarding, and a Network Address Translation device. Students gain experience reading and understanding  RFCs (Internet Protocol specifications) as statements oof what a system should do. The course grounds many of the concepts in current practice and recent developments, such as net neutrality and DNS security.","NC
AR
SF"
Computer Networks,The description found in the course catalog says: This course explores the principles underlying the design of computer networks. We will examine techniques for transmitting information efficiently and reliably over a variety of communication media. We will look at the addressing and routing problems that must be solved to ensure that transmitted data gets to the desired destination. We will come to understand the impact that the distributed nature of all network problems has on their difficulty. We will examine the ways in which these issues are addressed by current networking protocols such as TCP/IP and Ethernet. Students will meet weekly with the instructor in pairs to present solutions to problem sets and reports evaluating the technical merit of current solutions to various networking problems.,"AR
CN
DS
IAS
NC
OS
SF"
CSCI 432,"This course explores the design and implementation of computer operating systems. Topics include historical   aspects of operating systems development, systems programming, process scheduling, synchronization of concurrent processes, virtual machines, memory management and virtual memory, I/O and file systems, system security, OS/architecture interaction, and distributed operating systems. The concepts in this course are not limited to any particular operating system or hardware platform. We discuss examples that are drawn from historically significant and modern operating systems including Unix, Windows, Mach, and the various generations of Mac OS.
The objective of this course is threefold: to demystify the interactions between the software written in other courses and hardware, to familiarize students with the issues involved in the design and implementation of modern operating systems, and to explain the more general systems principles that are used in the design of all computer systems.","PD
SF
OS
NC"
CS 420,"The course will study the basic concepts, design and implementation of operating systems. Topics to be covered include an overview of basic computing hardware components, operating system structures, process management, memory management, file systems, input/output systems, protection and security. The Windows and UNIX/Linux operating systems will be reviewed as implementation examples.
Overview of an Operating System
Computing Hardware Overview
Process Management
CPU Scheduling
Deadlocks and Synchronization
Memory Management
File systems and storage
Distributed Systems","OS
SF
PD"
CPSC 3380,"An operating system (OS) defines an abstraction of hardware and manages resource sharing among the computer’s users. The OS shares the computational resources such as memory, processors, networks, etc. while preventing individual programs from interfering with one another. After successful completion of the course, students will learn how the programming languages, architectures, and OS interact.
After a brief history and evolution of OS, the course will cover the major components of OS. Topics will include process, thread, scheduling, concurrency (exclusion and synchronization), deadlock (prevention, avoidance, and detection), memory management, IO management, file management, virtualization, and OS’ role for realizing distributed systems. The course will also cover protection and security with respect to OS.","OS
SF
PD"
582219,"Understand OS services to applications, concurrency problems and solution methods for them, OS basic structure, principles and methods of OS implementation.
OS history, process, threads, multicore, concurrency problems and their solutions, deadlocks and their prevention, memory management, virtual memory, scheduling, I/O management, disk scheduling, file management, embedded systems, distributed systems.","OS
AR
SF
PD"
RU STY1,"The operating system abstracts hardware from software through a multitude of interfaces. Operating systems strive  to share devices, memory and other computational resources between competing users and programs in a fast, robust and accurate manner. The course will explain what’s under the hood of typical operating system abstractions, with special emphasis on the treatment of memory and the CPU, including assembly. At the end of the course students will understand how the OS interacts with hardware, how higher level systems interact with the OS, and be able to program against these lower-level abstractions.
The course covers many of the fundamentals of computer architecture and operating systems: x86 assembly, virtual memory, caches, processes, signals, threads, process communication, concurrency and deadlocks, scheduling, dynamic memory management, I/O management, virtual machines and the basics of network programming, file systems, and security.","OS
AR
SF
PL
IAS
NC"
Parallel Programming Principle and Practice,"This section covers the very basics of parallel computing, and is intended for someone who is just becoming acquainted with the subject. It begins with a brief overview, including concepts and terminology associated with parallel computing. The topics of parallel memory architectures and programming models are then explored. These topics are followed by a discussion on a number of issues related to designing parallel programs.
Why Parallel Programming? Parallel Architecture
Parallel Programming Models Parallel Programming Methodology Parallel Programming: Performance
Typical Issues Solved by Parallel Programming
This section concludes with several examples of how to parallelize simple serial programs. Including: threads and shared memory programming with TBB and OpenMP, SIMD programming model and Cuda & OpenCL, programming using the Message Passing Paradigm, parallel computing with MapReduce.
Shared Memory Programming and OpenMP: A High Level Introduction Case Studies: Threads programming with TBB
Programming Using the Message Passing Paradigm Introduction to GPGPUs and CUDA Programming Model Parallel Computing with MapReduce
Parallel Programming Case Study and Assignment",PD
Introduction to Parallel Programming,"Introduction to Parallel Programming 
Overview of Parallel System Architectures
Modeling and Analysis of Parallel 
Computations Communication Complexity Analysis of Parallel Algorithms 
Parallel Programming with MPI
Parallel Programming with OpenMP 
Principles of Parallel Algorithm Design
Parallel Algorithms for Solving Time Consuming Problems (Matrix calculation, System of linear equations, Sorting, Graph algorithms, Solving PDE, Optimization)
Modeling the parallel program executing
",PD
CS453,"CS 453 teaches students how to implement compilers. Although most computer science professionals do not end up implementing a full compiler, alumni of this course are surprised by how often the skills they learn are used within industry and academic settings. The subject of compilers ties together many concepts in computer science: the theoretical concepts of regular expressions and context free grammars; the systems concept of layers including programming languages, compilers, system calls, assembly language, and architecture; the embedded systems concept of an architecture with restricted resources; and the software engineering concepts of revision control, debugging, testing, and the visitor design pattern.  Students write a compiler for a subset of Java called  MeggyJava. We compile MeggyJava to the assembly language for the ATmega328p microcontroller in the Meggy Jr RGB devices.
Regular and context free languages including DFAs and NFAs.
Scanning and parsing
Finite state machines and push down automata
FIRST and FOLLOW sets
Top-down predictive parsing
LR parse table generation Meggy Jr Simple runtime library
AVR assembly code including the stack and heap memory model Abstract syntax trees
Visitor design pattern
Semantic analysis including type checking Code generation for method calls and objects Data-flow analysis usage in register allocation Iterative compiler design and development Test-driven development and regression testing Revision control and pair programming","AL
PL
SE"
Csc 453,"This course covers the design and implementation of translator-oriented systems software, focusing specifically on compilers, with some time spent on related topics such as interpreters and linkers.
Background. Compilers as translators. Other examples of translators: document-processing tools such as ps2pdf and latex2html; web browsers; graph-drawing tools such as dot; source-to-source translators such as f2c; etc.
Lexical analysis. Regular expressions; finite-state automata and their implementation. Scanner- generators: flex.
Parsing. Context-free grammars. Top-down and bottom-up parsing. SLR(1) parsers. Parser-generators: yacc, bison.
Semantic analysis. Attributes, symbol tables, type checking.
Run-time environments. Memory organization. Stack-based environments.
Intermediate representations. Abstract syntax trees, three-address code. Code generation for various language constructs. Survey of machine-independent code optimization.
Interpreters. Dispatch mechanisms: byte-code, direct-threading, indirect-threading. Expression evaluation: Registers vs. operand stack. Just-in-time compilers. Examples: JVM vs. Dalvik for Java; Spidermonkey for JavaScript; JIT compilation in the context of web browsers.
Linking. The linking process, linkers and loaders. Dynamic linking.",PL
CSCI 434T,"Overview of compilation
Lexical analysis
Context-free grammars, top-down and bottom-up parsing, error recovery Abstract syntax trees, symbol tables
Lexical scoping, types (primitive, record, arrays, references), type checking Object-oriented type systems, subtyping, interfaces, traits
Three-address code and other intermediate representations
Code generation, data representation, memory management, object layout Code transformation and optimization
Class hierarchy analysis Dataflow analysis Register allocation
Run-time systems, just-in-time compilation, garbage collection","PL
SE
AR"
Compilers,"The course covers the design, definition and implementation of programming languages. Students who have been through the class will be able to specify and implement language syntax using regular expressions or context free grammars as appropriate. Students will understand the distinction between no typing, static typing and dynamic typing and be able to implement simple static type systems as well as perform standard syntax analysis for scoping  of global, local, and class-visible names. Students will understand the difference between compile time and run time and be able to reason about and make decisions about what should be done at which time. Students will also be introduced to formal semantics as a form of specification of the behavior of a programming language and be able to use formal semantics in the construction of a compiler. Run-time structures such as the stack, activation records and static data such as string constants and dispatch tables are covered.  All of the topics up to this point will also be   used as part of a large course project to build a simple compiler for a statically typed object oriented language.
Additional topics include register allocation, garbage collection, dataflow analysis, and optimization.",PL
Languages and Compilers,"To describe structures (i.e., “formulas”) using grammars;
To parse, i.e., to recognize (build) such structures in (from) a sequence of symbols; To analyze grammars to see whether or not specific properties hold;
To compose components such as parsers, analyzers, and code generators; To apply these techniques in the construction of all kinds of programs;  To familiarize oneself with the concept of computability.
Context-free grammars and languages Concrete and abstract syntax
Regular grammars, languages, and expressions Pumping lemmas
Grammar transformations Parsing, parser design
Parser combinators (top-down recursive descent parsing) LL parsing
LR parsing
Semantics: datatypes, (higher-order) folds and algebras","PL
AL"
COMP 412,"Scanning, parsing, semantic elaboration, intermediate representation, implementation of the procedure as an abstraction, implementation of expressions, assignments, and control-flow constructs, brief overview of optimization, instruction selection, instruction scheduling, register allocation. (Full syllabus is posted on the website, listed above.)","PL
AL"
CSC 131,"A thorough examination of issues and features in programming language design and implementation, including language-provided data structuring and data-typing, modularity, scoping, inheritance, and concurrency.
Compilation and run-time issues. Introduction to formal semantics. Specific topics include: Overview of compilers and Interpreters (including lexing & parsing)
Lambda calculus
Functional languages (via Haskell)
Formal semantics (mainly operational semantics) Writing interpreters based on formal semantics Static and dynamic type-checking
Run-time memory management Data abstraction & modules
Object-oriented languages (illustrated via Java and Scala)
Shared memory parallelism/concurrency (semaphores, monitors, locks, etc.)
Distributed parallelism/concurrency via message-passing (Concurrent ML, Scala Actors)","PL
PD"
CSCI 1730,"The course uses definitional interpreters and related techniques to teach the core of several programming languages.
The course begins with a quick tour of writing definitional interpreters by covering substitution, environments, and higher-order functions. The course then dives into several topics in depth:
Mutation
Recursion and cycles Objects
Memory management Control operators Types
Contracts
Alternate evaluation models",PL
CSC 2/454,"CSC 2/454 is an introduction to the design and implementation of programming languages.  From the design point  of view, it covers language features as tools for expressing algorithms. From the implementation point of view, it covers compilers, interpreters, and virtual machines as tools to map those features efficiently onto modern computer hardware. The course touches on a wide variety of languages, both past and present, with an emphasis on modern imperative languages, such as C++ and Java, and, to a lesser extent, on functional languages such as Scheme and Haskell, and dynamic (scripting) languages such as Perl, Python, and Ruby.  Rather than dwell on the features of  any particular language, it focus on fundamental concepts and on the differences among languages, the reasons for those differences, and the implications those differences have for language implementation.
Specific topics include:
formal aspects of syntax and semantics naming, scoping, and binding
scanning, parsing, semantic analysis, and code generation control flow, subroutines, exception handling, and concurrency type systems, data abstraction mechanisms, and polymorphism run-time systems, virtual machines, and storage management
imperative, functional, logic-based, and object-oriented programming paradigms programming environments and tools",PL
CSE341,"Internalize an accurate understanding of what functional and object-oriented programs mean Develop the skills necessary to learn new programming languages quickly
Master specific language concepts such that they can recognize them in strange guises Learn to evaluate the power and elegance of programming languages and their constructs
Attain reasonable proficiency in the ML, Racket, and Ruby languages and, as a by-product, become more proficient in languages they already know
Syntax vs. semantics
Basic ML programming: Pairs, lists, datatypes and pattern-matching, recursion Higher-order functions: Lexical scope, function closures, programming idioms Benefits of side-effect free programming
Type inference
Modules and abstract types Parametric polymorphism Subtyping
Dynamically typed functional programming Static vs. dynamic typing
Lazy evaluation: thunks, streams, memoization Implementing an interpreter
Implementing function closures
Dynamically typed object-oriented programming Inheritance and overriding
Multiple inheritance vs. interfaces vs. mixins
Object-oriented decomposition vs. procedural/functional decomposition
… a few more minor topics in the same basic space",PL
CSCI 334,"Functional programming concepts in Lisp Syntax, semantics, and evaluation strategies
ML programming, including basic types, datatypes, pattern matching, recursion, and higher order functions
Types, dynamic/static type checking, type inference, parametric polymorphism Run-time implementations: stacks, heaps, closures, garbage collection Exception handlers
Abstract types and modularity
Object-oriented programming and systems design
Object-oriented language features: objects, dynamic dispatch, inheritance, subtyping, etc. Multiple inheritance vs. interfaces vs. traits
Scala programming, including most basic language features. Language-based security mechanisms and sandboxing Models of concurrency: shared memory and actors","PL
IAS
PD"
Programming Languages and Techniques I,"Programming Design and Testing
Persistent Data Structures & Functional programming Trees & Recursion
Mutable Data Structures (queues, arrays) First-class computation (objects, closures) Types, generics, subtyping
Abstract types and encapsulation
Functional, OO, and Event-driven programming","AL
DS
HCI
PL
SDF"
15-312,"This is a course on the theory of programming languages. Why study these principles? Because they are fundamental to the design, implementation, and application of programming languages.
Programming language design is often regarded as largely, or even entirely, a matter of opinion, with few, if any, organizing principles, and no generally accepted facts. Dozens of languages are in everyday use in research laboratories and in industry, each with its adherents and detractors. The relative merits of languages are debated endlessly, but always, it seems, with an inconclusive outcome. Some would even suggest that all languages are equivalent, the only difference being a matter of personal taste. Yet it is obvious that programming languages do matter!
Yet can we really say that Java is “better” (or “worse”) than C++? Is Scheme “better” than Lisp? Is ML “better”   than either of them? Can we hope to give substance to any of these questions? Or should we simply reserve them for late night bull sessions over a glass of beer? While there is certainly an irreducible subjective element in programming language design, there is also a rigorous scientific theory of programming languages that provides a framework for posing, and sometimes answering, such questions. To be sure there are good questions for which current theory offers no solutions, but surprisingly many issues are amenable to a rigorous analysis, providing definite answers to many questions. Programming language theory liberates us from the tar pit of personal opinion, and elevates us to the level of respectable scientific discourse.
Programming language theory is fundamental to the implementation of programming languages, as well as their design. While compiler writers have long drawn on the theory of grammars for parsing and on graph theory for register allocation, the methods used to compile well-known languages such as C do not rely on deep results from programming language theory. For relatively simple languages, relatively simple compilation methods suffice. But as languages become more sophisticated, so must more sophisticated methods be employed to compile them.
For example, some programs can be made substantially more efficient if code generation is deferred until some run- time data is available. A tight inner loop might be ``unrolled'' into a linear instruction sequence once the iteration bound is determined. This is one example of partial evaluation, a technique for program specialization that rests on 
results from programming language theory. To take another example, modern languages such as ML (and proposed extensions of Java) include what are known as parameterized types to support flexible code re-use. Parameterized types complicate compilers considerably because they must account for situations in which the type of a variable or function argument is not known at compile time. The most effective methods for handling parameterized types rely on typed intermediate languages with quite sophisticated type systems. Here again programming language theory provides the foundation for building such compilers.
Programming language theory has many applications to programming practice. For example, “little languages” arise frequently in software systems -- command languages, scripting languages, configuration files, mark-up languages, and so on. All too often the basic principles of programming languages are neglected in their design, with all too familiar results. After all, the argument goes, these are “just” scripting languages, or “just” mark-up languages, why bother too much about them? One reason is that what starts out as “just” an ad hoc little language often grows into much more than that, to the point that it is, or ought to be, a fully-fledged language in its own right. Programming language theory can serve as a guide to the design and implementation of special purpose, as well as general  purpose, languages.
Another application of the theory of programming languages is to provide a rigorous foundation for software engineering. Formal methods for software engineering are grounded in the theory of specification and verification. A specification is a logical formula describing the intended behavior of a program. There are all kinds of specifications, ranging from simple typing conditions (“the result is a floating point number between 0 and 1”) to complex invariants governing shared variables in a concurrent program. Verification is the process of checking that the implementation indeed satisfies the specification. Much work has gone into the development of tools for specifying and verifying programs. Programming language theory makes precise the connection between the code and its specification, and provides the basis for constructing tools for program analysis.
The theory of programming languages provides a “reality check” on programming methodology, that part of  software engineering concerned with the codification of successful approaches to software development. For example, the merits of object-oriented programming for software development are well known and widely touted. Object-oriented methodology relies heavily on the notions of subtyping and inheritance. In many accounts these two notions are confused, or even conflated into one concept, apparently because both are concerned with the idea of one class being an enrichment of another. But careful analysis reveals that the two concepts are, and must be, distinct: confusing them leads to programs that violate abstraction boundaries or even incur run-time faults.
The purpose of this course is to introduce the basic principles, methods, and results of programming languages to undergraduate students who have completed the introductory sequence in computer science at Carnegie Mellon. I intend for students to develop an appreciation for the benefits (and limitations) of the rigorous analysis of programming concepts.
The development is based on type theory, a general theory of computation that encompasses all aspects of programming languages, from the data with which we compute to the means by which we structure programs. Programming language “features” are viewed as manifestations of type structure. Basic data structures such as tuples arise as product types, trees and graphs arise as recursive types, and procedures arise as monadic function types. Each language concept is defined by giving its statics, which specify how it interacts with other parts of a program, and its dynamics, which specifies how it is executed on a computer. Type safety is the coherence of the statics with the dynamics; safety is proved as a mathematical theorem governing each language feature.  The specific topics vary from one semester to the next, but the course typically covers finite and infinite data structures, higher-order functions, continuations, mutable storage, data abstraction and polymorphism, so-called dynamic typing, parallel computation, laziness, and concurrency, all presented in a single unifying framework.","AL
DS
OS
PD
PL"
15-150,"to write parallel functional programs
to analyze programs’ sequential and parallel time complexity
to write mathematical specifications and verify that programs meet them 
to structure programs using modules and abstract types
In the first three weeks of the course, students learn to write basic sequential functional programs on numbers and lists, to analyze their time complexity, and to prove mathematical correctness specifications using induction.  Parallelism is introduced in the fourth week:  Students learn to write data-parallel functional programs. They learn to analyze not just the usual sequential complexity of programs, but their parallel complexity, and how this influences algorithm and data structure design. An early example is sorting: One might think that mergesort would have logarithmic parallel complexity, because as a sorting problem is repeatedly divided in half, the length of the longest dependency is logarithmic. However, with lists as the data structure, mergesort has a linear parallel complexity, because just the operation of splitting a list into two halves takes linear time, independently of how many processors are available.  This motivates studying mergesort on trees, which has a sublinear parallel complexity. Because the parallelism is deterministic, students can reason about the behavior of their programs as if they were sequential, but run them in parallel.  These  programming, analysis, and verification skills continue to be interwoven throughout the remainder of the course, as students learn more advanced techniques.
Overall, students learn the following aspects of programming, analyzing, and proving:
The organization of programming languages by types
Computing by calculation: how programs are evaluated
Recursive functions and proofs by induction
Asymptotic analysis and recurrence relations
Tree parallelism
Datatypes, pattern-matching, and structural recursion/induction
Parametric polymorphism
Higher-order functions
Continuation-passing style
Exceptions
Cost semantics
Vector parallelism and map-reduce
Modules and abstract types
Imperative programming
Interaction of parallelism and effects
Laziness and streams
The course is taught in Standard ML. A variety of examples are used to teach these skills, including sequential and parallel sorting, map-reduce algorithms, regular expression matching, n-body simulation, and game-tree search. The assignments integrate parallel programming, analysis, and verification.  For example, in one key assignment,  students write and prove correct a regular expression matcher, combining an advanced programming technique  called continuation-passing-style with sophisticated inductive reasoning.  In another, students implement an algorithm for n-body simulation that has good sequential and parallel complexity, using a mix of tree- and vector- parallelism.","AL
DS
PD
PL
SDF
SE"
CIS 133J,"Object-oriented programming concepts 
Objects, classes
State, behavior
Methods, fields, constructors 
Variables,  parameters Scope, 
lifetime
Abstraction, modularization, encapsulation 
Method overloading
Data types
Conditional statements, logical expressions 
Loops
Collection processing 
Using library classes 
UML class diagrams 
Documentation 
Debugging
Use of an IDE","AL
PL
SDF"
Introduction to Computer Science,"This course has five distinct modules of roughly three weeks each:
(1) We begin with conditionals and recursion, practicing a functional problem-solving approach to a variety of homework problems. Python is the language in which students solve all of their assignments in this module.
(2) In the second module students investigate the fundamental ideas of binary representation, combinational circuits, machine architecture, and assembly language; they complete assignments in each of these topics using Python, Logisim, and a custom-built assembly language named Hmmm. This unit culminates with the hand- implementation of a recursive function in assembly, pulling back the curtain on the “magic” that recursion can sometimes seem.
(3) Students return to Python in the third module, building imperative/iterative idioms and skills that build from the previous unit’s assembly language jumps. Creating the Mandelbrot set from scratch, Markov text-generation, and John Conway’s Game of Life are part of this module’s student work.
(4) The fourth module introduces object-oriented skills, again in Python, with students implementing a Date calculator, a Board class that can host a game of Connect Four, and a Player class that implements game-tree search.
(5) The fifth module introduces mathematical and theoretical facets of computer science, including finite-state machines, Turing machines, and uncomputable functions such as Kolmogorov complexity and the halting problem. Small assignments use JFLAP to complement this in-class content, even as students’ work centers on a medium-sized Python final project, such as a genetic algorithm, a game using 3d graphics with the VPython library, or a text-analysis web application.","AL
AR
PD
PL
SDF"
CpSc 215,"Major topics covered, in their approximate order of coverage, include the following:
 Java Basics: Introduction, interpreted versus compiled languages
Java Basics: Packages, classpaths, the Java compiler
Java Basics: The Eclipse integrated development environment
Java Basics: Parameter passing, shallow versus deep copying, value versus reference semantics
Java Classes: Fields, methods, accessibility modifiers
Java Classes: Constructors, overloading
Java Classes: Static fields, methods, initializers 
Design Patterns: Introduction, historical context 
Design Patterns: Singleton, Flyweight
Java Libraries: java.io.*, java.util.*, java.net.*, java.math.* 
Java Interfaces: Declaring, implementing, using as types 
Abstract Data Structures: Stacks, queues, sets
Analytical Reasoning: Introduction to interface contracts
Analytical Reasoning: Review of basic mathematical types (integers, tuples, strings, sets) 
Analytical Reasoning: Formal contract specifications
Abstract Data Structures: Partial maps (dictionaries), linked-lists 
Analytical Reasoning: Contract-based Testing and Tracing 
Design Patterns: Decorator
Analytical Reasoning: Assertion-checking wrappers (using Decorator) 
Java Exceptions: Concepts, declaring, throwing, catching
Java Inheritance: Concepts, type system integration, polymorphism 
Design Patterns: Template Method, Strategy
Algorithms as Components: Parameterized sorting implementations 
Java Generics: Concepts, syntax, subclassing issues
Design Patterns: Observer
Analytical Reasoning: Introduction to verification 
Analytical Reasoning: Software verification with objects 
Java Libraries: javax.swing.*, basic Swing development","SDF
PL
SE"
CS1101,"Upon completion of this course, the student should be able to:
Understand when to use and write programs over structures, lists, and trees 
Develop data models for programming problems
Write recursive and mutually recursive programs using the Racket programming language 
Explain when state is needed in value-oriented programming
Develop test procedures for simple programs
Basic data types (numbers, strings, images, booleans) 
Basic primitive operations (and, or, +, etc.) 
Abstracting over expressions to create functions 
Documenting and commenting functions
What makes a good test case and a comprehensive test suite 
Conditionals
Compound data (records or structs)
Writing and testing programs over lists (of both primitive data and compound data) 
Writing and testing programs over binary trees
Writing and testing programs over n-ary trees
Working with higher-order functions (functions as arguments) 
Accumulator-style programs
Changing contents of data structures 
Mutating variables","AL
PL
SDF"
Data Abstraction and Data Structures,"Abstract data types and their implementation as data structures using object-oriented programming. Use of object- oriented principles in the selection and analysis of various ADT implementations. Sequential and linked storage representations: lists, stacks, queues, and tables. Nonlinear data structures: trees and graphs. Recursion, sorting, searching, and algorithm complexity.
Apply appropriate data structures and abstract data types (ADT) such as bags, lists, stacks, queues, trees, tables, and graphs in problem solving.
Apply object-oriented principles of polymorphism, inheritance, and generic programming when implementing ADTs for data structures.
Create alternative representations of ADTs either from implementation or the standard libraries. Apply recursion as a problem solving technique.
Determine appropriate ADTs and data structures for various sorting and searching algorithms. Determine time and space requirements of common sorting and searching algorithms.","SP
SDF
AL"
Software Engineering Practices,"Typical outline of course topics includes:
Introduction to Software Engineering Models of Software Process
Project Planning and Organization Software Requirements and Specifications Software Design Techniques
Software Quality Assurance Software Testing
Software Tools and Environments",SE
CS169,"Introduction to SaaS and software lifecycles: Waterfall, Spiral, RUP, Agile
Project Management: Pair programming and Scrum vs. Planning and Project manager 
Requirements Elicitation: User Stories vs. Contracts
Testing: Behavior Driven Design and Test Driven Development vs. Code then test 
Maintenance: Legacy, Refactoring, and Agile
Version control systems and releases 
Design patterns
Performance, reliability, and security",SE
SE-2890,"Introduction to software engineering practices 
Requirements and Use Cases
Software Reviews, Version Control, and Configuration Management 
Design: Object domain analysis, associations, behavior
Design and Design Patterns
Java Review (almost a year since last use) 
Code reviews and software testing  Week 10 - Applications to embedded systems
",SE
Software Development,"This course presents introductory software engineering concepts including group development, large-scale project work, and theoretical aspects of object-oriented programming. The course expands on material from previous courses. Professional behavior and ethics represent an important component of this course.
This course is being used as an exemplar of how we incorporate communication outcomes into the core curriculum. The catalog description looks very much like other courses for software development; however, the real difference is in the execution of the course and how the communication skills are integrated into the assignments.
CSC 225 (Introduction to Software Development) is an experiential introduction to software development that focuses on learning basic software development principles and communications skills by developing an ongoing project (i.e., the project is carried over and developed during each iteration of the course).  Students work as   software development teams in the context of a workplace scenario where assignments are reports to a supervisor who uses the information reported for subsequent tasks such as reports for upper management. This strategy focuses students’ learning on selecting critical information for the supervisor to use and presenting it in an accessible and persuasive manner. Student learning occurs through two sets of linked assignments that use formative assessment to achieve competence at the first-semester sophomore level.","SP
SDF
SE"
CS2200,"The course represents a novel integrated approach to presenting side by side both the architecture and the operating system of modern computer systems, so that students learn how the two complement each other in making the computer what it is. The course consists of five modules, corresponding to the five major building blocks of any modern computer system: processor, memory, parallelism, storage, and networking. Both the hardware and system software issues are covered concomitantly in presenting the five units. Topics covered include
Processor design including instruction-set design, processor implementation (simple as well as pipelined with the attendant techniques for overcoming different kinds of hazards), processor performance (CPI, IPC, execution time, Amdahl’s law), dealing with program discontinuities (interrupts, traps, exceptions), and design of interrupt handlers
Processor scheduling algorithms including FCFS, SJF, priority, round robin, with Linux scheduler as a real world example
Memory system including principles of memory management in general (paging in particular) and the necessary hardware support (page tables, TLB), page replacement algorithms, working set concepts, the inter-relationship between memory management and processor scheduling, thrashing, and context switching overheads
Memory hierarchy including different organizations of processor caches, the path of memory access from the processor through the different levels of the memory hierarchy, interaction between virtual memory and processor caches, and page coloring
Parallel programming (using pthreads), basic synchronization (mutex locks, condition variables) and communication (shared memory), program invariants, OS support for parallel programming, hardware support for parallel programming, rudiments of multiprocessor TLB and cache consistency
Basics of I/O (programmed data transfer, DMA), interfacing peripherals to the computer, structure of device driver software
Storage subsystem focusing on hard disk (disk scheduling), file systems (naming, attributes, APIs, disk allocation algorithms), example file systems (FAT, ext2, NTFS)
Networking subsystem focusing on the transport layer protocols (stop and wait, pipelined, congestion control, windowing) , network layer protocols (Dijkstra, distance vector) and service models (circuit-, message-, and packet-switching), link layer protocols (Ethernet, token ring)
Networking gear (NIC, hubs/repeater, bridge, switch, VLAN)
Performance of networking (end-to-end latency, throughput, queuing delays, wire delay, time of flight, protocol overhead).",SF
CS61C,"Introduction to C: this includes coverage of the Hardware/Software Interface (e.g., machine and assembly language formats, methods of encoding instructions and data, and the mapping processes from high level languages, particularly C, to assembly and machine language instructions). Computer architectures: how processors interpret/execute instructions, Memory Hierarchy, Hardware Building Blocks, Single CPU Datapath and Control, and Instruction Level Parallelism. The concept of parallelisms, in particular, task level parallelism, illustrated with Map-Reduce processing; Data Level Parallelism, illustrated with the Intel SIMD instruction set; Thread Level Parallelism/multicore programming, illustrated with openMP extensions to the C programming language.",SF
CSE333,"The major goal of the course is to give students principles, skills, and experience in implementing complex,  layered systems. The course includes a quarter-long programming project in which students: (a) build rudimentary data structures in C, such as linked lists, chained hash tables, AVL trees; (b) use them to build an in-memory inverted index and file system crawler; (c) construct a C++-based access methods for writing indexes to disk and accessing disk-based indexes efficiently; and (d) construct a concurrent (threaded or event-driven) web server that exposes a search application.
A substantial portion of the course focuses on giving students in-depth C and C++ skills and experience with practical engineering tools such as debuggers, unit testing frameworks, and profilers. The course stresses the discipline of producing well-structured and readable code, including techniques such as style guidelines and code reviews. Additionally, the course covers topics such as threaded vs. event-driven concurrency, the Linux system call API, memory management, and some security and defensive programming techniques.
C programming
pointers, structs, casts; arrays, strings dynamic memory allocation
C preprocessors, multifile programs core C libraries
error handling without exceptions
C++ programming
class definitions, constructors and destructors, copy constructors
dynamic memory allocation (new / delete), smart pointers, classes with dynamic data inheritance, overloading, overwriting
C++ templates and STL
Tools and best practices compilers, debuggers, make
leak detectors, profilers and optimization, code coverage version control
code style guidelines; code review
Systems topics: the layers below (OS, compiler, network stack) concurrent programming, including threading and asynchronous I/O file system API
sockets API
understanding the linker / loader
fork / join, address spaces, the UNIX process model

","SF
AR
IM
NC
OS
PL
SE"
IFSM304,"This course is a comprehensive study of ethics and of personal and organizational ethical decision making in the use of information systems in a global environment. The aim is to identify ethical issues raised by existing and emerging technologies, apply a structured framework to analyze risk and decision alternatives, and understand the impact of personal ethics and organizational values on an ethical workplace. 
apply relevant ethical theories, laws, regulations, and policies to decision making to support organizational compliance
recognize business needs, social responsibilities, and cultural differences of ethical decision making to operate in a global environment
identify and address new and/or increased ethical issues raised by existing and emerging technologies
foster and support an ethical workforce through an understanding of the impact of personal ethics and organizational values
apply a decision-making framework to analyze risks and decision alternatives at different levels of an organization
Technology-related Ethical Global issues (multi-national corporation) Decision making frameworks to technology-related ethical issues Organizational policy to address the technology-related ethical issue Research existing or emerging technology and its ethical impact
Study group presentation of research on existing or emerging technology and related ethical issues
a reflective piece on class learning as it applies to ethics in information technology",SP
Technology Consulting in the Community,"This course has service, personal, and intellectual goals. Its service goal is to build the technical capacity of community organizations by providing effective technology consultants. To promote this effectiveness, and to enrich the intellectual preparation of Carnegie Mellon students, the course teaches students how to:
Establish a professional working relationship
Quickly assess a complex technical environment and identify problem areas 
Systematically bring structure to unstructured problems
Communicate technical ideas to an often non-technical audience 
Negotiate with the client acceptable deliverables for the consulting period 
Develop and execute a work plan
Use writing skills to maintain working documents that describe, plan, persuade, and coordinate work with others
Reflect and learn from their experience as well as the experience of their colleagues 
Broaden their understanding of the relevance of information systems and computer science.
Students routinely find the experience to be very personally satisfying. Student consultants learn that they can be effective in helping a community organization make better use of its computers, and help its staff and/or volunteers understand more about the technology. Students also often express that it is refreshing to step outside the grind of Carnegie Mellon life and do something worthwhile in the community.
Capacity-Building Consulting and Alternative Consulting Models Establishing and Managing Professional Relationships
Gathering and Analyzing Information Structuring unstructured problems Researching alternative solutions Analyzing Buy vs. Build
Technology Planning
Developing and Communicating a Scope of Work and Work Plan Modelling Technical Problem Solving
Communicating Difficult Technical Concepts to a Nontechnical Audience Documenting and Analyzing Outcomes
Formulating Persuasive Recommendations Synthesizing a Final Consulting Report Orally Presenting Project Outcomes Reflecting on the Consulting Experience",SP
Issues in Computing,"In the context of widespread computer usage and society’s ever-growing dependence on computer technology, the course focuses on issues of ethics for the computing professional. A list of topics:
Introduction to Computer Ethics Survey of the tools of ethical analysis
Practical applications of the tools of ethical analysis Professional ethics
Privacy issues
Intellectual property protection issues Freedom of expression and the Internet
Ethical dimensions of computer system reliability Digital Divide
Social impact of technology in the workplace, in education, in healthcare",SP
CSI 194,"Students learn ethics and moral philosophy as a means for providing a framework for ethically grounded decision making in the information age. Topics include the basic concepts and theories of ethics (moral reasoning and normative frameworks); basic concepts of argumentation and inductive reasoning; an introduction to cyberethics; issues related to networking and network security (threats related to breaches, countering breaches; privacy and personal autonomy (anonymity and accountability, identity theft); intellectual property and ownership rights (Digital Millennium Copyright Act, digital rights management, alternatives to the property model); computing and society, social justice, community, and self-identity digital divide, free speech and censorship; professional ethics and codes of conduct. Four hours are assigned to testing.",SP
Professional Development Seminar,"While the course covers Social and Professional Practice topics such as social context, analytical tools, professional ethics, intellectual property, privacy and civil liberties, this exemplar will focus on professional communications.
The course provides opportunities for students to develop their professional communication skills. This exemplar includes examples of four Professional Communication outcomes:
Write clear, concise, and accurate technical documents following well-defined standards for format and for including appropriate tables, figures, and references.
Develop and deliver a good quality formal presentation.
Plan interactions (e.g. virtual, face-to-face, shared documents) with others in which they are able to get their point across, and are also able to listen carefully and appreciate the points of others, even when they disagree, and are able to convey to others that they have heard.
Describe the strengths and weaknesses of various forms of communication (e.g. virtual, face-to-face, shared documents)
",SP
The Digital Age,"The course provides both an introduction to a broad range of computer science topics and discussion of social and ethical issues. Topics vary according to faculty interest and current events.
The technical topics for spring 2013 include: Algorithms & efficiency
Data representation 
Digital  logic 
Computer organization 
HTML
Usability 
Networks
Programming in Python
Discussion topics include: Ethics
Software reliability 
Digital data & copyright
Software as intellectual property 
Artificial intelligence
Data mining 
Privacy & security 
Online education 
Online voting 
Energy
","AL
AR
GV
HCI
NC
SDF
SP"
COS 126,"We take an interdisciplinary approach to the traditional CS1 curriculum, where we teach students to program while highlighting the role of computing in other disciplines, then take them through fundamental precepts of the field of computer science. This approach emphasizes for students the essential idea that mathematics, science, engineering, and computing are intertwined in the modern world, while at the same time preparing students to use computers effectively for applications in computer science, physics, biology, chemistry, engineering, and other disciplines.
Instructors teaching students who have successfully completed this course can expect that they have the  knowledge and experience necessary to enable them to adapt to new computational environments and to effectively exploit computers in diverse applications. At the same time, students who choose to major in computer science get a broad background that prepares them for detailed studies in the field.
Roughly, the first half of the course is about learning to program in a modern programming model, with applications. The second half of the course is a broad introduction to the field of computer science.
Introduction to programming in Java. Elementary data types, control flow, conditionals and loops, and arrays.
Input and output. Functions  and libraries.
Analysis of algorithms, with an emphasis on using the scientific method to validate hypotheses about algorithm performance.
Machine organization, instruction set architecture, machine language programming. Data types, APIs, encapsulation.
Linked data structures, resizing arrays, and implementations of container types such as stacks and queues.
Sorting (mergesort) and searching (binary search trees). Programming languages.
Introduction to theory of computation. Regular expressions and finite automata. Universality and computability.
Intractability.
Logic design, combinational and sequential circuits. Processor and memory design.
Introduction to artificial intelligence.","SDF
PL
AL
AR
CN
IS
SP"
CSCI 0190,"The course is a compressed introduction into programming along with basic algorithms and data structures. It interleaves these two. The data structures cover lists, trees, queues, heaps, DAGs, and graphs; the algorithms go up through classic ones such as graph shortest paths and minimum spanning trees. The programming is done entirely with pure functions. It begins with graphical animations (such as simple video games), then higher-order   functional programming, and encodings of laziness.","AL
PD
PL
SE"
CSC 221,"This course provides an introduction to problem solving and programming using the Python scripting language. The specific goals of this course are:
To develop problem solving and programming skills to enable the student to design solutions to non- trivial problems and implement those solutions in Python.
To master the fundamental programming constructs of Python, including variables, expressions, functions, control structures, and lists.
To build a foundation for more advanced programming techniques, including object-oriented design and the use of standard data structures (as taught in CSC 222).","SDF
PL
AL
SP"
CSC 222,"Building upon basic programming skills in Python from CSC 221, this course focuses on the design and analysis of larger, more complex programs using the industry-leading language, Java. The specific goals of this course are:
To know and use basic Java programming constructs for object-oriented problem solving (e.g., classes, polymorphism, inheritance, interfaces)
To appreciate the role of algorithms and data structures in problem solving and software design (e.g., objected-oriented design, lists, files, searching and sorting)
To be able to design and implement a Java program to model a real-world system, and subsequently analyze its behavior.
To develop programming skills that can serve as a foundation for further study in computer science.","SDF
PL
AL
SE"
CSC 151,"This course introduces the discipline of computer science by focusing on functional problem solving with media computation as an integrating theme. In particular, the course explores
mechanisms for representing, making, and manipulating images. The course considers a variety of models of images based on pixels, basic shapes, and objects that draw.
The major objectives for this course include:
Understanding some fundamentals of computer science: algorithms, data structures, and abstraction. Experience with the practice of computer programming (design, documentation, development, testing, and debugging) in a high-level language, Scheme.
Learning problem solving from a functional programming perspective, including the use of recursion and higher-order procedures.
Sharpening general problem solving, teamwork, and study skills.
Fundamentals of functional problem-solving using a high-level functional language
abstraction
modularity
recursion, including helper procedures
higher-order procedures
analyzing of algorithms
Language elements
symbols
data types
conditionals
procedures and parameters
local procedures
scope and binding
Data types and structures
primitive types
lists
pairs, pair structures, and association lists
trees
raster graphics and RGB colors
objects in Scheme
Algorithms
searching
sorting
transforming colors and images
Software development
design
documentation
development
testing, including unit testing
debugging","AL
GV
HCI
PL
SDF
SE"
CSC 161,"This course utilizes robotics as an application domain in studying imperative problem solving, data representation, and memory management. Additional topics include assertions and invariants, data abstraction, linked data structures, an introduction to the GNU/Linux operating system, and programming the low-level, imperative language C.
This course explores elements of computing that have reasonably close ties to the architecture of computers, compilers, and operating systems. The course takes an imperative view of problem solving, supported by programming in the C programming language. Some topics include:
imperative problem solving: top-down design, common algorithms, assertions, invariants
C programming: syntax and semantics, control structures, functions, parameters, macro processing, compiling, linking, program organization
concepts with data: data abstraction, integer and floating-point representation, string representation, arrays, unions, structures, linked list data structures, stacks, and queues
machine-level issues: data representation, pointers, memory management
GNU/Linux operating system: commands, bash scripts, software development tools","AL
AR
CN
IAS
IS
PL
SDF
SE
SP"
CSC 207,"CSC 207, Algorithms and Object-Oriented Design, explores object-oriented problem solving using the Java programming language. Topics covered include principles of object-oriented design and problem solving, abstract data types and encapsulation, data structures, algorithms, algorithmic analysis, elements of Java programming, and an integrated development environment (IDE) (e.g., Eclipse).
Principles of object-oriented design and problem solving 
Objects and classes
Encapsulation, abstraction, and information hiding 
Inheritance
Polymorphism 
Unit testing 
Integration testing
Abstract data types, data structures, and algorithms
Dictionaries 
Hash tables
Binary search trees 
Priority queues 
Heaps
Algorithmic analysis
Upper-bound efficiency analysis; Big-O Notation
Comparison of results for small and large data sets 
Introduction of tight-bound analysis (Big-
Elements of Java programming
Basic syntax and semantics 
Interfaces and classes 
Exceptions
Strings
Arrays, ArrayLists, vectors 
Comparators; sorting 
Generics
Java type system 
Iterators
Introduction to the Java class library
An integrated development environment (IDE) (e.g., Eclipse)","AL
CN
PL
SDF
SE
SF
SP"
COSC 1436,"Introduces the fundamental concepts of structured and object-oriented programming, and provides a comprehensive introduction to programming for computer science and technology majors. Includes topics on software development methodology, data types, control structures, functions, arrays, and the mechanics of running, testing, and debugging. This course assumes computer literacy","AL
IAS
GV
HCI
IM
NC
OS
PL
SDF
SE
SP"
COSC 1437,"Focuses on the object-oriented programming paradigm, emphasizing the definition and use of classes along with fundamentals of object-oriented design. Includes basic analysis of algorithms, searching and sorting techniques, and an introduction to software engineering processes. Students will apply techniques for testing and debugging software. (This course is included in the Field of Study Curriculum for Computer Science.)","AL
AR
IAS
DS
GV
HCI
IM
OS
PL
SDF
SE
SP"
COSC 2336,"Provides further applications of programming techniques, introducing the fundamental concepts of data structures and algorithms. Includes topics on recursion, fundamental data structures (including stacks, queues, linked lists, hash tables, trees, and graphs), and algorithmic analysis.","AL
CN
IAS
DS
GV
HCI
IM
NC
OS
PL
SDF
SE
SP"
COSC 2426,"Provides basic computer organization; machine cycle and digital representation of data and instructions; assembly language programming, assembler, loader, macros, subroutines, and program linkage.","AR
IAS
DS
HCI
IM
OS
PD
SDF
SE
SF
SP"
INF 120,"An elementary introduction to programming for those with no previous programming experience. Emphasis on understanding of algorithm development, procedural and object-oriented sofware development, secure coding, testing, and execution of program.","AL
AR
IAS
HCI
PL
SDF
SE
SP"
INF 260,"Object-oriented programming concepts and practice: types, decisions, loops, methods, arrays, classes; design and problem-solving. An intensive introduction intended for students with programming experience. Includes secure coding and data structures.","AL
IAS
GV
HCI
PD
PL
SDF
SE
SF
SP"
INF 282,"Core concepts for the design, creation, and manipulation of relational databases. Analysis of data requirements, conceptual modeling, definition of the relational model, relational database design and normalization, and database implementation; manipulation of relational databases using relational algebra with SQL.","IM
SP"
CIT 120,"Promotes understanding of computer programming and logic by teaching students to “think like a computer”. Covers skills needed to develop and design language-independent solutions to solve computer-related problems. Covers development and design basics including use of variables, control and data structures, and principles of command-line and object-oriented languages.","AL
AR
GV
HCI
IM
PL
SDF
SP"
CIT 111,"Presents a practical view of computer hardware and client operating systems. Covers computer hardware components; troubleshooting, repair, and maintenance; operating system interfaces and management tools; networking components; computer security; and operational procedures.","AR
IAS
NC
OS
SP"
CS 115,"Covers the basics of solving problems by computers. Emphasis is placed on how to design computer solutions, and then implement these designs using the C++ programming language. Important programming concepts such as data structures, control structures, top-down program design, program debugging, and program testing are covered.","AL
AR
IAS
PL
SDF
SE"
CS 215,"Covers basic data types, data structures and basic algorithm design and analysis techniques including recursion. Advanced programming skills in an object-oriented programming language is the goal. Students will also become familiar with basic software engineering methodology.","AL
AR
IAS
OS
PL
SDF
SE"
CS 216,"Implementation of large programming projects using object-oriented design techniques and software tools in a modern development environment. Software engineering topics to include: life cycles, metrics, requirements specifications, design methodologies, validation and verification, testing, reliability and project planning.","AR
CN
IAS
HCI
PD
PL
SDF
SE"
CS 275,"Topics in Discrete Mathematics aimed at application in Computer Science. Fundamental principles: set theory, induction, relations, functions, Boolean algebra. Techniques of counting: permutations, combinations, recurrences, algorithms to generate them. Introduction to graphs and trees.","AL
AR
IAS
DS"
CS 270,"This course provides an introduction to computer systems and explores computer architecture, operating systems, and networks from a programmer’s perspective. The course also introduces advanced programming and debugging tools. Topics include hardware instruction sets, machine language and C language program representations, linking/loading, operating systems (process management, scheduling, memory management, interprocess communication, and file systems), network programming (socket programming and web protocols), and common security attacks and solutions.","NC
OS
PD
SF"
EGR 101,"Introduces students to the engineering and computer science professions, College of Engineering degree programs, and opportunities for career path exploration. Topics and assignments include study skills, team development, ethics, problem solving and basic engineering tools for modeling, analysis and visualization.","SE
SP"
ITCS1010,"This course provides an introduction to problem-solving techniques, the steps of the program development cycle, and fundamental skills needed for programming in any computer language.Students will develop logic plans and create programs using core programming instructions to solve a variety of problems and will use one or more programming languages to gain experience with the complete program development process. The course includes an introduction to object-oriented and event-driven programming, and to the IDE (Integrated Development Environment).","PL
SDF"
ITON1011,"This course provides a historical perspective and an overview of operating systems significant to the development of microcomputer. Students will study vocabulary, usage, and basic functionality of a wide variety of previous and current versions.","AR
IAS
OS
SF
SP"
ITCS1870,"This course introduces students to the Python programming language. Students will write procedural and object-oriented applications. Student programs will include arithmetic operations, strings, functions, decisions and loops, and object-oriented constructs.","AL
AR
IAS
IM
PL
SDF
SP"
ITCS1820,"This course provides an introduction to application development, object-oriented programming, and the Java development system. Students will write object-oriented Java applications and applets using methods, variables, operators, strings, arrays, loops, selection statements, classes, inheritance, and encapsulation.","AR
IAS
IM
PL
SDF
SP"
ITCS2080,"This course introduces the basic principles and concepts of software engineering and provides the necessary foundation for subsequent SE courses at the upper division level. Topics include: basic terminology and concepts of software engineering; system requirements, modeling, and testing; object oriented analysis and design using UML; frameworks and APIs; client-server architecture; user interface technology; and the analysis, design, and programming of simple servers and clients.","IAS
IM
PD
PL
SDF
SE
SP"
ITCS2870,"This traditional computer science course introduces students to advanced data structure concepts including objects and inheritance, algorithm analysis, recursion, stacks, queues, lists, randomization, trees, sorting and searching, hash tables, and graphs and paths.","AL
IAS
DS
PL
SDF
SP"
ITCS2012,"This course provides an introduction to the foundations of discrete mathematics as they apply to computer science, and focuses on providing a solid theoretical foundation for further work. Topics include logic, set algebra, equivalence relations and partitions, functions, mathematical induction, cardinality, recurrence relations, basic combinatorial methods, and trees and graphs; with an emphasis on applications in computer science.","AL
DS"
ITCS2875,"This course provides a study of the principles of Von Neumann computer architecture, data representation, and memory addressing as well as processor organization and its impact on system and application software. It also includes discussion and utilization of assembly language and computer processor simulators.","AL
AR
IAS
OS
SDF
SF
SP"
ITDB1400,"This course provides an introduction to SQL (Structured Query Language) to create and maintain database objects, manipulate data, and to produce readable output displays and reports. Students will use the Oracle relational database management system along with DDL (Data Definition Language), DML (Data Manipulation Language), and SQL*Plus format commands. This course and ITDB 1405 Introduction to Oracle SQL/PL help students prepare for the Introduction to Oracle: SQL and PL/SQL certification exam. Although it is not a prerequisite for this course, students may benefit from taking a programming course prior to taking this course.",IM
ITON1205,"This course provides an introduction to local area networking concepts including current networking technology for LANs and WANs (Local and Wide Area Networks), and the Internet. It also helps students prepare for CompTIA's Network+ certification.","NC
SP"
UML Class Diagrams for Software Engineering,"Have you ever wondered how software architects, requirements engineers and business analysts sketch and draw out their plans for a software system?
In this computer science course, you will gain an in-depth understanding of Unified Modeling Language (UML) class diagrams, which are used to visually represent the conceptual design of a system. You will learn about UML class diagrams and how they This course will focus on how UML class diagrams are used to map out the structure of a business domain by showing business objects, their attributes, and associations.
Taught by an instructor with decades of experience in requirements engineering and domain modelling, this course will equip you with the skill of in-depth understanding of a UML class diagram and will enable you to judge the functional fit of a UML class diagram as blueprint for the development of an enterprise information system.
The Unified Modeling Language (UML) has become an in-demand skill in software development and engineering. In fact, some of today’s top jobs, i.e. business analysts, enterprise architects, but also developers, technical consultants and solutions architects, require UML knowledge. Enroll today and gain knowledge in an in-demand skill that will help set you apart from the competition.",AR
Einführung in MATLAB,"Wollen Sie realistische Probleme der Ingenieurmathematik lösen? Das ist ohne Einsatz von Computersoftwarelösungen, wie sie etwa MATLAB bietet, nicht möglich.
In diesem Kurs zeigen wir, wie Sie die in MATLAB zur Verfügung stehenden Funktionen benutzen können, um zahlreiche typische Problemstellungen aus der Höheren Mathematik zu lösen bzw. zu visualisieren. Sie entwickeln ein tiefes Verständnis für die mathematischen Problemstellungen und deren Lösungen. Das aktive Erstellen von Programmen unterstützt das sogfältige und genaue Arbeiten der Studierenden – die Lösungsstrategien werden nicht nur nachvollzogen, sondern erarbeitet.
Es sind keine Voraussetzungen nötig. Nehmen Sie an dem Kurs teil und erwerben Sie eine Schlüsselqualifikation, die Ihnen nicht nur im Studium, sondern auch im Berufsleben von entscheidendem Nutzen sein wird.",AR
Software Development Capstone Project,"In this project course, the final course in the Software Development MicroMasters program, you will learn how to input, manipulate, and return data with a modern web development stack. Using TypeScript and Node, you will manipulate large amounts of information using a domain-specific querying language. Backend, REST, and front-end technologies will be required to successfully complete the project.
In teams, students will work through the project in several sprints. In each sprint, students will produce a deliverable that is evaluated using an automated test suite. The feedback you will receive from this suite will be limited. To succeed at the project you will need to create your own private test suite to further validate each deliverable.
By working through such a large-scale development project, you will learn technical development skills, and gain experience with how teams develop software in the industry.
This is the largest project in the Software Development MicroMasters program. Verified learners will have access to greatly increased staff coaching to help complete the project.","SDF
SE
SP"
Principles of Electric Circuits,"Principles of Electric Circuits (20220214x) is one of the kernel courses in the broad EECS subjects. Almost all the required courses in EECS are based on the concepts learned in this course, so it’s the gateway to a qualified EECS engineer.
The main content of this course contains linear and nonlinear resistive circuits, time domain analysis of the dynamic circuits, and the steady state analysis of the dynamic circuits with sinusoidal excitations. Important concepts, e.g. filters, resonance, quiescent point, etc., cutting-edge elements, e.g. MOSFETs and Op Amps, etc., systematic analyzing tools, e.g. node method and phasor method, etc., and real-world engineering applications, e.g. square wave generator and pulse power supply for railgun, etc., will be discussed in depth.
In order to facilitate the learning for students with middle school level, we prepare the necessary knowledge for calculus and linear algebra in week 0. With your effort, we can show you the fantastic view of electricity.",SP
Web App Development with the Power of Node.js,"JavaScript is the most trending programming language on the web today! Facebook, Google, Uber and countless so-called Unicorn startups have now made JavaScript a cornerstone of their technology stack.
This online course requires no prior knowledge of the JavaScript language. In the first week of the course you will explore the language's basic concepts and fundamentals, and during the second week we will dive into advanced topics such as functions and objects.
While JavaScript is recognized primarily for making web pages interactive within web browsers, this course covers the use of the Node.js library - a platform that enables running JavaScript code outside the browser and allows the development of an end-to-end applications in JavaScript. In week three, we will cover the basic architecture of a web application by getting an up-close view of the different parts that make up this application. You will see how data is being exchanged over an Application Programming Interface (API) and what are the different tools and libraries that will allow you to construct such an application. The course will then cover the basic steps required to set up a Node.js server that can process web requests and interact with various set of databases. In the process, you will also be introduced to the Model View Controller (MVC) pattern, a software architecture that organizes the JavaScript application into modules.
Finally, in week four, you will also learn how incredibly easy it is to create beautiful data visualizations that your boss will be proud of. You will gain a basic understanding of the technologies used to present data on the web and will learn how to visualize interactive data using the popular Data Driven Documents (D3) data library.
Whether you are considering a career as a full-stack web developer, pondering developing a mobile app for your next startup or just want to pad your toolbox with a highly sought out skill, this course is definitely for you!",SE
Video Game Asset Creation and Process,"Modern video games are incredibly complex multimedia productions involving still and motion graphics, code, audio, interface elements, narrative elements and much more.
In this course, you will learn how and where all these pieces come from, who’s in charge of each piece and the different stages of the game design process. We will also show you how everything is brought together to create a final product.","GV
HCI"
AWS Developer: Building on AWS,"In this course, part of the AWS Developer Professional Series, you will gain confidence developing and deploying applications on the AWS platform. Throughout the course, working in Python on Linux, you will develop a web application building upon your developer skills and using AWS services and tools.
Your AWS instructors will guide you through getting started with AWS, creating an account, and installing SDKs. Throughout the course, we will use hands-on exercises to build out a web application. In the class, we will utilize the AWS Free Tier to minimize any costs associated with running your application.
You will use both the Amazon EC2 and AWS Lambda compute services, as well as learn about object stores by saving and accessing images and video in Amazon S3. You will use Amazon Rekognition to analyze images and video. Collected data will be managed using the Amazon Relational Database Service (RDS). You will refactor your application along the way, increase availability using load balancing, and improve performance and durability using messaging and queuing with the AWS SNS messaging service and Amazon SQS queuing service. 
Throughout the class, your instructors will introduce you to general AWS concepts such as Regions, Availability Zones, Virtual Private Clouds (VPCs), and Security Groups. You will use the AWS service APIs programmatically via AWS SDKs, the AWS CLI, and the AWS Cloud9 IDE. 
Class discussions will provide an opportunity for you to interact with fellow students as well as AWS training staff. When you have completed this class, you will be ready to continue on into the second course in this series, which will focus on deploying applications in the cloud.",SP
Advanced C++,"Advanced C++ is the third course in the Microsoft Learning C++ series. Students will learn about a vide variety of high-level C++ software development techniques. 
It is highly recommended that students complete both the &ldquo;Introduction to C++&rdquo; and &ldquo;Intermediate C++&rdquo; courses before attempting this one. However, with a solid understanding of the prerequisites, it is not absolutely necessary to take these courses. Prerequisites include an understanding of pointers, memory allocation, file processing, and general OOP concepts.
This course will cover the following concepts: Exceptions, C++ templates, Iterators and advanced Class mechanics, and design patterns.","PL
AR
SF"
Designing Data Platform Solutions,"As expert Software Architect Zoiner Tejada notes, &ldquo;The cloud is changing the way applications are designed, including how data is processed and stored.&rdquo; In addition, business teams and roles are morphing and modernizing along with the cloud, such that administrator and developer tasks and responsibilities overlap more and more - especially in the area of data architecture. And it&rsquo;s as much about the technology choices and system architecture as it is about the data architecture and the applications.
One thing that&rsquo;s clear when exploring these new roles is that no one designs in a vacuum. Experts work in teams, collaborate, and bring in specialists that go deep on specific technical areas. They talk to business owners, determine requirements, analyze existing systems, draft specifications, and more. Does this sound like you and your colleagues? Whether you&rsquo;re the system architect, the application architect, the cloud architect, or another specialist or consultant, if you&rsquo;re on one of these teams, this course can help train you on data architecture design at the highest planning level.
In these comprehensive sessions, start with an exploration of some of the core business problems that you need to solve when you design systems, such as cross-border data governance issues, PII regulations, GDPR, global-scale, security, and monitoring. Take a look at technology options, since these complex issues often inform your technology decisions. Learn about the patterns that can help resolve these problems, along with how to implement those patterns. As you look at the design choices you&rsquo;d make in a modern cloud app from the perspective of traditional OLTP-style applications, bring these pieces together to create the systems and structures to manage the data in your solutions.
Dive into case studies in this advanced course, get hands-on with design exercises, see how business and technology problems are brought together and solved, and learn how to design data platform solutions and applications that meet critical business needs.","AR
IAS
SP"
How Virtual Reality Works,"Virtual reality is changing the way we interact with the world. But how does it work, what hardware is involved, and how is software written for it?
In this course, part of the Virtual Reality Professional Certificate program, we will explore the foundations of user-friendly virtual reality app development for consumers, as well as enterprise solutions. Both hardware and software aspects will be discussed. You will learn to evaluate devices necessary for virtual reality applications, what their differences are, how you write interactive applications for virtual reality, and we will discuss the most frequent problems you are going to need to solve to write virtual reality software.
In this course, you will explore the basics of virtual reality software through copying and modifying JavaScript to explore tradeoffs in VR application design. Extensive programming experience is not required.
By the end of this course, you will understand what is important for successful virtual reality software and learn how to write simple virtual reality programs themselves with WebVR.
This course is taught by an instructor with almost two decades of experience in virtual reality who leads the Immersive Visualization Laboratory at UC San Diego.",HCI
Data Science Ethics,"As patients, we care about the privacy of our medical record; but as patients, we also wish to benefit from the analysis of data in medical records. As citizens, we want a fair trial before being punished for a crime; but as citizens, we want to stop terrorists before they attack us. As decision-makers, we value the advice we get from data-driven algorithms; but as decision-makers, we also worry about unintended bias. Many data scientists learn the tools of the trade and get down to work right away, without appreciating the possible consequences of their work.
This course focused on ethics specifically related to data science will provide you with the framework to analyze these concerns. This framework is based on ethics, which are shared values that help differentiate right from wrong. Ethics are not law, but they are usually the basis for laws.
Everyone, including data scientists, will benefit from this course. No previous knowledge is needed.",SP
Introduction to DevOps: Transforming and Improving Operations,"""Introduction to DevOps: Transforming and Improving Operations” aims to help you develop a good working knowledge of the concept of DevOps, covering the foundation, principles, and practices of DevOps. This course will focus on the successful patterns used by high performance organizations over the past 10 years.
The core structure of this course is organized around the three basic principles of DevOps, otherwise known as the “Three Ways”. The “Three Ways” outline the values and philosophies that guide DevOps processes and practices:
The First Way - This is a set of principles and practices that accelerate the delivery of IT services. Much of the material covered in this section will focus on Continuous Delivery and the extended principles and practices that lead to an accelerated flow.
The Second Way - This is a set of principles and practices that amplify feedback loops. In this section we will cover the concepts of creating a problem solving culture, as well as understanding monitoring, as it applies to DevOps. A significant portion of this section will also include monitoring business metrics, and will also explain how change management applies to DevOps.
The Third Way - The patterns discussed in this section cover the concepts of organizational learning and safety culture. Items like blameless postmortems, resilience engineering, and systems thinking as they apply to DevOps will be covered in this course.
The goal of this course is to cover an extensive study of all of the DevOps principles and practices known to date, such that you can create transformative DevOps initiatives with incredible outcomes. This course also sets up the foundation for implementing the tools and technology that will be needed for further success and execution of a DevOps transformation. 
If you are a manager or a practitioner looking for guidelines on how to start transforming organizations, this course is for you. Upon completion, you should have a good understanding of the foundation, principles, and practices of DevOps. You should be able to continue your progress for an organizational transformation using the acquired skills set.",SP
Introduction to Management Information Systems (MIS): A Survival Guide,"This MIS course will cover supporting tech infrastructures (Cloud, Databases, Big Data), the MIS development/ procurement process, and the main integrated systems, ERPs, such as SAP®, Oracle® or Microsoft Dynamics Navision®, as well as their relationship with Business Process Redesign.
Management Information Systems (MIS) are an integral part of today’s professional landscape. From customer relationship management (CRM) systems handling the day to day interactions with clients and prospects, to financial systems issuing invoices and paying bills, day to day working life is increasingly controlled by these systems that dictate what to do and how.
This course will focus on what MIS are, how they influence your current or prospective jobs, why they impose specific - and sometimes seemingly absurd - operational procedures, and how to use this knowledge to your advantage in your professional life.
Grasping the key concepts in MIS does not need to be daunting. We will use real world examples to illustrate key concepts, and strive to strike a proper balance between clarity / amenity and conceptual soundness. Join us on this stimulating journey that will allow you to better understand and perform in your current or desired job.",IS
Probability: Basic Concepts & Discrete Random Variables,"Our capacity to collect and store data has exponentially increased, but deriving information from data from a scientific perspective requires a foundational knowledge of probability.
Are you interested in a career in the emerging data science field, or as an actuarial scientist? Or want better to understand statistical theory and mathematical modeling?
In this statistics and data analysis course, we will provide an introduction to mathematical probability to help meet your career goals in the exciting new areas becoming known as information science.
In this course, we will first introduce basic probability concepts and rules, including Bayes theorem, probability mass functions and CDFs, joint distributions and expected values.
Then we will discuss a few important probability distribution models with discrete random variables, including Bernoulli and Binomial distributions, Geometric distribution, Negative Binomial distribution, Poisson distribution, Hypergeometric distribution and discrete uniform distribution.
To continue learning about probability, enroll in Probability: Distribution Models & Continuous Random Variables, which covers continuous distribution models, central limit theorem and more.
The Center for Science of Information, a National Science Foundation Center, supports learners by offering free educational resources in information science.",IS
Probability: Distribution Models & Continuous Random Variables,"In this statistics and data analysis course, you will learn about continuous random variables and some of the most frequently used probability distribution models including, exponential distribution, Gamma distribution, Beta distribution, and most importantly, normal distribution.
You will learn how these distributions can be connected with the Normal distribution by Central limit theorem (CLT). We will discuss Markov and Chebyshev inequalities, order statistics, moment generating functions and transformation of random variables.
This course along with the recommended pre-requisite,Probability: Basic Concepts & Discrete Random Variables,will you give the skills and knowledge to progress towards an exciting career in information and data science.
The Center for Science of Information, a National Science Foundation Center, supports learners by offering free educational resources in information science.",IS
Using Non-Relational Data in SQL Server,"You&rsquo;ve probably heard about all the cool things that developers are doing in Azure Cosmos DB. It&rsquo;s the best place to start if you&rsquo;re building modern NoSQL applications from scratch.&nbsp; This course shows you how to build applications that use non-relational data structures in SQL Server.&nbsp; Whether your app needs to store unstructured data, or you want to store coordinates for your map app in a meaningful way, you&rsquo;ll learn skills that go beyond storing traditional data types. You&rsquo;ll also learn how to integrate legacy applications with modern applications that are built in Azure Cosmos DB.
Bring your experience in SQL Server database development, along with your knowledge of T-SQL and relational databases, and explore the flexibility of non-relational data and the kinds of apps you can build. We'll start with a look at the capabilities of SQL Server, and learn about non-relational data, and apps that use this type of data. Then, you'll learn all the things you can do with XML data in SQL Server. 
Dive into some interesting spatial data types, and learn about storing files with BLOB. Tie it all together, and&nbsp;you'll get the details on how JSON can be stored in SQL Server and how you can integrate SQL Server relational data with NoSQL data stored in Azure Cosmos DB. Find out why the pessimist who says you can&rsquo;t build modern NoSQL apps in SQL Server is wrong.","AL
AR
PD
SDF
SP"
Excel: fundamentos y herramientas,"Este es un curso de Excel basico en el que aprenderas a trabajar con este programa informatico de Microsoft, el componente para hojas de cálculo de la suite ofimática de Microsoft, MS-Office.  
Este programa permite realizar todo tipo de operaciones con datos y funciones estadisticas, pudiendo clasificar y manejar grandes cantidades de estos datos; incorpora una gran cantidad de funciones y posee grandes cualidades para representar los resultados de forma gráfica. Estos resultados son comunmente usados en inteligencia de negocios (business Intelligence) para la toma de decisiones.  
En este curso introductorio partiremos de 0 y exploraremos las funcionalidades más utilizadas, como los formatos, la presentación de resultados, los gráficos, las funciones y la tablas de datos.  
Al finalizar el curso el estudiante estará en capacidad de realizar operaciones basicas en Microsoft Excel y estará familiarizado con las herramientas del programa.","AL
IAS
PD
SDF
SP"
Data Structures: An Active Learning Approach,"This interactive text used in this course was written with the intention of teaching Computer Science students about various data structures as well as the applications in which each data structure would be appropriate to use. It is currently being&nbsp;taught at the University of California, San Diego (UCSD), the University of San Diego (USD), and the University of Puerto Rico (UPR).
&nbsp;
This&nbsp;coursework utilizes the Active Learning approach to instruction, meaning it has various activities embedded throughout to help stimulate your learning and improve your understanding of the materials we will cover. You will encounter ""STOP and Think"" questions that will help you reflect on the material, ""Exercise Breaks"" that will test your knowledge and understanding of the concepts discussed, and ""Code Challenges"" that will allow you to actually implement some of the algorithms we will cover.
&nbsp;
Currently, all code challenges are in C++ or Python, but the vast majority of the content is language-agnostic theory of complexity and algorithm analysis. In other words, even without C++ or Python knowledge, the key takeaways can still be obtained.",SDF
Algorithmic Design and Techniques,"In this course, part of the Algorithms and Data Structures MicroMasters program, you will learn basic algorithmic techniques and ideas for computational problems, which arise in practical applications such as sorting and searching, divide and conquer, greedy algorithms and dynamic programming.
This course will cover theories, including:
how to sort data and how it helps for searching;
how to break a large problem into pieces and solve them recursively;
when it makes sense to proceed greedily;
how dynamic programming is used in genomic studies.
You will practice solving computational problems, designing new algorithms, and implementing solutions efficiently (so that they run in less than a second).","AL
AR
DS"
Linear Algebra - Foundations to Frontiers,"Linear Algebra: Foundations to Frontiers (LAFF) is packed full of challenging, rewarding material that is essential for mathematicians, engineers, scientists, and anyone working with large datasets. Students appreciate our unique approach to teaching linear algebra because:
It’s visual.
It connects hand calculations, mathematical abstractions, and computer programming.
It illustrates the development of mathematical theory. 
It’s applicable.
In this course, you will learn all the standard topics that are taught in typical undergraduate linear algebra courses all over the world, but using our unique method, you'll also get more! LAFF was developed following the syllabus of an introductory linear algebra course at The University of Texas at Austin taught by Professor Robert van de Geijn, an expert on high performance linear algebra libraries. Through short videos, exercises, visualizations, and programming assignments, you will study Vector and Matrix Operations, Linear Transformations, Solving Systems of Equations, Vector Spaces, Linear Least-Squares, and Eigenvalues and Eigenvectors. In addition, you will get a glimpse of cutting edge research on the development of linear algebra libraries, which are used throughout computational science.
MATLAB licenses will be made available to the participants free of charge for the duration of the course.
We invite you to LAFF with us!",AL
Introduction to Java Programming – Part 1,"Do you want to become a better problem solver?
This Java course will provide you with a strong understanding of basic Java programming elements and data abstraction using problem representation and the object-oriented framework. As the saying goes, “A picture is worth a thousand words.” This course will use sample objects such as photos or images to illustrate some important concepts to enhance understanding and retention. You will learn to write procedural programs using variables, arrays, control statements, loops, recursion, data abstraction and objects in an integrated development environment.
This course is comprised of two 5-week parts.
Part 1 introduces programming fundamentals:
Problem solving
Primitive data types and arithmetic expressions
Object-oriented programming basics
Branching and Loops
Arrays
Part 2 covers the following topics:
String manipulation
File I/O
Simple event-driven programming
Recursion
Abstract data types","AL
DS"
Introduction to Mobile Application Development using Android,"Have you ever wondered how your favorite mobile applications are developed?
Join us on a gentle journey through the mobile application development landscape, using Android as the platform. Along the way we will learn to use Android Studio, the integrated development environment (IDE) for Android apps. This course is intended for students who have some prior programming experience. The course will introduce you to the basics of the Android platform, Android application components, Activities and their lifecycle, UI design, Multimedia, 2D graphics and networking support in Android.
This course covers the following topics:
Android platform and the Android Studio IDE
Android components, Activities and their lifecycle, Intents
UI Design: Widgets and Layouts, UI Events, Event Listeners
2D graphics: Canvas/Drawing using a view
Multimedia: Audio playback and MediaPlayer
Network support: AsyncTask, HttpURLConnection","AR
PL
SDF
SE"
Introduction to Java Programming – Part 2,"Do you want to become a better problem solver?
This Java course will provide you with a strong understanding of basic Java programming elements and data abstraction using problem representation and the object-oriented framework. As the saying goes, “A picture is worth a thousand words.” This course will use sample objects such as photos or images to illustrate some important concepts to enhance understanding and retention. You will learn to write procedural programs using variables, arrays, control statements, loops, recursion, data abstraction and objects in an integrated development environment.
This course is comprised of two 5-week parts. Part 1 introduces programming fundamentals. Part 2 covers additional advanced topics.","AL
AR
IAS
PD
PL
SDF
SF
SP"
Python for Data Science,"In the information age, data is all around us. Within this data are answers to compelling questions across many societal domains (politics, business, science, etc.). But if you had access to a large dataset, would you be able to find the answers you seek?
This course, part of the Data Science MicroMasters program, will introduce you to a collection of powerful, open-source, tools needed to analyze data and to conduct data science. Specifically, you’ll learn how to use:
python
jupyter notebooks
pandas
numpy
matplotlib
git
and many other tools.
You will learn these tools all within the context of solving compelling data science problems.
After completing this course, you’ll be able to find answers within large datasets by using python tools to import data, explore it, analyze it, learn from it, visualize it, and ultimately generate easily sharable reports. 
By learning these skills, you’ll also become a member of a world-wide community which seeks to build data science tools, explore public datasets, and discuss evidence-based findings. Last but not least, this course will provide you with the foundation you need to succeed in later courses in the Data Science MicroMasters program.",IS
Using Python for Research,"This course bridges the gap between introductory and advanced courses in Python. While there are many excellent introductory Python courses available, most typically do not go deep enough for you to apply your Python skills to research projects. In this course, after first reviewing the basics of Python 3, we learn about tools commonly used in research settings. This version of the course includes a new module on statistical learning.
Using a combination of a guided introduction and more independent in-depth exploration, you will get to practice your new Python skills with various case studies chosen for their scientific breadth and their coverage of different Python features.","AL
AR
IAS
PD
PL
SP"
System Center 2016: Building Clouds,"This course builds on the skills that are taught in INF262x, System Center 2016: Building a Datacenter Fabric. In this course, you&rsquo;ll learn how to create, configure, and secure cloud resources. You&rsquo;ll also learn how to implement and manage Self-Service.
The coursework covers managing cloud capacity, how to ensure efficient resource usage, managing roles and secuirty, assigning quotas and delegating permissions, and how to implement Self-Service.",SP
Introduction to Programming Using Python,"Interested in learning a computer programming language but unsure of how and where to begin? This course, Learn to Program Using Python, is a great place to start.
Python is an easy and fun language to learn, and it is now one of the most popular programming languages, suitable for almost any task from developing graphical user interfaces to building web applications.
This course is an introduction to the Python programming language. This course is open to all learners who wish to gain an understanding of the basic components of computer programming. You will learn basic computer programming concepts and terminologies such as variables, constants, operators, expressions, conditional statements, loops, and functions. This Python course includes hands-on exercises to help you understand the components of Python programming while incrementally developing more significant programs. The exercises in this course will be based on small assignments which will relate to real-world problems.
No previous programming knowledge needed.","PL
SDF
SE"
Programming Basics,"Basic concepts of computer programming are introduced, starting with the notion of an algorithm. Emphasis is on developing the ability to write programs to solve practical computational problems.
Topics include:

Algorithms
Elements of C/C++ programming languages
Basic data types
Sequential and conditional execution
Iterative solutions
Arrays, matrices and their applications
Functions
Sorting and searching
Elements of string processing
Introduction to pointers
Basics of Software Engineering
Structures
File Processing

Learners will read and understand many sample programs, and will have to write several on their own. This course deals with basic programming, and sets the foundation for solid programming practices for beginners.
This course is part of the Fundamentals of Computer Science XSeries Program:

Object-Oriented Programming
Foundations of Data Structures
Implementation of Data Structures
Algorithms","SDF
AL
SE"
Foundations of Data Structures,"Data structures provide a means to manage large amounts of data for use in databases and internet indexing services. Efficient data structures are key for designing efficient algorithms and obtaining maintainable software design.
In this Computer Science course, you will start by learning basic data types, such as numbers, and gradually build a conceptual framework for organizing and managing efficient structures.
Topics covered:

Basic Data Types, Notion of an Abstract Data Type
Mathematical Properties of Sequences
Special Types of Sequences: Stacks, Queues, Strings
Implementation of Sequence Type: Arrays and Linked Lists
Trees
Sets and Maps
Graphs

Preliminary understanding of implementing sequence structures such as stacks, queues, and linked lists, will also be covered.
This course is part of the Fundamentals of Computer Science XSeries Program:

Programming Basics
Object-Oriented Programming
Implementation of Data Structures
Algorithms",SDF
Object-Oriented Programming,"Go beyond the basics of programming to understand object-oriented methodology, the approach to modular and reusable software systems.
Topics Include:

Introduction to Object Oriented Programming
Classes and Methods
Polymorphism
Inheritance
Standard Library of C++

This course is part of the Fundamentals of Computer Science XSeries Program:

Programming Basics
Foundations of Data Structures
Implementation of Data Structures
Algorithms","PL
SDF
SE"
Implementation of Data Structures,"In this Computer Science course, you will learn about implementation of all major abstract data structures using object-oriented programming paradigm of C++.
This course builds on the basic concepts developed in &lsquo;Foundations of Data Structures&rsquo; course.
Topics covered:

Review of OO programming, STL of C++
Stacks
Queues
Lists
Trees
Graphs

This course is part of the Fundamentals of Computer Science XSeries Program:

Programming Basics
Object-Oriented Programming
Foundations of Data Structures
Algorithms",DS
Algorithms,"Algorithms power the biggest web companies and the most promising startups. Interviews at tech companies start with questions that probe for good algorithm thinking.
In this computer science course, you will learn how to think about algorithms and create them using sorting techniques such as quick sort and merge sort, and searching algorithms, median finding, and order statistics.
The course progresses with Numerical, String, and Geometric algorithms like Polynomial Multiplication, Matrix Operations, GCD, Pattern Matching, Subsequences, Sweep, and Convex Hull. It concludes with graph algorithms like shortest path and spanning tree.
Topics covered:

Sorting and Searching
Numerical Algorithms
String Algorithms
Geometric Algorithms
Graph Algorithms

This course is part of the Fundamentals of Computer Science XSeries Program:

Programming Basics
Object-Oriented Programming
Foundations of Data Structures
Implementation of Data Structures",AL
Creating Virtual Reality (VR) Apps,"Build professional VR apps using Unity 3D, a powerful cross-platform 3D engine that provides a user-friendly development environment. In this course, part of the Virtual Reality Professional Certificate program, you will learn how to build a VR engine from the ground up, so you fully understand the entire rendering pipeline from 3D model to pixels in the VR display. We will also cover motion prediction, 3D stereo, lens distortion, time warp and other optimizations for a fluid, realistic VR experience.
You will also learn how to implement the most important VR interaction concepts such as selection, manipulation, travel, wayfinding, menus, and text input in Unity.
Unity is a GUI based programming environment, in which much of the programming can be done through dialog windows. It also supports scripts written in C#, which as we will show will allow for more complex VR functionality.
What you learn about VR programming in this course will help you write VR games, architectural walkthroughs, engineering simulations, 3D data viewers, medical training applications, and many more.",SP
Software Engineering: Introduction,"This course, part of the Software Development MicroMasters Program, introduces how teams design, build, and test multi-version software systems.
You will learn software engineering principles that are applicable to the breadth of large-scale software systems. The course explores topics such as agile development, REST and Async programming, software specification, design, refactoring, information security, and more.
By the end of this course, learners will work in teams, applying an agile software development process to specify, design, and test multiple versions of complex software systems.
Learners who enroll in the Verified track will receive staff grading and increased interaction with the instructor and staff.",SE
Agile Software Development,"Agile methodology has taken the software development industry by storm. Everyone wants to be agile, but what does it really mean and how do you achieve agile development?
This computer science course cuts beyond the agile methodology hype and teaches you the fundamental agile concepts that span a wide range of methodologies. It analyzes the key agile ideas, their benefits, their limitations, and how best to take advantage of them to enhance your software skills and show employers that you have mastered an essential component of today's IT industry.
The course is divided into six parts:

The Agile manifesto and the context of agile methods
Agile principles: what key methodological ideas underlie the agile movement?
Agile roles: how does agile redefine traditional software jobs and tasks, in particular the manager's role?
Agile practices: what are the concrete techniques that agile teams use to apply these methods?
Agile artifacts: what practical tools are essential to the work of agile developers?
Agile assessment: among agile ideas, which ones are essentially hyped and useless, which ones are actually harmful, and which ones will truly help you effectively produce high-quality software?

Unlike many presentations of agile methods, this course takes a strictly objective view of agile methods, enabling you to retain the best agile principles and practices. 
For the second run&nbsp;of the course we have revised the learning material and created a new final exam.",SE
Introduction to Java Programming: Fundamental Data Structures and Algorithms,"In this introductory course, you will learn programming with Java in an easy and interactive way.
You will learn about fundamental data structures, such as lists, stacks, queues and trees, and presents algorithms for inserting, deleting, searching and sorting information on these data structures in an efficient way.
Emphasis is put on immediate feedback and on having a fun experience. Programming knowledge is not only useful to be able to program today’s devices such as computers and smartphones. It also opens the door to computational thinking, i.e. the application of computing techniques to every-day processes.
This course is designed taking into account the subset and recommendations of the College Board in order to prepare learners for the Advanced Placement (AP) Computer Science A exam.","AL
DS"
Information and Communication Technology (ICT) Accessibility,"In this introductory course, learn how to measure an organization’s ICT accessibility and assess the importance of maintaining an inclusive workplace for both employees and customers with disabilities. This six-week course consists of modules detailing some of the primary ICT accessibility obstacles facing organizations today. Each module is taught by a subject matter expert – through content-rich videos, activities, and discussion forums.
Whether you work in the corporate, government or non-profit sector, this course will enable you to identify ICT accessibility issues, analyze specific needs, and evaluate possible solutions. As the world becomes more technology driven, organizations of all sizes and sectors touch ICT accessibility, whether through website design, document creation, or multimedia utilization. Start outlining a plan to establish and maintain an accessible enterprise operation today.
Join our instructors as we explore why, what, and how to integrate accessibility design elements into your ICT organizational roadmap to support equal access for all.
This ICT accessibility course will consist of six modules over a six week term. Each module will consist of multiple video lessons. The lesson videos will include instructional content, resources, demonstrations, guest subject matter experts and personal interviews. There will be at least one weekly activity assignment, two discussion forum question postings and one graded ten question multiple-choice quiz at the end of each module.",AR
CS50's Understanding Technology,"This is CS50's introduction to technology for students who don’t (yet) consider themselves computer persons. Designed for those who work with technology every day but don’t necessarily understand how it all works underneath the hood or how to solve problems when something goes wrong, this course fills in the gaps, empowering you to use and troubleshoot technology more effectively. Through lectures on hardware, the Internet, multimedia, security, programming, and web development, this course equips you for today’s technology and prepares you for tomorrow’s as well.","AL
AR
IAS
IS
OS
PD
PL
SDF
SP"
CS50's Computer Science for Business Professionals,"This is CS50’s introduction to computer science for business professionals, designed for managers, product managers, founders, and decision-makers more generally. Whereas CS50 itself takes a bottom-up approach, emphasizing mastery of low-level concepts and implementation details thereof, this course takes a top-down approach, emphasizing mastery of high-level concepts and design decisions related thereto. Through lectures on computational thinking, programming languages, internet technologies, web development, technology stacks, and cloud computing, this course empowers you to make technological decisions even if not a technologist yourself. You’ll emerge from this course with first-hand appreciation of how it all works and all the more confident in the factors that should guide your decision-making.",IAS
Video Game Design and Balance,"In this course, you’ll enter the mind of a professional game designer. You’ll learn how to design different types of games, understand the commonalities between them and learn what is at the core of every game design, including game balance and why it is key to game design.",GV
Data Mining: Theories and Algorithms for Tackling Big Data,"Despite the large volume of data mining papers and tutorials available on the web, aspiring data scientists find it surprisingly difficult to locate an overview that blends clarity, technical depth and breadth with enough amusement to make big data analytics engaging. This course does just that.
Each module starts with an interesting real-world example that gives rise to the specific research question of interest.
Students are then presented with a general idea of how to tackle this problem along with some intuitive and straightforward approaches.
Finally, a number of representative algorithms are introduced along with concrete examples that show how they function in practice.
While theoretical analysis sometimes overcomplicates things for students, here it’s applied to help them better understand the key features of the techniques.
本课程完整覆盖数据挖掘领域的各项核心技术，包括数据预处理、分类、聚类、回归、关联、推荐、集成学习、进化计算等。强调在知识的广度、深度和趣味性之间寻找最佳平衡点，在生动幽默中讲述数据挖掘的核心思想、关键技术以及一些在其它相关课程和教科书中少有涉及的重要知识点。本课程适合对大数据和数据科学感兴趣的各专业学生以及工程技术人员学习，不追求纯粹的理论推导，而是把理论与实践有机结合，让学生学到活的知识、有用的知识和真正属于自己的知识，特别是数据分析领域的研究方法和思维方式。","IS
AR
CN"
HTML5 and CSS Fundamentals,"This course is part of W3C's ""Front-End Web Developer"" Professional Certificate
Learn the basics of Web design and style to give your Web sites a professional look and feel.The Microsoft team and experts from the World Wide Web Consortium (W3C) will guide you step-by-step in how to use the latest Web standards to create a site to be proud of.
During the course, you will learn the basic building blocks of Web design and style – HTML5 and CSS – to give your site a professional look and feel.
By the end of the course, you should understand all the fundamental elements – from headers and links to images and sidebars – and leave having built a basic framework for your own Web site.
This course has been initially developed by Dale A. Schouten, Anusha Muthiah and Christopher Perkins, as part of a partnership between W3C and Intel®.","AR
CN
IAS
PL
SE
SP"
User Interface (UI) Personalization,"In this course, you will learn the fundamentals of user interface personalization in the context of web sites and web applications.
You will learn how user interface (UI) personalization can enable web pages to adapt to a diversity of needs, especially the needs of people with disabilities. The course will explain the difference between adaptable and adaptive user interfaces, and why adaptable user interfaces have been only moderately successful.
You will receive an introduction to the Global Public Inclusive Infrastructure (GPII) framework and its infrastructure of automatically adapting a user interface to a user&rsquo;s needs and preferences.
Optionally, you will also learn how to make an example web application adaptable by connecting it with the GPII framework.",HCI
Big Data Analytics,"Gain essential skills in today’s digital age to store, process and analyse data to inform business decisions.
In this course, part of the Big Data MicroMasters program, you will develop your knowledge of big data analytics and enhance your programming and mathematical skills. You will learn to use essential analytic tools such as Apache Spark and R.
Topics covered in this course include:
cloud-based big data analysis;
predictive analytics, including probabilistic and statistical models;
application of large-scale data analysis;
analysis of problem space and data needs.
By the end of this course, you will be able to approach large-scale data science problems with creativity and initiative.","AR
IAS
DS"
Big Data Capstone Project,"The Big Data Capstone Project will allow you to apply the techniques and theory you have gained from the four courses in this Big Data MicroMasters program to a medium-scale data science project.
Working with organisations and stakeholders of your choice on a real-world dataset, you will further develop your data science skills and knowledge.
This project will give you the opportunity to deepen your learning by giving you valuable experience in evaluating, selecting and applying relevant data science techniques, principles and theory to a data science problem.
This project will see you plan and execute a reasonably substantial project and demonstrate autonomy, initiative and accountability.
You’ll deepen your learning of social and ethical concerns in relation to data science, including an analysis of ethical concerns and ethical frameworks in relation to data selection and data management.
By communicating the knowledge, skills and ideas you have gained to other learners through online collaborative technologies, you will learn valuable communication skills, important for any career. You’ll also deliver a written presentation of your project design, plan, methodologies, and outcomes.","GV
HCI
PD
PL
SDF
SP"
Introduction to Java Programming: Writing Good Code,"This is an introductory course to learn programming with Java designed to teach how to code good programs in Java, understanding “good” as both correct and efficient. Basic principles of software engineering will be introduced to make it easier for our future self and others to reuse code. Ethical issues and the intellectual property of our programs will also be addressed in the last part of this course. Examples and case studies will be provided, so that learners can implement simple but increasingly complex programs in Java.
Emphasis is put on immediate feedback and on having a fun experience. Programming knowledge is not only useful to be able to program today’s devices such as computers and smartphones. It also opens the door to computational thinking, i.e. the application of computing techniques to every-day processes.
This course is designed taking into account the subset and recommendations of the College Board in order to prepare learners for the Advanced Placement (AP) Computer Science A exam..","SP
PL
SF
SE"
Simulation Neuroscience,"Simulation Neuroscience is an emerging approach to integrate the knowledge dispersed throughout the field of neuroscience.   
The aim is to build a unified empirical picture of the brain, to study the biological mechanisms of brain function, behaviour and disease. This is achieved by integrating diverse data sources across the various scales of experimental neuroscience, from molecular to clinical, into computer simulations.   
This is a unique, massive open online course taught by a multi-disciplinary team of world-renowned scientists. In this first course, you will gain the knowledge and skills needed to create simulations of biological neurons and synapses.   
This course is part of a series of three courses, where you will learn to use state-of-the-art modeling tools of the HBP Brain Simulation Platform to simulate neurons, build neural networks, and perform your own simulation experiments. We invite you to join us and share in our passion to reconstruct, simulate and understand the brain!","NC
SDF
IM"
Finding your Cybersecurity Career Path,"In this course, you will focus on the pathways to cybersecurity career success. You will determine your own incoming skills, talent, and deep interests to apply toward a meaningful and informed exploration of 32 Digital Pathways of Cybersecurity.
You will complete a self-assessment comprised of elements needed to determine essential next steps on your career path.",SP
Video Game Design History,"Video games as a medium go back more than 50 years to mainframe computers. Even the central design of video games can be traced back to the first games themselves.
To be a good game designer, it’s essential to have an understanding of the video game design industry’s fascinating history.
We’ve partnered with The Strong National Museum of Play to give you a unique look into the history of all things video game. The International Center for the History of Electronic Games at The Strong is the largest and most comprehensive public assemblage of video games and related materials in the world. The staff are celebrated experts in the field and the ICHEG is visited by scholars of video games from around the world. You’ll gain amazing insight into the history of video games with a guided exploration of key artifacts from the collection of more than 100,000 electronic games and materials.",HCI
Blockchain for Business - An Introduction to Hyperledger Technologies,"Discover the power of business blockchains and distributed ledger technologies with an overview of Hyperledger and introductions to its key frameworks. All over the global market there are ledgers that organizations and individuals alike must trust. Blockchain technologies record promises, trades, transactions or simply items we never want to disappear, allowing everyone in an ecosystem to keep a copy of the common system of record.  
This introductory course is carefully curated for both nontechnical and technical audiences. It examines blockchains for the enterprise and a number of pertinent use cases from Hyperledger, a global cross-industry community of communities hosted by The Linux Foundation and advancing business blockchain technologies. Hyperledger is incubating and promoting enterprise grade, open source business blockchain software, on top of which anyone can set up apps to meet cross-industry needs.  
The course covers key features of blockchain technologies and the differentiators between various types of Hyperledger projects. We'll start with ‘what is blockchain’ and open the discussion to identifying suitable blockchain use cases for your business requirements. We will then take a deep dive into the enterprise-ready Hyperledger blockchain frameworks by guiding students through implementation of various blockchains.   
Students with a technical background will learn how to perform clean installations of Hyperledger Sawtooth and Hyperledger Fabric, as well as develop simple applications on top of these frameworks.   
Students with a business background will gain an understanding of how blockchains work and how they can create value for their business through cost-savings and efficiencies, in terms of speed and simplicity. They will view how information is generated, stored, and shared in various blockchains, as well as gain tools to evaluate whether or not a blockchain solution would be suitable for their particular business case.  
Industries today are using blockchain technologies to increase efficiency and solve business problems associated with data privacy, security, information sharing, and inclusion. Be on the cutting edge; learn about these innovative technologies and bring unique value to your business.",AR
Big Data Fundamentals,"Organizations now have access to massive amounts of data and it’s influencing the way they operate. They are realizing in order to be successful they must leverage their data to make effective business decisions.
In this course, part of the Big Data MicroMasters program, you will learn how big data is driving organisational change and the key challenges organizations face when trying to analyse massive data sets.
You will learn fundamental techniques, such as data mining and stream processing. You will also learn how to design and implement PageRank algorithms using MapReduce, a programming paradigm that allows for massive scalability across hundreds or thousands of servers in a Hadoop cluster. You will learn how big data has improved web search and how online advertising systems work.
By the end of this course, you will have a better understanding of the various applications of big data methods in industry and research.",IS
Android Developer Capstone Project: Building a Successful Android App,"The capstone project includes the evaluation of the competencies and performance tasks, which define an Associate Android Developer (Fundamental Application Components, Application User Interface (UI) and User Experience (UX), Persistent Data Storage, Enhanced System Integration and Testing and Debugging).
You will demonstrate your understanding of the fundamental application components of programming for Android, how to build clean and compelling user interfaces, using view styles and theme attributes to apply a consistent look and feel across an entire application. Your app will connect with the internet sharing preferences and files, SQLite databases, content providers, libraries as ORM or Realm. You will design, plan, build and publish in the Google Play store your own Android Application.
This capstone project is part of the GalileoX  Android Developer MicroMasters Program that is specifically designed to teach the critical skills needed to be successful in this exciting field. In order to qualify for the MicroMasters Credential you will need to earn a Verified Certificate in each of the four courses as well as this final capstone project.","AL
AR
PD
SDF"
Introduction to Computational Thinking and Data Science,"6.00.2x will teach you how to use computation to accomplish a variety of goals and provides you with a brief introduction to a variety of topics in computational problem solving . This course is aimed at students with some prior programming experience in Python and a rudimentary knowledge of computational complexity. You will spend a considerable amount of time writing programs to implement the concepts covered in the course. For example, you will write a program that will simulate a robot vacuum cleaning a room or will model the population dynamics of viruses replicating and drug treatments in a patient's body.
Topics covered include:
Advanced programming in Python 3
Knapsack problem, Graphs and graph optimization
Dynamic programming
Plotting with the pylab package
Random walks
Probability, Distributions
Monte Carlo simulations
Curve fitting
Statistical fallacies","AL
DS
IM
PD"
Software Construction: Object-Oriented Design,"This course, part of the Software Development MicroMasters program, will dig deep into the principles of object oriented design, and introduce new abstraction techniques and design patterns. You will use these techniques to build an application that makes use of popular online services and APIs – the most complex software design project so far.
By the end of the course, you will have a solid foundation in Java and Object-Oriented Design, as well as many software development concepts that can be applied to any language.
Learners who enroll in the Verified track will receive staff grading for the course project and increased interaction with the instructors and staff.","SDF
PL
SE"
Robotics: Locomotion Engineering,"How do robots climb stairs, traverse shifting sand and navigate through hilly and rocky terrain?
This course, part of the Robotics MicroMasters program, will teach you how to think about complex mobility challenges that arise when robots are deployed in unstructured human and natural environments.
You will learn how to design and program the sequence of energetic interactions that must occur between sensors and mechanical actuators in order to ensure stable mobility. We will expose you to underlying and still actively developing concepts, while providing you with practical examples and projects.","AL
IAS"
HTML5 Apps and Games,"Want to learn advanced HTML5 tips and techniques? This is the course for you! Find out more about the powerful Web features that will help you create great content and apps.
This course is a natural follow up of HTML5 Coding Essentials and Good Practices. In this course, we continue the exploration of HTML5-based APIs, but also introduce some advanced features related to HTML5, such as Web components, advanced multimedia, audio for music and games, etc.
Like in the first course, you will learn by doing, study the interactive examples and have fun with proposed development projects. One of them will be to create an HTML5 game, so jump in and learn lots!","AR
IAS
IM
SDF"
JavaScript Introduction,"This course is part of W3C's ""Front-End Web Developer"" Professional Certificate and Microsoft's Professional Program Certificate in Front-End Web Development.
This computer science course is an initiation to JavaScript programming and has been designed to help Web developers have an understanding of the basic concepts of the language. This course was developed in partnership between W3C and University Côte d'Azur.
JavaScript lets you add interactive features to your Web sites, including dynamically updated content, controlled multimedia, animated images, and much more.
The main objective of this course is to master JavaScript best practices by means of many interactive examples, some of which are demonstrated in live coding videos.
We’ll use JavaScript within the Web browser. Why JavaScript is worth your time:
HTML5, CSS and JavaScript are the “classic three” for developers and designers;
It allows you to add interactivity to your Web sites;
You can use JavaScript and HTML5 APIs to create custom graphics and animation, and to master multimedia using audio and video players, music and sound effects;
It is powerful, easy to learn, and quick to write;
It has great tools (editors, runtimes, lint tools, browsers, and third party libraries) as well as great online support through plenty of active open source communities.
At the end of the course, we expect that you will be able to read the source code of any JavaScript example found on the Web, learn from it, tweak it, and even – why not? – start contributing to open-source JavaScript projects. This introductory course will make you think like a JavaScript developer.",SP
Data Analysis: Visualization and Dashboard Design,"Struggling with data at work? Wasting valuable time working in multiple spreadsheets to gain an overview of your business? Find it hard to gain sharp insights from piles of data on your desktop?
If you are looking to enhance your efficiency in the office and improve your performance by making sense of data faster and smarter, then this advanced data analysis course is for you.
If you have already sharpened your spreadsheet skills in EX101x Data Analysis: Take It to the MAX(), this course will help you dig deeper. You will learn advanced techniques for robust data analysis in a business environment. This course covers the main tasks required from data analysts today, including importing, summarizing, interpreting, analyzing and visualizing data. It aims to equip you with the tools that will enable you to be an independent data analyst. Most techniques will be taught in Excel with add-ons and free tools available online. We encourage you to use your own data in this course but if not available, the course team can provide.
This course is part of the Data Analysis XSeries. 
LICENSE
The course materials of this course are Copyright Delft University of Technology and are licensed under a Creative Commons Attribution-NonCommercial-ShareAlike (CC-BY-NC-SA) 4.0 International License.",NC
Introduction to Java Programming: Starting to code in Java,"In this introductory Java programming course, you will be introduced to powerful concepts such as functional abstraction, the object oriented programming (OOP) paradigm and Application Programming Interfaces (APIs). Examples and case studies will be provided so that you can implement simple programs on your own or collaborate with peers.
Emphasis is put on immediate feedback and on having a fun experience. Programming knowledge is not only useful to be able to program today’s devices such as computers and smartphones. It also opens the door to computational thinking, i.e. the application of computing techniques to every-day processes.
This edition is an improved version of the course released in April 2015.","PL
SDF
PD
AL
SF"
Computer Graphics,"Today, computer graphics is a central part of our lives, in movies, games, computer-aided design, virtual simulators, visualization and even imaging products and cameras. This course teaches the basics of computer graphics that apply to all of these domains.  
Students will learn to create computer-generated images of 3D scenes, including flybys of objects, make a real-time scene viewer, and create very realistic images with raytracing. We will start with a simple example of viewing a teapot from anywhere in space, understanding the basic mathematics of virtual camera placement. Next, you will learn how to use real-time graphics programming languages like OpenGL and GLSL to create your own scene viewer, enabling you to fly around and manipulate 3D scenes. Finally, we will teach you to create highly realistic images with reflections and shadows using raytracing.CSE167x teaches the foundations of computer graphics. 
This course runs for 6 weeks and consists of four segments. Each segment includes an individual programming assignment:
Overview and Basic Math (Homework 0: 10% of grade)
Transformations (Homework 1: 20% of grade)
OpenGL and Lighting (Homework 2: 35% of grade)
Raytracing (Homework 3: 35% of grade)
This term, students who earn a total score of 50% or greater will have passed the course and may obtain a certificate from UC San DiegoX.
FAQ
What is the format of the class?
The class will consist of lecture videos, brief exercises, and homework assignments. Each of the four segments of the course will have 2-3 lectures. Each lecture includes 3-5 lecture videos, which last between 10 and 20 minutes. There will be a brief exercise after each lecture video to help you test your understanding of the material. 
Your score will be determined entirely by programming assignments for which you will receive immediate autograder feedback. You may submit your assignment to the autograder multiple times; only your last submission will count.
Programming projects are to be implemented individually without copying code from other students, largely identical online resources, or previous instances of the class. However, short of posting or sharing actual explicit code, you are encouraged to collaborate and discuss problems in the discussion forums.
Will the text of the lectures be available?
Yes. All of our lectures will have transcripts synced to the videos.
Do I need to watch the lectures live?
No. You can watch the lectures at your leisure. You can ""work ahead"" if you want to move faster than the due dates. Conversely, you can progress at a slower pace. Please note that certificates will only be awarded to students who obtain the requisite score by turning in assignments by the established deadlines.
How much does it cost to take the course?
Nothing: the course is free. If you expect to be doing a lot of graphics programming in the future, we would recommend the OpenGL and GLSL programming guides, but it is by no means required to purchase them. There are many free online resources for these topics, and we will be posting links to them.
What computer system do I need for the course?
The course material involves C++/OpenGL/GLSL programming that is portable. We provide skeleton code for all major platforms (Windows, Mac OS, Linux). This is a modern course involving programmable shaders, but any machine built in the last few years should be adequate. We provide many compilation hints and tips, and Homework 0 is to ensure you can compile and work with the autograder. You do need some kind of C++ development environment; we provide several resources to get you started for Homework 0. In the highly unlikely event you cannot get your machine to work, you will hopefully have adequate time to find another system.
Will I learn Maya/DirectX/3D Studio Max etc.?
This is a course on the foundations of computer graphics and covers concepts, not the intricacies of a particular software package. That said, you will be able to write complex interactive and offline 3D graphics programs at the end of the course in C++, OpenGL and GLSL.
Can I contact the Instructor or Teaching Assistants?
Yes, but not directly. The discussion forums are the appropriate venue for questions about the course. The instructors will monitor the discussion forums and try to respond to the most important questions; in many cases response from other students and peers will be adequate and faster.
I have a disability (visual/hearing etc.) Can I take the course?
In most cases, yes. We provide transcripts for all lectures. Many leading computer graphics researchers have had visual impairments like color-blindness. However, this being a computer graphics course that relies on visual image comparisons, we probably cannot provide adequate support for those who are legally blind.
I have a busy schedule this fall. Can I still take the course?
The course does require about 12 hours per week of work, and the assignments (where you are given two weeks) require the time. Certificates of achievement require a passing score. Of course, you are welcome to just go through the lectures or attempt some of the assignments if you are not interested in a certificate; we hope to provide something for everyone.",GV
Building a Cybersecurity Toolkit,"Technologies are always being defeated.
If you own an information asset that’s valuable enough to the right adversary, it’s only a matter of time before there’s a breach. Today’s technologies attempt to keep adversaries out, but the sad fact is they will inevitably be defeated. This means a successful cybersecurity professional needs to have an expanded arsenal in their toolkit that extends far beyond technical proficiency.
Cybersecurity professionals need to be agile, multifunctional, flexible, and dynamic given how quickly things can change. They need to be able to adapt to change and problem solve quickly, have diverse knowledge to perform many activities, respond to new threats and shift priorities to meet the challenge of the day.
The purpose of this course is to give learners insight into these type of characteristics and skills needed for cybersecurity jobs and to provide a realistic outlook on what they really need to add to their “toolkits” – a set of skills that is constantly evolving, not all technical, but fundamentally rooted in problem-solving.
Students will learn from thought leaders from both the academic and practitioner communities.",SP
Computational Thinking and Big Data,"Computational thinking is an invaluable skill that can be used across every industry, as it allows you to formulate a problem and express a solution in such a way that a computer can effectively carry it out.
In this course, part of the Big Data MicroMasters program, you will learn how to apply computational thinking in data science. You will learn core computational thinking concepts including decomposition, pattern recognition, abstraction, and algorithmic thinking.
You will also learn about data representation and analysis and the processes of cleaning, presenting, and visualizing data. You will develop skills in data-driven problem design and algorithms for big data.
The course will also explain mathematical representations, probabilistic and statistical models, dimension reduction and Bayesian models.
You will use tools such as R and Java data processing libraries in associated language environments.","AL
DS"
CSS Basics,"This course is part of W3C's ""Front-End Web Developer"" Professional Certificate and Microsoft's Professional Program Certificate in Front-End Web Development.
Have you just begun your journey into Web development? This course will introduce you to the basics of Web design and teach you how to style your Web site for a professional look and feel.
The Microsoft team and experts from the World Wide Web Consortium (W3C) will guide you step-by-step in using the latest Web standards to structure your content and presentation like a professional. In this course, you will explore numerous CSS features to help you control the look and feel of your site such as colors, fonts and layout. By the end of the course, you should understand all the fundamental elements of CSS and how to use them effectively.
It is recommended that you are at least a little familiar with HTML before taking this course, but we will be providing you with the HTML code when necessary.",HCI
Introduction to Computer Science and Programming Using Python,"This course is the first of a two-course sequence: Introduction to Computer Science and Programming Using Python, and Introduction to Computational Thinking and Data Science. Together, they are designed to help people with no prior exposure to computer science or programming learn to think computationally and write programs to tackle useful problems. Some of the people taking the two courses will use them as a stepping stone to more advanced computer science courses, but for many it will be their first and last computer science courses. This run features updated lecture videos, lecture exercises, and problem sets to use the new version of Python 3.5. Even if you took the course with Python 2.7, you will be able to easily transition to Python 3.5 in future courses, or enroll now to refresh your learning.
Since these courses may be the only formal computer science courses many of the students take, we have chosen to focus on breadth rather than depth. The goal is to provide students with a brief introduction to many topics so they will have an idea of what is possible when they need to think about how to use computation to accomplish some goal later in their career. That said, they are not ""computation appreciation"" courses. They are challenging and rigorous courses in which the students spend a lot of time and effort learning to bend the computer to their will.",SP
Programming for the Web with JavaScript,"JavaScript is the programming language of the World Wide Web.
As a professional web software developer, you will not only need to know how to program in this simple yet powerful language, but you will need to understand the fundamentals of how data is exchanged on the World Wide Web (WWW) and what tools and frameworks are available to you for creating robust, interactive web applications.
This course, part of the CS Essentials for Software Development Professional Certificate program, provides an introduction to modern web development using JavaScript. In addition to exploring the basics of web page creation using HTML and CSS, you will learn advanced web page layout and responsive design tools such as Bootstrap. You will also learn how browsers represent a web page data using the Document Object Model (DOM) and how to develop dynamic, interactive web pages using JavaScript in the browser. Beyond fundamental JavaScript syntax and advanced language features such as callbacks, events, and asynchronous programming, you will work with jQuery, which provides functionality for simplified DOM manipulation and event handling.
This course will also introduce you to modern web frameworks and component-based libraries such as React.js for efficiently developing modular web page components, and D3.js for creating data-driven documents. We will also teach you how to represent and exchange data using JavaScript Object Notation (JSON), and how to access RESTful APIs on the web.
Server-side JavaScript is becoming more prevalent in the industry, with web frameworks such as Node.js and Express making it simple to create and deploy complex, data-driven web applications. This course will prepare you to use such frameworks and show you how to integrate them with NoSQL databases such as MongoDB.",HCI
Software Construction: Data Abstraction,"This is the third course in the Software Development MicroMasters program. You will learn how to build larger and more complex software systems using the Java programming language.
The course begins with the topic of data abstraction - from specification to implementation. Particular attention is given to how to write robust tests using JUnit. Then the course expands on these ideas to explore how type hierarchies and polymorphism can be used to decrease redundancy in your code. The course wraps up with a discussion of how to design robust classes.
By the end of the course, you will have a solid foundation in designing software in Java, and be ready to move onto Software Construction: Object-Oriented Design, where you will learn more complex design patterns and principles designing object-oriented programs.
Learners who enroll in the Verified track will receive staff grading for the course project and increased interaction with the instructors and staff.","SDF
PL
SE"
Algorithm Design and Analysis,"How do you optimally encode a text file? How do you find shortest paths in a map? How do you design a communication network? How do you route data in a network? What are the limits of efficient computation?
This course, part of the Computer Science Essentials for Software Development Professional Certificate program, is an introduction to design and analysis of algorithms, and answers along the way these and many other interesting computational questions.
You will learn about algorithms that operate on common data structures, for instance sorting and searching; advanced design and analysis techniques such as dynamic programming and greedy algorithms; advanced graph algorithms such as minimum spanning trees and shortest paths; NP-completeness theory; and approximation algorithms.
After completing this course you will be able to design efficient and correct algorithms using sophisticated data structures for complex computational tasks.","AL
DS
GV
NC
PD
PL
SDF"
Cybersecurity: The CISO's View,"The Chief Information Security Officer (CISO) in any given organization serves a leadership position, protecting the data and digital systems that a company’s employees as well as its customers depend upon.
This course delves into the role that the CISO plays in cybersecurity operations.
Throughout the lessons, learners will explore answers to the following questions: How does cybersecurity work across industries? What is the professionals' point of view? How do we keep information secure?
Coursework will fully explore the CISO’s view from the top, as well as the position’s toolkit, which includes policy, procedures and practices, technologies, awareness training, and audit. It will also dive into the approaches taken in private industry, government, academia, and the military.",SP
Robotics: Vision Intelligence and Machine Learning,"How do robots “see”, respond to and learn from their interactions with the world around them? This is the fascinating field of visual intelligence and machine learning. Visual intelligence allows a robot to “sense” and “recognize” the surrounding environment. It also enables a robot to “learn” from the memory of past experiences by extracting patterns in visual signals.
You will understand how Machine Learning extracts statistically meaningful patterns in data that support classification, regression and clustering. Then by studying Computer Vision and Machine Learning together you will be able to build recognition algorithms that can learn from data and adapt to new environments.
By the end of this course, part of the Robotics MicroMasters program, you will be able to program vision capabilities for a robot such as robot localization as well as object recognition using machine learning.
Projects in this course will utilize MATLAB and OpenCV and will include real examples of video stabilization, recognition of 3D objects, coding a classifier for objects, building a perceptron, and designing a convolutional neural network (CNN) using one of the standard CNN frameworks.",IS
Robotics: Dynamics and Control,"Flying drones or robot manipulators accomplish heavy-duty tasks that deal with considerable forces and torques not covered by a purely robot kinematics framework. Learn how to formulate dynamics problems and design appropriate control laws.
In this course, part of the Robotics MicroMasters program, you will learn how to develop dynamic models of robot manipulators, mobile robots, and drones (quadrotors), and how to design intelligent controls for robotic systems that can grasp and manipulate objects.
We will cover robot dynamics, trajectory generation, motion planning, and nonlinear control, and develop real-time planning and control software modules for robotic systems. This course will give you the basic theoretical tools and enable you to design control algorithms.
Using MATLAB, you will apply what you have learned through a series of projects involving real-world robotic systems.",SF
How to Code: Complex Data,"As your program requirements get more complex, you will find that simple additions to the design method make it easy to write well-structured and well-tested code that is easy to maintain.
By learning how to capture common data and control structures using abstraction, your programs will get shorter and better tested.
Building on the core methods from How to Code: Simple Data, this programming course, part of the Software Development MicroMasters program, quickly expands to cover more complex programs on more complex data. Towards the end of the course, you will design programs that even experienced developers would find challenging.
You will also learn how to design search programs. You will design a program to solve Sudoku puzzles, and will be able to design many other puzzle solvers as well.
Learners who enroll in the Verified track will receive staff grading for the course project and increased interaction with the instructor and staff.
Learner Testimonial
""It's a great course and maybe one of the most important topics to master if you're a programmer (any level). This course will teach you how to design better, cleaner and faster programs."" 
- Previous Student","SDF
SP"
Data Structures and Software Design,"Knowing how to code is only part of the skills needed to become a professional software developer.
This course, part of the CS Essentials for Software Development Professional Certificate program, will take your skills to the next level by teaching you how to write “good” software that appropriately represents and organizes data, is easy to maintain, and is of high quality.
As the purpose of most computer programs is to manipulate data, sometimes large quantities of it, the manner in which programs represent and organize data can have an enormous effect on the simplicity and efficiency of the code. In this course, you will learn about important core data structures such as arrays, lists, stacks, queues, sets, maps, trees, and graphs, and learn how to evaluate them and reason about their behavior and efficiency.
Most importantly, you will learn how to determine which data structure is the most appropriate for solving the problem at hand, and see how to use the implementations that are part of the Java library.
However, choosing the right data structure is only part of the challenge of developing high quality software: you must also consider the design of the classes that use those data structures. You will learn about software design principles such as modularity, functional independence, and abstraction, and apply those concepts toward writing programs that are easy to understand, easy to modify, and easy to test.
Although it is important to know how to write high quality code, professional software developers often spend a majority of their time maintaining existing code. You will also learn about software refactoring techniques for improving the design of existing code, and see how to improve code efficiency.
This course will use Java but the concepts you learn can be applied to almost all modern programming languages.","SDF
PL
SE"
Introduction to Cybersecurity,"This course serves as an introduction to the exciting field of cybersecurity.
As our daily lives become more and more dependent on Internet-based tools and services, and as those platforms accumulate more of our most sensitive data, the demand grows for experts in the field of cybersecurity.
In this course, you will gain an overview of the cybersecurity landscape as well as national (USA) and international perspectives on the field. We will cover the legal environment that impacts cybersecurity as well as predominant threat actors.",IS
Introduction to Apache Hadoop,"Everywhere you look today, enterprises are embracing big data-driven customer relationships and building innovative solutions based on insights gained from data. According to IBM, every day we create 2.5 quintillion bytes of data — so much that 90% of the data in the world today has been created in the last two years. This data comes from everywhere: sensors used to gather climate information, posts to social media sites, digital pictures and videos, purchase transaction records, and cell phone GPS signals, just to name a few. This data is big data.
The demand for storing this unprecedented amount of information is enough of a challenge, but when you add the need for analytics, the technology requirements truly start pushing the envelope on state-of-the-art IT infrastructures. Fortunately, the Open Source community has stepped up to this challenge and developed a storage and processing layer called Apache Hadoop. Add the dozens of other projects integrating with Apache Hadoop and you have the whole Hadoop ecosystem.
The Hadoop ecosystem, along with the data management architectures it enables, is growing at an unprecedented rate, with 73% of Hadoop cluster deployments now in production — a number which continues to rise.
The demand for individuals who have experience managing this platform is also accelerating. According to the IT Skills and Certifications Pay Index research from Foote Partners, “the need for big data skills also continues to lead to pay increases — about 8% over the last year.” Now is exactly the right time to build an exciting and rewarding career managing big data with Apache Hadoop.
This introductory course is taught by Hadoop experts from The Linux Foundation’s ODPi collaborative project. As host to some of the world's leading open source projects, The Linux Foundation provides training and networking opportunities to help you advance your career.
This course is perfect for IT professionals seeking a high-level overview of Hadoop, and who want to find out if a Hadoop-driven big data strategy is the right solution to meet their data retention and analytics needs. This course will also help anyone who wants to set up a small-scale Hadoop test environment to gain experience working with this exciting open source technology.","AR
IAS
PL
SDF
SE"
Fundamentals of Red Hat Enterprise Linux,"This course will provide you with a basic introduction to Linux® skills using Red Hat® Enterprise Linux 7. It will show you how a Linux system is organized, and will demonstrate introductory system administration tasks, which you will be able to practice on your own.
You will be introduced to reasons why Linux and the open source development model are so important in today's computing environment. Linux systems are used everywhere—the internet, point-of-sale systems, and the world's stock markets. You’ll find Linux running smart TVs, in-flight entertainment systems, and most of the top supercomputers in the world.
There are many reasons why it is valuable for you to learn Linux. If you are looking for new opportunities in IT, Linux skills are in high demand. For example, if you are developing applications, it's likely your application or its runtime is hosted on Linux. If you're working in the cloud, your cloud instances may be based on Linux, and your private or public cloud environment is also probably based on Linux. If you're working with mobile applications or the Internet of Things, it is also likely that the operating system of your device is based on Linux. And, if you use Windows, you'll need to interoperate with Linux.
After completing this course, you will have a solid introduction to working with Linux from the command line, using Red Hat Enterprise Linux 7 as a model. In applying these skills, you will be able to perform fundamental operational tasks, whether your Linux machine is on your desk or on a remote system across the Internet.",NC
HTML5 Coding Essentials and Best Practices,"HTML5 is the standard language of the Web, developed by W3C. For application developers and industry, HTML5 represents a set of features that people will be able to rely on for years to come. HTML5 is supported on a wide variety of devices, lowering the cost of creating rich applications to reach users everywhere.
Whatever mobile phones, connected objects, game consoles, automobile dashboards, and devices that haven’t even been considered yet, HTML5 helps write once and deploy anywhere!
In this course, you will learn all the new HTML5 features to help create great Web sites and applications in a simplified but powerful way. HTML5 provides native support for video and audio without plug-ins, provides support for offline applications, for games with smooth interactive animations, and much more.",HCI
Demystifying Biomedical Big Data: A User’s Guide,"With the continuous generation of massive amounts of biomedical data on a daily basis, whether from research laboratories or clinical labs, we need to improve our ability to understand and analyze the data in order to take full advantage of its power in scientific discoveries and patient care. For non-bioinformaticians, “handling” big data remains a daunting task. This course was designed to facilitate the understanding, analysis, and interpretation of biomedical big data to those in the biomedical field with limited or no significant experience in bioinformatics. The goal of this course is to “demystify” the process of analyzing biomedical big data through a series of lectures and online hands-on training sessions and demos. You will learn how to use publicly available online resources and tools for genomic, transcriptomic, and proteomic data analysis, as well as other analytic tools and online resources. This course is funded by a research grant from the US National Institutes of Health (NIH)-Big Data to Knowledge (BD2K) Initiative.",PD
Software Development Fundamentals,"Software developers are in high demand in the current job market, and computer programming is a prerequisite skill for success in this field.
Start your journey toward becoming a professional software developer by learning Java, one of the industry’s most commonly used programming languages.
This course, part of the CS Essentials for Software Development Professional Certificate program, will quickly cover Java syntax and keywords and then explore features of object-oriented programming including encapsulation, inheritance, and polymorphism. You will learn how to apply these concepts to programmatic problem solving by investigating class modeling techniques and relationships such as aggregation, realization, and generalization.
In addition to programming, you will learn about software testing techniques that help us find problems in our code, and you will use modern development environments and tools for tasks like debugging and unit testing. We will introduce Eclipse, the eclipse debugger and Junit (a unit testing framework).
After completing this course, you will be able to design, develop, and test large applications in Java and understand and apply core principles of professional software development.","SP
SDF
SE"
Programming for Data Science,"There is a rising demand for people with the skills to work with Big Data sets and this course can start you on your journey through our Big Data MicroMasters program towards a recognised credential in this highly competitive area.
Using practical activities and our innovative ProcessingJS Workspace application you will learn how digital technologies work and will develop your coding skills through engaging and collaborative assignments.
You will learn algorithm design as well as fundamental programming concepts such as data selection, iteration and functional decomposition, data abstraction and organisation. In addition to this you will learn how to perform simple data visualisations using ProcessingJS and embed your learning using problem-based assignments.
This course will test your knowledge and skills in solving small-scale data science problems working with real-world datasets and develop your understanding of big data in the world around you.","PD
SDF
AR
PL
SP"
Statistical Thinking for Data Science and Analytics,"This statistics and data analysis course will pave the statistical foundation for our discussion on data science.
You will learn how data scientists exercise statistical thinking in designing data collection, derive insights from visualizing data, obtain supporting evidence for data-based decisions and construct models for predicting future trends from data.",IS
Machine Learning for Data Science and Analytics,"Machine Learning is a growing field that is used when searching the web, placing ads, credit scoring, stock trading and for many other applications.
This data science course is an introduction to machine learning and algorithms. You will develop a basic understanding of the principles of machine learning and derive practical solutions using predictive analytics. We will also examine why algorithms play an essential role in Big Data analysis.","IS
AL
PL
IAS"
Enabling Technologies for Data Science and Analytics: The Internet of Things,"The Internet of Things is rapidly growing. It is predicted that more than 25 billion devices will be connected by 2020.
In this data science course, you will learn about the major components of the Internet of Things and how data is acquired from sensors. You will also examine ways of analyzing event data, sentiment analysis, facial recognition software and how data generated from devices can be used to make decisions.",IS
Introduction to Cloud Foundry and Cloud Native Software Architecture,"Does your team use Cloud Foundry to deploy applications? Or would you like to use Cloud Foundry, but haven't had time to learn the lingo? Then this course is just what you need! Cloud Foundry makes it simple for developers to deliver business value more quickly, without wasting time getting their app to the cloud -- it's already there.
This course is an introduction to Cloud Foundry, including distributions available to end users, an overview of the platform's components, and what it means to be Cloud Foundry certified. The course also includes technical instructions on how to use the command line interface, how applications are deployed, what services are within the context of the system and basic debugging practices.
Finally, the workshop will take you on a tour through what it means to build cloud-native applications architecturally and ideologically. In doing so, we'll review the 12-factor method of composing modern distributed web systems.",SP
How to Code: Simple Data,"This programming course takes a unique approach, as it focuses on learning a systematic programming method rather than a programming language. This practical approach will help you channel your creativity so that you can program well in any language.  
This course, part of the Software Development MicroMasters Program, presents a core design method with a focus on numbers, strings, images and lists.
You will learn techniques to:
Develop program requirements
Produce programs with consistent structure that are easy to modify later
Make your programs more reliable by building tests as an integral part of the programming process.
This course concludes with the design of a simple interactive game.
Learners who enroll in the Verified track will receive staff grading for the course project and increased interaction with the instructor and staff.
Learner Testimonial 
""I have taken and completed tens of MOOCs on programming and computer science, I have even been and I am currently a TA in some of these courses. Among them are a few that deserve without hesitation the highest rate. But if I had to choose only one at the top of them it would be these two courses on systematic program design."" - edX Learner",PL
Robotics: Fundamentals,"How do you create robots that operate well in the real world? Learn the key math concepts and tools used to design robots that excel in navigating our complex, unstructured world in environments such as aerospace, automotive, manufacturing and healthcare.
In this course, part of the Robotics MicroMasters program, you will learn how to apply concepts from linear algebra, geometry and group theory and the tools to configure and control the motion of manipulators and mobile robots.
You will also learn how to use MATLAB, the standard robotics programming environment and learn step by step how to use this mathematical tool to write functions, calculate vectors and produce visualizations. You will get hands on experience applying your knowledge to projects using various simulations in MATLAB.","AL
AR
IAS
IM
NC
SP"
Introduction to Linux,"Develop a good working knowledge of Linux using both the graphical interface and command line, covering the major Linux distribution families.
Linux powers 94% of the world’s supercomputers, most of the servers powering the Internet, the majority of financial trades worldwide and a billion Android devices. In short, Linux is everywhere. It appears in many different architectures, from mainframes to server to desktop to mobile and on a staggeringly wide variety of hardware.
Moreover, 97 percent of hiring managers reported that they will prioritize hiring Linux talent relative to other skills areas in the next six months, and 44 percent of hiring managers saying they’re more likely to hire a candidate with Linux certification.
This course explores the various tools and techniques commonly used by Linux system administrators and end users to achieve their day-to-day work in a Linux environment. It is designed for experienced computer users who have limited or no previous exposure to Linux, whether they are working in an individual or Enterprise environment.
Upon completion of this training you should have a good working knowledge of Linux, from both a graphical and command line perspective, allowing you to easily navigate through any of the major Linux distributions. You will be able to continue your progress as either a user, system administrator or developer using the acquired skill set.
Join the 250,000+ students who are already enrolled in this course and start your Linux journey.",AR
MATLAB and Octave for Beginners,"Take an exciting crash course in MATLAB and Octave programming. Both languages allow users to experiment with advanced mathematical functions and produce exciting matrix visualizations.
In this hands-on, self-paced introductory course, students will learn step by step how to use these mathematical tools to write functions, calculate vectors and matrices and plot graphical representations of results. Explore ways to organize your work using scripts and functions to improve productivity.","NC
AL"
CS50's AP® Computer Science Principles,"This is CS50 AP, Harvard University's introduction to the intellectual enterprises of computer science and the art of programming for students in high school, which satisfies the College Board's new AP CS Principles curriculum framework.
An entry-level course taught by David J. Malan, CS50 AP teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, algorithms, data structures, encapsulation, resource management, security, software engineering, and web development. Languages include C, PHP, and JavaScript plus SQL, CSS, and HTML. Problem sets inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. As of Fall 2015, the on-campus version of CS50 was Harvard's largest course.
Students in high school may receive AP credit for this course provided their school approves the credit and administers the College Board's end-of-year exam. Students who earn a satisfactory score on 9 problem sets (i.e., programming assignments) and a final project are also eligible to receive a verified certificate from HarvardX.",SP
Circuits and Electronics 1: Basic Circuit Analysis,"Want to learn about circuits and electronics, but unsure where to begin? Wondering how to make computers run faster or your mobile phone battery last longer? This free circuit course taught by edX CEO and MIT Professor Anant Agarwal and colleagues is for you.
This is the first of three online Circuits & Electronics courses offered by Professor Anant Agarwal and colleagues at MIT, and is taken by all MIT Electrical Engineering and Computer Science (EECS) majors.
Topics covered include: resistive elements and networks; circuit analysis methods including KVL, KCL and the node method; independent and dependent sources; linearity, superposition, Thevenin & Norton methods; digital abstraction, combinational gates; and MOSFET switches and small signal analysis. Design and lab exercises are also significant components of the course.
Weekly coursework includes interactive video sequences, readings from the textbook, homework, online laboratories, and optional tutorials. The course will also have a final exam. 
This is a self-paced course, so there are no weekly deadlines. However, all assignments are due by June 15, 2019, when the course will close.
Student Testimonials
“Brilliant course! It's definitely the best introduction to electronics in Universe! Interesting material, clean explanations, well prepared quizzes, challenging homeworks and fun labs.” - Ilya
“6.002x will be a classic in the field of online learning. It combines Prof. Agarwal's enthusiasm for electronics and education. The online circuit design program works very well. The material is difficult. I took the knowledge from the class and built an electronic cat feeder.” - Stan.",AR
Introduction to Cloud Infrastructure Technologies,"New to the cloud and not sure where to begin? This introductory course, taught by cloud experts from The Linux Foundation, will help you grasp the basics of cloud computing and comprehend the terminology, tools and technologies associated with today’s top cloud platforms.
Understanding cloud technologies tops the list of most important skills for any developer, system administrator or network computing professional seeking a lucrative career in technology. However, getting started and researching all things cloud can be complicated and time consuming. This course maps out the entire cloud landscape and explains how various tools and platforms fit together.
Experts from The Linux Foundation can help guide you step-by-step as you begin to navigate the cloud. They host some of the world's leading open source cloud projects and provide training and networking opportunities to educate a talent pool to support those projects, and is a respected, neutral, non-profit education source to provide training for anyone learning how to build and manage cloud infrastructure.
This course gives you a primer on cloud computing and the use of open source software to maximize development and operations. Topics covered include:
Next-generation cloud technologies: Learn about cloud and container technologies like Docker, CoreOS, Cloud Foundry, Kubernetes and OpenStack, as well as the tooling around them.
Scalable and performant compute, storage and network solutions: Get an overview of software defined storage and software defined networking solutions.
Solutions employed by companies to meet their business demands: Study up on DevOps and continuous integration practices, as well as the deployment tools available to architects to meet and exceed their business goals.
No previous cloud experience is required for this course. ""Introduction to Cloud Infrastructure Technologies"" gives you the knowledge and tools to make smart decisions about which cloud services and applications to use depending on your needs.","NC
OS
PL
PD
SDF"
Mobile Computing with App Inventor – CS Principles,"Learn to use the open development tool, App Inventor, to program on Android devices. You will learn how to design and build mobile apps -- apps that are aware of their location, send and receive text messages, and give advice and directions. The only limit on the types of apps you will learn to build is your own imagination!
However, computer science is not just about coding and building apps. We will also learn some of the fundamental principles of computer science. We'll learn about the potential and the limitations of computing and coding. We'll learn how the Internet works and about the positive and negative aspects of computing in today's society, and much more!
For these broader computing concepts we will work within an emerging curricular framework -- the Computer Science Principles (CSP). The CSP framework is being developed by leading computer science educators from around the country under the auspices of the College Board and with funding support of the National Science Foundation.
In addition to programming and CSP the course is project-based and emphasizes writing, communication, and creativity. Multiple-choice questions, in the style that students can expect to encounter on the AP exam, will also be a key component of this course.","AR
IAS
PL
SP"
4G Network Essentials,"4G is the cutting-edge network technology that links millions of smartphones to the internet. But how does it actually work?
Ideal for network engineers, sales engineers, application developers, and many other telecoms pros, this course will help you to understand the technology behind the apps and devices we use every day.
You&rsquo;ll get a solid overview of LTE/EPC (Long Term Evolution / Evolved Packet Core) 4G networks, how they work, how the network architecture is designed, and which protocols are used.
First, you&rsquo;ll gain exposure to the global architecture of the network, how the radio interface works, and how security is guaranteed.
Then you&rsquo;ll dive into the operational side. What is a bearer? How is it quickly configured and released? How does 4G handle millions of terminals that are on the move all the time?
Over the next few years, the advent of 5G will see over 20 billion mobile terminals go online.
By mastering the key concepts of 4G, you can be ready for the next chapter in mobile networking&mdash;and the jobs of the future.
Whether you&rsquo;re a graduate student or already in a professional role, targeting a career move or just building your skills, you&rsquo;ll gain plenty of detailed, practical knowledge that you can put into practice immediately.
This course is supported by the Patrick and Lina Drahi Foundation.",NC
A System View of Communications: From Signals to Packets (Part 2),"Have you ever wondered how information is transmitted using your mobile phone or a WiFi hotspot? This introductory course seeks to enable you to understand the basic engineering tools used and tradeoffs encountered in the design of these communication systems.
This course is divided into three parts. In Part 1, we examine the point-to-point link, which communicates information from a single transmitter to a single receiver. Part 2 examines how multiple transmitters can share the same physical channel. Part 3 discusses how information can be transmitted reliably from one station to another over a network that connects multiple stations. Online interactive exercises are included to help build your intuition.
This course was inspired by and built upon the course 6.02 Digital Communication Systems developed at MIT, which Prof Bertram Shi worked on during his sabbatical in 2009.",NC
AP Computer Science A: Java Programming Polymorphism and Advanced Data Structures,"This computer science course covers advanced OOP strategies, including polymorphism, abstract classes, super keyword, exceptions, generics, sorting and searching algorithms.
This course is for anyone interested in taking a first-level computer-programming course, particularly those who attend a school that does not provide a similar class.
We are looking forward to helping you explore this exciting new world!","PD
PL
SDF"
Liberating Programming: System Development for Everyone,"The world around us is immersed in technology. This technology is ultimately driven by programming and is governed by its laws. As a result, high-level knowledge of means for programming ‒ past, present, and most importantly, future ‒ has become of crucial interest to many.
This course is designed to teach almost anyone about the essence of programming. You'll learn about diverse types of existing programming paradigms, about how programming has evolved over the years, and, significantly, about what lies ahead in the future.
In the main part of the course, we will present some visual, diagrammatic programming languages for reactive systems, as well as some of the more recent, playful, and intuitive approaches to programming.
We aim to help people interested in technology, as well as budding computer science students, to better understand the various approaches to programming that increasingly shape our lives.",PD
Introduction to the Internet of Things (IoT),"The Internet of Things (IoT) is expanding at a rapid rate, and it is becoming increasingly important for professionals to understand what it is, how it works, and how to harness its power to improve business. This introductory course will enable learners to leverage their business and/or technical knowledge across IoT-related functions in the workplace.
In the course, we will examine the concept of IoT. We will look at the ‘things’ that make up the Internet of Things, including how those components are connected together, how they communicate, and how they value add to the data generated. We will also examine cybersecurity and privacy issues, and highlight how IoT can optimize processes and improve efficiencies in your business.",IAS
Industry 4.0: How to Revolutionize your Business,"We have witnessed the power of mechanization in the early nineteen century, automation in the seventies, information and the internet in the last decades. But now, the adaptation of connected intelligence into the business and social fabrics is advancing at an astonishing speed, which will completely change the way we conduct business.  
In this course, we will discuss changes/predictions we forsee in the future, such as:
The credit card business will fade out gradually
All currency will be bitcoin
Whereas traditional internet gives rise to digital divide, the mobile internet will narrow the wealth gap
Most e-business models will become obsolete, leaving customer to factory (C2F)
No more talents to hide except partners
Mobile phones will be outdated and replaced by augmented virtual reality (AVR)
Big corporates will transform to big platforms
The birth of real Internet economics
The death of global manufacturing to networked and dispersed manufacturing
This course will explain how these changes will be brought about by the extensive use of digital intelligence, which will be available on mobile, internet, and pervasive computing as homes, offices and factories become a well knitted cyber-physical system.  
Enabling tools such as Cloud Computing, Big Data, Internet of Things and Cyber Physical Systems are introduced. Automation, intelligence and collaborations are also discussed with particular reference to smart manufacturing, smart products/services and smart cities, and their opportunities and challenges.  
This is not a technical course; instead part of the focus is on organizational readiness, skills gaps and competencies for knowledge workers to fully leverage the power of Industry 4.0.   
Suitable for learners from all disciplines and interested in the mega changes to our society.",IAS
Make Your Own App,"Using motivational videos, introductory sections, an interactive code editor, challenges and peer review throughout this course you will develop a working chat app. While doing so you can earn credits and points, receive badges and fulfill achievements in order to be able to see and compare your progress with other students. Starting with simple HTML content and ordinary CSS rules you will gradually improve your app and add increasing interaction within every week using JavaScript and JQuery. After completing this course you’ll be able to tackle almost any idea you might have and build an app that fulfills your needs.",SP
Agile Development Using Ruby on Rails - Advanced,"Part 2 of the UC Berkeley Agile Development Using Ruby on Rails XSeries Program will teach you to use JavaScript to enhance applications and create more sophisticated apps by adding relationships between models within the Ruby on Rails framework. You will also learn about what happens after the apps are deployed to real users, including how to monitor performance, identify and fix common performance problems, and avoid compromising customer data. Finally, learners will see how to apply Agile techniques to enhance and refactor legacy code and practice app deployment to real users to monitor performance, identify and fix common performance problems, and avoid compromising customer data. 
Other topics covered in this software engineering course include:
How to form, organize and manage small programming teams
Introduction to design patterns: what they are and how to recognize opportunities to apply them
Using Rails for more advanced features like third-party authentication and elegantly expressing design patterns that arise frequently in SaaS
There will be four homework assignments: two programming assignments, an open source assignment and one assignment about operations/deployment. There will also be several short quizzes. The videos and homework assignments used in this offering of the course were revised in October 2016.",SE
Machine Learning Fundamentals,"Do you want to build systems that learn from experience? Or exploit data to create simple predictive models of the world?  
In this course, part of the Data Science MicroMasters program, you will learn a variety of supervised and unsupervised learning algorithms, and the theory behind those algorithms.  
Using real-world case studies, you will learn how to classify images, identify salient topics in a corpus of documents, partition people according to personality profiles, and automatically capture the semantic structure of words and use it to categorize documents.  
Armed with the knowledge from this course, you will be able to analyze many different types of data and to build descriptive and predictive models.  
All programming examples and assignments will be in Python, using Jupyter notebooks.",IS
Artificial Intelligence (AI),"What do self-driving cars, face recognition, web search, industrial robots, missile guidance, and tumor detection have in common?
They are all complex real world problems being solved with applications of intelligence (AI).
This course will provide a broad understanding of the basic techniques for building intelligent computer systems and an understanding of how AI is applied to problems.
You will learn about the history of AI, intelligent agents, state-space problem representations, uninformed and heuristic search, game playing, logical agents, and constraint satisfaction problems.
Hands on experience will be gained by building a basic search agent. Adversarial search will be explored through the creation of a game and an introduction to machine learning includes work on linear regression.",IS
Machine Learning,"Machine Learning is the basis for the most exciting careers in data analysis today. You’ll learn the models and methods and apply them to real world situations ranging from identifying trending news topics, to building recommendation engines, ranking sports teams and plotting the path of movie zombies.
Major perspectives covered include:
probabilistic versus non-probabilistic modeling
supervised versus unsupervised learning
Topics include: classification and regression, clustering methods, sequential models, matrix factorization, topic modeling and model selection.
Methods include: linear and logistic regression, support vector machines, tree classifiers, boosting, maximum likelihood and MAP inference, EM algorithm, hidden Markov models, Kalman filters, k-means, Gaussian mixture models, among others.
In the first half of the course we will cover supervised learning techniques for regression and classification. In this framework, we possess an output or response that we wish to predict based on a set of inputs. We will discuss several fundamental methods for performing this task and algorithms for their optimization. Our approach will be more practically motivated, meaning we will fully develop a mathematical understanding of the respective algorithms, but we will only briefly touch on abstract learning theory.
In the second half of the course we shift to unsupervised learning techniques. In these problems the end goal less clear-cut than predicting an output based on a corresponding input. We will cover three fundamental problems of unsupervised learning: data clustering, matrix factorization, and sequential models for order-dependent data. Some applications of these models include object recommendation and topic modeling.",AL
Robotics,"We think of Robotics as the science of building devices that physically interact with their environment. The most useful robots do it precisely, powerfully, repeatedly, tirelessly, fast, or some combinations of these. The most interesting robots maybe even do it intelligently. This course will cover the fundamentals of robotics, focusing on both the mind and the body.
We will learn about two core robot classes: kinematic chains (robot arms) and mobile bases. For both robot types, we will introduce methods to reason about 3-dimensional space and relationships between coordinate frames. For robot arms, we will use these to model the task of delivering a payload to a specified location. For mobile robots, we will introduce concepts for autonomous navigation in the presence of obstacles.
Class projects will make use of ROS - the open-source Robot Operating System (www.ros.org) widely used in both research and industry. Computer requirements for working on the projects will include a computer set up with Ubuntu Linux and high bandwidth internet access for downloading and installing ROS packages.",IS
Animation and CGI Motion,"How do you create realistic animations? How do you predict the motion of materials? It’s key to the success of animated films to ensure (was insure) audiences believe in characters.
This course will show you how to create lifelike animations focusing on the technical aspects of CGI animation and also give you a glimpse into how studios approach the art of physically-based animation.
You will learn the fundamental concepts of physical simulation, including:
integration of ordinary differential equations such as those needed to predict the motion of a dress in the wind.
formulation of models for physical phenomena such as crumpling sheet metal and flowing water.
treatment of discontinuities such as fractures and collisions.
simulation of liquids and solids in both Lagrangian and Eulerian coordinates.
artistic control of physically-based animations.
These concepts will be put into practice in the programming assignments spanning:
Discretizing and integrating Newton’s equations of motion
Constrained Lagrangian Mechanics
Collisions, contact, and friction: detection and response
Continuum mechanics
Finite elements
Rigid body simulation
Thin shell and cloth simulation
Elastic rod and hair simulation
Fluid simulation",AR
Powershell Security Best Practices,"This course that will teach students how to securely accomplish administrative tasks using Windows PowerShell 5.x. Students will review PowerShell fundamentals, learn Powershell operational security, and configuration management. 
Students will also learn how to use administration tools such as Desired State Configuration (DSC) and Just Enough Administration (JEA) to configure and secure servers. This course also looks at new threats, new exploits, the ever-changing attack surface, and how to remediate them.
Release schedule:
This course will release model using a rolling release model. There are 5 modules, graded lab, and final exam,&nbsp; in this course, M00 and M01, M02, M03 are released when the course is live, other modules will be released according to the following schedule:


1/12/2018 &ndash; M01, M02, M03
1/19/2018 &ndash; M04, Final Exam, Labs",SP
Machine Learning,"Machine learning is a type of artificial intelligence (AI) that provides computers with the ability to learn without being explicitly programmed. This&nbsp;area is also concerned with issues both theoretical and practical. 
In this course, we will present algorithms and approaches in such a way that grounds them in larger systems as you learn about a variety of topics, including: 


statistical supervised and unsupervised learning methods
randomized search algorithms
Bayesian learning methods
reinforcement learning

The course also covers theoretical concepts such as inductive bias, the PAC and Mistake‐bound learning frameworks, minimum description length principle, and Ockham's Razor. In order to ground these methods the course includes some programming and involvement in a number of projects.
&nbsp;
By the end of this course, you&nbsp;should&nbsp;have a strong understanding of machine learning so&nbsp;that you can pursue any further and more advanced learning.&nbsp;
This is a three-credit course.",IS
The Beauty and Joy of Computing - AP® CS Principles Part 2,"Discover the big ideas and thinking practices in computer science plus learn how to code using one of the friendliest programming languages, Snap! (based on Scratch).
Computing has profoundly changed the world, opening up wonderful new ways for people to connect, design, research, play, create, and express themselves. However, just using a computer is only a small part of the picture. The real transformative and empowering experience comes when one learns how to program the computer, to translate ideas into code.
This course teaches students how to do exactly that, using Snap! (based on Scratch), one of the friendliest programming languages ever invented. It's purely graphical, which means programming involves simply dragging blocks around, and building bigger blocks out of smaller blocks. But this course is far more than just learning to program. We focus on seven big ideas (creativity, abstraction, data and information, algorithms, programming, the Internet, and global impact), and six computational thinking practices (connecting computing, creating computational artifacts, abstracting, analyzing problems and artifacts, communicating, and collaborating). Throughout the course, relevance is emphasized: relevance to the student and to society.
Topics include:
Data and Information
Complexity Theory
Recursion, Lambda and Higher Order Functions
Artificial Intelligence
Human Computer Interaction
Lab-based Topics: Algorithms and Data, Trees and Fractals, Recursion and Higher Order Functions
This fun, introductory course is not just for computer science majors, it’s for everyone… join us!","AL
PL
GV
HCI
PD
SDF"
Data Structures and Algorithm Design Part I,"Data structures play a central role in computer science and are the cornerstones of efficient algorithms. Knowledge in this area has been at the kernel of related curriculums. This course aims at exploring the principles and methods in the design and implementation of various data structures and providing students with main tools and skills for algorithm design and performance analysis. Topics covered by this course range from fundamental data structures to recent research results. ""Data Structures and Algorithm Design Part I"" is an introductory course focusing on basic data structures, including vectors, lists, stacks, queues, binary trees, and graphs. They are important in programming practice, as well as fundamental to our advanced course: ""Part II.""","SDF
AL
AR
IAS
GV
PL
SP"
Data Structures and Algorithm Design Part II,"Data structures play a central role in computer science and are the cornerstones of efficient algorithms. Knowledge in this area has been at the kernel of related curriculums. This course aims at exploring the principles and methods in the design and implementation of various data structures and providing students with main tools and skills for algorithm design and performance analysis. Topics covered by this course range from fundamental data structures to recent research results. ""Data Structures and Algorithm Design Part II"" is an advanced course extending the materials in ""Part I"". We will cover more powerful and sophisticated data structures & algorithms, including: splay trees, B-trees, red-black trees, hash tables, priority queues, strings and sorting.","SDF
AL
GV
HCI
IAS
DS
PD
PL
SF
SP"
Combinatorial Mathematics ,"Our lives are full of combinations. Combinatorial mathematics is just the science to deal with combinations of discrete items. As an ancient field, the history of combinatorial mathematics can be traced back over 4000 years to the age of the Great Yu in ancient China. Today, combinatorial mathematics is regarded as the basis of computer science since the algorithms in programming heavily rely on the analysis of the discrete elements.
Instead of relying on the traditional mathematical ""theorem - proof"" format, this course demonstrates various principles in an intuitive manner with ancient stories, the scenes of movies and even a magic show. What you’ll learn:
The counting principles based on the basic operations “+”, “-”, “*”, “/”; 
Generating functions
Recurrent number serials such as Fibonacci number, Catalan number, and more
Pigeon hole principles
Inclusion and exclusion principles
Polya counting based on group theory
This course is based on a highly regarded on-campus Tsinghua class called Combinatorics, and is ideal for students who are interested in mathematics or computer science. Enroll today and learn the mathematical theory needed to solve the real-world problems!
我们生活的方方面面都充满着组合，而组合数学正是研究离散事物的学科。作为一个具有悠久历史的学科，组合数学的发展可以追溯到4000年前的大禹时代。而如今组合数学随着计算机学科的发展开启了新的篇章，由于程序算法的分析和实现正是基于对离散对象的分析，因此组合数学已经发展成为计算机学科的基础理论。
而本课程一改以往数学教学的“定理-证明”模式，引领大家由浅入深地逐步探索知识的源泉，这里有古代故事，有电影片段，甚至用魔术来演绎数学概念。而这些形式就是为了引领大家去感受数学的美。具体的教学内容包括：
基于四则运算的计数法则；
母函数；
递推序列，如斐波那契数，卡特兰数等；
鸽巢原理；
容斥原理；
基于群论的波利亚定理。
本课程的内容和大纲主要基于清华大学精品课《组合数学》，通过本课程的学习，学习者可以深入了解计数的抽象理论和具体方法，从而深入理解组合数学对计算机理论发展的推动作用。。
FAQ
I don’t speak Chinese, can I learn the course?
All the materials are in English. Though the original video was recorded in Chinese, the course team record the corresponding dubbing in English. All the audio and subtitles are processed to fit the English dubbing as much as possible, so that you can enjoy this wonderful course in English.
What are the textbook and the reference books for this course?
There is no textbook requirement for this course. The handouts distributed every week are critical. The following books are references
Richard A. Brualdi; Introductory Combinatorics (5th edition), Pearson, 2009
J.H.van Lint and R.M. Wilson; A course in Combinatorics, Cambridge University Press, 2001
卢开澄,《组合数学》第四版,清华大学出版社
What is the grading breakdown?
70% quizzes and exercises
30% final exam
How can I get the certificate?
If your final score is no less than 60.
Do I need to know how to program to learn this class?
Not necessary. This course is a math course which is based on fundamental theory. But to help the students to have the intuitive feel of the effects of the theory, we also provide a code lib that you can compare different implementations by running different programs.",CN
Computational Geometry,"Geometry can be traced back to ancient Greece, but Computational Geometry evolved less than 40 years as a branch of computer science. The Computational Geometry taught in this course is derived from classical discrete/combinatorial geometry and modern computer science.
Computational Geometry first appeared on the horizon when M. I. Shamos presented his Ph.D. dissertation in 1978. Since then, this phrase has been used to refer to algorithmic study on discrete and combinatorial geometric structures and can also be regarded as the geometric version of Algorithm Design and Analysis. Computational Geometry is now considered the basis of robotics, computer aided design and manufacturing (CAM and CID), and geographic information systems (GIS).
众所周知，几何学的历史至少可追述至古希腊时代，但不同人对“计算几何”的理解却不尽相同。本课程讨论的计算几何，源自于古典离散/组合几何学与现代计算机科学的结合。M. I. Shamos在1978年完成的博士论文，标志着这个学科分支的诞生。从那时起，“计算几何”往往特指针对离散与组合几何结构的算法研究。简而言之，她也可认为是算法设计与分析的几何版。  
本课程的教学目标有三：  
其一、对计算几何理论的总体认识，在日后的研究工作中，这种认识为你提供几何的视角
其次、对几何问题求解范式及策略的全面领会，包括递增式构造、平面扫描、分而治之、分层化、近似以及随机化等
最后、对基本几何结构及其算法的透彻掌握，包括凸包、多边形细分、Voronoi图、Delaunay三角剖分，以及几何求交、点定位、范围查找、截窗查询等",SP
Statistical Analysis in Bioinformatics,"Improvements in modern biology have led to a rapid increase in sensitivity and measurability in experiments and have reached the point where it is often impossible for a scientist alone to sort through the large volume of data that is collected from just one experiment. 
For example, individual data points collected from one gene expression study can easily number in the hundreds of thousands. These types of data sets are often referred to as ‘biological big data’ and require bioinformaticians to use statistical tools to gain meaningful information from them.
In this course, part of the Bioinformatics MicroMasters program, you will learn about the R language and environment and how to use it to perform statistical analyses on biological big datasets.",IS
Data Structures Fundamentals,"A good algorithm usually comes together with a set of good data structures that allow the algorithm to manipulate the data efficiently. In this course, part of the Algorithms and Data Structures MicroMasters program, we consider the common data structures that are used in various computational problems. You will learn how these data structures are implemented in different programming languages and will practice implementing them in our programming assignments. This will help you to understand what is going on inside a particular built-in implementation of a data structure and what to expect from it. You will also learn typical use cases for these data structures.
A few examples of questions that we are going to cover in this course are:
What is a good strategy of resizing a dynamic array?
How priority queues are implemented in C++, Java, and Python?
How to implement a hash table so that the amortized running time of all operations is O(1) on average?
What are good strategies to keep a binary tree balanced?
We look forward to seeing you in this course! We know it will make you a better programmer.","AL
DS"
Microsoft Professional Capstone : DevOps,"This course is part of the Microsoft Professional Program in DevOps.
The DevOps capstone project will provide a hands on lab environment which will validate the skills and knowledge you have learned by taking the DevOps course series.
You will be provided with a series of tasks based around core subject areas covered in the Microsoft Professional Program, that you must build out and complete.&nbsp;
The tasks will cover areas such as automating infrastructure deployment using Azure Resource Manager (ARM) Templates, configuring and implementing continuous integration and continuous deployment scenarios in Visual Studio Team Services (VSTS), as well as implementing testing and application monitoring approaches and solutions.
Successful completion of the tasks will result in a pass grade in the validated labs.",SP
Delivering a Relational Data Warehouse,"This computer science course from Microsoft provides learners with the knowledge and skills required to design, implement, and load a relational data warehouse. In this four week course, you&rsquo;ll learn how to analyze business requirements, design dimension and fact tables, index and partition the data for performance, and create ETL solutions for ongoing loading of the warehouse.
This course is taught with short-form lectures, demonstrations, and interviews with industry experts. Quizzes and hands-on labs, using Microsoft SQL Server 2016 and Azure SQL Database, will help to reinforce your knowledge, practice skills, and solve problems.
Note: To complete the hands-on elements in this course, you will require an Azure subscription and a Windows, Linux, or Mac OS X client computer. You can sign up for a free Azure trial subscription (a valid credit card is required for verification, but you will not be charged for Azure services). Note that the free trial is not available in all regions. It is possible to complete the course and earn a certificate without completing the hands-on practices.",IS
Managing SQL Server Operations,"SQL Server database administrators know how important it is to automate routine administrative tasks and systems.
Learn best practices in this course, part of the SQL Server Database Administration series.
You&rsquo;ll explore ways to monitor performance, errors, and events, and get helpful details on server maintenance and the tasks involved.
Plus, you&rsquo;ll engage these topics on multiple platforms, including SQL Server 2016, SQL Server v.Next on Linux, and Azure SQL Databases.
This computer science course introduces features and technologies for managing database operations. Topics include: Automating SQL Server Management, Monitoring SQL Server, and SQL","AL
SP
PL
SE"
Introduction to Data Modeling,"The role of the data modeler has become even more critical to the ongoing lifecycle of development and maintenance, especially in this age of digital transformation. Analysts, developers, DBAs, and BI professionals need to develop their skills in analyzing and modeling data. Whether working with new or legacy data, you must define rules for quality, retention, and protection. And you need a good foundation of data and data design concepts before you begin sourcing, preparing, and manipulating data.&nbsp;&nbsp;&nbsp;
&nbsp;
In this introductory course, learn how logical and physical data modeling can give you a better understanding of your organization's data, business rules, and information architecture decisions. Examine how data models are critical to your data security, privacy, and compliance posture. And get hands-on with real-world data&mdash;analyze it, implement business requirements, develop data models, and forward and reverse-engineer SQL Server databases. 
Note: To complete the hands-on requirements, you&rsquo;ll work with Office 365, Visual Studio, and Azure SQL Database. Free or limited-time trials are available for these products. You will require an Azure subscription. You can sign up for a free Azure trial subscription (a valid credit card is required for verification, but you will not be charged for Azure services). Note that the free trial is not available in all regions. It is possible to complete the course and earn a certificate without completing the hands-on practices.",IM
Developing AI Vision Apps Using Microsoft Cognitive Services,"Microsoft Cognitive Services is a set of cloud-based intelligence services and APIs for building richer, smarter, and more sophisticated applications. The Vision APIs available in Microsoft Cognitive Services offer many ready-to-use and easy-to-consume features that help you use Artificial Intelligence (AI) to solve your business problems. In this practical course, take an in-depth look at Vision APIs, work through hands-on exercises to learn how to piece them together, and find out how to put them to work in your organization. 
Start with an overview of Microsoft Cognitive Services, and then take a look at the Computer Vision API, which gathers actionable information in images. Learn about optical character recognition (OCR) and image manipulation. Explore the Face API to detect, identify, analyze, organize, and tag photos and to create metadata around them. Get the details on the Emotion API, which helps personalize user experience with emotion recognition. And dig into the Custom Vision API, which enables you to customize computer vision models as required for your own specific use cases.
Leverage the latest best practices and Fluent Design principles, as you learn how to create Windows 10 Universal Windows Platform applications that can run on multiple devices, including desktops, tablets, phones, HoloLens, and Xbox consoles. With a prerequisite of proficiency in a C-based programming language like C, C#, C++, or Java, follow along with the instructor as you work through the labs to replicate and modify code in the examples.
Wrap up the course by creating an application that analyzes and tags images found in Twitter timelines for the presence of human faces and their recognized emotion, based on information returned from the Computer Vision, Face, Emotion, and Custom Vision APIs. The app can optionally even attempt to locate the source and physical location of people, places, or organizations referenced in the content. From a general overview to specific use cases and hands-on practice, this course gives you what you need to create AI apps with off-the-shelf features in Cognitive Services Vision APIs.",AR
Introduction to Kubernetes,"Is your team beginning to use Kubernetes for container orchestration? Do you need guidelines on how to start transforming your organization with Kubernetes and cloud native patterns? Would you like to simplify software container orchestration and find a way to grow your use of Kubernetes without adding infrastructure complexity? Then this is the course for you!
In this course, we'll discuss some of Kubernetes' basic concepts and talk about the architecture of the system, the problems it solves, and the model that it uses to handle containerized deployments and scaling.
This course offers an introduction to Kubernetes and includes technical instructions on how to deploy a stand-alone and multi-tier application. You’ll learn about ConfigMaps and Secrets, and how to use Ingress.
Upon completion, developers will have a solid understanding of the origin, architecture and building blocks for Kubernetes, and will be able to begin testing the new cloud native pattern to begin the cloud native journey.","AR
IAS
CN
DS
PL
SDF
SE"
Introduction to OpenStack,"OpenStack is growing at an unprecedented rate, with over 65% of OpenStack deployments now in production - a number which continues to rise.
The demand for individuals who have experience managing this cloud platform is also accelerating. According to the Open Source Jobs Report from The Linux Foundation and Dice, 51% of hiring managers say experience with OpenStack and other cloud technologies are driving open source hiring decisions. Now is the time to build an exciting and rewarding career managing OpenStack clouds.
This introductory course is taught by cloud experts from The Linux Foundation, which also delivers the Certified OpenStack Administrator (COA) exam. As host to some of the world's leading open source cloud projects, The Linux Foundation provides training and networking opportunities to help you advance your career.
Take this course to learn:
The origins of OpenStack: Where does it come from and how can you contribute as a developer to the project?
How to deploy OpenStack: Setup your own lab environment and deploy OpenStack on Ubuntu and CentOS with DevStack and Packstack, respectively.
How to deploy a virtual machine from Horizon: Get the steps and components that lead to a working and accessible virtual machine.
An introduction to managing OpenStack from the command line.
Scaling out your OpenStack cloud by adding SDN, object storage, compute nodes, high availability, and more.
This course is perfect for IT professionals seeking a high-level overview of OpenStack, and who want to find out if OpenStack is the right solution to meet the IT needs of their organization. This course also helps anyone who wants to set up a small scale OpenStack test environment to gain experience working with OpenStack.","NC
SDF
AL
OS"
The Software Architect Code: Building the Digital World,"Enhance your software skills and capabilities from a software innovation perspective. Do you have a career in the software industry? Are you a founder of a technical startup or even a business executive willing to know what kind of qualified job applicants do you need to recruit? Or are you a software developer who want to unveil your skills in order to build innovative software products with added value? Join us for this 8-week course to find out.
The world is becoming increasingly digital and software is everywhere. Every company is affected by software so having the knowledge to excel in this industry is essential. This course will introduce the skills necessary to create software, but at the same time it is crucial to understand that succeeding in a digital world requires much more than to be just a good software developer. We will explain how people from different professions can work together in order to create innovative software. We will also present the most important activities for generating effective software products and services to meet tomorrow&rsquo;s demands.",SE
Android: Introducción a la Programación,"Android es la plataforma libre desarrollada por Google, ampliamente utilizada en multitud de dispositivos como móviles, tabletas, TV, wearables e Internet de las cosas. Su expansión ha sido espectacular, siendo el S.O. más utilizado en la actualidad. Tras realizar este curso conocerás los fundamentos del desarrollo de aplicaciones en Android y podrás realizar sencillas aplicaciones, que incluyan los aspectos más importantes y novedosos de esta plataforma.  
A lo largo del curso se desarrolla una aplicación de ejemplo, ""Mis Lugares Favoritos"", que nos permitirá almacenar fotografía, posición geográfica, valoración y otros datos de los lugares que más nos gustan. El curso se introducen los siguientes aspectos: repaso de Java, visión general de Android, entorno de desarrollo (Android Studio), Interfaz de usuario (vistas, Layouts, recursos, barra de acciones, preferencias, RecyclerView, Fragments...), actividades, intenciones, seguridad, posicionamiento, mapas y bases de datos.",AR
Program a Server-Side Application using ASP.NET Core,"In this course, you will be guided through the development process of building a real-world web application using ASP.NET Core MVC.&nbsp; You'll gain practical, industry software engineering skills by getting hands-on practice with building a web application from start to finish, with a focus on back-end web development.&nbsp; 
This course is perfect for the student who has been exposed to back-end web development concepts and ASP.NET Core, but would like to gain practical experience putting these skills to work.&nbsp; You will be guided through the process of building CoreBB, a realistic bulletin board web application.&nbsp; By the end of this course, you should have a working web application that you can use to demonstrate your skills, or continue working on to further your learning.
Throughout the course, you'll gain practical experience with building and querying models, routing, a basic exposure to authentication and authorization, and more.&nbsp; You'll start by learning to analyze requirements and formulate the database design of the application.&nbsp; Next, you'll learn how to set up the basic web application, scaffold the business models, and set up the basic views and content.&nbsp; From there, you'll implement basic authentication and user management for the application.&nbsp; Finally, you'll learn how to implement CRUD operations for the remaining business models.&nbsp; At the end of the course, you will have a chance to demonstrate your knowledge by implementing an additional&nbsp;&nbsp; feature using what you've learned.",SP
IT Fundamentals for Business Professionals: Software development,"This course is one of the 5 courses of an introductory business information systems series, designed to introduce you to the amazing world of Information Technology.  
The series of courses is designed so that a professional in a field outside the information technologies (financial, administrative or managerial) acquires the basic knowledge in Information Technology to be able to interact more profitably with the computer and telecommunications specialists of your company or other corporations with which you are related, being able to specify requirements, evaluate workloads and monitor results in a much more effective way.  
The syllabus of the series is based on the CLEP Information Systems and Computer Applications exam.  
In this course, you learn the basics of software project management, reviewing basic project management concepts and roles, system development lifecycle, tools and methods used in software development, standards. used in the development and the design of the user interface of a computer system.  
By completing the series of 5 courses, you will be prepared to interact effectively with specialists in the Information Technology sector (and pass the CLEP ISCA exam if you wish).",SE
Fundamentos TIC para profesionales de negocios: Desarrollo de Software,"Este curso forma parte de una serie de 5 cursos de introducción al uso de sistemas de información en las empresas que te introducirá en el apasionante mundo de las TIC.  
La serie de cursos está pensada para que un profesional de un campo ajeno a las tecnologías de la información (financiero, administrativo o gerencial) adquiera los conocimientos básicos en Tecnologías de la Información necesarios para poder relacionarse de forma más provechosa con los especialistas en informática y telecomunicaciones de su empresa u otras corporaciones con las que tenga relación, siendo capaz de especificar requerimientos, evaluar cargas de trabajo y supervisar resultados de forma mucho más efectiva.  
En este curso aprenderás los conceptos básicos de la gestión de proyectos de desarrollo software, repasando los conceptos y roles básicos de gestión de proyectos y la gestión del ciclo de vida de desarrollo de sistemas, las herramientas y métodos utilizados en el desarrollo software, los estándares utilizados en el desarrollo y el diseño de la interfaz de usuario de un sistema informático.
Al completar la serie de 5 cursos, estarás preparado para relacionarte de forma eficaz con los especialistas del sector de las Tecnologías de la Información.",SP
Creating Programmatic SQL Database Objects,"Developing a database can include the creation of programmatic database objects. These objects encapsulate different types of functionality inside your database. In this computer science course, you'll learn about the types of programmatic database objects, how to create stored procedures, triggers, user-defined functions, and advanced topics including implementing managed code, and using the R programming language.
This course is part of the Microsoft SQL Database Development XSeries.",IS
Optimizing Performance for SQL Based Applications,"Maximizing performance of your SQL based applications ranges from optimization of your database, to various tools and techniques for monitoring and tuning your environments. In this course you&rsquo;ll learn techniques to run highly performant applications that use SQL Server.
This course is part of the Microsoft SQL Database Development XSeries.","AL
DS
NC
PL
SF
SP"
Implementing In-Memory SQL Database Objects,"The Microsoft SQL Server enables various techniques to improve the performance of a database. In this computer science course, you'll learn techniques for implementing In-Memory features including columnstore indexes, memory-optimized tables, and native stored procedures.
This course is part of the Microsoft SQL Database Development XSeries.",IM
Developing SQL Databases,"Database development is more than just creating a table with rows and columns. This computer science course introduces features and technologies for implementing a database. Topics include:
Logical table design
Ensuring Data Integrity
Indexes
Views
This courses focuses on the creation of database objects including views, stored procedures, columnstore indexes, and more.
Students considering this course should be familiar with fundamental database concepts.
This course is part of the Microsoft SQL Database Development XSeries.",IS
Essential Mathematics for Artificial Intelligence,"Want to study machine learning or artificial intelligence, but worried that your math skills may not be up to it? Do words like &ldquo;algebra&rsquo; and &ldquo;calculus&rdquo; fill you with dread? Has it been so long since you studied math at school that you&rsquo;ve forgotten much of what you learned in the first place?
You&rsquo;re not alone. machine learning and AI are built on mathematical principles like Calculus, Linear Algebra, Probability, Statistics, and Optimization; and many would-be AI practitioners find this daunting. This course is not designed to make you a mathematician. Rather, it aims to help you learn some essential foundational concepts and the notation used to express them. The course provides a hands-on approach to working with data and applying the techniques you&rsquo;ve learned.
This course is not a full math curriculum; it&rsquo;s not designed to replace school or college math education. Instead, it focuses on the key mathematical concepts that you&rsquo;ll encounter in studies of machine learning. It is designed to fill the gaps for students who missed these key concepts as part of their formal education, or who need to refresh their memories after a long break from studying math.",NC
Speech Recognition Systems,"Developing and understanding Automatic Speech Recognition (ASR) systems is an inter-disciplinary activity, taking expertise in linguistics, computer science, mathematics, and electrical engineering. 
When a human speaks a word,&nbsp;they cause&nbsp;their voice to make a time-varying pattern of sounds. These sounds are waves of pressure that propagate through the air. The sounds are captured by a sensor, such as a microphone or microphone array, and turned into a sequence of numbers representing the pressure change over time. The automatic speech recognition system converts this time-pressure signal into a time-frequency-energy signal. It has been trained on a curated set of labeled speech sounds, and labels the sounds it is presented with. These acoustic labels are combined with a model of word pronunciation and a model of word sequences, to create a textual representation of what was said.
Instead of exploring one part of this process deeply, this course is designed to give an overview of the components of a modern ASR system. In each lecture, we describe a component's purpose and general structure. In each lab, the student creates a functioning block of the system. At the end of the course, we will have built a speech recognition system almost entirely out of Python code.",SP
"Introduction to Python: Creating Scalable, Robust, Interactive Code","Ready to build on the experience you gained in the Introduction to Python: Absolute Beginner and Fundamentals courses? Continue to learn Python, step by step, as you create scalable, robust, and interactive code.
Explore the power of importing Python Libraries into your code. Create Python (.py) files, and work within the file system. Increase the power and precision of your statements through better understanding of objects, operators, and formatting. Plus, make code with robust error handling methods, package your Python files for running in other programs or from the terminal, and provide standard Docstring documentation.
When you finish the course, you&rsquo;ll have code that will handle errors, you&rsquo;ll have solid, standard documentation features, and you&rsquo;ll be able to use more robust data structures. Start using your skills to solve problems and build code that lasts. 
As with the previous introduction to Python programming courses,&nbsp;you will get&nbsp;lots of hands-on practice working with sample code in Jupyter Notebooks on Azure, which require only a browser and an Internet connection (and, in this course, use the Jupiter Terminal).",AR
Graph Algorithms,"If you have ever used a navigation service to find the optimal route and estimate time to destination, you've used algorithms on graphs.
Graphs arise in various real-world situations, as there are road networks, water and electricity supply networks, computer networks and, most recently, social networks! If you're looking for the fastest time to get to work, cheapest way to connect set of computers into a network or efficient algorithm to automatically find communities and opinion leaders in Facebook, you're going to work with graphs and algorithms on graphs.
In this course, part of the Algorithms and Data Structures MicroMasters program, you will learn what a graph is and its most important properties. You’ll learn several ways to traverse graphs and how you can do useful things while traversing the graph in some order. We will also talk about shortest paths algorithms. We will finish with minimum spanning trees, which are used to plan road, telephone and computer networks and also find applications in clustering and approximate algorithms.","AL
AR
GV
IAS
NC
SDF
SP"
MVC Application Design using .NET Core 2.0,"The goal of this course is to guide you through learning how to develop MVC pattern based web applications, using the latest tools and technologies from Microsoft - ASP.NET Core. 
After finishing this course, you should be able to build ASP.NET Core applications from scratch, use the MVC pattern and components correctly, and deploy the web applications to the Cloud. 
To achieve this goal, this course will focus on:


MVC pattern - Deep dive into the MVC architectural pattern and understand its implementation
Hands-on practice - create the ASP.NET Core web applications&nbsp;to resolve real-world problems","IS
PL
SF"
Office 365: SharePoint Online Administrator,"This course takes you through the ins and outs of the Office 365 administration space as it pertains to SharePoint Online. 
Knowing how to administer the background of SharePoint Online, such as security permissions, establishing site collections for your site collection administrators, working with search settings is pivotal in any organization looking to leverage the power of SharePoint Online.",SP
Asynchronous Programming with Javascript,"Want to supercharge your JavaScript? Asynchronous programming keeps web applications responsive by allowing multiple tasks to be processed at the same time.
This computer science course will cover the latest asynchronous features in JavaScript, such as Promises and Generators. By the end of this course, you should be able to make asynchronous network requests and write maintainable asynchronous code in JavaScript.","NC
PD"
Introduction to C++,"C++ is a general purpose programming language that supports various computer programming models such as object-oriented programming and generic programming. It was created by Bjarne Stroustrup and, “Its main purpose was to make writing good programs easier and more pleasant for the individual programmer.”*
By learning C++, you can create applications that will run on a wide variety of hardware platforms such as personal computers running Windows, Linux, UNIX, and Mac OS X, as well as small form factor hardware such as IoT devices like the Raspberry PI and Arduino–based boards.
(Bjarne Stroustrup, The C++ Programming Language, Third Edition. Reading, MA: Addison-Wesley, 1997).","AL
AR
SDF
PL
SP"
Build Web APIs using ASP.NET,"Want to learn how to serve data to your client applications using Web API? Perhaps you are considering creating applications for mobile devices but your data needs will exceed the storage capacity of the device. Perhaps you want tighter control over the data and wish to provide options for devices with limited or not always-on connectivity.
This course offers insight into the use of Web APIs using ASP.NET and C#. You’ll start with a review of client/server architectures and learn about data serialization and deserialization with JSON as the data format.
You will then be introduced to REST and RESTful concepts with discussions on synchronous and asynchronous programming.
The third module introduces you to ASP.NET Core and using Entity Framework for data access.
Finally, you will learn how to use Cross-Origin Resource Sharing (CORS) with your services and how to secure your Web APIs",IS
Getting Started with Azure App Service: Web Apps,"Wondering how to host your apps in the cloud? Learn how to create a host environment with Azure App Service Web Apps, the platform that gives you the freedom to build and deploy wherever you want, using the tools, applications, and frameworks of your choice. Plus, it scales automatically when you need it to. Bring your basic programming experience and join experts who will teach you how to use the Azure portal to create, deploy, and manage Azure App Service Web Apps. Get a tour of the Azure portal, create a free Azure account, and then dive into application analytics. Work through a continuous deployment scenario that links a GitHub repository to Azure, and use Azure Resource Manager to implement an automated deployment. Then, configure diagnostics and logging in your deployed application as you learn to detect and correct issues in your Azure web apps.
In this hands-on, self-paced course, each lab guides you step by step through a real development scenario, with tasks that are key to your job as a developer. Plus, get helpful resource documents and videos that support the labs and provide further learning opportunities.",SP
Developing Data Client Applications and Services,"Want to build on your professional database or developer skills? ADO.NET and Entity Framework sit at the intersection of database and developer tools, and they’re key to creating client applications that read, write, and modify data. This self-paced course offers a deep dive into these fundamental technologies.
The course starts by accessing relational databases with ADO.NET, which is used by applications to retrieve, handle, and update data. You will get an overview of the technology, explore its history, and then look at the specifics of data providers, access, and queries. In the hands-on lab, build a simple console application to access SQL data.
You will also learn about building data client apps with Entity Framework Core, which eliminates the need for most of the data-access code that developers usually need to write. We will review Entity Framework versions, models, queries, and operations, and then build a desktop app. Advanced data access using Entity Framework will also be discussed as you learn about change tracking, and explore testing. Plus, build a web app to access SQL Data.
At the end of the course, you will learn how to build a scalable web service that accesses data and implement a functional cloud service using Entity Framework as the data layer and an OData feed using Web API. You wil test your service, and then implement basic sorting and filtering of your data service. 
Bring your basic web programming and C# experience, along with your knowledge of querying relational data and data storage. Take the labs, assessments, and final exam, and add to your professional developer skillset as you learn to build various kinds of client applications that access and work with data.",PD
Introduction to ReactJS,"ReactJS is the latest JavaScript framework to capture the hearts and attention of the frontend developer community.
Developers love ReactJS because it highly performant and renders changes almost instantly. The best part about ReactJS is that it is a relatively small framework and does not take too much time to learn!
Starting with the basics of JSX syntax, this course will teach you how to model UI components using React Components. By the end you should be able to manage the state and life cycle of React Components and use them to dynamically generate lists and forms.","AL
AR
IAS
HCI
PL
SDF
SP"
Managing Identity,"With identity as the new perimeter in today&rsquo;s security landscape, it&rsquo;s important to keep up on the latest ways to manage it. Identity&mdash;which defines what protocols you&rsquo;re allowed to use, who you&rsquo;re allowed to interact with, and what you&rsquo;re allowed to do&mdash;has evolved significantly in the last few years.
In this security course, go beyond the firewall and ports, and learn practical steps and prescriptive guidance on identity management, based on proven, real-world experience from Microsoft Incident Response teams.
Start with a conceptual look at identity, explore Active Directory best practices, find out how to secure Azure Active Directory, and then get hands-on with a combination of videos, text, and hosted labs.
You will create a protective bastion host for an existing domain, configure Privilege Access Management (PAM) and Just in Time Administration (JIT), install JRE, and set up Microsoft Identity Manager. With successful course completion, you will understand the hows and whys of improving the security posture of your environment, and get started implementing and managing identity as part of your cybersecurity defense plan.",IS
Windows 10 Features for a Mobile Workforce: Windows and Devices in the Enterprise,"This course describes the preparation steps for a successful deployment of Windows 10 in an enterprise environment by using Microsoft Deployment Toolkit and System Center Configuration Manager. It also explains the other methods available today for migrating to Windows 10.
This course is the second of four courses in the Windows 10 Features for a Mobile Workforce XSeries, which has been created to help you prepare for Microsoft certification Exam 70-697: Configuring Windows Devices.",OS
Windows 10 Features for a Mobile Workforce: Managing and Maintaining Devices in the Enterprise,"Learn to manage Windows 10 desktop and application deployments as well as cloud-based application and data service environments for medium-to-large enterprises.
This course is the third of four courses in the Windows 10 Features for a Mobile Workforce XSeries, which has been created to help you prepare for Microsoft certification Exam 70-697: Configuring Windows Devices.",IS
Windows 10 Features for a Mobile Workforce: Configuring Additional Resources,"IT Support: Networking Essentials is designed to introduce the core networking concepts to learners who are new to IT Support. The course begins by explaining the purpose of networking and then examines how networks are configured in homes, offices, between offices, and around the world with the Internet. This includes a review of network topologies, physical networking, and network protocols. The course concludes with an introduction to network troubleshooting, including how to troubleshoot common networking issues.","NC
AR
DS"
Developing International Software,"When you&rsquo;re designing and developing new software, it&rsquo;s easy to get laser-focused on getting it functional and into the market or deployed as soon as possible. Thus, many engineering teams develop software that supports their native language first, postponing support for other languages until &ldquo;later,&rdquo; when they think they will have the bandwidth. In other words, they don&rsquo;t plan ahead. The problem with this approach, which experienced developers have found out the hard way, is that it sacrifices budget, time, and opportunity.
Redesigning and rebuilding a different edition of your software for each and every language or market can be a colossal effort. As this computer science course will demonstrate, planning ahead is far more efficient, and the marginal cost of supporting multiple languages from the get go is less than you may think. Harnessing international functionality in operating systems and programming languages makes writing code that works for multiple languages and markets much simpler than retrofitting existing code.
The instructors for this course include programmers who have worked on globalization and localization of some of the world&rsquo;s most successful software. They&rsquo;ve experienced the good, the bad, and the ugly of creating world-ready software, and they&rsquo;re here to ensure your software&rsquo;s user experience works consistently, regardless of where users are from or what languages they speak.
This course has three parts: the business case, world-ready design, and world-ready development. While students can complete parts one and two without programming knowledge, part three requires programming experience.","AL
IS"
Transitioning to Microsoft Exchange Server 2016,"Is your organization planning to upgrade to Microsoft Exchange 2016? If so, you will experience a period of coexistence when parts of the organization still use legacy Exchange functionality while other parts have completed the upgrade to Exchange 2016.
In this computer science course, you will learn how to plan coexistence with Exchange 2010 or 2013 and Exchange 2016; implement coexistence with previous versions of Exchange; and finally, decommission previous versions of Exchange Server.
This course is part of the Microsoft Exchange Server 2016 XSeries. By completing this course, you will gain a better understanding of the message coexistence of Exchange Server 2016.",IM
Compliance in Office 365​®: Data Governance,"In this computer science course you will examine how to plan, implement, and manage Data Governance. As organizational data stored in email and documents continues to grow, Office 365 makes it easy to control the information that you want to keep, as well as control the flow of information out of your organization. This course covers all the steps to effectively plan and manage data retention and data leakage.
This is the second in a series of courses concerning Compliance in Office 365. By completing this course, you will gain an understanding of the archiving and data retention capabilities of Office 365 and data leakage prevention.",IAS
Microsoft SharePoint 2016: Authentication and Security,"In Microsoft SharePoint 2016 Authentication and Security, you will learn how to plan and configure a SharePoint on premise solution for a variety of authentication levels and security requirements to help protect the environment. You will also learn about the necessary hardware and software requirements and the overall methodology to SharePoint security.
This course is part of the Microsoft SharePoint Server 2016 XSeries.","AR
HCI
IAS
IS
SE"
Provisioning Office 365 Services,"In this computer science course, we will explain the various services available in Office 365 including Exchange Online, SharePoint Online and Skype for Business Online and others. We will cover the various subscriptions options for small businesses, educational customers as well as enterprises. The first steps of setting up a tenant are critical for success and this course will explain in detail each step to ensure your Office 365 tenant and clients will be in good shape from day one. You will also learn how to work through some troubleshooting ideas to better prepare you if you get stuck with provisioning Office 365 Services.",SP
Querying Data with Transact-SQL,"This course is part of the Microsoft Professional Program Certificate in Data Science and the Microsoft Professional Program Certificate in Big Data.
Transact-SQL is an essential skill for data professionals and developers working with SQL databases. With this combination of expert instruction, demonstrations, and practical labs, step from your first SELECT statement through to implementing transactional programmatic logic.
Work through multiple modules, each of which explore a key area of the Transact-SQL language, with a focus on querying and modifying data in Microsoft SQL Server or Azure SQL Database. The labs in this course use a sample database that can be deployed easily in Azure SQL Database, so you get hands-on experience with Transact-SQL without installing or configuring a database server.",IS
Processing Big Data with Hadoop in Azure HDInsight,"This course is part of the Microsoft Professional Program Certificate in Big Data.
More and more organizations are taking on the challenge of analyzing big data. This course teaches you how to use the Hadoop technologies in Microsoft Azure HDInsight to build batch processing solutions that cleanse and reshape data for analysis. In this five-week course, you&rsquo;ll learn how to use technologies like Hive, Pig, Oozie, and Sqoop with Hadoop in HDInsight; and how to work with HDInsight clusters from Windows, Linux, and Mac OSX client computers.
NOTE: To complete the hands-on elements in this course, you will require an Azure subscription and a Windows, Linux, or Mac OS X client computer. You can sign up for a free Azure trial subscription (a valid credit card is required for verification, but you will not be charged for Azure services). Note that the free trial is not available in all regions. It is possible to complete the course and earn a certificate without completing the hands-on practices.",SP
Implementing Real-Time Analytics with Hadoop in Azure HDInsight,"This course is part of the Microsoft Professional Program Certificate in Big Data.
In this four week course, you&rsquo;ll learn how to implement low-latency and streaming Big Data solutions using Hadoop technologies like HBase, Storm, and Spark on Microsoft Azure HDInsight.
Note: To complete the hands-on elements in this course, you will require an Azure subscription and a Windows, Linux, or Mac OS X client computer. You can sign up for a free Azure trial subscription (a valid credit card is required for verification, but you will not be charged for Azure services). Note that the free trial is not available in all regions. It is possible to complete the course and earn a certificate without completing the hands-on practices.
This course is the second in a series that explores big data and advanced analytics techniques with HDInsight; and builds on the batch processing techniques learned in DAT202.1x: Processing Big Data with Hadoop in Azure HDInsight.","AR
IAS
OS
PD
SF
SP"
Analyzing and Visualizing Data with Power BI,"This course is part of the&nbsp;Microsoft Professional Program Certificate in Data Science and the Microsoft Professional Program Certificate in Big Data..
Power BI is quickly gaining popularity among professionals in data science as a cloud-based service that helps them easily visualize and share insights from their organizations&rsquo; data.
In this data science course, you will learn from the Power BI product team at Microsoft with a series of short, lecture-based videos, complete with demos, quizzes, and hands-on labs. You&rsquo;ll walk through Power BI, end to end, starting from how to connect to and import your data, author reports using Power BI Desktop, and publish those reports to the Power BI service. Plus, learn to create dashboards and share with business users&mdash;on the web and on mobile devices.",IS
Introduction to NoSQL Data Solutions,"This course is part of the Microsoft Professional Program Certificate in Big Data.
As a data pro, you know that some scenarios&mdash;particularly those involving real-time analytics, site personalization, IoT, and mobile apps&mdash;are better addressed with NoSQL storage and compute solutions than they are with relational databases. Microsoft Azure has several NoSQL (or &ldquo;Not Only SQL&rdquo;) non-relational data storage options to choose from. NoSQL databases are generally built to be distributed and partitioned across many servers. And they&rsquo;re built to scale out for high availability and to be flexible enough to handle semi-structured and unstructured data. If you have a data model that is constantly evolving and you want to move fast, that&rsquo;s what these databases are about.
In this practical course, complete with labs, assessments, and a final exam, join the experts to learn how NoSQL has evolved over time. Explore non-relational data storage options in Azure, and see how to use them in your applications. Find out how to create, store, manage, and access data in these different storage options. Get an in-depth look at Azure Table Storage, DocumentDB, MongoDB, and more. Learn about the &ldquo;three Vs&rdquo;&mdash;variety (schemas or scenarios that evolve quickly), volume (scale in terms of data storage), and velocity (throughput needs to support a large user base). Take this opportunity to get hands-on with NoSQL options in Azure.",DS
Processing Big Data with Azure Data Lake Analytics,"This course is part of the Microsoft Professional Program Certificate in Big Data.
Want to store and process data at scale? This data analysis course teaches you how to apply the power of the Azure cloud to big data using Azure Data Lake technologies.
Learn how to manage data in Azure Data Lake Store and run U-SQL jobs in Azure Data Lake Analytics to generate insights from structured and unstructured data sources.
Note: To complete this course, you will need a Microsoft Azure subscription. You can sign up for a free trial subscription at http://azure.microsoft.com, or you can use your existing subscription. The labs have been designed to minimize the resource costs required to complete the hands-on activities.",SP
Data Science Essentials,"This course is part of the Microsoft Professional Program Certificate in Data Science.
Demand for data science talent is exploding. Develop your career as a data scientist, as you explore essential skills and principles with experts from Duke University and Microsoft.
In this data science course, you will learn key concepts in data acquisition, preparation, exploration, and visualization taught alongside practical application oriented examples such as how to build a cloud data science solution using Microsoft Azure Machine Learning platform, or with R, and Python on Azure stack.","IS
SP"
Principles of Machine Learning,"This course is part of the Microsoft Professional Program Certificate in Data Science.
Machine learning uses computers to run predictive models that learn from existing data in order to forecast future behaviors, outcomes, and trends.
In this data science course, you will be given clear explanations of machine learning theory combined with practical scenarios and hands-on experience building, validating, and deploying machine learning models. You will learn how to build and derive insights from these models using R, Python, and Azure Machine Learning.",IS
Securing Data in Azure and SQL Server,"Given the ever-expanding role of a SQL Server database administrator in today&rsquo;s security landscape, it&rsquo;s critical to know how to keep data secure.
In this course, part of the SQL Server Database Administration series, join the experts for a look at user authentication&mdash;who the users are&mdash;and authorization&mdash;what they are allowed to do. Plus, find out about auditing system access and data encryption, to make sure your data is properly secured.
You&rsquo;ll examine these topics through the lenses of various platforms, comparing what they look like in SQL Server 2016, SQL Server v.Next on Linux, and Azure SQL Databases.
This computer science course introduces features and technologies for securing databases. Topics include: Authenticating Users and Connections, Authorizing Users to Access Resources, Auditing Access to Data, and Encrypting Data. You will learn how to secure data in SQL Server 2016, SQL Server v.Next on Linux, and Azure SQL Databases.",SP
Orchestrating Big Data with Azure Data Factory,"This course is part of the Microsoft Professional Program Certificate in Big Data.&nbsp;
Need to schedule and manage big data workflows?
This data analysis course teaches you how to use Azure Data Factory to coordinate data movement and transformation using technologies such as Hadoop, SQL, and Azure Data Lake Analytics. You will learn how to create data pipelines that will allow you to group activities to perform a certain task.
Note: To complete this course, you will need a Microsoft Azure subscription. You can sign up for a free trial subscription at http://azure.microsoft.com, or you can use your existing subscription. The labs have been designed to minimize the resource costs required to complete the hands-on activities.","PD
SF"
Recovering Data in Azure and SQL Server,"Is your data protected against disaster? Database administrators, regardless of platform need to be ready, whether working with SQL Server 2016, SQL Server v.Next on Linux, or Azure SQL Databases.
In this course, which is part of the SQL Server Database Administration series, you&rsquo;ll explore the various recovery models you can set up.
Learn about your choices for system backup and gain an understanding of how to back up and recover SQL Server 2016, SQL Server v.Next on Linux, and Azure SQL Databases. Then you&rsquo;ll actually do a backup. Plus, get practical tips on how to restore a SQL Server database.
This computer science course introduces features and technologies for recovering data. Topics include: SQL Server Recovery Models, Backup of SQL Server Databases, and Restoring SQL Server Databases.",AR
Introduction to C#,"There are many programming languages in use today. &nbsp;Choosing which&nbsp;language to program in can be based on many factors such as learning curve, job specific requirements, platform specifics, or a plethora of other criteria.&nbsp;&nbsp;In this course, you will be introduced to the&nbsp;C# language and the world of .NET programming.&nbsp;&nbsp;
The C# programming language was created from the ground up to be an object-oriented programming language that offers ease of use, familiarity to C/C++ and Java developers, along with enhanced memory and resource management.&nbsp; C# is prevalent on the Microsoft platform but is also being used to develop software that runs on Linux, Android, and iOS devices as well.&nbsp; 
Learning C# can position you&nbsp;for future programming opportunities, provide a solid foundation in object-oriented programming knowledge, and pave the way for learning other programming languages.&nbsp;&nbsp; This course aims to teach you about the core aspects of the C# language.
This course is the first part of a three-part series designed to teach core C# language fundamentals.&nbsp; In the second course of the series, you will learn object-oriented programming concepts and the third course offers instruction on data structures and algorithms with C#.&nbsp;&nbsp; Once you complete the series, you will have a very good foundation of C# knowledge to expand on and learn more as you progress in your programming career or hobby.",PL
Creating a Master Data Solution with SQL Server Master Data Services (MDS),"In this computer science course, we will discuss the discipline of Master Data Management (MDM) and how to deliver and manage MDM solutions with SQL Server 2016 Master Data Services (MDS).
The course has been written specifically for data professionals. You will learn about common MDM scenarios, and how MDS solutions can be designed, developed, secured and managed.",IS
Object Oriented Programming in C#,"Many mainstream programming languages in use today, support the concept of object-oriented programming. Modeling real-world objects in your code allows you to create more robust and effective applications.
&nbsp;
C# was designed from the ground up to be an object-oriented, type-safe programming language.&nbsp; In this course, you will build on the fundamentals that were covered in Introduction to C#.&nbsp; You will extend your knowledge by applying core OOP principles to the code and applications you will create in this course.&nbsp;You will build a &nbsp;knowledge of encapsulation, inheritance and polymorphism.&nbsp;&nbsp; You will also learn memory management in the .NET framework.",AR
Introduction to HTML and JavaScript,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
This computer science course introduces JavaScript, HTML and CSS as programming and markup languages that are used to create web applications. The learner will gain experience with each language individually and then combine them together to create compelling web application solutions. The learner will have an opportunity to use Visual Studio Code on their operating system of choice to create and test their web applications.
This course teaches basic tasks that are necessary to create web applications with a strong semantic structure, re-usable style components and custom interactive features. This course includes hands-on labs that enable the learner to build basic HTML pages that are the components of a web application used to solve real world problems.","AR
IAS
PL
SDF
SP"
Data Cleansing with Data Quality Services (DQS),"Is your data messy? Do you need to learn how to clean it up? In this computer science course, we will discuss the discipline of Data Quality Assurance and Data Quality Services (DQS). You will learn why your data needs cleansing, the capabilities and features of DQS, what a DQS solution looks likes and how data cleansing integrates with an Integration Services (SSIS) data flow. We will demonstrate a variety of critical data quality activities such as knowledge discovery, domain management, matching policies for the de-duplication of data, and administration topics covering installation, configuration and security.",IS
Introduction to Artificial Intelligence (AI),"Artificial Intelligence will define the next generation of software solutions. This computer science course provides an overview of AI, and explains how it can be used to build smart apps that help organizations be more efficient and enrich people&rsquo;s lives. It uses a mix of engaging lectures and hands-on activities to help you take your first steps in the exciting field of AI.
Discover how machine learning can be used to build predictive models for AI. Learn how software can be used to process, analyze, and extract meaning from natural language; and to process images and video to understand the world the way we do. Find out how to build intelligent bots that enable conversational communication between humans and AI systems.
Note: The practical elements of this course are based on Microsoft Azure, and require an Azure subscription. Instructions for signing up for a free trial subscription are provided with the course materials, or you can use an existing Azure subscription if you have one.",IS
Algorithms and Data Structures in C#,"When you create real-world applications, the ability to store information in your program code is critically important. &nbsp;In this course, you will learn how programming languages make use of various data structures to hold this information. &nbsp;For example, storing a list of values for countries. &nbsp; You ill learn how C# provides a plethora of data structures from simple arrays to more complex structures that permit the use of &ldquo;typing&rdquo;.&nbsp; Generics is a concept that C# uses to allow the representation of objects in your data structures to apply &ldquo;typing&rdquo;, making it easier to work with specific data types.
Even though most programming languages today implement their own versions of sorting and searching algorithms, these examples still provide you with a solid foundation for understanding the logic behind these algorithms and can shed light on how to implement your own algorithms in later programs.&nbsp; Not to mention the fact that they are also some of the most common algorithms used in interviews for programming jobs.
This course will provide you with a solid foundation in the use of data structures and algorithms using the C# language.","AL
AR
IAS
PL
SDF"
Developing Big Data Solutions with Azure Machine Learning,"This course is part of the Microsoft Professional Program Certificate in Big Data. 
The past can often be the key to predicting the future. Big data from historical sources is a valuable resource for identifying trends and building machine learning models that apply statistical patterns and predict future outcomes.
This course introduces Azure Machine Learning, and explores techniques and considerations for using it to build models from big data sources, and to integrate predictive insights into big data processing workflows.","IS
PL
SF
SE"
Introduction to jQuery,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
jQuery is the most popular library for JavaScript. In this course, you will learn how to use jQuery to add additional power and interactivity to your web pages. You&rsquo;ll see how to take advantage of jQuery in your web pages, how to work with the HTML document, and even make server-side calls.
Using jQuery, the JavaScript programmer has access to many of the powerful tools common to desktop and mobile developers use, like building event handlers and using effects for a responsive UI, the ability to manipulate your user interface without having to refresh the entire page, and creating asynchronous calls to keep your web application responsive. With jQuery, you&rsquo;ll be able to take your web pages to the next level!",SP
Introduction to Bootstrap – A Tutorial,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
Bootstrap is an open source project originally created by Twitter to enable creation of responsive, mobile first web pages. Bootstrap has a standard set of classes that allow developers to quickly create applications that scale to devices of all sizes, and incorporate common components such as dialog boxes and validation. Bootstrap has become a de facto standard for web design.
This course is designed to be a primer on Bootstrap. By the end of the three modules you will have gained the knowledge to create pages common to all web applications, and implement the most frequently used components and classes provided by Bootstrap. You will also see how to use the tooling provided by Visual Studio to assist you in creating pages as quickly as possible.","AR
IAS
PL
SF"
Introduction to Python: Absolute Beginner,"Brand new to text-based programming? Check out this hands-on course for an in-depth look at the details of Python layers and concepts. Get ample practice drills and projects, using Jupyter Notebooks on Azure, which require only a browser and an Internet connection. Learn best practices and begin coding almost immediately.
After you explore data types and variables, take a look at strings, input, testing, and formatting. From there, learn about arguments and parameters, along with conditionals and nested conditionals. By the end of the course, you&rsquo;ll be able to create programs that prompt users for input and use conditional (True/False) logic and Python methods to manipulate numbers and text to provide responses to the users, in addition to requesting further input. Plus, learn basic troubleshooting for your code. Sign up, and get started coding right away!
Ready for next steps? Take the Introduction to Python: Fundamentals course.","PL
AL
PD
SDF
SF
SE"
Advanced CSS Concepts,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
In this computer science course, you will learn how to design, develop and test device-friendly websites using CSS, one of the core technologies used for building web pages. You&rsquo;ll also learn how to use Flexbox, SVG images, linting and other web developer tools to enhance your web pages.
This course is intended for:

Anyone who wants to learn Advanced CSS, any junior-level developers, students, or anyone who already has some HTML, CSS, and JavaScript training or knowledge.
People who want to make a living (or side-income) from web page design/development.",SP
AngularJS: Framework Fundamentals,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
Want to get started building Web pages with AngularJS, but feel a little overwhelmed? You&rsquo;ve come to the right place. This course will teach you the programming language using a series of easy to understand AngularJS tutorials. The hands-on approach will teach you how the AngularJS framework works, and enable you to use HTML as your template language. You&rsquo;ll also learn the basics of AngularJS&rsquo;s module definition and how to perform basic dependency injection between components.
This course is best suited for anyone wanting to learn how to use the AngularJS framework through hands-on AngularJS tutorials and examples. Students should have some prior HTML, CSS, and JavaScript training or knowledge.",SP
AngularJS: Advanced Framework Techniques,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
Want to start implementing some of the more advanced features of Angular, but looking for help to get you started? In this advanced angularJS course, you&rsquo;ll learn how to implement a web framework as you work your way through a series of tutorial-style labs that make learning easy.
This course is best suited for those wanting to build upon a basic understanding of Angular, and who have HTML, CSS, and JavaScript training or knowledge.","AR
IAS
GV
HCI
PL
SDF
SP"
Using Open Source Web Tooling to Improve Development Proficiency,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
Have you heard about Node.js, the Node Package Manager or Bower? Perhaps you&rsquo;ve wanted to dive into some open source tooling for your Web development projects.
This computer science course focuses on some of the current open source tools and technologies available today for Web developers. In the five modules of this course, you will learn how to use Node.js and the NPM along with other tools like Chalk, Angular, Bootstrap and Font Awesome.
Topics covered include:

Yeoman and its dependencies in the context of creating an Angular application;
Testing code with a focus on jsLint and unit testing with Karma;
Node.js and the NPM and how to use Minify and Sass;
Configuration and touring tools such as Karma unit tests, Angular providers and routing.",SF
Introduction to TypeScript 2,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development. 
Want to write organized code for your website that you can easily manage and maintain? TypeScript is the answer to building scalable web applications. TypeScript lets you write JavaScript the way you want to. TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. It works on Any browser. Any host. Any OS. TypeScript is open source and has attracted the attention of a big community of web developers who are continuously contributing to the wealth of the language making it the language for web development. TypeScript brings all the next-generation features of ECMAScript 6 like Arrow Functions, Decorators, Generics, Modules and Interfaces. In this course, you'll learn all the basics of TypeScript and will have hands-on using features of TypeScript such as types, optional static types, classes, interfaces, and modules. You will learn how TypeScript has solved many issues developers have suffered from with JavaScript. You will learn how TypeScript has made web development more fun and easier. You will be doing all this using the most recent released version of the language TypeScript 2.3.
This course will cover all you need to know to get up and running and start building functional websites using TypeScript 2.3
We assume that you have a general understanding of either JavaScript or another programming language. This course will not teach you JavaScript or the fundamentals of programming so if you haven't programmed before, be sure to set aside extra time so you can explore some basic concepts and skills that may be foreign to you. Object Oriented Programming (OOP ) experience is not required but is a big plus to understand concepts like classes and inheritance in TypeScript. Familiarity with HTML is also very helpful for this course.
If you are familiar with JavaScript, many of the concepts in TypeScript will be familiar but we'll cover some concepts that may be new to you and show you how TypeScript can enhance your JavaScript programming.
Knowing TypeScript is becoming more and more a must have skill for web development since many of the web development libraries now are using TypeScript. For example, TypeScript is a must when it comes to using Angular 2 in a web application. TypeScript also can be used in server-side applications. Knowing TypeScript is your way to become a full stack developer. Therefore, if you are considering a career in web development, TypeScript is an important gear in your tool box or skillset.",PL
Databases in Azure,"This course is part of the Microsoft Professional Program in Cloud Administration.
This course focuses primarily on Azure SQL Database as a database service that can quickly and efficiently scale to meet demand, is automatically highly available, and supports a variety of third party software.
You&rsquo;ll be introduced to data services that Azure provides to store, manage, and analyze data. As an alternative to the cost and complexity of managing on-site SQL Server installations, you&rsquo;ll learn how to quickly set up and start using database applications in Azure. You&rsquo;ll gain an understanding of how to configure firewall rules, manage log-ins and users, as well as roles and permissions, perform a database restore, and generally secure an Azure SQL database.
Ongoing monitoring of your database applications is essential so you&rsquo;ll be introduced to tools and techniques that will help you determine usage requirements, plan upgrades, and troubleshoot performance and security issues.
Finally, you&rsquo;ll be introduced to Azure SQL Data Warehouse, a fully managed and scalable cloud service, that is compatible with other Azure offerings, such as Machine Learning and Data Factory, as well as existing SQL Server tools. As a distributed database management system that can handle large amounts of data in which analytics play a significant role, Azure SQL Data Warehouse provides an ideal solution for organizations that work with Big Data and need to scale up and down quickly.",IS
Azure Security and Compliance,"This course is part of the Microsoft Professional Program in Cloud Administration. 
Security is a critical requirement for placing your software and services into the cloud. Microsoft Azure provides you with a secure infrastructure that is industry verified with global compliance standards. 
You can use Azure to build and deploy infrastructure, applications, and services using tools and resources to ensure the security and compliance of your cloud solutions. Included in this course are discussions on the Microsoft Trust Center, Azure Key Vault, and Azure Security Center.",SP
Migrating Workloads to Azure,"This course is part of the Microsoft Professional Program in Cloud Administration.
Whether solving for hardware obsolescence cycles, quicker time to market, or enabling disaster recovery, organizations should consider moving some on premises resources to the cloud. This course will show you why migrating certain workloads to Azure just might make sense.
Applications developed specifically for the cloud can readily capitalize on the advantages of the cloud and the agility it brings. However, many solutions originally developed for an on-premises scenario, can also benefit from the cloud.&nbsp;
This course will introduce you to different migration&nbsp;scenarios including&nbsp;when a migration should be rebuilt in Azure and migration limitations.&nbsp;
You&rsquo;ll also learn how to ensure the resources you want to migrate do not have any unsupported features or configurations. As well as how to validate, prepare, check and then commit to a migration workflow.&nbsp;
This course focuses on how to configure the Azure platform for your migration. You will learn how to choose and configure the correct storage account and Azure virtual network.&nbsp;
In addition to the different deployment models, scenarios, and requirements for migrating, and replicating resources to Azure, you&rsquo;ll learn about Azure Site Recovery (ASR) as the Business Continuity Disaster Recovery solution.",SP
Microsoft Professional Orientation: Cloud Administration,"This course is part of the Microsoft Professional Program in Cloud Administration.
This is the first stop in Microsoft&rsquo;s Cloud Administration curriculum. It will help you get started, plan your learning schedule, and connect with fellow students and teaching assistants.
Along the way, you&rsquo;ll be introduced to working with Azure cloud technologies. As you&rsquo;re introduced to the different parts of the curriculum, you&rsquo;ll get a feel for how Azure&rsquo;s Infrastructure as a Service (IaaS) offering is organized into compute, networking, and storage pillars. And how Platform as a Service (PaaS) service capabilities can be built on top of the infrastructure. 
Understanding these pillars is going to help you in basic deployment and management operations. In addition to being able to provision compute, networking, and storage resources, you&rsquo;ll learn how to scale workloads efficiently and to automate application management tasks and other important administrative functions like security, back up, replication, and migration from an on-premises environment to the cloud. 
While Azure as a cloud platform is large in scope, by the end of this course, you should have a good sense of how the individual courses in the curriculum map to the platform and fit within the Azure cloud administrator role.",SP
Logic and Computational Thinking,"Understanding how a computer ""thinks"" is one of the first steps to becoming an excellent computer programmer. A foundation in logic is crucial in developing this understanding. Mastering logic is more than learning a set of rules. It involves learning how to break problems into smaller chunks, figuring out how repeatable processes can save time and improve quality, and understanding how to organize problems into the right size.
In this course, you'll learn how to do all those things and use computers to make them easier. After all, logical tasks are what computers are best at doing!
This is not a programming course, but it will teach you how to approach critical thinking as both a lifestyle and an aide to better programming and testing.","AL
SDF"
Continuous Integration and Continuous Deployment,"This course is part of the Microsoft Professional Program in DevOps.
This course provides knowledge and skills to implement the DevOps practices of Continuous Integration and Continuous Deployment with Visual Studio Team Services (VSTS) and Microsoft Azure.
The course will provide knowledge of continuous integration builds, automated testing and continuous delivery and deployment build, test, and release to the next level by understanding how they function within a DevOps development environment. 
The course will also cover how VSTS integrates with third party and OSS tools, such as Git and Jenkins,
The course is intended for IT Professionals who are interested in crossing over into development territory towards the goal of establishing a DevOps culture, and Developers who want to learn more about the development processes of DevOps in order to extend upon Agile processes for rapid delivery. 
Students curious about DevOps practices as a culture shift, but do not have extensive experience with VSTS or Microsoft Azure, should be able to follow the procedural and expository explanations of continuous integration and continuous delivery.",SP
Introduction to Python: Fundamentals,"Ready for more hands-on, step-by-step Python fundamentals? Add to the foundational experience you got in the Introduction to Python: Absolute Beginner, and explore data structures. Get lots of practice working with sample code in Jupyter Notebooks on Azure, which require only a browser and an Internet connection.
Focus on Python data structures, and work with string, list, and range sequences. Discover the power of list iteration, and learn about string and list methods. From there, get the details on file input and output&mdash;open files, read them, add to them, close them, and more. At the end of the course, you&rsquo;ll be able to slice strings into substrings, create lists, iterate through them, import files, and use file append mode, along with a lot of other practical Python tasks, as you get started coding.","AL
PL
SDF
SE"
Learn to Program in Java,"Ready to start your programming journey? Being a software engineer is much more than simply writing code&mdash;it requires a strong conceptual understanding of computer science. In this course, which was developed through a combination of academic and industry perspectives, learn not only how to code in Java but also how to break down problems and implement their solutions using some of the most fundamental computer science tools.
Get plenty of hands-on Java coding experience with methods, logic, loops, variables, parameters, returns, and recursion. And write your code using industry-standard tools and practices to help you build strong habits as you grow your development skill set.
Whether you are preparing for advanced university computer science courses, an entry-level software engineering position, or the Advanced Placement Computer Science A exam, get the tools you need to succeed in this practical, self-paced Java course.","AR
IAS
PL
SE"
Object Oriented Programming in Java,"What do hiring managers look for in entry-level developers? According to a recent survey, one of the most requested job skills is ""strong object oriented design"". Yet traditional computer science programs rarely focus on this area.
In this Java course, examine the role of objects in code, explore how to use them, and see how to design them for optimal code reuse and structure. Get tons of hands-on coding experience using popular Java objects, like Arrays and Lists, and then leverage those learnings to design your own object hierarchies. Plus, practice using inheritance, interfaces, abstract classes, and encapsulation techniques to help you manage large code bases.
Get comfortable employing industry standards in designing and managing complex relationships within a code base, as you add to your computer science skill set.","PL
SDF
AR
DS"
Building Interactive Prototypes using JavaScript,"In this course, you'll learn how to turn a static web front-end into something that users can interact with. You'll learn the fundamentals of JavaScript and how to apply JavaScript to enhance the interactivity of webpages. By the end of this course, you'll have a web app prototype that allows basic interaction.
Upon completion of this course, you will be able to:

Read code and describe what it does
Utilize understanding of program execution to formulate algorithms to solve specific tasks
Write JavaScript code to manipulate DOM elements on a webpage

Once you complete this course, continue onto Building Functional Prototypes using Node.js to learn how to write JavaScript code to build the back-end of your app!",HCI
Building Functional Prototypes using Node.js,"In this course, you'll learn all about back-end web development so that you can turn a basic web app prototype into something that can store live data. We'll cover the basics of Node.js so that you can write JavaScript code to build the back-end of your app, as well as the basics of SQL and SQLite to write queries to work with a database. By the end of this course, you'll have a functional web app prototype that can be accessed on the Web.
Upon completion of this course, you will be able to:

Distinguish between front-end and back-end within the context of web app development
Create a back-end web server using Node.js
Understand the uses and types of databases and DBMSs
Construct SQL queries to perform CRUD operations on a database
Deploy a web app on Azure",SP
Designing a Technical Solution,"In this course you will learn the process of turning ideas into technical solutions. Early learners often need to learn context and the big ideas of a process before diving into the advanced details, and that&rsquo;s exactly what you&rsquo;ll get in this course. You&rsquo;ll build upon your own idea for an app as you learn the process of conducting market research, user-centered design, and front-end web development. By the end of the course, you will have a user-centered design, wireframes and specification for a web app, along with a front-end user interface built with HTML and CSS.
Upon completion of this course, you will be able to:

Describe how software is used to solve problems
Define application requirements based on user research
Design effective products using Human Centered Design
Employ Visual Studio Code and web browser tools in the development of web pages
Learn the basics of how the Internet works
Explore various prototyping techniques following industry standard design principles
Develop basic HTML and CSS webpages
Once you complete this course, continue onto Building Interactive Prototypes using JavaScript to enhance your prototype as you learn how to use JavaScript to allow interaction on your webpages.",HCI
Algorithms and Data Structures,"Want to build better programs? Learn how, in this professional-level course.
Bring your programming experience, and join us for a deep dive into fundamental concepts that you can use right away. Go underneath the hood of functional algorithms and data structures, and see how they work and how to compare them. Plus, get the details on when and how to use them.
In this real-world-tested curriculum, take a look at famous algorithms and equations, and see how yours stack up. See practical demos, compare &ldquo;life scenarios&rdquo; to their coding counterparts, and create an app for your final project.
Add to your developer toolkit with this in-depth exploration of algorithms and data structures.","AL
DS
GV
PL
SDF"
Windows Server 2016: Basic Storage,"Storage is a key component in deploying Microsoft Windows Server. As users and applications constantly work with and create data, most organizations require a large amount of storage.
In this course, you&rsquo;ll learn to navigate various tools and techniques such as disks, volumes, file systems, permissions, sharing, administration, and monitoring. Through videos, discussions, hands-on labs, and assessments you will put in place the essential storage requirements for your Windows Server environment.
As a Windows Server System Administrator, you must be able to determine the type of storage your organization needs. You&rsquo;ll also need the skills required to manage disks, volumes, and file systems. You&rsquo;ll use the File Server Resource Manager (FSRM) to manage common disk and file management tasks. You&rsquo;ll secure storage using BitLocker and EFS. You&rsquo;ll also configure shared storage, such as NFS shares and SMB shares.
 
This course will teach you all of those necessary skills and help you improve your capacity to handle disks and volumes, and secure Windows Server storage. It will also prepare you for Microsoft certification tests and badges &ndash; everything you&rsquo;d need in an introductory job in Windows Server administration.",SF
Windows Server 2016: Basic Networking,"Would you like to build the skillset necessary to power the next generation of Windows Server optimized networks, applications, and web services? Then you&rsquo;re in the right place!
This self-paced course will help you understand and implement an IP addressing scheme, and set up a Dynamic Host Configuration Protocol (DHCP) network infrastructure. You will also implement a Domain Name Services (DNS) infrastructure, including resource records, zones, and security.
Through videos, discussions, hands-on labs, and assessments you will put in place the appropriate networking strategy for your Windows Server environment.
Part of the Microsoft Windows Server 2016 Fundamentals XSeries, this course will improve your skills in configuring and managing networks and help you decide.","NC
SDF
IS
SP"
Windows Server 2016: Virtualization,"A common way of maximizing resources, server virtualization enables the partitioning of a physical server into smaller virtual servers. It&rsquo;s a key skill in today&rsquo;s IT world and you can learn it here!
This self-paced course will help you understand and implement the components of the Hyper-V role. This includes how to implement virtualization technologies, implement and configure Hyper-V virtual hard disks and virtual machines, and how to use Windows Server Containers and Docker.
Through videos, discussions, hands-on labs, and assessments you will put in place the appropriate virtualization strategy for your Windows Server environment.
This course will teach you the necessary skills for proper server virtualization. It will also prepare you for Microsoft certification tests and badges &ndash; everything you&rsquo;d need in an introductory job in Windows Server administration.",AR
Implementing Predictive Analytics with Spark in Azure HDInsight,"This course is part of the Microsoft Professional Program Certificate in Data Science and part of the Microsoft Professional Program Certificate in Big Data.
Are you ready for big data science? In this course, learn how to implement predictive analytics solutions for big data using Apache Spark in Microsoft Azure HDInsight. See how to work with Scala or Python to cleanse and transform data and build machine learning models with Spark ML (the machine learning library in Spark).
Note: To complete the hands-on elements in this course, you will require an Azure subscription and a Windows client computer. You can sign up for a free Azure trial subscription (a valid credit card is required for verification, but you will not be charged for Azure services). Note that the free trial is not available in all regions.",DS
Delivering a Data Warehouse in the Cloud,"This course is part of the Microsoft Professional Program Certificate in Big Data.
When you need to scale your data warehouse's storage and processing capabilities in minutes, not months, you need a cloud-based massively parallel processing solution.
In this computer science course, you will learn how to deploy, design, and load data using Microsoft's Azure SQL Data Warehouse, or SQL DW. You'll learn about data distribution, compressed in-memory indexes, PolyBase for Big Data, and elastic scale.
Note: To complete the hands-on elements in this course, you will require an Azure subscription. You can sign up for a free Azure trial subscription (a valid credit card is required for verification, but you will not be charged for Azure services). Note that the free trial is not available in all regions. It is possible to complete the course and earn a certificate without completing the hands-on practices.",IAS
Introduction to Data Science,"This course is part of the Microsoft Professional Program Certificate in Data Science.
Learn what it takes to become a data scientist.
This is the first stop in the Data Science curriculum from Microsoft. It will help you get started with the program, plan your learning schedule, and connect with fellow students and teaching assistants. Along the way, you&rsquo;ll get an introduction to working with and exploring data using a variety of visualization, analytical, and statistical techniques.","IS
IAS"
Introduction to Python for Data Science,"This course is part of the Microsoft Professional Program Certificate in Data Science.
Python is a very powerful programming language used for many different applications. Over time, the huge community around this open source language has created quite a few tools to efficiently work with Python. In recent years, a number of tools have been built specifically for data science. As a result, analyzing data with Python has never been easier.
In this practical course, you will start from the very beginning, with basic arithmetic and variables, and learn how to handle data structures, such as Python lists, Numpy arrays, and Pandas DataFrames. Along the way, you&rsquo;ll learn about Python functions and control flow. Plus, you&rsquo;ll look at the world of data visualizations with Python and create your own stunning visualizations based on real data.",IS
Introduction to R for Data Science,"This course is part of the Microsoft Professional Program Certificate in Data Science.
R is rapidly becoming the leading language in data science and statistics. Today, R is the tool of choice for data science professionals in every industry and field. Whether you are full-time number cruncher, or just the occasional data analyst, R will suit your needs.
This introduction to R programming course will help you master the basics of R. In seven sections, you will cover its basic syntax, making you ready to undertake your own first data analysis using R. Starting from variables and basic operations, you will eventually learn how to handle data structures such as vectors, matrices, data frames and lists. In the final section, you will dive deeper into the graphical capabilities of R, and create your own stunning data visualizations. No prior knowledge in programming or data science is required.
What makes this course unique is that you will continuously practice your newly acquired skills through interactive in-browser coding challenges using the DataCamp platform. Instead of passively watching videos, you will solve real data problems while receiving instant and personalized feedback that guides you to the correct solution.
Enjoy!",IS
Developing Planet-Scale Applications in Azure Cosmos DB,"If you’re familiar with NoSQL in Azure and the platform’s powerful non-relational data storage options, take the next step! Join us for an in-depth look at developing NoSQL apps in super-scalable Azure Cosmos DB—the distributed, multi-model database from Microsoft that transparently replicates your data wherever your users are. Learn about its broad, global-scale features and capabilities. Then, go deeper into some of the APIs available in Azure Cosmos DB for storing different kinds of NoSQL data.  
We'll start with a look at general concepts, including partitioning schemes, global replications, hierarchy, security, and more, as you learn to develop document, key/value, or graph databases with Cosmos DB using a series of popular APIs and programming models.   
Plus, we'll work with API specifics for DocumentDB, Gremlin, MongoDB, and Tables and conclude with a look at real-world integrations, visualizations, and analyses, such as Spark Connector, Azure Search, Stream Analytics.","DS
IAS
SP"
Developing a Tabular Data Model,"If you need intuitive, interactive and high-performance access to your data&mdash;and especially if you have large volumes of data&mdash;then this course is for you.
Whether you're new to Analysis Services or are experienced with earlier versions, this course will teach you all the information you need to develop a tabular data model. You will learn how to import tables of data from different sources and relate them to form the foundation of your model. You will then learn how to enhance your model with usability features, such as hierarchies.
Next, you will learn how to enhance your model with business logic. You will learn how to create calculated columns, tables and measures using DAX, the language of tabular models.
Additional topics include how to manage a tabular database -- including table storage, processing, permissions and deployment -- and how to deploy your tabular model to the cloud with Azure Analysis Services.
Finally, this course will teach you how to compare the two types of Analysis Services models: tabular and multidimensional. This will help you to determine the appropriate data model for your project.
By the end of the course, you will have designed, developed and deployed a tabular model, and you will be ready to deliver high-performance business user experiences.
The course includes comprehensive hands-on exercises that enable you to directly apply the lessons with sample data.
Note: To complete the hands-on elements in this course, you will require an Azure subscription. You can sign up for a free Azure trial subscription (a valid credit card is required for verification, but you will not be charged for Azure services). Note that the free trial is not available in all regions. It is possible to complete the course and earn a certificate without completing the hands-on practices.",IS
Implementing ETL with SQL Server Integration Services,"Microsoft SQL Server Integration Services (SSIS) features graphical tools and wizards for:

building and debugging packages
tasks for performing workflow functions
executing SQL statements
data sources and destinations for extracting and loading data
transformations for cleaning, aggregating, merging, and copying data

In this computer science course, you'll extract data from a wide variety of data sources, such as files and relational data sources, perform data integration and transformation solutions, and load data into single or multiple destinations. You will solve complex business problems using best practices and troubleshooting techniques.","IAS
IM
IS
SDF"
Developing Dynamic Web Applications Using Angular,"If you’re a front-end developer using Angular, you’re already creating dynamic webpages for mobile and desktop web apps. Broaden your programming experience with a deeper dive into this open source framework.
In this course for developers using Angular versions 2 and greater, you’ll work through a series of sequential modules that cover increasingly complex topics. See why tried-and-true Angular does just what you need it to do, as you create sophisticated, enterprise-grade web apps that render, HTML components based on the client.
Get a history of Angular, and explore basic Angular concepts and Node Package Manager. Create components and HTML templates, and look at template syntax and binding.
Learn about the lifecycle of an Angular component or directive, the dependency injection framework, and even how to design modular applications. Work with advanced TypeScript features, like declarations, modules, and namespaces, and see their usage within Angular.
Finally, review the TypeScript compiler and learn how it is used with Visual Studio Code. Make the most of the videos, hands-on labs, and multiple-choice assessments, as you build on your Angular experience.","SDF
PL"
Microsoft Professional Orientation : Front End Web Development,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
The orientation course is designed to introduce the student to the Web Front-End Developer discipline by introducing the various technologies that computer programmers use when creating web sites.
The technologies are focused on aspects of web development that are part of the front-end of a web application, more specifically, code the executes on the client computer rather than on a server.
This course is the first course students take as a part of the Web Front-End Developer, Microsoft Professional Program. It will introduce the topics that will be a part of the course work throughout the program. Students will gain an understanding of the technologies and have the opportunity to explore some code and developer tools for work on web applications.","AL
AR
IAS
PL
SF"
Building Your Azure Skills Toolkit,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development.
Want to give your apps the power of the cloud? Roll up your sleeves for a fast-paced, hands-on tour of several cloud-powered features in Azure, and learn how to integrate Azure services within a single web app.
As you work with the experts through an easy-to-follow scenario, start by creating a web app using Angular and .NET Core. Then, integrate Bing Search to find and retrieve images to display on your site. Ready for artificial intelligence (AI)? Use Azure Cognitive Services Computer Vision to analyze and detect the objects within the images you found. Plus, use SQL Azure to store your metadata in a scalable database, retrieve the data, and display it using .NET Core Web API and Entity Framework Core.
Complete the scenario with Azure Search for quick retrieval of images based on your own search terms. Finally, use Azure Active Directory B2C to enable secure access to your stored images and to protect the entire application.",IAS
Developing IoT Solutions with Azure IoT,"Ready to take your first steps in IoT device development? Bring your basic programming skills, and get started with this practical exploration of what IoT means and how to use Microsoft Azure technologies in IoT solutions. See how IoT is being implemented by businesses around the world, and configure and implement your own end-to-end IoT solution using the Azure IoT Hub.
With help from the experts, learn the fundamentals of key platform features. Start out with device basics, like registration and tracking, and then implement cloud-to-device and device-to-cloud messaging. Take a look at Azure analytics, including Azure Stream Analytics, to perform real-time monitoring of incoming data and to generate alerts. Then, store sensor data in the cloud using DocumentDB, implement basic Power BI features, and add remote management and update capabilities to your device. In this self-paced course, explore different starter kits and work through a practical project with the Raspberry Pi kit. Using a combination of written and video-based instructional materials, along with a comprehensive series of hands-on lab activities, get an up-close look at real-world IoT skills that you can start using right away.",IS
Microsoft Azure Virtual Machines,"This course is part of the Microsoft Professional Program in Cloud Administration.
This course focuses on using IaaS virtual machines in Azure for IaaS workloads, emphasizing basic configuration, planning, deployment and management tasks. You&rsquo;ll be introduced to how to secure and make your virtual machines highly available and scalable.",IAS
DevOps for Databases,"This course is part of the Microsoft Professional Program in DevOps.
This course examines the challenges and solutions of incorporating your database into a DevOps software development process. This course will help you understand the challenges of working with various data stores while developing and changing your software at a rapid pace.
You will learn where and how databases can fit into DevOps processes.
The course will cover:&nbsp;


Committing database code to a version control system (VCS), Continuous Integration and unit testing database code.
Release management for databases, in areas such as release gates, deploying releases to multiple environments, validating deployments with smoke tests and rolling back deployments.
Monitoring database code, branching and merging database code, cross databases dependencies, upgrading multiple databases, federated databases, dark launching, error handling and cleaning up technical debt with databases.

Finally, while the course will primarily use Microsoft SQL Server (and tailor our examples for it), other relational or non-relational database platforms have similar concepts that can be applied.","PL
SDF
SP
PD
SE"
Application Monitoring and Feedback Loops,"This course is part of the Microsoft Professional Program in DevOps.
This course will cover general application monitoring and feedback loop practices and principles, including different kinds of feedback. You will learn how feedback is used in different stages of the value stream, and its benefits. You will learn about the different kinds of telemetry, who can benefit from it and how it is used to collect data from monitoring.&nbsp;
You will be introduced to Application Performance Management, the monitoring and management&nbsp;of performance and availability of software applications.
We will also cover Health and Performance Monitoring with Application Insights, including which features it contains, how to use it to monitor your application availability, usage, and performance and diagnostics.
The course also covers Log Analytics, including Operations Management Suite (OMS) Log Analytics. It will cover how to set up and configure Log Analytics for data collection and how to use Log Analytics to search and analyze data. It also covers OMS solutions as well as how to configure visualizations and how to configure alerts.
Finally, the course will cover Third-Party Monitoring Tools, including New Relic, Loggly and Nagios Core.","AL
AR
DS
IAS
IM
PL
SDF
SP"
Architecting Distributed Cloud Applications,"This course is part of the Microsoft Professional Program in DevOps.
This technology-agnostic course begins by explaining the benefits of distributed cloud applications with an emphasis on maintaining high-availability and scalability in a cost-effective way while also dealing with inevitable hardware and software failures.&nbsp;
The course also cover, Microservices and containers, Networking communication, Messaging communication, Versioning, upgrading and configuration, Data storage services and Disaster recovery.
This course is for anyone considering or actively working on a distributed cloud application. It is designed to provide you with a thorough understanding of these concepts, the various pros and cons of specific technologies, and the resilient patterns that are heavily used by distributed cloud applications. This knowledge will help you to easily build cost-efficient and fault-tolerant systems.
The course contains labs to practice your learning, review questions for self-assessment, and a final exam to validate learning. A score of 70% is required to pass the final exam and receive a certificate for the course.",SP
Windows 10 Features for a Mobile Workforce: Identity Management and Data Access,"The proliferation of consumer devices and ubiquitous information access is driving the enterprise away from a device-centric model centered on corporate-owned and provisioned devices to a bring-your-own-device (BYOD) model in which employees use their own devices to access corporate applications and data. Workers expect consistent access to corporate tools and data regardless of the type of device they’re using. They also want their corporate-issued technology and resources to look and behave like their personal technology—always on and always available from any device, from virtually anywhere.
An enterprise model that supports the use of consumer devices in the workplace and the ability to work from virtually anywhere and anytime must move from a device-focused view of IT management to one that’s people centric. In reality it is not the device that is mobile, it is the users.
It is important that the IT challenges of BYOD, Mobile device management, cloud computing, and hybrid identities be understood before one can understand how Windows 10 helps address those issues.",SP
Windows 10 Security Features,"Looking to stay ahead of the security curve? As you get to know the new security architecture and features of Windows 10&mdash;and learn to deploy them&mdash;gain the insights and knowledge you'll need for the future.
 
 Microsoft security engineers have hardened the operating system at every layer of the stack, reducing the attack surface with new security features that help protect against a range of threats. Join a team of experts to explore the ever-increasing levels of security within Windows 10.&nbsp;
 
 You'll start with the Windows 10 defensive stack, including bundled security features. 
Configure endpoint security, review additional security tools, like Windows Information Protection and Windows Defender Exploit Guard. In this course, you'll get practical details on built-in, end-to-end protections and support for the larger ecosystem of ISV and OEM partners.
 
 Skill up to face down today&rsquo;s security threats with hands-on virtualized lab exercises, demos, quizzes, and a final exam. The following team of recognized experts contributed to this course: Andrew Warren, Lesley Kipling, Erdal Ozkaya, Neil Carpenter, Sami Laiho, Raymond Comvalius, Seth Moore, Michiko Short, Mike Terrill, Amitai Rottem, Randy Treit.",SP
Security in Office 365,"In Security in Office 365&reg;, you will learn how to plan, implement, and manage the security features of Office 365 in your organization. The Security and compliance center in Office 365 offers a wide variety of security features to protect your users and data in Office 365. You will learn about the different types of threats that can target your organization and how the security features like Advanced Threat Protection, Threat Intelligence, auditing and Advanced Security Management will protect your organization&rsquo;s data in Office 365.","IS
SP"
Asynchronous Programming in C# and .NET Core,"Asynchronous programming is a rich and deep topic.  
This course introduces the concepts related to asynchronous programming with C# and the techniques for applying those concepts. Students are provided with a combination of text- and video-based instructional materials, as well as a series of hands-on lab activities, to learn skills that they can apply to enterprise software development. This course focuses on real-world applications of this programming style, and it presents common use cases where asynchronous programming is most effective.   
The hands-on labs take students through both desktop and web application development, examining how asynchronous development can be effective on each platform. Students are guided to write code with parallel programming techniques, working through common use cases.",IAS
Data Access in C# and .NET Core,"This course demonstrates the use of Microsoft data access technologies using C# and .Net Core. Students will learn everything they need to know to develop a data layer for their applications. This course provides instruction in both text and video in order to provide the student with relevant learning opportunities.  
Labs will help students add to an existing database, and build out parts of a functional data layer. Real world examples will be used to keep the instruction relevant for the students.","AL
IAS
NC
OS
PL
SDF
SE"
IT Support: Networking Essentials,"This course is part of the Microsoft Professional Program Certificate in IT Support.
IT Support: Networking Essentials is designed to introduce the core networking concepts to learners who are new to IT Support. The course begins by explaining the purpose of networking and then examines how networks are configured in homes, offices, between offices, and around the world with the Internet. This includes a review of network topologies, physical networking, and network protocols. The course concludes with an introduction to network troubleshooting, including how to troubleshoot common networking issues.","NC
AR"
IT Support: Cloud Fundamentals,"This course is part of the Microsoft Professional Program Certificate in IT Support.
IT Support: Cloud Fundamentals is designed to introduce the core cloud concepts to IT Support learners. This course provides an historical perspective of how IT has evolved to the point where it is now using cloud solutions. The course examines the different types of cloud solutions that are available, as well as the basics of cloud services, cloud usage models, and cloud security. The course concludes with an introduction to Microsoft Azure and Microsoft Office 365.","AR
IAS
SP"
IT Support: Troubleshooting Windows,"This course is part of the Microsoft Professional Program Certificate in IT Support.
This course is designed to teach basic troubleshooting skills for Windows 10. In this course we discuss common issues that arise and tools to help you resolve them.&nbsp; Some of the skills covered in this course include:


Troubleshooting Windows installation problems.
Troubleshooting Windows web browser problems.
Troubleshooting application installation issues.
Troubleshooting Windows Authentication problems.
Use of Windows reliability tools.","AR
IAS
OS
PL
SP"
Enabling Data Source Discovery with Azure Data Catalog,"Azure Data Catalog helps data producers and data consumers to discover, organize, and understand diverse data assets, and it enables self-service data source discovery with a crowdsourced model of metadata and annotation in a community and culture of data. In this computer science course, data professionals and business intelligence experts can get hands-on with the cloud-based Azure Data Catalog service to see how it works. 
Start with an overview of Azure Data Catalog and its abilities, and then look at adopting and creating a Data Catalog. Register data sources, discover and annotate assets, and define a Business Glossary. Get the details on administering and securing the catalog so you can get the most from&mdash;and help protect&mdash;existing information assets. Don&rsquo;t miss this chance to see how Azure Data Catalog delivers a server-less metadata repository that can empower your organization to get more value from its existing data sources.","AL
AR
IAS"
IT Fundamentals for Business Professionals: Programming,"This course is one of the 5 courses of an introductory business information systems series, designed to introduce you to the amazing world of Information Technology.  
The series of courses is designed so that a professional in a field outside the information technologies (financial, administrative or managerial) acquires the basic knowledge in Information Technology to be able to interact more profitably with the computer and telecommunications specialists of your company or other corporations with which you are related, being able to specify requirements, evaluate workloads and monitor results in a much more effective way.  
The syllabus of the series is based on the CLEP Information Systems and Computer Applications exam.  
In this course you will learn the basics of software programming. We will address the basic logic behind any computer program, what types and structures of data and files are used, how object-oriented programming works, database management and SQL language and various concepts and guidelines in web development such as HTML, XML, CSS or javascript, among others.  
By completing the series of 5 courses, you will be prepared to interact effectively with specialists in the Information Technology sector (and pass the CLEP ISCA exam if you wish).",IS
Fundamentos TIC para profesionales de negocios: Programación,"Este curso forma parte de una serie de 5 cursos de introducción al uso de sistemas de información en las empresas que te introducirá en el apasionante mundo de las TIC.  
La serie de cursos está pensada para que un profesional de un campo ajeno a las tecnologías de la información (financiero, administrativo o gerencial) adquiera los conocimientos básicos en Tecnologías de la Información necesarios para poder relacionarse de forma más provechosa con los especialistas en informática y telecomunicaciones de su empresa u otras corporaciones con las que tenga relación, siendo capaz de especificar requerimientos, evaluar cargas de trabajo y supervisar resultados de forma mucho más efectiva.  
En este curso de sistemas de información y ordenadores aprenderás los conceptos básicos de la programación de software. Trataremos la lógica básica que hay detrás de cualquier programa de ordenador, qué tipos y estructuras de datos y ficheros se utilizan, cómo funciona la programación orientada a objetos, la gestión de bases de datos y el lenguaje SQL y diversos conceptos y directrices en el desarrollo web, como el HTML, XML, CSS o javascript, entre otros.  
Al completar la serie de 5 cursos, estarás preparado para relacionarte de forma eficaz con los especialistas del sector de las Tecnologías de la Información.",IS
"Microsoft Office Fundamentals: Outlook, Word, and Excel","This course is part of the Microsoft Professional Program Certificate in IT Support.
In this training course, you will learn basic Word, Excel, and Outlook skills.  
You will learn how to create and manage Word documents, organize information in tables, perform calculations on data, create graphs and charts, organize your email Inbox, and manage email automatically.  
Today, employers across many industries and fields expect candidates to have Microsoft Office skills, as it is the most universally utilized software in business. Having these skills, even at a basic level, will help with your job prospects and increase your chances to be considered for most roles.",SP
Natural Language Processing (NLP),"Natural language processing (NLP) is one of the most important technologies of the information age. Understanding complex language utterances is also a crucial part of artificial intelligence.&nbsp;
In this course, you will be given a thorough overview&nbsp;of Natural Language Processing and how to use classic machine learning methods. You will learn about Statistical Machine Translation as well as Deep Semantic Similarity Models (DSSM) and their applications.&nbsp;
We will also discuss deep reinforcement learning techniques applied in NLP and&nbsp;Vision-Language Multimodal Intelligence.&nbsp;","AL
DS
IAS
IS"
IT Fundamentals for Business Professionals: Social implications,"This course is one of the 5 courses of an introductory business information systems series, designed to introduce you to the amazing world of Information Technology.  
The series of courses is designed so that a professional in a field outside the information technologies (financial, administrative or managerial) acquires the basic knowledge in Information Technology to be able to interact more profitably with the computer and telecommunications specialists of your company or other corporations with which you are related, being able to specify requirements, evaluate workloads and monitor results in a much more effective way.  
The syllabus of the series is based on the CLEP Information Systems and Computer Applications exam.  
In this Computer Science course we will deal with various social aspects of ICT, such as its effect on globalization, business strategy and other economic processes, computer threats and how to protect us against them, ergonomics, cloud computing and careers professionals in the field of ICT.  
By completing the series of 5 courses, you will be prepared to interact effectively with specialists in the Information Technology sector (and pass the CLEP ISCA exam if you wish).",IS
Introduction to Node.js,"Have you ever wanted to create a full-fledged web application, beyond just a simple HTML page? In this course, you will learn how to set up a web server, interact with a database and much more!
This course will start off by teaching you the basics of Node.js and its core modules. You will then learn how to import additional modules and configure your project using npm. From there, you will learn how to use Express to set up a web server and how to interact with a MongoDB database using Mongoose. By the end of the course you will have created several real-world projects such as a web scraper, a blogging API, and a database migration script.","SF
SDF
AL
IM"
Video Game Design: Teamwork & Collaboration,"Game designers work with a wide range of asset creators, programmers, producers, and others to bring a video game from concept to product.
In this course, you will learn about the different types of teams a game designer is a member of, both large and small.
You will also learn about the different roles of a development team and how game designers collaborate with others to successfully create and market a final product.","AR
DS
GV
HCI
IAS
PL
SE
SP"
System Center 2016: Building a Datacenter Fabric,"This course teaches System Center administrators to properly install, and manage, the System Center components needed to build a service fabric which is the foundation of a well-managed datacenter.  
The coursework covers the different components of System Center as well as methods for installing and configuring System Center Virtual Machine Manager. You'll learn to deploy and manage compute, storage, and network fabrics as well as virtual machines.",SE
String Processing and Pattern Matching Algorithms,"The world and internet are full of textual information. We search for information using textual queries and read websites, books and e-mails.
These are all strings from a computer science point of view. To make sense of all this information and make search efficient, search engines use many string algorithms. Moreover, the emerging field of personalized medicine uses many search algorithms to find disease-causing mutations in the human genome.
In this course, part of the Algorithms and Data Structures MicroMasters program, you will learn about:
suffix trees;
suffix arrays;
how other brilliant algorithmic ideas help doctors to find differences between genomes;
power lightning-fast Internet searches.","AL
SDF"
Gameplay Programming for Video Game Designers,"Some video game designers are programmers in their own right, and may have even come from that background to a designer’s role. Others have a less formal background. All video game designers should have a solid understanding of what programmers can and cannot do, how assets interact with code, what algorithmic thinking is and how to take advantage of the capabilities of different engines and tools.",IS
Dynamic Programming: Applications In Machine Learning and Genomics,"If you look at two genes that serve the same purpose in two different species, how can you rigorously compare these genes in order to see how they have evolved away from each other?
In the first part of the course, part of the Algorithms and Data Structures MicroMasters program, we will see how the dynamic programming paradigm can be used to solve a variety of different questions related to pairwise and multiple string comparison in order to discover evolutionary histories.
In the second part of the course, we will see how a powerful machine learning approach, using a Hidden Markov Model, can dig deeper and find relationships between less obviously related sequences, such as areas of the rapidly mutating HIV genome.","AL
AR
IAS
NC
PL
SDF"
Graph Algorithms in Genome Sequencing,"In this course, part of the Algorithms and Data Structures MicroMasters program, you will learn how graph algorithms are used in two fundamental problems in modern biology:
How do we sequence a genome?
How do we construct an evolutionary “Tree of Life?""
In the first part of the course, you will learn how genome sequencing relies on using a graph to assemble millions of tiny DNA fragments into a contiguous genome. We will then shift gears and learn how to construct an evolutionary tree of life from genome data.","NC
AL"
Algorithms and Data Structures Capstone,"Building a fully-fledged algorithm to assemble genomes from DNA fragments on a real dataset is an enormous challenge with major demand in the multi-billion dollar biotech industry.
In this capstone project, we will take the training wheels off and let you design your own optimized software program for genome sequencing.
This big data challenge will cover the entire MicroMasters program. After a brief introduction to the steps required to build a genome assembler, we will let you take steps on your own to start working with real data taken from a sequencing machine and see if you can design genome assembly software that can compete with popular software used in hundreds of sequencing labs around the world every day.","AL
IAS
PD
SDF"
How to Win Coding Competitions: Secrets of Champions,"Want to be the programmer hot tech companies are looking for?
Take your programming skills to the next level and prove your excellence by learning how to succeed in programming competitions.
Besides improving your knowledge of algorithms and programming languages, you’ll gain unique experience in problem solving, thinking outside the box and meeting tough deadlines – all essential for boosting your value as a programmer and securing a coveted job in Silicon Valley (should you want one).
This computer science course is an introduction to competitive programming developed by ITMO University, the leading expert in IT and the only 7-time world champion of the Association for Computing Machinery - International Collegiate Programming Contest (ACM ICPC), the world's most prestigious programming contest.
You will learn all you need to know about the variety of programming competitions that exist, as well as basic algorithms and data structures necessary to succeed in the most popular of them.","AL
AR
IAS
SDF"
Computer Forensics,"Digital forensics involves the investigation of computer-related crimes with the goal of obtaining evidence to be presented in a court of law.
In this course, you will learn the principles and techniques for digital forensics investigation and the spectrum of available computer forensics tools. You will learn about core forensics procedures to ensure court admissibility of evidence, as well as the legal and ethical implications. You will learn how to perform a forensic investigation on both Unix/Linux and Windows systems with different file systems. You will also be guided through forensic procedures and review and analyze forensics reports.
This offering is part of the RITx Cybersecurity MicroMasters Program that prepares students to enter and advance in the field of computing security.",SP
Network Security,"In this course, you will examine the various areas of network security including intrusion detection, evidence collection and defense against cyber attacks.
The issues and facilities available to both the intruder and data network administrator will also be examined to illustrate their effect.
You will learn the principles and concepts of wired and wireless data network security. You will be guided through a series of laboratories and experiments in order to explore various mechanisms for securing data networks including physical layer mechanisms, filters, applications and encryption.
You will analyze attack/defend scenarios and determine the effectiveness of particular defense deployments against attacks.
This course is a part of the RITx Cybersecurity MicroMasters Program.","NC
SP"
Cloud Computing Infrastructure,"As Cloud Computing shapes businesses of all sizes, it is vital to understand the technologies behind cloud infrastructure, both public and private.
This course, part of the Cloud Computing MicroMasters program, focuses on components of Infrastructure as a Service (IaaS) cloud service model. These components include: compute, storage, network, and auxiliary services. The class will also discuss most popular cloud IaaS deployment architectures.
You will examine these IaaS issues in depth, and then apply the acquired knowledge in 2 lab projects to migrate a website to the Amazon Web Services (AWS) IaaS environment, deploy the necessary infrastructure, install and configure the web server, set up the website, and monitor the deployment in action.","IS
IAS
NC
SDF
SP"
Cloud Computing Security,"How do you protect the critical data that is increasingly being stored in the cloud? Learn how to build a security strategy that keeps data safe and mitigates risk.
In this course, part of the Cloud Computing MicroMasters program, you will be introduced to industry best practices for cloud security and learn how to architect and configure security-related features in a cloud platform. Case studies and government standard documents will be reviewed to help ensure appropriate levels of security are implemented.
You’ll develop the necessary skills to identify possible security issues in the cloud environment. You will also gain experience with tools and techniques that monitor the environment and help prevent security breaches such as monitoring logs and implementing appropriate security policies.",SP
Formal Software Verification,"Want to gain software quality skills used in mission critical systems?
Modeling checking, symbolic execution and formal methods are techniques that are used for mission critical systems where human life depends upon the system working correctly.
In this course, part of the Software Testing and Verification MicroMasters program, you will learn how to perform these techniques.
The concepts from this course can be applied to any programming language and testing software.","SE
SP"
Foundations of Data Science: Computational Thinking with Python,"We live in an era of unprecedented access to data. To make sense of all the information at our disposal, we have to be able to organize it and succinctly describe its salient features. That is what you will learn to do in this course.
To work with large amounts of data, you need computational power. This course teaches you basic programming skills for manipulating data. You will learn how to use Python to organize and manipulate data in tables, and to visualize data effectively. No prior experience with programming or Python is needed.
The examples given in the course involve real world data from diverse settings. Not all data is numerical – you will work with textual data and with maps. Though the term “data science” is relatively new, the fundamental ideas of data science are not. The course includes powerful examples that span the centuries from the Napoleonic era to the present day.
Throughout, the underlying thread is that data science is a way of thinking, not just an assortment of methods. The course also emphasizes interpretation and communication, which are essential skills for all data scientists.",IS
Cybersecurity Fundamentals,"In this introduction to the field of computing security, you will be given an extensive overview of the various branches of computing security. You will learn cybersecurity concepts, issues, and tools that are critical in solving problems in the computing security domain.
You will have opportunities to learn essential techniques in protecting systems and network infrastructures, analyzing and monitoring potential threats and attacks, devising and implementing security solutions for organizations large or small.
This offering is part of the RITx Cybersecurity MicroMasters Program that prepares students to enter and advance in the field of computing security.
This course is part of a MicroMasters program. If you complete all courses in the MicroMasters program in 2018, GE will guarantee you an interview in Boston for an internship or full-time role. Open to Massachusetts residents only.",SP
"Quantum Information Science I, Part 3","This course is the final part of a three-course series that provides an introduction to the theory and practice of quantum computation. This third course builds on the foundational introduction provided in the first course, and the simple quantum protocols provided in the second course, and explores quantum communication, including:


Models of quantum noise and quantum channels
Quantum error correction
Quantum key distribution
Distributed quantum protocols

This course will help you establish a foundation of knowledge for understanding what quantum computers can do, how they work, and how you can contribute to discovering new things and solving problems in quantum information science and engineering.
The three-course series comprise:


8.370.1x: Foundations of quantum and classical computing &ndash; quantum mechanics, reversible computation, and quantum measurement
8.370.2x: Simple quantum protocols and algorithms &ndash; teleportation and superdense coding, the Deutsch-Jozsa and Simon&rsquo;s algorithm, Grover&rsquo;s quantum search algorithm, and Shor&rsquo;s quantum factoring algorithm
8.370.3x: Foundations of quantum communication &ndash; noise and quantum channels, and quantum key distribution

Prior knowledge of quantum mechanics is helpful but not required. It is best if you know some linear algebra.
This course has been authored by one or more members of the Faculty of the Massachusetts Institute of Technology. Its educational objectives, methods, assessments, and the selection and presentation of its content are solely the responsibility of MIT. MIT gratefully acknowledges major support for this course, provided by IBM Research. This course on quantum information science is a collective effort to further advance knowledge and understanding in quantum information and quantum computing.

For more information about MIT’s Quantum Curriculum, visit quantumcurriculum.mit.edu.",IAS
Introducción a la programación en Java: escribiendo buen código,"Este es un curso introductorio para aprender a programar en Java diseñado para enseñar a escribir ""buen"" código en este lenguaje de programación, entendiendo como ""bueno"" aquel que es correcto y eficiente.
Se introducirán los principios básicos de la ingeniería de software para facilitar la reutilización del código. En la última parte de este curso de Java también se abordarán cuestiones éticas y la propiedad intelectual de nuestros programas. Se proporcionarán ejemplos y casos de estudio prácticos para que los alumnos puedan implementar programas simples, pero cada vez más complejos, en Java.
El énfasis se pone en la realimentación inmediata y en tener una experiencia divertida con la programación. Conocer cómo programar en Java no sólo es útil para poder programar los dispositivos actuales, como ordenadores y teléfonos inteligentes. También abre la puerta al pensamiento computacional, es decir, la aplicación de técnicas informáticas a los procesos cotidianos.",SP
"Quantum Information Science I, Part 2","This course is part of a three-course series that provides an introduction to the theory and practice of quantum computation. This second course builds on the foundational introduction provided in the first course, 8.370.1x, and explores simple quantum protocols and algorithms, including:
Quantum teleportation and superdense coding
The Deutsch-Jozsa and Simon's algorithms
Grover's quantum search algorithm
Shor's quantum factoring algorithm
This course will help you understand what quantum computers can do and how they work. You'll learn how you can contribute to discovering new things and solving problems in quantum information science and engineering.  
The complete three-course series includes:
8.370.1x: Foundations of quantum and classical computing – quantum mechanics, reversible computation, and quantum measurement
8.370.2x: Simple quantum protocols and algorithms – teleportation and superdense coding, the Deutsch-Jozsa and Simon’s algorithm, Grover’s quantum search algorithm, and Shor’s quantum factoring algorithm
8.370.3x: Foundations of quantum communication – noise and quantum channels, and quantum key distribution
This course has been authored by one or more members of the Faculty of the Massachusetts Institute of Technology. Its educational objectives, methods, assessments, and the selection and presentation of its content are solely the responsibility of MIT. MIT gratefully acknowledges major support for this course, provided by IBM Research. This course on quantum information science is a collective effort to further advance knowledge and understanding in quantum information and quantum computing.
For more information about MIT’s Quantum Curriculum, visit quantumcurriculum.mit.edu.","AL
CN
IAS"
NP-Complete Problems,"Step into the area of more complex problems and learn advanced algorithms to help solve them.
This course, part of the Algorithms and Data Structures MicroMasters program, discusses inherently hard problems that you will come across in the real-world that do not have a known provably efficient algorithm, known as NP-Complete problems.
You will practice solving large instances of some of these problems despite their hardness using very efficient specialized software and algorithmic techniques including:
SAT-solvers
Approximate algorithms
Special cases of NP-hard problems
Heuristic algorithms","AL
AR
DS
GV
SDF"
Monetize Android Apps with Business Models,"Learn how to monetize Android apps without adversely affecting the user experience. We will present the best practices of advertising, monetizing and publishing your Android app. We will also present an introduction to business models that will help you make money from an app using Google AdMob, Google&rsquo;s mobile advertising platform specifically designed for mobile apps.
This course is part of the GalileoX Android Developer MicroMasters Program that is specifically designed to teach the critical skills needed to be successful in this exciting field and to prepare you to take the Google Associate Android Developer Certification exam. In order to qualify for the MicroMasters Credential you will need to earn a Verified Certificate in each of the four courses as well as the Final Project.",SP
A System View of Communications: From Signals to Packets (Part 3),"Have you ever wondered how information is transmitted using your mobile phone or a WiFi hotspot? Gain an understanding of the basic engineering tools used and tradeoffs encountered in the design of these communication systems.
This course is divided into three parts. In Part 1, we examine the point-to-point link, which communicates information from a single transmitter to a single receiver. Part 2 examines how multiple transmitters can share the same physical channel. Part 3 discusses how information can be transmitted reliably from one station to another over a network that connects multiple stations. Online interactive exercises are included to help build your intuition.
This course was inspired by and built upon the course 6.02 Digital Communication Systems developed at MIT, which Prof Bertram Shi worked on during his sabbatical in 2009.","NC
SP"
Introduction to Computing for Data Analysis,"The modern data analysis pipeline involves collection, preprocessing, storage, analysis, and interactive visualization of data.
The goal of this course, part of the Analytics: Essential Tools and Methods MicroMasters program, is for you to learn how to build these components and connect them using modern tools and techniques.
In the course, you&rsquo;ll see how computing and mathematics come together. For instance, &ldquo;under the hood&rdquo; of modern data analysis lies numerical linear algebra, numerical optimization, and elementary data processing algorithms and data structures. Together, they form the foundations of numerical and data-intensive computing.
The hands-on component of this course will develop your proficiency with modern analytical tools. You will learn how to mash up Python, R, and SQL through Jupyter notebooks, among other tools. Furthermore, you will apply these tools to a variety of real-world datasets, thereby strengthening your ability to translate principles into practice.",IS
Database Systems Concepts and Design,"This course presents an example of how to apply a database application development methodology to a major real-world project.
All the database concepts, techniques and tools that are needed to develop a database application from scratch will be introduced along the way as you apply them to your own major class team project.
In addition to the development methodology, techniques and tools learned in this course will include the Extended Entity Relationship Model, the Relational Model, Relational algebra, calculus and SQL, database normalization, efficiency and indexing. Finally, techniques and tools for metadata management and archival will be presented.","AR
CN
IAS
OS
PL
SP"
Simulation and Modeling for Engineering and Science,"Simulation is a top technology used in engineering and science. This self-contained course will cover everything you need to know to hit the ground running on real-world simulation projects. 
Simulation can be used to model everything from call center operations, manufacturing centers, traffic flow, physical phenomena (such as the weather), and even the propagation of a disease through a population. 
In this course, we&rsquo;ll emphasize general modeling skills, powerful simulation programming tools, and the mathematics and statistical analysis techniques needed to ensure that your results are meaningful and rigorous. 
Our instructor has over 35 years of experience in teaching simulation and you will get extensive hands-on experience with&nbsp;state-of-the-art simulation analysis tools.",AR
Data and Visual Analytics,"This course will introduce you to broad classes of techniques and tools for analyzing and visualizing data at scale. It&nbsp;will emphasize how to&nbsp;complement&nbsp;computation and visualization to perform an effective analysis. 
We will cover methods from each side, and hybrid ones that combine the best of both worlds. Students will work in small teams to complete a project exploring novel approaches for interactive data &amp; visual analytics.","SDF
IAS"
Big Data Analytics Using Spark,"In data science, data is called “big” if it cannot fit into the memory of a single standard laptop or workstation.
The analysis of big datasets requires using a cluster of tens, hundreds or thousands of computers. Effectively using such clusters requires the use of distributed files systems, such as the Hadoop Distributed File System (HDFS) and corresponding computational models, such as Hadoop, MapReduce and Spark.
In this course, part of the Data Science MicroMasters program, you will learn what the bottlenecks are in massive parallel computation and how to use spark to minimize these bottlenecks.
You will learn how to perform supervised an unsupervised machine learning on massive datasets using the Machine Learning Library (MLlib).
In this course, as in the other ones in this MicroMasters program, you will gain hands-on experience using PySpark within the Jupyter notebooks environment.","SDF
NC
PL
SF"
Foundations of Data Science: Inferential Thinking by Resampling,"Using real-world examples from law, medicine and football, you’ll discover how data scientists make conclusions about unknowns based on the data available. Often, the data we have is incomplete, yet we’d still like to draw inferences about the world and quantify the uncertainty in our conclusions. This is called statistical inference. In this course, you will learn methods for statistical inference and see how to apply them to real-world data sets.
The course will teach you estimation: given a random sample, estimate some quantity that we cannot observe directly. You will also learn how to quantify the uncertainty in your estimate. Second, the course will teach you about hypothesis testing, which allows us to evaluate theories or hypotheses about how the world works. In hypothesis testing, we compare what the theory would predict to the actual observations and data we have, to determine whether the theory appears to be consistent with the available data. You will also learn how to quantify the uncertainty in the conclusions you draw using hypothesis testing. This helps assess whether patterns that appear to be present in the data actually represent a true relationship in the world or whether they might merely reflect random fluctuations due to noise. You will learn multiple methods for estimation and hypothesis testing, based on simulation, the bootstrap method, and A/B testing for comparing two random samples. Finally, you will learn about randomized controlled experiments and how to draw conclusions about causality.
The course emphasizes the conceptual basis of inference, the logic of the decision-making process, and the sound interpretation of results.",IS
Software Testing Fundamentals,"Want to gain software testing skills to start a career or are you a software developer looking to improve your unit testing skills? This course, part of the Software Testing and Verification MicroMasters program, will provide the essential skills you need for success. 
Software needs to be tested for bugs and to insure the product meets the requirements and produces the desired results. Software testing is essential to providing a quality product. 
Learn the techniques Software Testers and Quality Assurance Engineers use every day, which can be applied to any programming language and testing software.
No previous programming knowledge needed. This course will use Java and JUnit, however, for examples and assignments.","AL
IAS
SE"
Cybersecurity Risk Management,"Cybersecurity risk management guides a growing number of IT decisions. Cybersecurity risks continue to have critical impacts on overall IT risk modeling, assessment and mitigation.
In this course, you will learn about the general information security risk management framework and its practices and how to identify and model information security risks and apply both qualitative and quantitative risk assessment methods. Understanding this framework will enable you to articulate the business consequences of identified information security risks. These skills are essential for any successful information security professional.
The goal of this course is to teach students the risk management framework with both qualitative and quantitative assessment methods that concentrate on the information security (IS) aspect of IT risks. The relationship between the IT risk and business value will be discussed through several industry case studies.
First, you will learn about the principles of risk management and its three key elements: risk analysis, risk assessment and risk mitigation. You will learn to identify information security related threats, vulnerability, determine the risk level, define controls and safeguards, and conduct cost-benefit analysis or business impact analysis.
Second, we will introduce the qualitative and quantitative frameworks and discuss the differences between these two frameworks. You will learn the details of how to apply these frameworks in assessing information security risk.
Third, we will extend the quantitative framework with data mining and machine learning approaches that are applicable for data-driven risk analytics. You will explore the intersection of information security, big data and artificial intelligence.
Finally, you will analyze a series of extended case studies, which will help you to comprehend and generalize the principles, frameworks and analytical methods in actual examples.
This offering is part of the RITx Cybersecurity MicroMasters Program that prepares students to enter and advance in the field of computing security.",IS
Deploy and Service Mobile Apps Using Azure App Service,"Cloud services make it easy for developers to quickly build, deploy and manage scalable software applications. &nbsp;In this course, you will learn how to take advantage of Azure's App Service for Mobile Apps to create, deploy and service mobile applications.&nbsp; This will enable you to build mobile applications that are scalable to meet the needs of your users and customers.&nbsp; 
First, you'll learn the basics of Azure and Azure App Service for Mobile Apps, getting an overview of Azure account options, the Azure Portal and how to set up a basic Mobile App.&nbsp; Next, you'll learn about options for deploying mobile applications to Azure's App Service using FTP and Git, as well as options for continuous deployment.&nbsp; From there, you'll get an overview of Azure App Insights, which will allow you to obtain and analyze telemetry for your live application.&nbsp; Finally, you'll learn about testing, debugging and logging using Azure's built-in Kudu framework.
The hands-on, realistic examples and labs in this course will prepare you to apply these skills in your role as a software developer.
Release schedule:
This course is on a rolling release module.&nbsp; Modules 00 and 01 will be available when the course is live.&nbsp; Remaining &nbsp;modules will be released according to the following schedule:


Jan 15: Module 02
Jan 22: Module 03
Jan 29: Modules 04 and 05","NC
PL
SF
SP"
Quantum Information Science II: Efficient Quantum Computing - fault tolerance and complexity,"This three-module sequence of courses covers advanced topics in quantum computation and quantum information, including quantum error correction code techniques; efficient quantum computation principles, including fault-tolerance; and quantum complexity theory and quantum information theory. Prior knowledge of quantum circuits and elementary quantum algorithms is assumed. These courses are the second part in a sequence of two quantum information science subjects at MIT.
&nbsp;
The three modules comprise:&nbsp;


8.371.1x: Quantum states, noise and error correction
8.371.2x: Efficient quantum computing - fault tolerance and complexity
8.371.3x: Advanced quantum algorithms and information theory

This second 8.371.2x course module will cover in depth the methods of fault-tolerant quantum computation; the concept of quantum supremacy, and quantum algorithms at scale.
A prior course (or strong background) in quantum mechanics is required.&nbsp; Knowledge of linear algebra is also strongly recommended, and other helpful math topics to know include probability and finite fields.
This course has been authored by one or more members of the Faculty of the Massachusetts Institute of Technology. Its educational objectives, methods, assessments, and the selection and presentation of its content are solely the responsibility of MIT.&nbsp;
For more information about MIT&rsquo;s Quantum Curriculum, visit quantumcurriculum.mit.edu.",AR
Reinforcement Learning Explained,"Reinforcement Learning (RL) is an area of machine learning, where an agent learns by interacting with its environment to achieve a goal.&nbsp; 
In this course, you will be introduced to the world of&nbsp; reinforcement learning. You will learn how to frame reinforcement learning problems and start tackling classic examples like news recommendation, learning to navigate in a grid-world, and balancing a cart-pole. 
You will explore the basic algorithms from multi-armed bandits, dynamic programming, TD (temporal difference) learning, and progress towards larger state space using function approximation, in particular using deep learning. You will also learn about algorithms that focus on searching the best policy with policy gradient and actor critic methods. Along the way, you will get introduced to Project Malmo, a platform for Artificial Intelligence experimentation and research built on top of the Minecraft game.",IS
IoT Networks and Protocols,"The Internet of Things (IoT) is expanding at a rapid rate, and it is becoming increasingly important for professionals to understand what it is, how it works, and how to harness its power to improve your business.
In this course we will focus on how the IoT works. You will learn about IoT networks and explore how ‘things’ connect to it, including whether the connection and processing is local (fog) or remote (cloud).
We will explore data networks, connection types, layer models and analyze IoT protocols and standards.
You’ll also learn how to evaluate different infrastructure components and network systems, and how to go about designing a basic network for your own IoT ideas.",NC
Foundations of Data Science: Prediction and Machine Learning,"One of the principal responsibilities of a data scientist is to make reliable predictions based on data. When the amount of data available is enormous, it helps if some of the analysis can be automated. Machine learning is a way of identifying patterns in data and using them to automatically make predictions or decisions in the future. In this data science course, you will learn how basic concepts and elements of machine learning.
The two main methods of machine learning you will learn are regression and classification. Regression is used when you seek to predict a numerical quantity. Classification is used when you seek to choose which category to assign (e.g., given information about a financial transaction, predict whether it is fraudulent or legitimate).
For regression, we will teach you how to measure the correlation between two variables and compute a best-fit line for making predictions when the underlying relationship is linear. We will also teach you how to quantify the uncertainty in your prediction using the bootstrap method. These techniques will be illustrated with a wide range of examples. For classification, you will learn the k-nearest neighbor classification algorithm, learn how to measure the effectiveness of your classifier, and learn how to apply it to real-world tasks.
The course will highlight the assumptions underlying the techniques, and will provide ways to assess whether those assumptions are good. It will also point out pitfalls that lead to overly optimistic or inaccurate predictions.",AL
Microsoft Azure Security Services,"In this course, you will gain insights into Azure Security services to help secure your services and data within Azure.  
You will learn Azure security best practice and understand the terminology, tools, and techniques for creating a secure resilient cloud service. You will also learn about and use the additional security services offered in Azure and Intune  
Release schedule:
This course will release models using a rolling release model. There are 6 modules, graded lab, and final exam, in this course, M00 and M01 are released when the course is live, other modules will be released according to the following schedule:
12/04/2017 – M02
12/11/2017 – M03
12/18/2017 – M04,
12/28/2017 Final Exam, Labs",SP
Windows Server 2016 Security Features,"Have you had a chance to explore the new and enhanced security functionalities in Windows Server 2016? In this new course authored by Orin Thomas - who literally wrote the book on Windows Server! - you'll get a guided tour and learn to better safeguard against security breaches.   
Windows Server 2016 provides layers of protection that help address both known and emerging threats. You'll learn how it actively contributes to securing your infrastructure. See how protections were built to mitigate an array of attack vectors and to deal with the overall threat of ongoing attacks inside the datacenter.  
You'll begin with a look at the hardening of Windows Server 2016, including hardware requirements for Secure Boot and guidance on disabling system services. Explore ways to configure network security, including firewalls, and look at secure virtualization, like encryption-supported virtual machines. From there, you'll dive into secure virtualization, threat detection, privileged identity, Desired State Configuration, and more. See demos, participate in hands-on labs, and pass the final exam, as you shore up your skills for ongoing security management.  
Release schedule:
This course will be released weekly. There are 4 modules in this course. Modules 0 and 1 are released when the course is live. The remaining modules will be released according to the following schedule:
Nov. 27: module 2
Dec. 4: module 3
Dec. 11: module 4 and final assessment",SP
Cybersecurity Capstone,"The Cybersecurity Capstone is specifically designed to provide a platform for verified learners to practice the hands-on cybersecurity skills and techniques studied in the courses of the RITx Cybersecurity MicroMasters program. It also includes the evaluation of the competencies and performance tasks that enable professional cybersecurity success.  
Before enrolling in the Cybersecurity Capstone, you must successfully complete and pass the four courses in the RITx Cybersecurity MicroMasters program as a verified learner. Upon successful completion of the Cybersecurity Capstone, you will receive the Cybersecurity MicroMasters certificate.   
During the Cybersecurity Capstone, you will perform a set of hands-on lab exercises in a web-based virtual environment. Below are the requirements to successfully access the virtual environment:
A modern web browser with Javascript enabled (recent Internet Explorer, Chrome or Firefox)
A desktop or laptop computer with a webcam
Minimal network latency to RIT's Main Campus (200ms or less). To test latency, ping 129.21.3.17 or 129.21.4.18
The areas of hands-on lab activities include, but are not limited to:
basic systems and network services such as firewall, DNS, DHCP, Wireshark
digital forensics investigation with tools such as Encase, FTK, and Volatility Framework
network security related tools such as port scanning, Snort, and Metasploit, etc.
The lab activities will be assessed by sets of questions, lab reports, and a proctored exam using the edX platform.
This course is part of a MicroMasters program. If you complete all courses in the MicroMasters program in 2018, GE will guarantee you an interview in Boston for an internship or full-time role. Open to Massachusetts residents only.",SP
Software Testing Management,"There is much more to software testing than just finding defects. Successful software and quality assurance engineers need to also manage the testing of software. 
In this course, part of the Software Testing and Verification MicroMasters program, you will learn about the management aspects of software testing. You will learn how to successfully plan, schedule, estimate and document a software testing plan.
You will learn how to analyze metrics to improve software quality and software tests.
We will also discuss software quality initiatives developed by industry experts.
No previous programming knowledge needed.","AL
AR
IAS
PL
SDF
SE
SP"
Cloud Computing for Enterprises,"Organizations are increasingly moving their critical information and assets to the cloud. Understand the technology, best practices, and economics of cloud computing, and the rewards and risks of this rush to the cloud.
In this course, part of the Cloud Computing MicroMasters program, you will learn the essentials of cloud computing, including Infrastructure As A Service (IaaS), Platform As A Service (PaaS), Software As A Service (SaaS), and other ""X as a service"" platforms.
You will explore how the cloud can support businesses by increasing productivity and effectiveness.",IS
IoT Programming and Big Data,"The Internet of Things is creating massive quantities of data, and managing and analysing it requires a unique approach to programming and statistics for distributed data sources.
This course will teach introductory programming concepts that allow connection to, and implementation of some functionality on, IoT devices, using the Python programming language. In addition, students will learn how to use Python to process text log files, such as those generated automatically by IoT sensors and other network-connected systems.
Learners do not need prior programming experience to undertake this course, and will not learn a specific programming language - however Python will be used for demonstrations. This course will focus on learning by working through realistic examples.",IS
Cybersecurity and Privacy in the IoT,"As the Internet of Things (IoT) continues to grow so will the number of privacy and security concerns and issues. As a professional working in the field, it is essential to understand the potential security risks and how to best mitigate them.
In this course, you will learn about security and privacy issues in IoT environments. We’ll explore the organizational risks posed by IoT networks, and the principles of IoT device vulnerabilities. We’ll also look at software and hardware IoT Applications for industry.
With billions of devices tracking our every move, privacy is a critical issue. We will explore and discuss the social and commercial implications the IoT brings to society.",IS
Sensor Fusion and Non-linear Filtering for Automotive Systems,"In this course, we will introduce you to the fundamentals of sensor fusion for automotive systems. Key concepts involve Bayesian statistics and how to recursively estimate parameters of interest using a range of different sensors. 
The course is designed for students who seek to gain a solid understanding of Bayesian statistics and how to use it to fuse information from different sensors. We emphasize object positioning problems, but the studied techniques are applicable much more generally. The course contains a series of videos, quizzes and hand-on assignments where you get to implement many of the key techniques and build your own sensor fusion toolbox. 
The course is self-contained, but we highly recommend that you also take the course ChM015x: Multi-target Tracking for Automotive Systems. &nbsp;Together, these courses give you an excellent foundation to tackle advanced problems related to perceiving the traffic situation around an autonomous vehicle using observations from a variety of different sensors, such as, radar, lidar and camera.
&nbsp;",SF
Multi-Object Tracking for Automotive Systems,"Autonomous vehicles, such as self-driving cars, rely critically on an accurate perception of their environment.&nbsp;
 
In this course, we will teach you the fundamentals of multi-object tracking for automotive systems. Key components include the description and understanding of common sensors and motion models, principles underlying filters that can handle varying number of objects, and a selection of the main multi-object tracking (MOT) filters.
 
The course builds and expands on concepts and ideas introduced in CHM013x: &ldquo;Sensor fusion and nonlinear filtering for automotive systems&rdquo;. In particular, we study how to localize an unknown number of objects, which implies various interesting challenges. We focus on cameras, laser scanners and radar sensors, which are all commonly used in vehicles, and emphasize on situations where we seek to track nearby pedestrians and vehicles. Still, most of the involved methods are more general and can be used for surveillance or to track, e.g., biological cells, sports athletes or space debris. 
The course contains a series of videos, quizzes and hands-on assignments where you get to implement several of the most important algorithms. 
 
Learn from award-winning and passionate teachers to enhance&nbsp;your knowledge at the forefront of research on self-driving vehicles. Chalmers is among the top engineering schools that distinguish itself through its close collaboration with industry.
&nbsp;",IS
Microsoft Professional Capstone: Big Data,"This course is part of the Microsoft Professional Program Certificate in Big Data.&nbsp;
The Microsoft Professional Program for Big Data is a comprehensive curriculum that teaches you how to build big data solutions.
In this capstone project, you will undertake challenges to design, implement, and document a big data solution based on what you have learned.
&nbsp;",PD
Microsoft Professional Capstone: Cloud Administration,"This course is part of the Microsoft Professional Program in Cloud Administration. This program is a comprehensive curriculum that teaches you how to implement Azure infrastructure.  
In this Final Project, you will undertake challenges to design, implement, and document an Azure cloud infrastructure solution based on what you have learned.","AR
IAS
NC
OS
SP"
Microsoft Professional Capstone : Front End Web Development,"This course is part of the Microsoft Professional Program Certificate in Front-End Web Development. 
Students will use the knowledge and skills obtained from the courses in the Front End Web Developer track for the Microsoft Professional Program, to create a single-page application (SPA) that focuses on a potential real-world solution.
The solution offers the option of following the course specified online shopping site or gaining approval for a web site that benefits a non-profit of the student&rsquo;s choice.
The capstone will be manually graded by industry experts and students will be required to engage in a video conference call with a grading instructor to go over their code.
The finished project should be something that the student will be proud to showcase in their own portfolio.",HCI
Agile Development Using Ruby on Rails - The Basics,"This intermediate computer programming course uncovers how to code long-lasting software using highly-productive Agile techniques to develop Software as a Service (SaaS) using Ruby on Rails. You will understand the new challenges and opportunities of SaaS versus shrink-wrapped software and learn to apply fundamental Rails programming techniques to the design, development, testing, and public cloud deployment of an Software as a Service (SaaS) application
Using best-of-breed tools that support modern development techniques including Behavior-Driven design, user stories, Test-Driven Development, velocity, and pair programming, learners will discover how modern programming language features in Ruby on Rails can improve productivity and code maintainability. 
Weekly coding projects and quizzes will be part of the learning experience in this SaaS course. Those who successfully complete the assignments and earn a passing grade can get an honor code certificate or verified certificate from BerkeleyX. The videos and homework assignments have been updated to use Ruby 2, Rails 4 and RSpec 3. The new class also includes embedded live chat with Teaching Assistants and other students and remote pair programming with other students.","SP
SE"
Cyber Security Economics,"This economics course provides an introduction to the field of cybersecurity through the lens of economic principles. Delivered by four leading research teams, it will provide you with the economic concepts, measurement approaches and data analytics to make better security and IT decisions, as well as understand the forces that shape the security decisions of other actors in the ecosystem of information goods and services.
Systems often fail because the organizations that defend them do not bear the full costs of failure. In order to solve the problems of growing vulnerability to computer hackers and increasing crime, solutions must coherently allocate responsibilities and liabilities so that the parties in a position to fix problems have an incentive to do so. This requires a technical comprehension of security threats combined with an economic perspective to uncover the strategies employed by cyber hackers, attackers and defenders.
The course covers five main areas:
Introduction to key concepts in security economics. Here, we provide an overview of how information security is shaped by economic mechanisms, such as misaligned incentives, information asymmetry, and externalities.
Measuring cybersecurity. We introduce state of the art security and IT metrics and conceptualize the characteristics of a security metric, its challenges and advantages.
Economics of information security investment. We discuss and apply different economic models that help determine the costs and benefits of security investments in network security.
Security market failures. We discuss market failures that may lead to cybersecurity investment levels that are insufficient from society’s perspective and other forms of unsafe behaviour in cyber space.
Behavioural economics for information security, policy and regulation. We discuss available economic tools to better align the incentives for cybersecurity, including better security metrics, cyber insurance/risk transfer, information sharing, and liability assignment.
After finishing this course, you will be able to apply economic analysis and data analytics to cybersecurity. You will understand the role played by incentives on the adoption and effectiveness of security mechanisms, and on the design of technical, market-based, and regulatory solutions to different security threats.
LICENSE
The course materials of this course are Copyright Delft University of Technology and are licensed under a Creative Commons Attribution-NonCommercial-ShareAlike (CC-BY-NC-SA) 4.0 International License.",IS
Web Security Fundamentals,"Web applications are inherently insecure, as aptly illustrated by a pile of recent events. Insecurity is however not fundamental to the web platform. As a matter of fact, the modern web offers a variety of powerful security features that help stop a hacker. Unfortunately, not many developers have the knowledge and skills to leverage these security features to their full potential.
This course is imperative for understanding the fundamental security principles of the web. The course provides an overview of the most common attacks, and illustrates fundamental countermeasures that every web application should implement. In essence, this course offers you the knowledge and skills to build better and more secure applications.
This MOOC will introduce you to the web security landscape. Throughout the course, you will gain insights into the threats that modern web applications face. You’ll build an understanding of common attacks and their countermeasures; not only in theory, but also in practice. You’ll be provided with an overview of current best practices to secure web applications
Although no previous security knowledge is necessary to join this course, it will help to be familiar with the basic concepts behind web applications, including HTTP, HTML, and JavaScript.",SP
Managing SQL Database Transactions and Concurrency,"When a database is in use by an application, it needs to be built to withstand simultaneous use, or multiple actions that all need to be certain to happen together. In this computer science course, you'll learn about techniques to add this functionality to your database. You'll learn about transactions, isolation levels, and locking.
This course is part of the Microsoft SQL Database Development XSeries.",DS
Real-Time Bluetooth Networks - Shape the World,"The increased demand by consumers and businesses for more utility, connectivity and smarter and more efficient electronic technology not only creates a need for more embedded systems but also for engineers in the embedded systems field.
In this lab-based computer science course, explore the complexities of embedded systems and learn how to develop your own real-time operating system (RTOS) by building a personal fitness device with Bluetooth connectivity (BLE). An operating system (OS) is a software system that computers use to manage the resources of a computer. The OS decides which tasks are performed when and decides how resources are utilized. Simple embedded systems, which are a combination of electrical, mechanical, chemical, and computer components designed to perform a dedicated function, originally did not need an OS. However, as embedded systems have evolved, so have their complexities. To manage this, an RTOS is now required.
Embedded systems are often deployed in safety-critical situations such as automotive, military, industrial, and medical applications. In applications such as communications and consumer electronics, response time and processing speed are important. A real-time system not only needs to arrive at the correct answer, but must also get the correct answer at the correct time. A RTOS manages a computer's resources so that tasks are performed in a timely mannner.
In this computer science course, students will learn the design fundamentals of an RTOS from the bottom up and use these fundamentals to build practical real-time applications. We will provide a board support package (BSP), so students will be able to focus on the RTOS and Bluetooth network without needing prior experience in circuits and I/O device driver software. This is a hands-on project-based lab course, where you will incrementally build a personal fitness device with Bluetooth connectivity.
This course is intended for students and professional engineers wishing to improve their skills in the fields of embedded systems, product development, computer architecture, operating systems, and Bluetooth networks.
To complete this course, you will need to purchase a lab kit including a microcontroller board, an I/O board, and a Bluetooth module. Instructions about purchasing the kit and installing required software are at http://edx-org-utaustinx.s3.amazonaws.com/UT601x/RTOS.html .",IM
Accessible Gamification for Business,"See your favorite games like never before!  
Ever wondered why farming for a mighty sword in a fantasy game feels entertaining and fun while filling out reporting documents – a seemingly similar repetitive activity – is incredibly boring? If so, you are not alone!  
The vast field of Gamification applies techniques and patterns from fundamental mechanics of game design to non-game contexts in order to make business tasks more fun for a user. This can lead to increased efficiency and accuracy and even facilitate better health by reducing exhaustion.  
However, there is one particular requirement that often becomes a hurdle for Gamification efforts: meeting accessibility requirements.  
In this computer science course, we will investigate this use case closer and derive a new set of patterns that are representation-agnostic. You will learn the fundamentals of Gamification and accessibility, as well as lessons in game development and game design. We will take a look at popular digital games and draw patterns from their game design and game mechanics.  
By the end of this course, you will have gained a better grasp on the problem at hand and learn patterns and techniques to deploy gamification in a broader and more abstract scope.  
But be warned: you might see your favorite digital games like you never saw them before – as a wired, but well-tailored, combination of reward, development, discover and challenge.",HCI
"Smart Cities, Management of Smart Urban Infrastructures","Over the past few years, advancements in the Information and Communication Technologies (ICTs) have significantly challenged the traditionally stable landscape of urban infrastructure services. The result is an increasing interest in the transitioning of cities towards so-called “smart cities” – an interest expressed both by technology vendors and public authorities. Although such “smart technologies” can provide immense opportunities for citizens and for service providers alike, the ICTs often act as disruptive innovators of urban infrastructure service provision.
In this MOOC, you will gain a thorough understanding of the challenges and opportunities associated with “smart urban infrastructures” as well as how these infrastructures can be managed in order to deliver desirable performance in cities. More precisely, throughout this 5-week MOOC you will learn about the most important principles for the management of smart urban infrastructures as well as about the application of these principles to two specific sectors, namely urban transportation and urban energy systems.",IS
Autonomous Mobile Robots,"Robots are rapidly evolving from factory workhorses, which are physically bound to their work-cells, to increasingly complex machines capable of performing challenging tasks in our daily environment. The objective of this course is to provide the basic concepts and algorithms required to develop mobile robots that act autonomously in complex environments. The main emphasis is put on mobile robot locomotion and kinematics, environment perception, probabilistic map based localization and mapping, and motion planning. The lectures and exercises of this course introduce several types of robots such as wheeled robots, legged robots and drones.
This lecture closely follows the textbook Introduction to Autonomous Mobile Robots by Roland Siegwart, Illah Nourbakhsh, Davide Scaramuzza, The MIT Press, second edition 2011.",SP
Foundations of Computer Science for Teachers,"Thinking about teaching Computer Science, or incorporating CS into a subject you already teach? CS skills are fundamental to student success and you can teach it!
This course is intended for prospective K-12 Computer Science teachers to review key topics in Technology Applications, Programming Languages and CS special topics.
The course provides extensive detailed instruction, examples and practice on everything from introductory programming topics such as variables, functions, loops and logical expressions to more advanced topics such as data structures, recursion, and object oriented programming.
States around the country have adopted the Praxis Computer Science Test as a component of their certification/licensure and this course covers all of the topics in that test and more. In the state of Texas this test is called TExES 141/241 Grades 8-12 Computer Science Certification exam. Hundreds of teachers from around the country have already taken the course and many have gone on to achieve state certification.
Whether you plan to take a certification exam or not, this course will strengthen your understanding of key CS concepts and constructs and increase your confidence in teaching CS.
Note: In addition to the verified certificate, Texas Teachers that successfully complete this course will receive 36 hours of CPE credit.",SP
Embedded Systems - Shape The World: Multi-Threaded Interfacing,"Learn how electronic gadgets are designed, developed, and built as embedded systems that shape the world.
This is part two of a two part sequence. In this class, we will use interrupts to design a range of real-time systems including an audio player, a data acquisition system, a control system, and an interactive game. This is a hands-on, learn-by-doing course that shows you how to build solutions to real-world problems using embedded systems. These courses use a bottom-up approach to problem solving, building gradually from simple interfacing of switches and LEDs to complex concepts like display drivers, digital to analog conversion, generation of sound, analog to digital conversion, motor control, graphics, interrupts, and communication. We will present both general principles and practical tips for building circuits and programming the microcontroller in the C programming language. You will develop debugging skills using oscilloscopes, logic analyzers, and software instrumentation. Laboratory assignments are first performed in simulation, and then you will build and debug your system on the real microcontroller. At the conclusion of this course you will possess the knowledge to build your own arcade-style game from the ground up.
This is the fourth time we have offered this course. Since the reviews have been overwhelmingly positive we do not plan major changes over the previous offerings of the course. We did however break the large class into two smaller classes. There are eight labs in part 1 and six labs in this class. Students can pick and choose a subset of labs to achieve certification. The three labs that students found most rewarding were the hand-held video game, generating sound using a digital to analog convertor, and creating a smart object using Wifi communication.
To complete this course, you will be required to purchase a Texas Instruments TM4C123 microcontroller kit and a few electronic components. This microcontroller has a state-of-the-art ARM Cortex-M4 processor.
We will provide instructions about purchasing the kit and installing required software at: http://edx-org-utaustinx.s3.amazonaws.com/UT601x/index.html.",AR
Introduction to Computing using Python,"In this computer science course, you will learn about foundational computing principles, such as how to write and read computer code and how to run and debug code.
You will learn about programming concepts in Python and how they demonstrate computing principles and domain applications that use programming concepts and computing principles in real applications.
The course will also cover:
procedural programming
control structures
data structures
advanced topics in algorithms and object-oriented programming
This course builds on a custom textbook written for the class and online course delivery and provides ample interaction and formative evaluation. The course teaches both the theory and implementation of core computing concepts in a highly interactive, multi-modal manner.","PL
AL
SDF
SP
PD"
Embedded Systems - Shape The World: Microcontroller Input/Output,"Learn how electronic gadgets are designed, developed, and built as embedded systems that shape the world.
This is part one of a two part sequence. Together these are hands-on, learn-by-doing courses that show you how to build solutions to real-world problems using embedded systems. In this course, we take a bottom-up approach to problem solving, building gradually from simple interfacing of switches and LEDs to complex concepts like a microcontroller-based pacemaker, digital lock, and a traffic light controller. We will present both general principles and practical tips for building circuits and programming the microcontroller in the C programming language. You will develop debugging skills using oscilloscopes, logic analyzers, and software instrumentation. Laboratory assignments are first performed in simulation, and then you will build and debug your system on the real microcontroller. At the conclusion of this part 1 you will possess the knowledge to build your own traffic light controller from the ground up.
This is the fourth time we have offered this course. Since the reviews have been overwhelmingly positive we do not plan major changes over the previous offerings of the course. We did however break the large class into two smaller classes. There are eight labs in part 1 and six labs in part 2. Students can pick and choose a subset of labs to achieve certification. The three labs that students found most rewarding in this part were designing the software algorithm for a demand pacemaker, interfacing switches and LEDS, and the finite state machine traffic light controller.
To complete this course, you will be required to purchase a Texas Instruments TM4C123 microcontroller kit and a few electronic components.
This microcontroller has a state-of-the-art ARM Cortex-M4 processor.
We will provide instructions about purchasing the kit and installing required software at: http://edx-org-utaustinx.s3.amazonaws.com/UT601x/index.html.",SP
"Information Systems and Computer Applications, Part 2: Hardware","This course is one of the 5 courses of an introductory business information systems series, designed to introduce you to the amazing world of Information Technology.  
The series of courses is designed so that a professional in a field outside the information technologies (financial, administrative or managerial) acquires the basic knowledge in Information Technology to be able to interact more profitably with the computer and telecommunications specialists of your company or other corporations with which you are related, being able to specify requirements, evaluate workloads and monitor results in a much more effective way.  
The syllabus of the series is based on the CLEP Information Systems and Computer Applications exam.  
In this course you will learn the basic hardware concepts on which information systems and communications networks are based  
By completing the series of 5 courses, you will be prepared to interact effectively with specialists in the Information Technology sector (and pass the CLEP ISCA exam if you wish).",IS
"Information Systems and Computer Applications, Part 3: Software Development","This course is one of the 5 courses of an introductory business information systems series, designed to introduce you to the amazing world of Information Technology.  
The series of courses is designed so that a professional in a field outside the information technologies (financial, administrative or managerial) acquires the basic knowledge in Information Technology to be able to interact more profitably with the computer and telecommunications specialists of your company or other corporations with which you are related, being able to specify requirements, evaluate workloads and monitor results in a much more effective way.  
The syllabus of the series is based on the CLEP Information Systems and Computer Applications exam.  
In this course, you learn the basics of software project management, reviewing basic project management concepts and roles, system development lifecycle, tools and methods used in software development, standards. used in the development and the design of the user interface of a computer system.  
By completing the series of 5 courses, you will be prepared to interact effectively with specialists in the Information Technology sector (and pass the CLEP ISCA exam if you wish).",SP
"Information Systems and Computer Applications, Part 4: Programming","This course is one of the 5 courses of an introductory business information systems series, designed to introduce you to the amazing world of Information Technology.  
The series of courses is designed so that a professional in a field outside the information technologies (financial, administrative or managerial) acquires the basic knowledge in Information Technology to be able to interact more profitably with the computer and telecommunications specialists of your company or other corporations with which you are related, being able to specify requirements, evaluate workloads and monitor results in a much more effective way.  
The syllabus of the series is based on the CLEP Information Systems and Computer Applications exam.  
In this course you will learn the basics of software programming. We will address the basic logic behind any computer program, what types and structures of data and files are used, how object-oriented programming works, database management and SQL language and various concepts and guidelines in web development such as HTML, XML, CSS or javascript, among others.  
By completing the series of 5 courses, you will be prepared to interact effectively with specialists in the Information Technology sector (and pass the CLEP ISCA exam if you wish).","PL
SDF"
"Information Systems and Computer Applications, Part 5: Social Implications","This course is one of the 5 courses of an introductory business information systems series, designed to introduce you to the amazing world of Information Technology.  
The series of courses is designed so that a professional in a field outside the information technologies (financial, administrative or managerial) acquires the basic knowledge in Information Technology to be able to interact more profitably with the computer and telecommunications specialists of your company or other corporations with which you are related, being able to specify requirements, evaluate workloads and monitor results in a much more effective way.  
The syllabus of the series is based on the CLEP Information Systems and Computer Applications exam.  
In this Computer Science course we will deal with various social aspects of ICT, such as its effect on globalization, business strategy and other economic processes, computer threats and how to protect us against them, ergonomics, cloud computing and careers professionals in the field of ICT.  
By completing the series of 5 courses, you will be prepared to interact effectively with specialists in the Information Technology sector (and pass the CLEP ISCA exam if you wish).",AR
"Nature, in Code: Biology in JavaScript","If you are interested in learning programming, but find pure programming courses not very exciting, this course is for you.
Instead of just learning programming principles outside of any context, you will learn JavaScript programming by implementing key biological concepts in code so they can run in your browser.
If you know a little (or a lot of) programming already, but want to learn more about the rules that govern life without having to pick up a traditional academic textbook, this course will also be of interest to you. You will learn some key ideas that form the basis of modern biology, from population genetics to evolutionary biology to infectious disease spread.
No prior programming knowledge needed.",SP
"Minecraft, Coding and Teaching","New to coding? Want to learn how to teach coding to your students? Do you have students who love to play Minecraft?
The LearnToMod software combines Minecraft, Coding, and Teacher support for teachers who have never coded on their own, and who have never taught coding! With hundreds of self-guided micro-coding assignments, lesson plans, and project ideas, this education and teacher training course will guide you through the basics of coding with Minecraft, and, more importantly, provide you with the tools and community to help you teach your students how to code in your way!
No previous coding knowledge needed! Some teaching experience recommended.
Taught by instructors who have been teaching novice coding teachers to teach for over a decade, this course will help teachers gain skills to teach coding with Minecraft, but also confidence to learn how to teach other coding topics!",IS
Scratch: Programmeren voor kinderen (8+),"Programmeren is steeds belangrijker in onze wereld. En jong geleerd is oud gedaan. Deze MOOC bevat filmpjes en opdrachten waarmee kinderen zelf kunnen leren programmeren.
Iedere week maken we samen een game: een doolhof, een aquarium, een Flappy Bird spel en een soort Super Mario.
Iedere week leer je weer nieuwe programmeerblokken en denken we samen na over hoe je je programma’s het mooiste kunt maken.
Dit materiaal volgt de leerlijn programmeren in het basisonderwijs.
Docent of ouder? Lees hier alvast wat deze MOOC inhoudt en hoe je alles goed instelt voor je kind of leerling.""
Wil je met meerdere kinderen mee doen? Maak voor ieder kind of leerling een account aan. Zo krijgen ze hun eigen puzzels en kunnen ze in hun eigen tempo werken. Als ze klaar zijn krijgen ze dan ook een mooi Scratch diploma met hun naam erop.
_LICENTIE _
Het materiaal van deze cursus is eigendom van de TU Delft en wordt aangeboden onder een Creative Commons licentie CC-BY-NC-SA 4.0 International Licence.",SDF
Discrete-Time Signal Processing,"6.341x is designed to provide both an in-depth and an intuitive understanding of the theory behind modern discrete-time signal processing systems and applications. The course begins with a review and extension of the basics of signal processing including a discussion of group delay and minimum-phase systems, and the use of discrete-time (DT) systems for processing of continuous-time (CT) signals. The course develops flow-graph and block diagram structures including lattice filters for implementing DT systems, and techniques for the design of DT filters. Parametric signal modeling and the efficient implementation of DT multirate and sampling rate conversion systems are discussed and developed. An in-depth development of the DFT and its computation as well as its use for spectral analysis and for filtering is presented. This component of the course includes a careful and insightful development of the relationship between the time-dependent Fourier transform and the use of filter banks for both spectral analysis and signal coding.
6.341x is organized around eleven units each typically consisting of a set of two to four topics. The source material for learning each topic includes suggested reading in the course text, clarifying notes, other related reading, and video excerpts and will include an interactive on-line discussion forum. The course text is the widely used text by Oppenheim and Schafer (third edition). The video segments are adapted from live video recordings of the MIT residential course.   
Each topic includes a set of automatically-graded exercises for self-assessment and to help in digesting and understanding the basics of the topic, and in some cases to preview topics. A typical unit in the course concludes with a set of more extensive problems to help in integrating the topics and developing a deeper understanding. Automatic grading of your answers to these problems as well as solutions will be provided.
6.341x and this freely-available version were developed through the support and encouragement of the MIT Department of Electrical Engineering and Computer Science, the MIT Office of Digital Learning, and the MIT Research Laboratory of Electronics.
This course can be cited as: Alan V. Oppenheim and Thomas A. Baran, 6.341x Discrete-Time Signal Processing, on edX, Summer 2016. https://www.edx.org/course/discrete-time-signal-processing-mitx-6-341x-1",SP
MyCS: Computer Science for Beginners,"How do computers work? What do computer scientists do? What does it take to make a computer or a computer program work? We answer these questions and more with MyCS: Computer Science for Beginners.  
We believe that anyone can succeed in and enjoy computer science. This course is an early introduction to CS, designed for anyone who's completely new to the field. It explores a combination of the basic principles of how computers work and how we can use them to solve interesting problems and create amazing things. Lessons alternate between general exercises and assignments in Scratch, which offer a chance to both practice some basic concepts of computer programming and explore the many cool, creative, and useful applications of CS.  
You don't need any CS or programming background to do this course - just a bit of basic math and a lot of creative thinking. The course is intended especially for middle school students and their teachers, but is good for learners of all ages.  
This material is based upon work supported by the National Science Foundation under Grant No. 1240939. Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation (NSF).",AR
Programming in Scratch,"“Although many of the programs designed to teach kids to code are very simplistic, many of them, like Scratch, are suitable for all ages. It doesn't matter how old you are…Get started with the basics of programming!” -Lifehacker
Want to learn computer programming, but unsure where to begin? This is the course for you! Scratch is the computer programming language that makes it easy and fun to create interactive stories, games and animations and share them online.
This course is an introduction to computer science using the programming language Scratch, developed by MIT. Starting with the basics of using Scratch, the course will stretch your mind and challenge you. You will learn how to create amazing games, animated images and songs in just minutes with a simple “drag and drop” interface.
No previous programming knowledge needed. Join us as you start your computer science journey.
This material is based upon work supported by the National Science Foundation under Grant No. 1044106. Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation (NSF).","AL
PL
SDF"
CS For All: Introduction to Computer Science and Python Programming,"Looking to get started with computer science while learning to program in Python?
This computer science course provides an introduction to computer science that’s both challenging and fun. It takes a broad look at the field of computer science through a variety of demonstrations and projects. We’ll cover both low- and high-level concepts, from how the circuits inside a computer represent data to how to design algorithms, as well as how all of this information affects the technology we use today. Additionally, we’ll teach the basics of Python programming, giving us a a way to put our new CS knowledge into practice.
No need to know any programming before starting the course; we’ll teach everything you need to know along the way. All you need to start is a good grasp of algebra, and you can fall in love with both the concepts and the practice of computer science.","PL
AR
NC
SDF
SP"
"Cyberwar, Surveillance and Security","Once heralded as the ultimate vehicle for open communication and self-expression, the internet is rapidly becoming a globally networked surveillance device. Serious threats to national security, combined with the seemingly endless capacity of digital processing and storage, have led to levels of data capture and 24/7 monitoring of individuals’ activity that were unimaginable even a decade ago.  
With resistance to such practices rising, this course will equip you to take an active part in the debate. You will gain a broad understanding of the competing tensions of the laws related to national security and personal and commercial privacy in the post-Snowden online environment. You will also grasp the looming consequences of this battle for peace, sovereignty, human rights and the internet itself.",SP
Enterprise Software Lifecycle Management,"Want to manage software development, but unsure where to begin? This computer science course will teach you the models, methods and practices of software development to make the process manageable and result in high-quality and efficient software products.
This course is an introduction to software lifecycle management using the approved principles and best practices developed by IT leaders and verified by large-scale systems operation. Starting with the basics of lifecycles, the course will open your mind and challenge you. You will learn how to make justified decisions on the industry-level software solutions, and instantly apply the principles and methods learned.
Taught by an instructor with over a decade of managing software development at a diverse multinational corporation, ITERA International Oil and Gas, this computer science course will equip managers with the skills they need to understand the principles and use the state-of-the-art methods and practices for lifecycle management. Additionally, learners (and managers) who require a systematic understanding of what happens inside the software development in terms of roles, activities, resources and deliverables can use this course to eliminate skill gaps.
No previous knowledge needed. Join us as you start your software engineering journey.",SE
Developing Windows 10 Universal Apps - Part 1,"Take your first step in using C# and XAML to develop Windows 10 Universal Windows Platform apps. In part one of this three-part programming series (three x 4-week courses) you develop a responsive UI that automatically adapts as the app window changes size.
You will also learn to implement XAML data binding and basic application lifecycle management. Put your existing C# and XAML skills to work creating apps for the new Windows app store.
*IMPORTANT:
This course will NOT teach C#, XAML or programming basics.
Prior experience programming in C# and XAML is required.",IS
Developing Windows 10 Universal Apps - Part 2,"Use C# and XAML to develop Windows 10 Universal Windows Platform apps that look great on any Windows 10 device. In part two of this three-part programming series (three x 4-week courses) you develop an MVVM app with an adaptive UI that looks great running on phones, tablets, and PCs. You will also learn to develop Windows 10 navigation and menu structures, integrate Cortana into your app, and manage the built-in camera of mobile device. Put your existing C#/XAML skills to work creating apps for the new Windows app store.
*IMPORTANT: This course will NOT teach C#, XAML or programming basics.
Prior experience programming in C# and XAML is required.","AR
GV
HCI
SE"
Developing Windows 10 Universal Apps - Part 3,"Use C# and XAML to develop Windows 10 Universal Windows Platform apps that you will be proud to publish to the new Windows store. In part three of this three-part programming series (three x 4-week courses) you develop an app that connects to the cloud for data and services, implements notifications, geofencing, and live tiles, and includes advanced features such as speech-to-text and inking. Put your existing C#/XAML skills to work creating apps for the new Windows app store.
*IMPORTANT: This course will NOT teach C#, XAML or programming basics. Prior experience programming in C# and XAML is required.",AR
Introducción a la programación en Java: empezando a programar,"Este es un curso introductorio para aprender programación con Java. Java es uno de los lenguajes de programación más usados actualmente.
A lo largo de las cinco semanas se introducen progresivamente conceptos necesarios que irán familiarizándote con la programación en Java como la abstracción funcional, el paradigma de programación orientada a objetos (OOP) y las interfaces de programación de aplicaciones (APIs). Se proporcionan ejemplos y casos de estudio para que los alumnos puedan comenzar a programar por su cuenta o en colaboración con sus compañeros.
Este curso de Java está compuesto de tres partes:
La Parte 1 introduce la programación sobre la base de conceptos familiares, como calculadoras y juegos.
La Parte 2 se centrará en cómo escribir “buenos” programas, donde el término ""buenos"" debe entenderse desde varias perspectivas: corrección, eficiencia, técnicas de ingeniería de software y ética.
La Parte 3 de introducción a la programación en Java abordará estructuras de datos fundamentales, como las secuencias, y los algoritmos de búsqueda y ordenación.
Se pone énfasis en la realimentación inmediata y en tener una experiencia divertida. El conocimiento de programación en Java no sólo es útil para poder programar los dispositivos actuales, como ordenadores y teléfonos inteligentes. También abre la puerta al pensamiento computacional, es decir, la aplicación de técnicas informáticas a los procesos cotidianos.",PL
Monetize your Android Applications,"Learn how to monetize Android apps without adversely affecting the user experience. We will present the best practices of advertising, monetizing and publishing your Android app. We will also present an introduction to business models that will help you make money from an app using Google AdMob, Google&rsquo;s mobile advertising platform specifically designed for mobile apps.
This course is part of the GalileoX Android Developer MicroMasters Program that is specifically designed to teach the critical skills needed to be successful in this exciting field and to prepare you to take the Google Associate Android Developer Certification exam. In order to qualify for the MicroMasters Credential you will need to earn a Verified Certificate in each of the four courses as well as the Final Project.",SP
Queuing Theory: from Markov Chains to Multi-Server Systems,"Situations where resources are shared among users appear in a wide variety of domains, from lines at stores and toll booths to queues in telecommunication networks. The management of these shared resources&nbsp;can have direct consequences on users,&nbsp;whether it be waiting times or blocking probabilities.&nbsp;
In this course, you'll learn how to describe a queuing system statistically, how to model the random evolution of queue lengths over time and calculate key performance indicators, such as an average delay or a loss probability.&nbsp; 
This course is aimed at engineers, students and teachers interested in network planning.&nbsp;
Practical coursework will be carried out using ipython notebooks on a Jupyterhub server which you will be given access to.",NC
AP Computer Science A: Java Programming Classes and Objects,"In this computer science course, you will learn the basics of programming in the Java language, and cover topics relevant to the AP Computer Science A course and exam.
This course will cover:
classes
objects and object-oriented design
fields and visibility
constructors, mutators and accessor methods
encapsulation
interfaces
the List interface
method overriding
This course is for anyone interested in taking a first-level computer-programming course, particularly those who attend a school that does not provide a similar class.
No previous programming knowledge is needed, but it is recommended that learners be comfortable with the topics addressed in AP Computer Science A: Java Programming and AP Computer Science A: Java Programming Data Structures and Loops.
We are looking forward to helping you explore this exciting new world!",AR
Big Data Orientation: Microsoft Professional Program,"This course is part of the Microsoft Professional Program Certificate in Big Data.
Learn what it takes to build Big Data analytics solutions.
This is the first stop in the Big Data curriculum from Microsoft. It will help you get started with the curriculum, plan your learning schedule, and connect with fellow students and teaching assistants. Along the way, you&rsquo;ll get an introduction to working with data and some fundamental concepts and technologies for Big Data scenarios.","PD
PL
SDF
PBD"
Microsoft Professional Orientation : Data Science,"This course is part of the Microsoft Professional Program Certificate in Data Science.
Learn what it takes to become a data scientist.
This is the first stop in the Data Science curriculum from Microsoft. It will help you get started with the program, plan your learning schedule, and connect with fellow students and teaching assistants. Along the way, you&rsquo;ll get an introduction to working with and exploring data using a variety of visualization, analytical, and statistical techniques.",DS
"Quantum Information Science I, Part 1","This course is part of a three-course series that provides an introduction to the theory and practice of quantum computation. We cover:


the physics of information processing
quantum logic
quantum algorithms including Shor's factoring algorithm and Grover's search algorithm
quantum error correction
quantum communication and key distribution&nbsp;&nbsp;

This course will help you establish a foundation of knowledge for understanding what quantum computers can do, how they work, and how you can contribute to discovering new things and solving problems in quantum information science and engineering.
The three-course series comprises:


8.370.1x: Foundations of quantum and classical computing &ndash; quantum mechanics, reversible computation, and quantum measurement
8.370.2x: Simple quantum protocols and algorithms &ndash; teleportation and superdense coding, the Deutsch-Jozsa and Simon&rsquo;s algorithm, Grover&rsquo;s quantum search algorithm, and Shor&rsquo;s quantum factoring algorithm
8.370.3x: Foundations of quantum communication &ndash; noise and quantum channels, and quantum key distribution

Prior knowledge of quantum mechanics is helpful but not required.&nbsp;It is best if you&nbsp;know some linear algebra.
This course has been authored by one or more members of the Faculty of the Massachusetts Institute of Technology. Its educational objectives, methods, assessments, and the selection and presentation of its content are solely the responsibility of MIT. MIT gratefully acknowledges major support for this course, provided by IBM Research. This course on quantum information science is a collective effort to further advance knowledge and understanding in quantum information and quantum computing.

For more information about MIT’s Quantum Curriculum, visit quantumcurriculum.mit.edu.",IS
Architecting Microsoft Azure Solutions,"Azure is Microsoft’s cloud computing platform, a growing collection of integrated services—analytics, computing, database, mobile, networking, storage, and web—for moving faster, achieving more, and saving money.
In this computer science course, you’ll apply what you already know about implementing solutions on Microsoft Azure to learn solution design skills. At the completion of this course, you will be able to identify tradeoffs and make decisions for designing public and hybrid cloud solutions.
This course will help you prepare for the Microsoft Certification Exam 70-534: Architecting Microsoft Azure Solutions.
Note: To complete the final assignment in this course, you will need an Azure subscription. You can use your existing Azure account, or sign up for a free Azure trial subscription (a valid credit card is required for verification, but you will not be charged for Azure services). Note that the free trial is not available in all regions. It is possible to complete the course and earn a certificate without completing the final assignment.",SP
Introduction to Xamarin.Forms,"This course is intended to introduce experienced C# programmers to the Xamarin.Forms framework. Xamarin.Forms lets you build mobile applications using C# and then run them on the most popular mobile platforms today. If you are not familiar with the C# programming language, it is recommended that you visit this Programming with C# course to learn the fundamentals of the language before proceeding through this course.
Xamarin.Forms takes code sharing to the next level by allowing you to share not just your application logic in a cross-platform fashion, but also the UI definition. Unlike other technologies, applications that rely on the Xamarin.Forms framework are 100% completely native applications that look and feel natural on each platform.
With Xamarin.Forms, you can write your application code once, and then build a native application that utilizes that code to run on almost any iOS, Android or Windows device including Windows 10. Your business logic can be written in C# (or any other .NET capable language) and your UI can either be defined in code, or in the XAML markup language.",AR
Developing Microsoft Azure Solutions,"In this computer science course, you will learn how to deploy an ASP.NET MVC application, which is a web application framework developed by Microsoft, which implements the model–view–controller (MVC) pattern, to the Microsoft Azure platform. We will expand on the application by learning about Microsoft Azure’s capabilities and then adding functionality to make your application a more robust and highly available cloud-based solution.","AR
IAS
PD
SF"
Cloud Computing Management,"The exciting field of Cloud Computing is rapidly changing how businesses operate today. Cloud computing provides rapid access to shared pools of resources, such as: compute, storage, networks, applications, services, or libraries using an on-demand, utility-based model. The characteristics of a cloud computing model include: self-service, network access, resource pools, rapid elasticity, and metered resource usage. As with any large-scale shift, new skills and processes must be learned and implemented to overcome management challenges. Existing business processes, workflows, and policies must be adapted to account for this new technology.
This course, part of the Cloud Computing MicroMasters program, focuses on commonly encountered management issues with the adoption and implementation of cloud computing. Examples include: Cloud migration, Cloud Requests for Proposals, Cloud Service Level Agreements, and other business process compliance issues.
You will examine these issues in depth, then review industry best practices and other case studies to develop the techniques that address and mitigate them. Business processes such as procurement, vendor management, and end-user management are also covered.",IS
Hacking PostgreSQL: Data Access Methods,"This course is about data storage and data processing technologies with examples from PostgreSQL. It is geared toward database core developers, operation systems developers, system architects, and all those who want to understand databases in more detail.  
PostgreSQL is considered the most advanced free open-source database engine. It is developed by a community of hackers around the world - some of them are students just like you!  
In this course, you will learn how to use PostgreSQL indices, how to change them according to your demands, and how to implement your ideas and give back to the community.","SDF
DS
PL
AR
IAS"
A System View of Communications: From Signals to Packets (Part 1),"Have you ever wondered how information is transmitted using your mobile phone or a WiFi hotspot? This introductory course seeks to enable you to understand the basic engineering tools used and tradeoffs encountered in the design of these communication systems.
This course is divided into three parts. In Part 1, we examine the point-to-point link, which communicates information from a single transmitter to a single receiver. Part 2 examines how multiple transmitters can share the same physical channel. Part 3 discusses how information can be transmitted reliably from one station to another over a network that connects multiple stations. Online interactive exercises are included to help build your intuition.
This course was inspired by and built upon the course 6.02 Digital Communication Systems developed at MIT, which Prof Bertram Shi worked on during his sabbatical in 2009.",NC
Computing for Data Analysis,"The modern data analysis pipeline involves collection, preprocessing, storage, analysis, and interactive visualization of data.
The goal of this course, part of the Analytics: Essential Tools and Methods MicroMasters program, is for you to learn how to build these components and connect them using modern tools and techniques.
In the course, you&rsquo;ll see how computing and mathematics come together. For instance, &ldquo;under the hood&rdquo; of modern data analysis lies numerical linear algebra, numerical optimization, and elementary data processing algorithms and data structures. Together, they form the foundations of numerical and data-intensive computing.
The hands-on component of this course will develop your proficiency with modern analytical tools. You will learn how to mash up Python, R, and SQL through Jupyter notebooks, among other tools. Furthermore, you will apply these tools to a variety of real-world datasets, thereby strengthening your ability to translate principles into practice.",IS
Professional Android App Development,"Learn mobile application development on the Android platform by acquiring strong knowledge of Android SDK and different versions of Android. You will gain familiarity with RESTful APIs to connect Android applications to back-end services and will practice with Genymotion emulator.
As a part of this course, you will create widgets, customize list views and create 5 applications using Facebook, Twitter, maps & location based services. You will test Android-based mobile applications using Android testing tools such as Mockito.
This Android course is taught by a group of Google Developer Experts and other industry professionals, who develop innovative mobile apps .
This course is part of the GalileoX Android Developer MicroMasters Program that is specifically designed to teach the critical skills needed to be successful in this exciting field and to prepare you to take the Google Associate Android Developer Certification exam. In order to qualify for the MicroMasters Credential you will need to earn a Verified Certificate in each of the four courses as well as Final Project.",AR
Android App Development for Beginners,"This course is designed for students who are new to programming, and want to learn how to develop Android apps. You’ll learn how to create an Android project with Android Studio and run a debuggable version of the app. You'll also learn some Android architecture and the key principles underlying its design. You will gain an understanding of the processes that are involved in an Android developed application and you will become familiar with Android development tools and user interface. By the end of the course, you’ll build two simple apps that you can share with your friends.
Our Android course is taught by a group of Google developer experts who create innovative mobile apps.
This course is part of the GalileoX Android Developer MicroMasters Program and is specifically designed to teach the critical skills needed to be successful in this exciting field and to prepare you to take the Google Associate Android Developer Certification exam. To qualify for the MicroMasters Credential you will need to earn a Verified Certificate in each of the four courses as well as a Final Project.","AL
IAS
GV
HCI
PL
SDF
SF"
Data Analysis: Building Your Own Business Dashboard,"Are you ready to leave the sandbox and go for the real deal? Have you followed EX101x Data Analysis: Take It to the MAX() and EX102x Data Analysis: Visualization and Dashboard Design and are ready to carry out more robust data analysis?
In this project-based course you will engage in a real data analysis project that simulates the complexity and challenges of data analysts at work. Testing, data wrangling, Pivot Tables, sparklines? Now that you have mastered them you are ready to apply them all and carry out an independent data analysis.
For your project, you firstly get one raw dataset, which you will turn into a dashboard, step by step. You will begin with a business question, and then touch upon different business domains, such as revenue management, planning, scheduling, management, investment, etc.
The progress of the project will be gradual – in the first weeks you will be guided by quizzes to make sure that you are on track. You will engage with creating first drafts of your work and discuss them with your peers.
In the final week, you will be in charge. You will get a second dataset and a number of questions to answer, and it is up to you to design and build the perfect dashboard.
This course will allow you to practice the skills you’ve gained in previous Data Analysis XSeries courses and prove you can be an indispensable asset in data-driven organizations.
By completing this project and EX101x and EX102x, you can obtain the XSeries Data Analysis Verified Certificate. 
LICENSE
The course materials of this course are Copyright Delft University of Technology and are licensed under a Creative Commons Attribution-NonCommercial-ShareAlike (CC-BY-NC-SA) 4.0 International License.",HCI
Programming with C#,"To help ensure that your learning experience is good, please note that this course is not for beginners or those new to programming. You must have prior programming experience in an object-oriented programming language as there are concepts that are mentioned in the course that are assumed to be prior knowledge and are not explained in detail. If you are new to programming, it is highly recommended that you visit this page to learn some of the fundamentals first.
Learning C# provides a solid foundation in object-oriented programming knowledge, paves the way for learning other programming languages, and positions those who complete this course for a wide variety of in-demand computer programming jobs.   
The C# programming language was created to be an object-oriented programming language that offers ease of use, familiarity to C/C++ and Java developers, along with enhanced memory and resource management. C# is prevalent on the Microsoft platform but is also being used to develop software that runs on Linux, Android, and iOS devices.   
This course aims to teach the basics of C# all the way through the advanced features of the language.   
This course is not a beginner course on C#, although beginners can still learn a lot from the material. It is intended to provide an introduction to the C# language and the world of .NET programming for existing programmers who need or want to learn more about C# and managed code development.","AL
PL
SDF
SF
SP"
Web Design Best Practices: An Inclusive Approach,"In today&rsquo;s Internet-driven world, accessibility is a critical requirement for any web application. After all, what good is the technology that connects us all, if all of us can&rsquo;t connect with it?
Along with the benefits of inclusion, accessibility carries with it a very real financial incentive: poorly designed, inaccessible web applications can incur incredible repair costs when they are deemed to be out of compliance with legal requirements.
In this course, we will teach you the guidelines and best practices required to create a new web application from scratch. You&rsquo;ll also learn how to repair inaccessible sites as they exist right now.
We&rsquo;ll discuss the legal landscape behind accessibility, as well as the importance of making your web pages readable by all users. You&rsquo;ll learn how to test throughout the building phase so that you can be sure you are on the right track as you create new sites and applications.
Release Schedule:
 Quarter 1 2018",HCI
Introduction to Microsoft Azure,"Learn the fundamentals of working in a Microsoft Azure environment to help improve your business.
Begin learning what it takes to become a cloud administrator using Microsoft Azure, Microsoft’s open and flexible cloud computing platform.
This computer science course will help you get started with Microsoft Azure technologies such as infrastructure, virtual machines, virtual networking, identity, and storage. You will learn how Microsoft Azure can help you build and manage your business’s applications and cloud services and help improve overall business productivity.",IS
Introduction to Cloud Computing,"Cloud computing, or “the cloud”, has gone from a leading trend in IT to mainstream consciousness and wide adoption.
This self-paced course introduces cloud computing concepts where you’ll explore the basics of cloud services and cloud deployment models. 
You’ll become acquainted with commonly used industry terms, typical business scenarios and applications for the cloud, and benefits and limitations inherent in the new paradigm that is the cloud.
This course will help prepare you for more advanced courses in Windows Server-based cloud and datacenter administration.",SP
Predictive Modeling in Learning Analytics,"This course will introduce you to the tools and techniques of predictive models as used by researchers in the fields of learning analytics and educational data mining. It will cover the concepts and techniques that underlie current educational “student success” and “early warning” systems, giving you insight into how learners are categorized as at-risk through automated processes.
You will gain hands-on experience building these kinds of predictive models using the popular (and free) Weka software package. Also, included in this course is a discussion of supervised machine learning techniques, feature selection, model fit, and evaluation of data based on student attributes. Throughout the course, the ethical and administrative considerations of educational predictive models will be addressed.",IS
Java Fundamentals for Android Development,"Learn the basics of Java programming language and how to develop programs with conditionals and loops, design and implement recursive algorithms, understand basic mechanisms of the Object Oriented Paradigm (OPP), use and interpret the API of some of the most common Java classes and real-world android application development using the Android software development kit (SDK). This course provides the basic skills to ensure a start with Android Studio Editor and use Virtual Device.
This course is part of the GalileoX Android Developer MicroMasters Program that is specifically designed to teach the critical skills needed to be successful in this exciting field and to prepare you to take the Google Associate Android Developer Certification Exam. To qualify for the MicroMasters Credential you will need to earn a Verified Certificate in each of the four courses and the Final Capstone Project.",SP
"Reliable Distributed Algorithms, Part 2","This course is the second course in a series of two. Both courses provide a solid foundation in the area of reliable distributed computing, including the main concepts, results, models and algorithms in the field.
In order to ensure that IT infrastructures - a key engine of operations for any organization - operate at full capacity and efficiency, it is vital to understand its core: distributed algorithms. To achieve this, the infrastructure itself must be reliable and resilient. This course continues on the foundations of distributed algorithms, introduced in ID2203.1x, and builds on these concepts at a higher level of complexity to develop the skills needed to build and maintain reliable and efficient distributed systems.
ID2203.2x covers specific advanced abstractions and algorithms including sequence consensus and multi-Paxos; atomic broadcast and replicated state machines. It also covers dynamic reconfiguration of services; the use of physical clocks in distributed systems; the CAP theorem, and weaker consistency models, including eventual consistency and conflict-free replicated data-types.
Students will experiment and develop a variety of distributed algorithms in an interactive, engaging programming environment using the Scala programming language. They will be guided throughout the programming assignments and provided with intuitive examples to help them get started.
To complete the course with a full grade (100%) students are required to answer the graded quizzes provided every week, as well as the programming assignments.",DS
Quantum Cryptography,"How can you tell a secret when everyone is able to listen in? In this course, you will learn how to use quantum effects, such as quantum entanglement and uncertainty, to implement cryptographic tasks with levels of security that are impossible to achieve classically.
This interdisciplinary course is an introduction to the exciting field of quantum cryptography, developed in collaboration between QuTech at Delft University of Technology and the California Institute of Technology.
By the end of the course you will
Be armed with a fundamental toolbox for understanding, designing and analyzing quantum protocols.
Understand quantum key distribution protocols.
Understand how untrusted quantum devices can be tested.
Be familiar with modern quantum cryptography – beyond quantum key distribution.
This course assumes a solid knowledge of linear algebra and probability at the level of an advanced undergraduate. Basic knowledge of elementary quantum information (qubits and simple measurements) is also assumed, but if you are completely new to quantum information additional videos are provided for you to fill in any gaps.",IAS
Digital Dividends: Strengthening the Analog Foundation of the Digital Revolution,"Using a variety of learning tools and methodologies, this course will help you understand the role that the internet plays in economic development, and in the lives of people and businesses in general.
Traditional development challenges are preventing the digital revolution from fulfilling its transformative potential: the opportunity to bring broader development gains in the form of faster growth, more jobs and better services to economies.
In this course, you’ll explore answers to the following key questions: What are the challenges that prevent digital dividends from spreading more rapidly? What are the most important returns to digital investments? What should be done to fully benefit from the digital revolution?
The course will benefit a broad variety of audiences, ranging from student to policymaker, and from entrepreneur to civic actor.",IS
Paradigms of Computer Programming – Abstraction and Concurrency,"Louv1.2x and its predecessor Louv1.1x together give an introduction to all major programming concepts, techniques, and paradigms in a unified framework. We cover the three main programming paradigms: functional, object-oriented, and declarative dataflow.
The two courses are targeted toward people with a basic knowledge of programming. It will be most useful to beginning programming students, but the unconventional approach should be insightful even to seasoned professionals.
Louv1.1x (Fundamentals) covers functional programming, its techniques and its data structures. You’ll use simple formal semantics for all concepts, and see those concepts illustrated with practical code that runs on the accompanying open-source platform, the Mozart Programming System.
Louv1.2x (Abstraction and Concurrency) covers data abstraction, state, and concurrency. You’ll learn the four ways to do data abstraction and discuss the trade-offs between objects and abstract data types. You’ll be exposed to deterministic dataflow, the most useful paradigm for concurrent programming, and learn how it avoids race conditions.
To learn more about the practical organization of the two courses, watch the introductory video.",PL
Programming for Everyone: Introduction to Programming,"This course is part of Global Freshman Academy (GFA), which means you can earn transferable ASU credit toward your college degree.
Every day, computers and algorithms touch your life in both mundane and profound ways. They are in the plants and distribution systems that bring you electricity and clean water, sensors that moderate the flow of traffic, in the tractors and combines that sow and harvest your food, and in the satellites that measure and predict the weather.
If you are curious about what computers can do, and how we instruct them to do those things - this course is for you. No prior programming experience is needed. More than just exposure to programming, you’ll gain a powerful set of thinking and problem-solving skills that you can use in your daily life.
Start taking advantage of the computer power around us to make our world a better place.
This is a three-credit course at Arizona State University (CSE 110 Principles of Programming) and satisfies the Computer/Statistics/Quantitative (CS) general studies requirement.","AR
IAS
HCI
NC
PL
SDF
SP"
More Fun with Prime Numbers,"2, 3, 5, 7, 11, 13, 17, 19, 23, 29 are all prime numbers and they hold special significance. Mathematicians from ancient times to the 21st century have been working on prime numbers, as they're one of the most mysterious and important subjects in mathematics.  
In this course, I will present several attractive topics on prime numbers. You will learn basic concepts of prime numbers from the beginning. They obey mysterious laws. Some laws are easily verified by hand, some laws were discovered 100 years ago, and some laws are yet to be discovered. Surprisingly, prime numbers are also applied to cryptography today. You will also learn how to construct practical cryptosystems using prime numbers.  
The original course ""Fun with Prime Numbers"" was first offered in 2015 and attracted many students. This course in 2017 will be offered as its refined and upgraded version. All the lecture videos will be renewed, and a new topic on cryptography will be added so as to enliven and satisfy even the students who took the previous course.  
No previous knowledge of prime numbers is required in this course. Calculating with a pen and paper, you will explore the mysterious world of prime numbers. The course is designed to encourage you to attack unsolved problems, and hopefully, discover new laws of your own in the future!","NC
PL
SDF"
Microsoft Professional Capstone : Data Science,"This course is part of the Microsoft Professional Program Certificate in Data Science.
Showcase the knowledge and skills you&rsquo;ve acquired during the Microsoft Professional Program for Data Science, and solve a real-world data science problem in this program capstone project. The project takes the form of a challenge in which you will explore a dataset and develop a machine learning solution that is tested and scored to determine your grade.
Note: This course assumes you have completed the previous courses in the Microsoft Professional Program for Data Science. For details, go to Microsoft Professional Program Certificate in Data Science",DS
Software Engineering Essentials,"The world of software engineering requires high flexibility, an influx of new ideas, and the courage to challenge traditional approaches. As a software engineer, you need to know the methods, workflows and tools to handle continuously growing complexity and shortened development cycles. You must be able to work in teams to build high-quality software.
In this course, we will introduce the basic concepts of object-oriented software engineering. You will learn and apply UML modeling, patterns and project management techniques that are used when developing complex software systems.
This course is interactive. You will watch videos in which we explain critical theory. You will participate in online exercises to practice your knowledge including quizzes, UML modeling with peer reviews, and programming exercises with immediate feedback",SE
Globally Distributed Software Engineering,"Software engineering operates ever more frequently in globally distributed settings, in a practice that is known as Globally Distributed Software Engineering (GDSE). In this course, you will obtain a practical overview of the organization and operation of software engineering of this practice. As such, it is aimed at professionals in distributed software development teams, and executives setting up and leading such teams who would like to develop the required technical and organizational skills.
The course covers the subject in an accessible and practical manner. Through video lectures, group assignments and exercises, you will be familiarized with the advantages and disadvantages of GDSE, the practical consequences of GDSE and its technological feasibilities and infeasibilities. You will learn about real-world experiences of users and examples of GDSE applications such as outsourcing, offshore software development, near-shoring and multi-partner systems development.
You will apply the knowledge gained through hands-on experience with GDSE by working together with team members from different countries as a distributed team; and through analysis of best-practice examples. Together with other course participants you will prepare a number of artefacts that build on the body of knowledge of GDSE and so have the chance to contribute to this growing field of knowledge.
Guest lectures from industry experts and researchers will be an integral part of the course. These lectures will demonstrate how GDSE is handled in industry, how decision-makers lead their teams in this context, and what is the state-of-the-art in GDSE research. The course consists of seven main topics:
Globally Distributed Software Engineering
Distributed Agile
The Software Engineer and GDSE
Boardroom: C-level Decision-Making
GDSE Research
Time and Cultural Differences
GDSE Locations: Near-shoring and Offshoring
Each topic is explained by two guest lecturers from industry or academia. Guest lecturers include, among others:
Emiel Romein - Software Development Manager at Exact Online
Eelco Rustenburg - Senior trainer at Gladwell Academy and partner of Blinklane Consulting 
Jeff Sutherland - the inventor and co-creator of Scrum 
Suzanne Kelder – Executive Coach at KPN and former CIO of Base Company 
Svenja de Vos – CTO at Leaseweb 
Darja Šmite - Professor at Blekinge Institute of Technology and a part-time research scientist at SINTEF ICT 
Erik Ammerlaan - Software Engineer at Exact 
Prajeesh Prathap - Delivery Engineer and expert for DevOps, Continuous Delivery and Application Lifecycle Management at InfoSupport 
Dianne Elsinga - Global Team Expert at Prowareness 
Paul Tjia - Senior consultant and expert on sourcing and country selection at GPI Consultancy 
Maran Gunasekaran - Security consultant at Prowareness, Bangalore, India",SE
AP Computer Science A: Java Programming Loops and Data Structures,"In this computer science course, you will learn the basics of programming in the Java language, and cover topics relevant to the AP Computer Science A course and exam.
This course will cover repetition statements (for, while, do-while and for-each), the array data structure, methods and recursion.
This course is for anyone interested in taking a first-level computer-programming course, particularly those who attend a school that does not provide a similar class.
No previous programming knowledge is needed, although it is recommended that learners be comfortable with the topics addressed in AP Computer Science A: Java Programming.
We are looking forward to helping you explore this exciting new world!","AL
PL
SDF
SP"
Mobile Computing with App Inventor: CS Principles Part II,"We will use the free and open tool, App Inventor for Android, to explore advanced topics in computer science.
You’ll build an app a week, exploring such advanced topics as gameplay over a network, encryption, and more.
At the end of the course, we’ll collectively decide on an app that we will build together. You will be able to build almost anything you can imagine!
Because computer science is not just about coding and building apps, we will also learn some of the fundamental principles of computer science. We'll explore the potential and the limitations of computing and coding. We'll learn how the Internet works and about the positive and negative aspects of computing in today's society.
For these broader computing concepts we will work within an emerging curricular framework -- the Computer Science Principles (CSP). The CSP framework is being developed by leading computer science educators from around the country under the auspices of the College Board and with funding support of the National Science Foundation.
In addition to programming and CSP, the course is project-based and emphasizes writing, communication, and creativity. Multiple-choice questions, in the style that students can expect to encounter on the AP exam, will also be a key component of this course.",IAS
Paradigms of Computer Programming – Fundamentals,"Louv1.1x and Louv1.2x together give an introduction to all major programming concepts, techniques, and paradigms in a unified framework. We cover the three main programming paradigms: functional, object-oriented, and declarative dataflow.
The two courses are targeted toward people with a basic knowledge of programming. It will be most useful to beginning programming students, but the unconventional approach should be insightful even to seasoned professionals.
Louv1.1x covers fundamental concepts. You’ll learn functional programming, its techniques and its data structures. You’ll use simple formal semantics for all concepts, and see those concepts illustrated with practical code that runs on the accompanying open-source platform, the Mozart Programming System.
Louv1.2x covers data abstraction, state, and concurrency. You’ll learn the four ways to do data abstraction and discuss the trade-offs between objects and abstract data types. You’ll be exposed to deterministic dataflow, the most useful paradigm for concurrent programming, and learn how it avoids race conditions.
To learn more about the practical organization of the two courses, watch the introductory video.",PL
Lernen objekt-orientierter Programmierung,"Dieser Kurs bietet einen leicht zugänglichen Einstieg in die faszinierende Welt der Informatik. Dabei werden insbesondere die objekt-orientierte Programmierung und einfache Algorithmen behandelt. Sie lernen unter anderem, wie man kleine Programme in der populären Programmiersprache Java schreibt.
Dies ist aber kein reiner Programmierkurs, sondern soll vor allem die wesentlichen Grundlagen bereitstellen, um auch größere Programme verstehen und selbst entwickeln zu können. Bei den vielen interaktiven Übungen mit praktischen Beispielen und direkten Rückmeldungen kommt aber auch der Spaß nicht zu kurz!
Der Kurs orientiert sich am bayerischen Schulfach Informatik, das von Prof. Hubwieser maßgeblich mitkonzipiert wurde.","AR
PD
PL
SDF
SP"
Programmation iOS (partie II),"Notre vie quotidienne est fortement impactée par l'usage de nos smartphones et de nos tablettes. Il y a des applications pour presque tout : retoucher ses photos, consulter les horaires des trains, chercher une place de cinéma, choisir une recette de cuisine, se renseigner sur le traffic routier en temps réel, ou trouver les restaurants les plus proches.
Derrière ces applications il y a un savoir-faire spécifique à la programmation sur plateformes mobiles. En effet, contrairement aux ordinateurs classiques, ces terminaux disposent de nombreux capteurs que l'on peut avantageusement utiliser. C'est d'ailleurs ce qui a changé notre usage quotidien ces dernières années.
Ce MOOC est le second d'une série de deux MOOCs consacrés à la programmation sur iPhone et iPad mais il n’est pas nécessaire de l’avoir suivi si vous avez déjà des connaissances en Objective-C et en Swift. Vous pouvez d’ailleurs encore accéder à cette première partie afin de rafraichir vos connaissances. L’accès est accessible ici. 
Ce MOOC est le second d'une série de deux MOOCs consacrés à la programmation sur iPhone et iPad. Il se concentre sur le développement d'applications complexes s'appuyant sur des hiérarchies de vues et utilisant les capteurs du terminal: gyroscopes, appareils photos, GPS, etc. Nous avons également décidé de prendre en compte les dernières nouveautés introduites dans iOS. Ainsi, ce MOOC, s'il évoque Objective-C, le langage ``historique'' de développement sur cette plateforme qu'il faut connaître, passera beaucoup de temps sur le nouveau langage Swift (dans sa version 3, annoncée en Septembre 2016 avec iOS10).
L'objectif, si vous suivez attentivement ce cours et réalisez les exercices proposés, est de vous rendre capables de réaliser des applications riches et sophistiquées pour l'écosystème iOS. Vous serez aussi capables de travailler non seulement dans l'environnement de développement d'Apple mais aussi dans des environnements similaires. Les exercices sont réalisés sous iOS10, publié en septembre 2016. Nous recommandons donc l'usage de Xcode 8 ou ultérieur (accès gratuit sur le site d'Apple).
Ce cours est principalement destiné à des personnes maîtrisant déjà la programmation objet mais il n'est pas nécessaire d'avoir assisté à la partie I pour le suivre, même si cela aurait sans doute été un plus. Il est dérivé d'une unité d'enseignement de 5eme année (master 2) dispensée à l'Université Pierre et Marie Curie, le premier établissement universitaire à avoir proposé en France, en 1967, un diplôme d'informatique. Il tient également compte des nombreux retours des MOOCs qui se sont déroulés en 2014 et en 2015.
Le sujet vous intéresse? Inscrivez-vous et lancez-vous dans l'aventure. Aujourd'hui, d'anciens participants en 2014 et 2015 se sont réorientés vers la programmation mobile. Pourquoi pas vous?",HCI
AP Computer Science A: Java Programming,"In this computer science course, you will learn the basics of programming in the Java language, and cover topics relevant to the AP Computer Science A course and exam.
This course includes a broad view of computer operation, the global impact of computing, and then introduces Java programming concepts including variables, selection and object-oriented design.
This course is for anyone interested in taking a first-level computer-programming course, particularly those who attend a school that does not provide a similar class.
No previous programming knowledge is needed. We are looking forward to helping you explore this exciting new world!","AL
AR
IAS
HCI
PL
SDF
SE"
The Beauty and Joy of Computing - AP® CS Principles Part 1,"Discover the big ideas and thinking practices in computer science plus learn how to code using one of the friendliest programming languages, Snap! (based on Scratch).
Computing has profoundly changed the world, opening up wonderful new ways for people to connect, design, research, play, create, and express themselves. However, just using a computer is only a small part of the picture. The real transformative and empowering experience comes when one learns how to program the computer, to translate ideas into code.
This course teaches students how to do exactly that, using Snap! (based on Scratch), one of the friendliest programming languages ever invented. It's purely graphical, which means programming involves simply dragging blocks around, and building bigger blocks out of smaller blocks. But this course is far more than just learning to program. We focus on seven big ideas (creativity, abstraction, data and information, algorithms, programming, the Internet, and global impact), and six computational thinking practices (connecting computing, creating computational artifacts, abstracting, analyzing problems and artifacts, communicating, and collaborating). Throughout the course, relevance is emphasized: relevance to the student and to society.
Topics include:
Abstraction
Programming Paradigms Algorithms
Global Implications of Computing
Lab-Based Topics: Snap! Programming, Conditionals and Abstraction, Lists and the Internet
This fun, introductory course is not just for computer science majors, it’s for everyone… join us!","AR
PL
IAS"
Big Data Analytics in Healthcare,"Data science plays an important role in many industries. In facing massive amounts of heterogeneous data, scalable machine learning and data mining algorithms and systems have become extremely important for data scientists. The growth of volume, complexity and speed in data drives the need for scalable data analytic algorithms and systems.
In this course, we study such algorithms and systems in the context of healthcare applications.
In healthcare, large amounts of heterogeneous medical data have become available in various healthcare organizations (payers, providers, pharmaceuticals). This data could be an enabling resource for deriving insights for improving care delivery and reducing waste. The enormity and complexity of these datasets present great challenges in analyses and subsequent applications to a practical clinical environment.
In this course, we introduce the characteristics of medical data and associated data mining challenges in dealing with such data. We cover various algorithms and systems for big data analytics. We focus on studying those big data techniques in the context of concrete healthcare analytic applications such as predictive modeling, computational phenotyping and patient similarity.","IS
NC
SP"
Computer Networks and the Internet,"The Internet has become integral to our daily lives. Despite its importance to users, most have only a general idea of how it works. If you’re eager to learn more about the Internet and computer networks in general, this course is for you!This course was created in collaboration with the Lübeck University of Applied Scienceswith support from theGerman Federal Ministry of Education and Research (BMBF).
In this course, you will learn about technologies that you use at home like Wireless LAN. We will also illustrate how the Internet works on a global scale and investigate the role of major protocols; in particular the Internet Protocol (version 4 and version 6) and its helper protocols (e.g., ICMP, ARP, DHCP).
You’ll learn how the protocols TCP and UDP are used to realize applications. Out of the many applications that the Internet has, the Hypertext Transfer Protocol is focused on as the lead example since it is the main protocol for the Web.
Key tools will be introduced and used, including the network protocol analyzer Wireshark, the network emulators eNSP and WANem, command line tools ping and traceroute, Firefox browser Add-Ons like IPvFox, and many test web pages.
This course uses videos and texts to provide an overarching foundation, augmented with practical exercises so that you can experiment and explore on your own.
A portion of the profit from verified certificates in this course will go toward Kiron Open Higher Education. Kiron enables access to higher education and successful learning for refugees through digital solutions.","NC
SP"
The Quantum World,"Welcome to The Quantum World!
This course is an introduction to quantum chemistry: the application of quantum theory to atoms, molecules, and materials. You’ll learn about wavefunctions, probability, special notations, and approximations that make quantum mechanics easier to apply. You’ll also learn how to use Python to program quantum-mechanical models of atoms and molecules.
HarvardX has partnered with DataCamp to create assignments in Python that allow students to program directly in a browser-based interface. You will not need to download any special software, but an up-to-date browser is recommended.
This course has serious prerequisites. You will need to be comfortable with college-level chemistry and calculus. Some prior programming experience is also encouraged.
The Quantum World is ideal for:
Chemistry majors who want extra material alongside an on-campus course
Chemistry majors at an institution that does not offer quantum chemistry
Physics or CompSci majors who want to branch out to chemistry
Graduate students refreshing on quantum mechanics before their qualifying exams
Professional chemists who want to brush up on their skills","AL
IAS
PL
SDF
SP"
Mathematical Modeling Basics,"How do populations grow? How do viruses spread? What is the trajectory of a glider?
Many real-life problems can be described and solved by mathematical models. In this course, you will form a team with another student and work in a project to solve a real-life problem.
You will learn to analyze your chosen problem, formulate it as a mathematical model (containing ordinary differential equations), solve the equations in the model, and validate your results. You will learn how to implement Euler’s method in a Python program.
If needed, you can refine or improve your model, based on your first results. Finally, you will learn how to report your findings in a scientific way.
This course is mainly aimed at Bachelor students from Mathematics, Engineering and Science disciplines. However it will suit anyone who would like to learn how mathematical modeling can solve real-world problems.",SDF
Programmation Concurrente (avec Java),"Savez-vous que les machines les plus puissantes au monde sont massivement parallèles ? Saviez-vous que les objets les plus courants de notre vie quotidienne, comme les voitures ou les smartphones, sont de véritables ordinateurs parallèles ?
En effet, les voitures les plus simples embarquent une trentaine de capteurs et processeurs sur lesquels s'exécutent différents programmes qui coopèrent. Les véhicules les plus sophistiqués dépassent d'ailleurs la centaine de capteurs et processeurs... et ne parlons pas des véhicules autonomes qui se profilent dans un avenir proche. D'ailleurs, vous savez tous qu'internet peut également être vu comme un système massivement parallèle ?
Bref, les systèmes parallèles ont déjà envahi notre vie quotidienne et sont présents dans tous les secteurs. La principale conséquence est que l'informaticien d'aujourd'hui se doit de maîtriser ce type de programmation, qui est loin d'être trivial. En effet, tôt ou tard, il ne pourra qu'être confronté à ce type de problèmes.
L'objectif du MOOC « Programmation Concurrente » est de vous donner un aperçu de ce domaine. Nous y présenterons les problèmes posés par la concurrence, les solutions algorithmiques proposés (moniteurs, sémaphores, etc.) et illustrerons nos propos à l'aide du langage Java, qui, dans sa version 8 (en fait depuis la version 7), intègre de nombreux mécanismes permettant au programmeur désireux de comprendre la programmation concurrence, de s'y focaliser sans avoir à manipuler des mécanismes de bas niveau, comme ceux que l'on trouve dans de nombreux langages (par exemple, C avec les bibliothèques Posix).
Ce cours est principalement destiné à des personnes maîtrisant déjà au moins un langage de programmation, objet si possible. Il est dérivé d'une unité d'enseignement de troisième année dispensée à l'Université Pierre et Marie Curie, le premier établissement universitaire à avoir proposé en France, en 1967, un diplôme d'informatique.
Afin que vous puissiez mieux suivre ce MOOC, il est nécessaire de connaître le langage Java. À ce titre, des ressources de préparation sont à votre disposition via le lien suivant : http://lip6.fr/Fabrice.Kordon/moocprc2017.php",PD
LAFF – On Programming for Correctness,"Is my program correct? Will it give the right output for all possible permitted inputs? Computers are now essential in everyday life. Incorrect programs lead to frustration in the best case and disaster in the worst. Thus, knowing how to construct correct programs is a skill that all who program computers must strive to master. 
In this computer science course, we will presents ""goal oriented programming"" the way Edsger Dijkstra, one of the most influential computer scientists, intended. You will learn how to derive programs hand-in-hand with their proofs of correctness. The course presents a methodology that illustrates goal-oriented programming, starting with the formalization of what is to be computed, and then growing the program hand-in-hand with its proof of correctness. The methodology demonstrates that, for a broad class of matrix operations, the development, implementation, and establishment of correctness of a program can be made systematic.
Since this technique focuses on program specifications, it often leads to clearer, correct programs in less time. The approach rapidly yields a family of algorithms from which you can then pick the algorithm that has desirable properties, such as attaining better performance on a given architecture. 
The audience of this MOOC extends beyond students and scholars interested in the domains of linear algebra algorithms and scientific computing. This course shows how to make the formal derivation of algorithms practical and will leave you pondering how our results might extend to other domains.
As a result of support from MathWorks, learners will be granted access to MATLAB for the duration of the course.",SP
Introduction to Data Structures,"Well organised data structures allow for quick and efficient retrieval of information and are essential for modern computing. Organised data can be easily sorted, ordered, and searched to retrieve information that meets certain requirements.
In Introduction to Data Structures, you’ll learn the fundamentals of creating data structures, and gain exposure to coding and visualising data structures. You’ll explore the importance and impact of well organised data.
You’ll learn how to build a program from small pieces and understand why organisational approaches make such a difference to some very common approaches to solutions.
The course identifies the most important and useful data structures in use in modern programming and each will be presented with exercises for building, visualising, and manipulating that structure. Each exercise embeds a simple and intuitive application for the particular organisation of data that we present. Through the course you will be given a concrete understanding of data structures by writing your own programs to interact with the data structures.
You’ll get the most from this course if you have some understanding of simple programming, and the Foundation week of the course will allow you to test the level of knowledge you require. Learners that have completed the Think. Create. Code. course will have sufficient coding skills to take this course.","SDF
PL
DS"
Programmation iOS (partie I),"Smartphones, tablettes, ces appareils ultra-portables sont désormais omniprésents dans notre vie quotidienne. Il y a des applications pour presque tout : retoucher ses photos, réserver une place de cinéma, réviser le code de la route, choisir une recette de cuisine, tourner et monter des clips vidéos, ou trouver les restaurants les plus proches.
Derrière ces applications il y a un savoir-faire spécifique à la programmation sur plateformes mobiles. En effet, contrairement aux ordinateurs classiques, les contraintes imposées par les caractéristiques ces terminaux font que certains « gestes simples » pour l'utilisateur, comme faire dérouler une liste de données, impliquent en réalité des mécanismes plus complexes.
Ce MOOC est le premier d'une série de deux MOOCs consacrés à la programmation sur iPhone et iPad. Il se concentre sur le développement d'applications « mono-vues » et présente en détail les principes d'une interaction réussie de vos applications avec ses utilisateurs. Nous avons également décidé de prendre en compte les dernières nouveautés introduites dans iOS. Ainsi, ce MOOC, s'il évoque Objective-C, le langage « historique » de développement sur cette plateforme qu'il faut connaître, passera beaucoup de temps sur le nouveau langage Swift (dans sa version 3, annoncée en Septembre 2016 avec iOS10). Un parallèle avec la problématique du développement de systèmes embarqués est également fait.
L'objectif, si vous suivez attentivement ce cours et réalisez les exercices proposés, est de vous rendre autonomes dans la réalisation d'applications pour l'écosystème iOS (le dernier exercice est d'ailleurs un jeu d'adresse). Vous serez aussi capables de travailler non seulement dans l'environnement de développement d'Apple mais aussi dans des environnements similaires. Les exercices sont réalisés sous iOS10, publié en septembre 2016. Nous recommandons donc l'usage de Xcode 8 ou ultérieur (accès gratuit sur le site d'Apple).
Ce cours est principalement destiné à des personnes maîtrisant déjà la programmation objet. Il est dérivé d'une unité d'enseignement de 5eme année (master 2) dispensée à l'Université Pierre et Marie Curie, le premier établissement universitaire à avoir proposé en France, en 1967, un diplôme d'informatique. Il tient également compte des nombreux retours des MOOCs qui se sont déroulés en 2014 et en 2015.
Si ce sujet vous intéresse, n'hésitez pas à vous inscrire et à venir nous suivre. J'ai reçu plusieurs témoignages d'anciens participants en 2014 et 2015 qui se sont réorientés vers la programmation mobile après avoir participé à l'une des éditions précédentes.",AR
Mobile Application Experiences,"How do you design a mobile app that truly changes people's lives? How can you understand how a new service is being used, both quantitatively and qualitatively? How can you use all of the rich sensing and I/O capabilities of mobile devices to create experiences that go far beyond what's possible on a traditional computer?
Mobile devices are changing the ways that we interact with each other and information in the world. This course will take you from a domain of interest, through generative research, design, usability, implementation and field evaluation of a novel mobile experience. You'll finish the course with a working, field-tested application suitable for release in the app store as well as a deep understanding of human interaction with mobile devices and services.
Based on a popular MIT class that has been taught since 2006 by Frank Bentley of Yahoo Labs and Ed Barrett, a Senior Lecturer at MIT, this course will explore what makes mobile devices unique. A primary focus will be on studying existing behavior and using key findings for design. While writing the code for an app is a part of the class, the majority of the topics will cover designing and evaluating a unique mobile experience. Along the way, you will have opportunities to share your work with other students from around the world! Java experience (or Objective C for iOS users) and a smartphone are required.
All required readings are available within the courseware, courtesy of The MIT Press. A print version of the course textbook, Building Mobile Experiences, is also available for purchase. The MIT Press is offering enrolled students a special 30% discount on books ordered directly through the publisher’s website. To take advantage of this offer, please use promotion code BME30 at The MIT Press site.",HCI
Computation Structures 3: Computer Organization,"Digital systems are at the heart of the information age in which we live, allowing us to store, communicate and manipulate information quickly and reliably. This computer science course is a bottom-up exploration of the abstractions, principles, and techniques used in the design of digital and computer systems. If you have a rudimentary knowledge of electricity and some exposure to programming, roll up your sleeves, join in and design a computer system!
This course is Part 3 of a 3-part series on digital systems, providing an introduction to the hardware/software interface and is based on a course offered by the MIT Department of Electrical Engineering and Computer Science. Topics include pipelined computers, virtual memories, implementation of a simple time-sharing operating system, interrupts and real-time, and techniques for parallel processing.
Using your browser for design entry and simulation, you’ll optimize your processor design from Computation Structures 2: Computer Architecture for size and speed, and make additions to a simple time-sharing operating system.
Learner Testimonial 
“Out of the many edX courses I have taken, the first two parts of Computation Structures 6.004x were clearly the best. I am looking forward to the third part.” - Previous Student","AR
DS
IAS
PD
SE
SDF
SP"
Computer System Design: Advanced Concepts of Modern Microprocessors,"In this computer science course, you will learn advanced concepts underpinning the design of today’s multicore-based computers. Additionally, you will learn how design decisions affect energy efficiency and performance.
Overall, topics include fundamentals on exploiting parallelism among instructions such as out-of-order execution, branch prediction, exception handling and advanced concepts of memory systems including prefetching and cache coherency. These concepts are fundamental for future computer systems to maximize compute efficiency.
You will also engage with a community of learners with similar interests to share knowledge.
The course is derived from Chalmers’s advanced graduate course in computer architecture. Prospective students should have a foundation in basic computer design, as offered by, for example, in “Computer System Design - Improving Energy Efficiency and Performance.“",AR
Advanced Software Construction in Java,"This computer science course is the second of a two-course sequence on how to write good software using modern software engineering techniques.
This course will dig deeper into what makes for ""good"" code -- safe from bugs, easy to understand, and ready for change. We will explore two paradigms for modern programming: (1) grammars, parsing, and recursive datatypes; and (2) concurrent programming with threads.
This is a challenging and rigorous course that will help you take the next step on your way to becoming a skilled software engineer.
Photo by raincrystal on Flickr. (CC-BY-SA) 2.0",SE
Data Science Readiness Assessment,"Are you interested in pursuing a degree in Data Science, but unsure whether you have the necessary Math and Programming skills? This assessment will help you identify your current readiness in three core areas required for the study of Data Science; Calculus, Linear Algebra, and Programming.
You can take this assessment at your own pace and receive a private score report that identifies your readiness in each specific area. We will also provide, when necessary, recommendations for additional free online study.
This assessment is free, unproctored, and not offered for credit; it is designed for enrichment and self-assessment for anyone interested in pursuing data science as a career.​",IS
Digital Networks Essentials,"Every business today depends on connectivity, and now there is increasing demand for engineers who can design, develop and manage data networks – and keep them secure as well.
This applied computer science MOOC will give you the hands-on know-how to master the network technologies used every day to communicate and access information via the web and phones.
You’ll learn the vocabulary, concepts and mechanisms common to all digital networks, and explore the TCP, UDP and IP protocols that support all online communications.
You’ll also see how a global network is organized and how its components work together, and understand the importance of standards and protocols. This course is designed for students or professionals with a background in science or computing.
Practical coursework is carried out in a Unix virtual environment that can be installed on any modern computer.
Sign up now and sharpen up your network knowledge!","NC
IS"
Computation Structures 2: Computer Architecture,"Digital systems are at the heart of the information age in which we live, allowing us to store, communicate and manipulate information quickly and reliably. This computer science course is a bottom-up exploration of the abstractions, principles, and techniques used in the design of digital and computer systems. If you have a rudimentary knowledge of electricity and some exposure to programming, roll up your sleeves, join in and design a computer system!
Using your browser for design entry and simulation, you’ll implement a 32-bit computer using our gate library and write assembly language programs to explore the hardware/software interface.
This is Part 2 of a 3-part program on digital systems.",DS
Computer Systems Design for Energy Efficiency,"In order to be competitive in the computer science field, it’s imperative to understand the basic building blocks of a modern computer and how they directly impact the speed and efficiency of a program. Whether you work with embedded systems, mobile computer-based systems, or cloud systems, performance and energy efficiency are key drivers of usability and competitiveness of computerized products.
In this course, you will learn how to design modern multicore-based computers, and how the design choices you make affect performance and energy consumption. You will explore design principles governing modern microprocessors, such as pipelining and cache memories, as well as methods for determining the impact of your design on execution time and energy efficiency.
These skills can make a difference for practicing engineers for the purpose of building highly competitive products. Take, for instance, a smartphone with limited battery capacity. By adding value to end users through new or improved functionality, this can lead to significantly shorter operation time between battery charges, thus utilizing the already limited resources of a smartphone far more efficiently.
With this skillset, you can become an expert in computer system performance and energy efficiency - knowledge that is in high demand when designing computerized embedded products. With trends towards IoT (Internet of Things), autonomous systems and mobile computers, such a skillset will be critical in a career in systems engineering.
This course is derived from a Chalmers senior undergraduate course in computer system design. It assumes basic knowledge in computer organization.",AR
Data Analytics in Health – From Basics to Business,"Many people talk about the promise of “big data” to health care. But how can the application of data analytics to big data actually improve health and health care? We will show that novel data analytics based solutions can result in better diagnosis, better care and better curing. This provides fertile ground for entrepreneurship and the development of new businesses.
In our course we’ll start from the very basics of data analytics, look at different real world approaches and help you to see entrepreneurial opportunities and develop a business plan.
We will cover three important fields:
Health care expertise: We will present medical approaches to data and give an overview of challenges where big data based solutions have been developed to improve the efficiency and effectiveness in medicine.
Data analytics: We’ll explain the basics of data mining within the context of a wide variety of health care settings, and the types of data and data analysis challenges that you will likely encounter in each. We’ll start with gathering the data, move on to classifying, analyzing and finally visualizing it.
Entrepreneurship: You will learn how to assess when data sciences based improvements in health care represent entrepreneurial opportunities. The development of a rigorous business plan is used to help you make that assessment.
Participants with prior experience in the medical field will learn how novel data science applications can improve healthcare, create societal value and how to spot entrepreneurial opportunities.
Participants with experience in data science or mathematics will learn about medical approaches to data and why healthcare is an exciting area to apply and develop data analytics.
Participants interested in launching their startup will learn how big data solutions in health care can provide a solid basis to build great ventures.
Whatever your motivation to enrol in this course, we care about your project and your success - that’s why we will guide you through all parts of this learning journey step by step!
Enter now to see how you can engage in data driven innovation and make an impact on improving care, outcomes and the quality of life.",SP
Software Construction in Java,"This computer science course is the first of a two-course sequence about writing good software using modern software engineering techniques.
In this course, you will learn what software engineers mean by ""good"" code -- safe from bugs, easy to understand, and ready for change. You will also learn ways to make your code better, including testing, specifications, code review, exceptions, immutability, abstract data types, and interfaces.
This is a challenging and rigorous course that will help you take the next step on your way to becoming a skilled software engineer.
Photo by Wizou on Flickr. (CC BY) 2.0",SE
Data Structures and Algorithms Part 1,"Computers are an important tool forproblemsolving and are deeply involvedin modern life.Computers perform operations on data. What is the logical relationship among data? How is data stored in computers? What algorithms are required to solve particular problems? These are the questions that will be answered in “Data Structures and Algorithms,” an important core course in Computer Science. The course also introduces students to fundamental data structures and classical algorithms used in more specialized courses,including Operating Systems, Software Engineering, Database Systems, CompilerPrinciples, Computer Graphics and Human Computer Interaction.
Niklaus Wirth described the important and indivisible link between algorithms and data structure in his book, Algorithms + Data Structures = Programs.
The course will build on Wirth’s ideas as it helps students improve their knowledge of theory and their ability to think abstractly to solve problems.Building on a solid theoretical foundation, studentswill analyze problems using data and algorithm abstraction. Students will learn how to organize data efficiently and make tradeoffs between space and time complexity, design efficient and effective algorithms, and implement high quality programs to solve complex real-world problems.After studying this course, students will be well prepared for further study and research in engineering and other computer-related areas.
This is an intermediate-level course appropriate for sophomore students majoring in computer science or other science/engineering disciplines. Students shouldhave learned ""introduction to computing"",with the knowledge of structured and object-oriented programming.
This course is presented in two eight-week sessions.
Students who score 60% or higher will receive an Honor Code Certificate.
The Autumn 2014 Sessions of this course are supported by Google.
 Which programming languages does the course use?
The course’s content and exercises are both based upon C++ pseudo code. Programming assignments are automatically assessed by POJ which accepts code written in C/C++ and JAVA.","SDF
AL
PL
AR
SE"
Mobile Application Experiences Part 2: Mobile App Design,"Want to create the next big app, grounded in the needs of real users? This course will teach you Human Computer Interaction (HCI) methods to better understand current behavior in a domain, and then design, develop, and deploy your own application.
This module will take you from an application idea through the creation of a paper prototype and a usability evaluation to validate initial usability of your concept. 
Completion of Mobile Application Experiences Part 1 is not required. You can begin this module with an idea you have had on your own.
This course is part of a five-part Mobile Application Experiences series:
21W.789.1x: Mobile Application Experiences Part 1: From a Domain to an App Idea
21W.789.2x: Mobile Application Experiences Part 2: Mobile App Design
21W.789.3x: Mobile Application Experiences Part 3: Building Mobile Apps
21W.789.4x: Mobile Application Experiences Part 4: Understanding Use
21W.789.5x: Mobile Application Experiences Part 5: Reporting Research Findings",HCI
Underactuated Robotics,"Robots today move far too conservatively, using control systems that attempt to maintain full control authority at all times. Humans and animals move much more aggressively by routinely executing motions which involve a loss of instantaneous control authority. Controlling nonlinear systems without complete control authority requires methods that can reason about and exploit the natural dynamics of our machines.  
This course introduces nonlinear dynamics and control of underactuated mechanical systems, with an emphasis on computational methods. Topics include the nonlinear dynamics of robotic manipulators, applied optimal and robust control and motion planning. Discussions include examples from biology and applications to legged locomotion, compliant manipulation, underwater robots, and flying machines.
FAQ
Who can register for this course?
Unfortunately, learners from Iran, Sudan, Cuba and the Crimea region of Ukraine will not be able to register for this course at the present time. 
While edX has received a license from the U.S. Office of Foreign Assets Control (OFAC) to offer courses to learners from Iran and Sudan our license does not cover this course. 
Separately, EdX has applied for a license to offer courses to learners in the Crimea region of Ukraine, but we are awaiting a determination from OFAC on that application. 
We are deeply sorry the U.S. government has determined that we have to block these learners, and we are working diligently to rectify this situation as soon as possible.","AR
IAS
PL
SDF"
Preparing for the AP* Computer Science A Exam — Part 1,"CSAP.1x covers the material of AP Computer Science A which is equivalent to a first-semester, college-level course in computer science. This highly interactive course will introduce students to the fundamental concepts of computer science. The course will be structured to encourage students to think computationally and enjoy problem solving. New York City’s companies, museums, art and architecture will be used as examples to emphasize the ubiquitous role of computing and programming concepts in the world around us.
The course will delve into object- oriented problem solving and design using the Java programming language. Students will have access to practice problems that will help them learn to program without spending hours on finding and fixing syntax errors. These will include online multiple-choice questions in the style of those on the AP exam, mixed-up code that the user drags into the correct order, fill in the blank code and audio tours of the code.
Topics include problem solving, programming design strategies and data structures, algorithms, role of computation in real-world applications like smart phones, google glass and robots. This material may be used for self-study and as a preview by students and teachers considering the September 2015 offering of the course.
Learn more about our High School and AP* Exam Preparation Courses
*Advanced Placement and AP are registered trademarks of the College Board, which was not involved in the production of, and does not endorse, these offerings.","AL
AR
DS
HCI
IAS
PD
PL
SDF
SP"
Preparing for the AP* Computer Science A Exam — Part 2,"CSAP.1x covers the material of AP Computer Science A which is equivalent to a first-semester, college-level course in computer science. This highly interactive course will introduce students to the fundamental concepts of computer science. The course will be structured to encourage students to think computationally and enjoy problem solving. New York City’s companies, museums, art and architecture will be used as examples to emphasize the ubiquitous role of computing and programming concepts in the world around us.
The course will delve into object- oriented problem solving and design using the Java programming language. Students will have access to practice problems that will help them learn to program without spending hours on finding and fixing syntax errors. These will include online multiple-choice questions in the style of those on the AP exam, mixed-up code that the user drags into the correct order, fill in the blank code and audio tours of the code.
Topics include problem solving, programming design strategies and data structures, algorithms, role of computation in real-world applications like smart phones, google glass and robots. This material may be used for self-study and as a preview by students and teachers considering the September 2015 offering of the course. Video lectures for this course will be available in May 2015. Ancillary material including labs will be added over the Summer of 2015. All of the course will be available September 1, 2015
This is a self-paced course - you may take CSAP.1x on your schedule.
Learn more about our High School and AP* Exam Preparation Courses
Advanced Placement and AP are registered trademarks of the College Board, which was not involved in the production of, and does not endorse, these offerings.",AR
Principles and Practice of Computer Aided Translation,"This course is presented in Mandarin.
If you are having difficulty viewing this video in mainland China, you can also find it here.
This course is suitable for postgraduate students who major in Translation and Interpreting, undergraduate students majoring in foreign language, translators and language enthusiasts.
Those who work in modern language service industry are required to be capable of using computers and Internet to aid their translation job by adapting a variety of efficient tools, rather than just using word processor tools and several basic computer-aided translation software.
This course teaches the basic concepts of computer-aided translation technology, helps students learn to use a variety of computer-assisted translation tools, enhances their ability to engage in various kinds of language service in such a technical environment, and helps them understand what the modern language service industry looks like.
This course covers introduction to modern language services industry, basic principles and concepts of translation technology, information technology used in the process of language translation, how to use electronic dictionaries, Internet resources and corpus tools, practice of different computer-aided translation tools, translation quality assessment, basic concepts of machine translation, globalization, localization and so on. As a compulsory course for students majoring in Translation and Interpreting, this course is also suitable for students with or without language major background. By learning this course, students can better understand modern language service industry and their work efficiency will be improved for them to better deliver translation service.
The course is one of the PKU-DeTao MOOCs, which is a joint effort by Peking University and DeTao Masters Academy.
Are there any reference books for this course?
Students are recommended to read at least the following books.
Lynne Bowker, Computer Aided Translation, University of Ottawa Press, Ottawa,2002
Frank Austermühl, Electronics Tools for Translators, St. Jerome Publishing, Manchester,2001
Will this course provide an English course video?
Will this course provide an English course video?",CN
Networks and Crowds,"Networks, Crowds, and Markets: Reasoning about a Highly Connected World (Free Online)
""networks, groups and Markets: Principles and effector mechanisms reveal the behavior of highly interconnected world"" (translation), Tsinghua University Press, 2011.","NC
GV"
Data Structures and Algorithms Part 2,"Computers are an important tool forproblemsolving and are deeply involvedin modern life.Computers perform operations on data. What is the logical relationship among data? How is data stored in computers? What algorithms are required to solve particular problems? These are the questions that will be answered in “Data Structures and Algorithms,” an important core course in Computer Science. The course also introduces students to fundamental data structures and classical algorithms used in more specialized courses,including Operating Systems, Software Engineering, Database Systems, CompilerPrinciples, Computer Graphics and Human Computer Interaction.
Niklaus Wirth described the important and indivisible link between algorithms and data structure in his book,Algorithms + Data Structures = Programs.
The course will build on Wirth’s ideas as it helps students improve their knowledge of theory and their ability to think abstractly to solve problems.Building on a solid theoretical foundation, studentswill analyze problems using data and algorithm abstraction. Students will learn how to organize data efficiently and make tradeoffs between space and time complexity, design efficient and effective algorithms, and implement high quality programs to solve complex real-world problems.After studying this course, students will be well prepared for further study and research in engineering and other computer-related areas.
This is an intermediate-level course appropriate for sophomore students majoring in computer science or other science/engineering disciplines. Students shouldhave learned ""introduction to computing"",with the knowledge of structured and object-oriented programming.
This course is presented in two eight-week sessions. In session 1, we learnt Linear Lists, Stacks, Queues, Strings, Binary Trees, Trees and Graphs, which are fundamental data structures. In the second session, we will study advanced data structures and algorithms, such as Sorting, Searching, Indexing, as well as their applications thoroughly. More detailed, these chapters include a variety of classic Sorting algorithms (Quicksort, External Sorting), Searching methods (Sets, Hash Tables, Bitmaps), Indexing structures (B/B+ trees, Trie trees), Advanced List-Structure (generalized lists, Multi-dimensional arrays) and Balanced Binary Trees (AVL, Red-Black trees, Splay trees). The second part of the course lasts eight weeks. Each week, student will spend 4-8 hours to follow this course.
Students who score 60% or higher will receive an Honor Code Certificate.
The Autumn 2014 Sessions of this course are supported by Google.
Which programming languages does the course use?
The course’s content and exercises are both based upon C++ pseudo code. Programming assignments are automatically assessed by POJ which accepts code written in C/C++ and JAVA.",SDF
Data Structures and Algorithms Part 1,"Computers are an important tool forproblemsolving and are deeply involvedin modern life.Computers perform operations on data. What is the logical relationship among data? How is data stored in computers? What algorithms are required to solve particular problems? These are the questions that will be answered in “Data Structures and Algorithms,” an important core course in Computer Science. The course also introduces students to fundamental data structures and classical algorithms used in more specialized courses,including Operating Systems, Software Engineering, Database Systems, CompilerPrinciples, Computer Graphics and Human Computer Interaction.
Niklaus Wirth described the important and indivisible link between algorithms and data structure in his book, Algorithms + Data Structures = Programs.
The course will build on Wirth’s ideas as it helps students improve their knowledge of theory and their ability to think abstractly to solve problems.Building on a solid theoretical foundation, studentswill analyze problems using data and algorithm abstraction. Students will learn how to organize data efficiently and make tradeoffs between space and time complexity, design efficient and effective algorithms, and implement high quality programs to solve complex real-world problems.After studying this course, students will be well prepared for further study and research in engineering and other computer-related areas.
This is an intermediate-level course appropriate for sophomore students majoring in computer science or other science/engineering disciplines. Students shouldhave learned ""introduction to computing"",with the knowledge of structured and object-oriented programming.
This course is presented in two eight-week sessions.
Students who score 60% or higher will receive an Honor Code Certificate.
The Autumn 2014 Sessions of this course are supported by Google.
Which programming languages does the course use?
The course’s content and exercises are both based upon C++ pseudo code. Programming assignments are automatically assessed by POJ which accepts code written in C/C++ and JAVA.","SDF
AL
AR
DS
OS
PL
SE"
Introduction to Theoretical Computer Science,Click the green button above to register.,SP
Java Programming,"The teaching content of this course includes three parts: formal language and automata theory, computability theory and computational complexity theory. Each of these answers the following questions :(1) what computing devices are available? What are their capabilities? (2) What is calculation? Which problems are (not) computable? (3) What is efficient calculation? What problems are (not) computable? Through this course, students will understand the basic knowledge of computing theory and grasp the concepts of efficient computing.",SP
C++ Programming | C++程序设计,"The course will be taught in video clips (8-20 minutes each, containing 1-2 test questions), written assignments in addition to the video clips, and (mandatory) final exams.",IAS
Autonomous Navigation for Flying Robots,"The total length of the course is 8 weeks, and the teaching video length is approximately 120 minutes per week. The preparatory knowledge required is the basic concepts of discrete mathematics (set theory, mathematical logic, graph theory, etc.).","AL
AR
CN
IAS
IS
NC
SDF
SP"
Preparing for the AP* Computer Science A Exam — Part 1,"A: An internet-connected computer, paper and pen, and, most importantly, curiosity.",IS
"Networks, Crowds and Markets",A: This course will teach you things that computers cannot do.,"IS
GV
IAS
HCI"
"Computing: Art, Magic, Science - Part II","A: The basic knowledge of discrete mathematics, including sets, relations, functions, logic, graphs, etc.","DS
AL"
"Computing: Art, Magic, Science","Information Technology (IT) is everywhere. Every aspect of human activity depends on it. All IT processes, whether they drive mobile phones, the Internet, transportation systems, enterprise systems, publishing, social networks or any other application, rely on software.
In this new and improved version of the course, you will learn to write software with a progressive hint system for first time programmers. The core skill is programming; not just the ability to piece together a few “lines of code,” but writing _quality _programs, which will do their job right, and meet the evolving needs of their users. Anyone can write a program; this course teaches you to write _good _programs.
The course starts from the basics of computing and takes you through a tour of modern object-oriented programming, including classes, objects, control structures, inheritance, polymorphism, and genericity.
Throughout the course, you will have the opportunity to learn the principles of programming as well as the techniques for designing correct and reliable programs by using the Eiffel programming language and notation. You will be trying out example problems to provide your solution, and see it immediately compiled and tested from within your browser. To this end, we are using the Codeboard;web-based IDE, developed at the Chair of Software Engineering (ETH Zurich). 
Beyond programming, you will also get a glimpse at theoretical computer science, the set of mathematical techniques that underlie computation and makes today’s IT-based world possible.
In this third edition of the course we specifically focus on helping students with little or no programming experience. To this end, we have improved the introductory material about the Eiffel language, and we have implemented a progressive hint system students can use to get guidance on how to solve the programming exercises.
""Really good course. Followed it with a couple of experienced colleagues all of them having a computer science background. They really liked the concepts and programming in Eiffel a lot. Many thanks to the team making this course available! Can not wait to start with the advanced course!"" --Previous CAMSx Participant
Previous edition course evaluation:
Overall course rating (1: worst grade, 6: best grade):
Grade Resp. %Resp
1 1 2%
2 0 2%
3 3 6%
4 9 18%
5 20 40%
6 17 34%
Total respondents: 50
Average: 4.96","PL
SP
SE"
Computational Probability and Inference,"Probability and inference are used everywhere. For example, they help us figure out which of your emails are spam, what results to show you when you search on Google, how a self-driving car should navigate its environment, or even how a computer can beat the best Jeopardy and Go players! What do all of these examples have in common? They are all situations in which a computer program can carry out inferences in the face of uncertainty at a speed and accuracy that far exceed what we could do in our heads or on a piece of paper.
In this data analysis and computer programming course, you will learn the principles of probability and inference. We will put these mathematical concepts to work in code that solves problems people care about. You will learn about different data structures for storing probability distributions, such as probabilistic graphical models, and build efficient algorithms for reasoning with these data structures.
By the end of this course, you will know how to model real-world problems with probability, and how to use the resulting models for inference.
You don’t need to have prior experience in either probability or inference, but you should be comfortable with basic Python programming and calculus.
“I love that you can do so much with the material, from programming a robot to move in an unfamiliar environment, to segmenting foreground/background of an image, to classifying tweets on Twitter—all homework examples taken from the class!” – Previous Student in the residential version of this new online course.",IS
Agile Software Development,"Software industry is going crazy on agile methods.  It is rapidly becoming the choice for software development where requirements are unpredictable or is expected to change over time. This course will help you gain knowledge on what is agile? Why agile is better suited for these situations?  We will also cover some of the most common agile frameworks like scrum and XP in depth.  
Prerequisite: You need basic knowledge of software development process and software development methodologies. 
After completing this course, you will be able to :
1) Demonstrate the ability to participate effectively in agile practices/process for software development.  
2) Explain the purpose behind common agile practices.
3) Ability to apply agile principles and values to a given situation.
4) Ability to identify and address most common problems encountered in adopting Agile methods. 
Project: You will also be given opportunity to apply what you learn in this course.  You will be given fictional case studies, where after studying the case study, you will have to exercise some of the practices, techniques, etc that team members of an agile team members are expected to know.",SE
Software Development Processes and Methodologies,"Software is quickly becoming integral part of human life as we see more and more automation and technical advancements. Just like we expect car to work all the time and can&#x27;t afford to break or reboot unexpectedly, software industry needs to continue to learn better way to build software if it were to become integral part of human life.
In this course,  you will get an overview of  how software teams work? What processes they use?  What are some of the industry standard methodologies? What are pros and cons of each?  You will learn enough to have meaningful conversation around software development processes.
After completing this course, a learner will be able to 
1) Apply core software engineering practices at conceptual level for a given problem. 
2) Compare and contrast traditional, agile, and lean development methodologies at high level.  These include Waterfall, Rational Unified Process, V model, Incremental, Spiral models and overview of agile mindset 
3) Propose a methodology best suited for a given situation",SE
Requirements Gathering for Secure Software Development,"In Software Requirements Elicitation for Secure Software Development, we&#x27;re going to discuss the overall software requirements process as it applies  in waterfall, spiral, and agile models.  You&#x27;ll learn about each of these processes and your goals as a software requirements analyst.  This is not an easy task! Who do you talk to, when, and what kind of knowledge are you trying to obtain, in any software life cycle? How do you handle obstacles as you go?
These are the questions we will focus on answering in this specialization.",SE
Software Design as an Element of the Software Development Lifecycle,"This course talks about software development lifecycles a description/prescription for how we write software.  Design is a step in this life cycle, and the course explores the implications of this.  Design has a role in the life cycle; it is always there, regardless of the kind of life cycle we’re talking about.  Why is that?  Why was design considered as a step in this life cycle?",SE
Mastering the Software Engineering Interview,"You’ve hit a major milestone as a computer scientist and are becoming a capable programmer. You now know how to solve problems, write algorithms, and analyze solutions; and you have a wealth of tools (like data structures) at your disposal.  You may now be ready for an internship or (possibly) an entry-level software engineering job.  But can you land the internship/job?  It depends in part on how well you can solve new technical problems and communicate during interviews.  How can you get better at this?  Practice!  
With the support of Google’s recruiting and engineering teams we’ve provided tips, examples, and practice opportunities in this course that may help you with a number of tech companies.  We’ll assist you to organize into teams to practice.  Lastly, we’ll give you basic job search advice, and tips for succeeding once you’re on the job.",SP
The R Programming Environment,"This course provides a rigorous introduction to the R programming language, with a  particular focus on using R for software development in a data science setting. Whether you are part of a data science team or working individually within a community of developers, this course will give you the knowledge of R needed to make useful contributions in those settings. As the first course in the Specialization, the course provides the essential foundation of R needed for the following courses. We cover basic R concepts and language fundamentals, key concepts like tidy data and related &quot;tidyverse&quot; tools, processing and manipulation of complex and large datasets, handling textual data, and basic data science tasks. Upon completing this course, learners will have fluency at the R console and will be able to create tidy datasets from a wide range of possible data sources.",DS
Advanced R Programming,"This course covers advanced topics in R programming that are necessary for developing powerful, robust, and reusable data science tools. Topics covered include functional programming in R, robust error handling, object oriented programming, profiling and benchmarking, debugging, and proper design of functions. Upon completing this course you will be able to identify and abstract common data analysis tasks and to encapsulate them in user-facing functions. Because every data science environment encounters unique data challenges, there is always a need to develop custom software specific to your organization’s mission. You will also be able to define new data types in R and to develop a universe of functionality specific to those data types to enable cleaner execution of data science tasks and stronger reusability within a team.",DS
Building Data Visualization Tools,"The data science revolution has produced reams of new data from a wide variety of new sources. These new datasets are being used to answer new questions in way never before conceived. Visualization remains one of the most powerful ways draw conclusions from data, but the influx of new data types requires the development of new visualization techniques and building blocks. This course provides you with the skills for creating those new visualization building blocks. We focus on the ggplot2 framework and describe how to use and extend the system to suit the specific needs of your organization or team. Upon completing this course, learners will be able to build the tools needed to visualize a wide variety of data types and will have the fundamentals needed to address new data types as they come about.",GV
Building R Packages,"Writing good code for data science is only part of the job. In order to maximizing the usefulness and reusability of data science software, code must be organized and distributed in a manner that adheres to community-based standards and provides a good user experience. This course covers the primary means by which R software is organized and distributed to others. We cover R package development, writing good documentation and vignettes, writing robust software, cross-platform development, continuous integration tools, and distributing packages via CRAN and GitHub. Learners will produce R packages that satisfy the criteria for submission to CRAN.",PBD
Engineering Practices for Building Quality Software,"Agile embraces change which means that team should be able to effectively make changes to the system as team learns about users and market.  To be good at effectively making changes to the system, teams need to have engineering rigor and excellence else embracing change becomes very painful and expensive.  
In this course we will learn about engineering practices and processes that agile team uses to make sure the team is setup for change.
In additional to this, we will also learn about practices, techniques and processes that can help team build high quality software
At the end of this course, you will be able to comfortably and effectively participate in various techniques and processes for building secure and high quality software.",SE
Reviews & Metrics for Software Improvements,"This course covers techniques for monitoring your projects in order to align client needs, project plans, and software production. It focuses on metrics and reviews to track and improve project progress and software quality.
 
Upon successful completion of this course, you will be able to:
 - Apply techniques to measure and visualize project progress
 - Integrate Agile review practices to increase project visibility
 - Reflect on lessons learned in software projects through retrospective exercises
 - Improve project and process quality through ongoing measurement",SP
Software Processes and Agile Practices,"This course delves into a variety of processes to structure software development. It also covers the foundations of core Agile practices, such as Extreme Programming and Scrum.
Upon successful completion of this course, you will be able to:
- Distinguish between different process models for organizing software production.
- Gauge the applicability of process models for a software development project.
- Apply the fundamentals of Agile software development and management practices.","SE
AR
SF
CN"
Introduction to Software Product Management,"This course highlights the importance and role of software product management. It also provides an overview of the specialization, as well as its goals, structure, and expectations. The course explains the value of process, requirements, planning, and monitoring in producing better software. 
 
Upon successful completion of this course, you will be able to:
 - Relate software product management to better software products
 - Recognize the role of a software product manager
 - Reflect on how Agile principles will improve your own projects","PD
SE"
Programming for Everybody (Getting Started with Python),"This course aims to teach everyone the basics of programming computers using Python. We cover the basics of how one constructs a program from a series of simple instructions in Python.  The course has no pre-requisites and avoids all but the simplest mathematics. Anyone with moderate computer experience should be able to master the materials in this course. This course will cover Chapters 1-5 of the textbook “Python for Everybody”.  Once a student completes this course, they will be ready to take more advanced programming courses. This course covers Python 3.","PL
SDF"
Client Needs and Software Requirements ,"This course covers practical techniques to elicit and express software requirements from client interactions.  
Upon successful completion of this course, you will be able to:
 - Create clear requirements to drive effective software development
 - Visualize client needs using low-fidelity prototypes
 - Maximize the effectiveness of client interactions
 - Adapt to changing product requirements","SDF
AR
IAS
PL
SE"
Agile Planning for Software Products,"This course covers the techniques required to break down and map requirements into plans that will ultimately drive software production.
Upon successful completion of this course, you will be able to:
 - Create effective plans for software development
 - Map user requirements to developer tasks
 - Assess and plan for project risks
 - Apply velocity-driven planning techniques
 - Generate work estimates for software products",SE
Software Product Management Capstone,"In this six-week capstone course, you will gain practical management experience in a safe, simulated software production setting. You will apply Agile practices and techniques to conquer industry-inspired challenges. Interacting with a realistic client, you will discern what they want and express what they truly need in software requirements to drive software production. Upon completing the capstone, you will be prepared to advance your career as a confident software product management professional.",SP
Software Requirements Prioritization: Risk Analysis,"Risk Analysis, Assessment, and Prioritization looks at how you can manage conflicts at system levels, but it can also be applied to lower level assessments.   How do you manage and document conflict, along with alternatives?  In analyzing alternatives, you must consider risks.  In this course, we&#x27;ll look into how to analyze risk, evaluate risk, document risks, and use this information for prioritization of requirements.  Qualitative and Quantitative approaches will be covered.",SP
SRS Documents: Requirements and Diagrammatic Notations,"As requirements are being gathered and prioritized, they also need to be documented. In Diagrammatic Notations and Software Requirements Specification Writing, we discuss and practice the process of turning requirements into something readable to the customers at a high level, and the developers.  When a designer or developer reads your document, they should be able to understand the overall idea, the scope, the domain, the resources, the expectations, and why alternative choices are not selected. To create a document in this way, you use a balance between storytelling (with pictures!) and complex diagrams.",HCI
Software Design as an Abstraction,"The design step in developing software has some unique characteristics.  First of all, it’s the only step where drawing pictures of things is the norm.  Why is that?  What do pictures do that other representations cannot do?  Pictures have varying levels of detail; pictures have context.  Pictures…paint a picture.  Why are these things important?  In this course, too, we begin looking at other disciplines (building architecture is a favorite one) for lessons on design.",HCI
Software Design Methods and Tools,"Since many software developers are compulsive coders, they have created software over the years to help them do their job.  There are tools which make design and its associated tasks easier.  The course introduces some basic tools and techniques to help you with design.  Tools aren’t always tangible, however.  The last two lessons of this course discuss questions of Ethics in software development. The purpose here is, as with tools, to equip you to better carry our your responsibilities as a designer. Students will be required to have a prior knowledge of writing and delivering software and some programming knowledge in java.","SE
PD"
Software Design Threats and Mitigations,"The design step in developing software has some unique characteristics.  First of all, it’s the only step where drawing pictures of things is the norm.  Why is that?  What do pictures do that other representations cannot do?  Pictures have varying levels of detail; pictures have context.  Pictures…paint a picture.  Why are these things important?  In this course, too, we begin looking at other disciplines (building architecture is a favorite one) for lessons on design.","AR
GV
HCI
IM
PL
SE
SP"
Object-Oriented Design,"This course takes Java beginners to the next level by covering object-oriented analysis and design. You will discover how to create modular, flexible, and reusable software, by applying object-oriented design principles and guidelines. And, you will be able to communicate these designs in a visual notation known as Unified Modelling Language (UML).
You will be challenged in the Capstone Project to apply your knowledge of object-oriented design by evolving and documenting the Java codebase for an Android application with corresponding UML documentation.
After completing this course, you will be able to: 
• Apply the Class Responsibility Collaborator (CRC) technique to analyze and design the object-oriented model for a problem.	
• Explain and apply object-oriented modeling principles and their purpose (e.g., abstraction, encapsulation, decomposition, generalization).
• Explain and apply different types of inheritance
• Explain the difference between association, aggregation, and composition dependencies.
• Express object-oriented models as Unified Modeling Language (UML) class diagrams.
• Translate between UML class diagrams and equivalent Java code.
• Apply design guidelines for modularity, separation of concerns, information hiding, and conceptual integrity to create a flexible, reusable, maintainable design.
• Explain the tradeoff between cohesion and coupling.","AL
PL
SDF"
Java Programming: Build a Recommendation System,"Ever wonder how Netflix decides what movies to recommend for you? Or how Amazon recommends books? We can get a feel for how it works by building a simplified recommender of our own!
In this capstone, you will show off your problem solving and Java programming skills by creating recommender systems. You will work with data for movies, including ratings, but the principles involved can easily be adapted to books, restaurants, and more. You will write a program to answer questions about the data, including which items should be recommended to a user based on their ratings of several movies. Given input files on users ratings and movie titles, you will be able to:
1. Read in and parse data into lists and maps;
2. Calculate average ratings;
3. Calculate how similar a given rater is to another user based on ratings; and
4. Recommend movies to a given user based on ratings. 
5. Display recommended movies for a given user on a webpage.",IS
Desarrollo de Videojuegos 3D en Unity: Una Introducción,"Este curso te permite crear un prototipo de juego 3D, explorando los conceptos necesarios y las herramientas para desarrollo de videojuegos en 3D disponibles en Unity y en la Web. Explorarás y harás uso de herramientas para crear una escena 3D en Unity, podrás agregar personajes y animaciones 3D e integrarlas en los escenarios que crees, podrás definir comportamiento e interacción entre elementos del videojuego, y publicar en la Web los resultados de lo que diseñes. Vas a utilizar como base los conceptos aprendidos en el curso introductorio de desarrollo, ahora aplicados a juegos 3D.
Este curso te permitirá adquirir las habilidades básicas para desarrollar juegos 3D, sea para tu trabajo, investigación, o por hobby. Los conceptos acá aprendidos te permitirán desarrollar simuladores, juegos educativos, y libros interactivos. Unity es un motor de videojuegos extendible muy usado profesionalmente, y este curso te permitirá aprovechar su potencialidad para el desarrollo de videojuegos 3D.
Este curso requiere conocimientos básicos en desarrollo de juegos 2D en Unity, en procesos ágiles de desarrollo y en modelos de negocio de videojuegos. Estos conocimientos se pueden adquirir en los cursos “Desarrollo de Videojuegos en Unity: Una Introducción”, “Diseño de Videojuegos: Introducción” y “Emprendimiento y métodos ágiles de desarrollo en videojuegos” de este programa especializado.
¡Comencemos!
NOTA: Ten en cuenta que este curso ha sido diseñado como el cuarto de cinco cursos que hacen parte del programa especializado en Desarrollo y Diseño de Videojuegos. Puedes tomar todos los cursos por separado o sólo uno de ellos, sin embargo te recomendamos que te inscribas y participes en los cinco, ojalá en el orden que te proponemos, de manera que llegues al último curso denominado &quot;Desarrollo y Diseño de Videojuegos: proyecto final&quot; preparado para aplicar los conocimientos adquiridos en los cursos anteriores. 
Para inscribirte únicamente a este curso debes ir a la página del mismo: https://www.coursera.org/learn/juegos-3d/home/welcome. Haz click en el botón azul de la izquierda &quot;Enroll now&quot; o &quot;Inscribirse ahora&quot;, donde podrás elegir si deseas tomar el curso pagando por la certificación, en cuyo caso debes hacer unas evaluaciones adicionales obligatorias y cumplir con los otros requisitos de certificación; o si deseas auditarlo, es decir acceder al contenido sin pagar por el certificado.",GV
Software Architecture for the Internet of Things,"This course will teach you how to design futureproof systems that meet the requirements of IoT systems: systems that are secure, interoperable, modifiable and scalable. Moreover, you&#x27;ll learn to apply best-in-class software architecture methods to help you design complex IoT and other applications. Lastly, you&#x27;ll come to understand the business impact of the technical decisions that you make as an IoT system architect.
You&#x27;ll learn all about software architecture in the next 5 weeks! In the first week, you&#x27;ll discover why having a well-designed architecture is important and which challenges you might come across while developing your architecture. By the end of the second week, you&#x27;ll already be able to write your own requirements! In the third and fourth week, you will learn how to correctly write quality attributes and quality attribute scenarios for a specific case. In the last week, you&#x27;ll learn to describe your own patterns and tactics and see how they&#x27;re used in an Android framework.","IS
SF
SP"
Capstone:  Autonomous Runway Detection for IoT,"This capstone project course ties together the knowledge from three previous courses in IoT though embedded systems: Development of Real-Time Systems, Web Connectivity &amp; Security and Embedded Hardware and Operating Systems. The students will develop a larger system using the learning outcomes from these courses, and the students will evaluate the developed system in a real-world programming environment. This course is a true engineering task in which the student must, not only implement the algorithm code, but also handle the interfaces between many different actors and hardware platforms. The students will learn how to motivate engineering decisions and how to choose implementations to make a system actually running. The students will also learn to evaluate the efficiency and the correctness of their system as well as real-world parameters such as energy consumption and cost.",IS
Multiplatform Mobile App Development with NativeScript,"This course focuses on developing truly cross-platform, native iOS and Android apps using NativeScript (Ver 3.x). The framework uses Angular, TypeScript or modern JavaScript to get truly native UI and performance while sharing skills and code with the web. You will learn about UI development with NativeScript UI and layout support and access the native mobile platform&#x27;s capabilities from Javascript. You should have already completed the Bootstrap 4 and the Angular courses in this specialization before proceeding with this course.
At the end of this course you will be able to (a) Build mobile applications targeting multiple platforms with a single codebase, (b) Leverage your Angular, TypeScript and Javascript skills, and (c) Use various features of the Ionic framework to build truly cross-platform mobile applications","AR
SF
HCI"
Code Yourself! An Introduction to Programming,"Have you ever wished you knew how to program, but had no idea where to start from? This course will teach you how to program in Scratch, an easy to use visual programming language. More importantly, it will introduce you to the fundamental principles of computing and it will help you think like a software engineer.","AL
PL
SDF"
Programming Mobile Applications for Android Handheld Systems: Part 1,"This course introduces you to the design and implementation of Android applications for mobile devices. You will develop an app from scratch, assuming a basic knowledge of Java, and learn how to set up Android Studio, work with various Activities and create simple user interfaces to make your apps run smoothly.",HCI
Front-End Web UI Frameworks and Tools: Bootstrap 4,"This course will give you an overview of client-side web UI frameworks, in particular Bootstrap 4. You will learn about grids and responsive design, Bootstrap CSS and JavaScript components. You will learn about CSS preprocessors, Less and Sass. You will also learn the basics of Node.js and NPM and task runners like Grunt and Gulp.
At the end of this course, you will be able to a)Set up, design and style a web page using Bootstrap 4 and its components, b) Create a responsive web page design, and c) Make use of web tools to setup and manage web sites.
This course also includes an honors track that enables you to work on your own project developing a website using Bootstrap 4.
Students enrolling in this course should have prior good working knowledge of HTML, CSS and JavaScript.",HCI
Front-End JavaScript Frameworks: Angular,"This course concentrates mainly on Javascript based front-end frameworks, and in particular the Angular framework (Currently Ver. 4.x). This course will use Typescript for developing Angular application. Typescript features will be introduced in the context of Angular as part of the exercises. You will also get an introduction to the use of Angular Material and Angular Flex-Layout for responsive UI design. You will be introduced to various aspects of Angular including components, directives and services. You will learn about data binding, Angular router and its use for developing single-page applications. You will also learn about designing both template-driven forms and reactive forms. A quick introduction to Observables, reactive programming and RxJS in the context of Angular is included. You will then learn about Angular support for client-server communication and the use of REST API on the server side. You will use Restangular for communicating with a server supporting the REST API. A quick tour through Angular animation support and Angular testing rounds off the course. You must have either completed the previous course in the specialization on Bootstrap 4, or have a working knowledge of front end web-UI frameworks to be able to navigate this course. Also a good working knowledge of JavaScript, especially ES 5 is strongly recommended.
At the end of this course you will:
- Be familiar with client-side Javascript frameworks and the Angular framework
- Be able to implement single page applications in Angular
- Be able to use various Angular features including directives, components and services
- Be able to implement a functional front-end web application using Angular
- Be able to use Angular Material and Angular Flex-Layout for designing responsive Angular applications
- Be able to use Observables and RxJS in the context of Angular applications",SP
Multiplatform Mobile App Development with Web Technologies: Ionic and Cordova,"This course focuses on developing multiplatform mobile applications using the Web technologies (HTML5, CSS and Javascript). In particular we make use of the Cordova hybrid application framework to develop and target multiple mobile platforms with a single codebase. We make use of the Ionic framework (Ionic Ver 3.x), one of the most popular mobile application frameworks, that is built with mobile-optimized HTML5 and CSS based components and Angular. You will learn about UI development with Ionic and then using Cordova&#x27;s modules to access the native mobile platform&#x27;s capabilities from Javascript. You should have already completed the Bootstrap 4 and the Angular courses in this specialization before proceeding with this course.
At the end of this course you will be able to (a) Build mobile applications targeting multiple platforms with a single codebase, (b) Leverage your HTML5, CSS, Javascript and Angular skills, and (c) Use various features of the Ionic framework to build hybrid mobile applications",HCI
"Server-side Development with NodeJS, Express and MongoDB","This course deals with all things server-side. We base the entire course around the NodeJS platform. We start with a brief overview of the Web protocols: HTTP and HTTPS. We examine NodeJS and NodeJS modules: Express for building web servers. On the database side, we review basic CRUD operations, NoSQL databases, in particular MongoDB and Mongoose for accessing MongoDB from NodeJS. We examine the REST concepts and building a RESTful API. We touch upon authentication and security. Finally we review backend as a service (BaaS) approaches, including mobile BaaS, both open-source and commercial BaaS services.
At the end of this course, you will be able to:
- Demonstrate an understanding of server-side concepts, CRUD and REST
- Build and configure a backend server using NodeJS framework
- Build a RESTful API for the front-end to access backend services",SE
Python Programming Essentials,"This course will introduce you to the wonderful world of Python programming!  We&#x27;ll learn about the essential elements of programming and how to construct basic Python programs. We will cover expressions, variables, functions, logic, and conditionals, which are foundational concepts in computer programming. We will also teach you how to use Python modules, which enable you to benefit from the vast array of functionality that is already a part of the Python language. These concepts and skills will help you to begin to think like a computer programmer and to understand how to go about writing Python programs.
By the end of the course, you will be able to write short Python programs that are able to accomplish real, practical tasks. This course is the foundation for building expertise in Python programming. As the first course in a specialization, it provides the necessary building blocks for you to succeed at learning to write more complex Python programs.
This course uses Python 3.  While many Python programs continue to use Python 2, Python 3 is the future of the Python programming language. This first course will use a Python 3 version of the CodeSkulptor development environment, which is specifically designed to help beginning programmers learn quickly.  CodeSkulptor runs within any modern web browser and does not require you to install any software, allowing you to start writing and running small programs immediately.  In the later courses in this specialization,  we will help you to move to more sophisticated desktop development environments.",PL
Python Data Representations,"This course will continue the introduction to Python programming that started with Python Programming Essentials.  We&#x27;ll learn about different data representations, including strings, lists, and tuples, that form the core of all Python programs.  We will also teach you how to access files, which will allow you to store and retrieve data within your programs. These concepts and skills will help you to manipulate data and write more complex Python programs.
By the end of the course, you will be able to write Python programs that can manipulate data stored in files.  This will extend your Python programming expertise, enabling you to write a wide range of scripts using Python
This course uses Python 3.  While most Python programs continue to use Python 2, Python 3 is the future of the Python programming language. This course introduces basic desktop Python development environments, allowing you to run Python programs directly on your computer. This choice enables a smooth transition from online development environments.","PL
SDF
SE"
Python Data Analysis,"This course will continue the introduction to Python programming that started with Python Programming Essentials and Python Data Representations.  We&#x27;ll learn about reading, storing, and processing tabular data, which are common tasks.  We will also teach you about CSV files and Python&#x27;s support for reading and writing them.  CSV files are a generic, plain text file format that allows you to exchange tabular data between different programs. These concepts and skills will help you to further extend your Python programming knowledge and allow you to process more complex data.
By the end of the course, you will be comfortable working with tabular data in Python. This will extend your Python programming expertise, enabling you to write a wider range of scripts using Python.
This course uses Python 3.  While most Python programs continue to use Python 2, Python 3 is the future of the Python programming language. This course uses basic desktop Python development environments, allowing you to run Python programs directly on your computer.","PD
SDF"
Python Data Visualization,"This if the final course in the specialization which builds upon the knowledge learned in Python Programming Essentials, Python Data Representations, and Python Data Analysis.  We will learn how to install external packages for use within Python, acquire data from sources on the Web, and then we will clean, process, analyze, and visualize that data. This course will combine the skills learned throughout the specialization to enable you to write interesting, practical, and useful programs.
By the end of the course, you will be comfortable installing Python packages, analyzing existing data, and generating visualizations of that data.  This course will complete your education as a scripter, enabling you to locate, install, and use Python packages written by others. You will be able to effectively utilize tools and packages that are widely available to amplify your effectiveness and write useful programs.",PD
An Introduction to Interactive Programming in Python (Part 1),"This two-part course is designed to help students with very little or no computing background learn the basics of building simple interactive applications. Our language of choice, Python, is an easy-to learn, high-level computer language that is used in many of the computational courses offered on Coursera. To make learning Python easy, we have developed a new browser-based programming environment that makes developing interactive applications in Python simple. These applications will involve windows whose contents are graphical and respond to buttons, the keyboard and the mouse.
In part 1 of this course, we will introduce the basic elements of programming (such as expressions, conditionals, and functions) and then use these elements to create simple interactive applications such as a digital stopwatch.  Part 1 of this class will culminate in building a version of the classic arcade game &quot;Pong&quot;.",HCI
An Introduction to Interactive Programming in Python (Part 2),"This two-part course is designed to help students with very little or no computing background learn the basics of building simple interactive applications. Our language of choice, Python, is an easy-to learn, high-level computer language that is used in many of the computational courses offered on Coursera. To make learning Python easy, we have developed a new browser-based programming environment that makes developing interactive applications in Python simple. These applications will involve windows whose contents are graphical and respond to buttons, the keyboard and the mouse.
In part 2 of this course, we will introduce more elements of programming (such as list, dictionaries, and loops) and then use these elements to create games such as Blackjack.  Part 1 of this class will culminate in building a version of the classic arcade game &quot;Asteroids&quot;.  Upon completing this course, you will be able to write small, but interesting Python programs.  The next course in the specialization will begin to introduce a more principled approach to writing programs and solving computational problems that will allow you to write larger and more complex programs.","GV
PL
AL"
Principles of Computing (Part 1),"This two-part course builds upon the programming skills that you learned in our Introduction to Interactive Programming in Python course.  We will augment those skills with both important programming practices and critical mathematical problem solving skills.  These skills underlie larger scale computational problem solving and programming. The main focus of the class will be programming weekly mini-projects in Python that build upon the mathematical and programming principles that are taught in the class. To keep the class fun and engaging, many of the projects will involve working with strategy-based games.
In part 1 of this course, the programming aspect of the class will focus on coding standards and testing.  The mathematical portion of the class will focus on probability, combinatorics, and counting with an eye towards practical applications of these concepts in Computer Science.  
Recommended Background - Students should be comfortable writing small (100+ line) programs in Python using constructs such as lists, dictionaries and classes and also have a high-school math background that includes algebra and pre-calculus.","AL
DS
PL
SDF"
Algorithmic Thinking (Part 1),"Experienced Computer Scientists analyze and solve computational problems at a level of abstraction that is beyond that of any particular programming language.  This two-part course builds on the principles that you learned in our Principles of Computing course and is designed to train students in the mathematical concepts and process of &quot;Algorithmic Thinking&quot;, allowing them to build simpler, more efficient solutions to real-world computational problems.
In part 1 of this course, we will study the notion of algorithmic efficiency and consider its application to several problems from graph theory.  As the central part of the course, students will implement several important graph algorithms in Python and then use these algorithms to analyze two large real-world data sets.  The main focus of these tasks is to understand interaction between the algorithms and the structure of the data sets being analyzed by these algorithms.
Recommended Background - Students should be comfortable writing intermediate size  (300+ line) programs in Python and have a basic understanding of searching, sorting, and recursion. Students should also have a solid math background that includes algebra, pre-calculus and a familiarity with the math concepts covered in &quot;Principles of Computing&quot;.","AL
AR
NC
PL
SDF"
Algorithmic Thinking (Part 2),"Experienced Computer Scientists analyze and solve computational problems at a level of abstraction that is beyond that of any particular programming language.  This two-part class is designed to train students in the mathematical concepts and process of &quot;Algorithmic Thinking&quot;, allowing them to build simpler, more efficient solutions to computational problems.
In part 2 of this course, we will study advanced algorithmic techniques such as divide-and-conquer and dynamic programming.  As the central part of the course, students will implement several algorithms in Python that incorporate these techniques and then use these algorithms to analyze two large real-world data sets.  The main focus of these tasks is to understand interaction between the algorithms and the structure of the data sets being analyzed by these algorithms.
Once students have completed this class, they will have both the mathematical and programming skills to analyze, design, and program solutions to a wide range of computational problems.  While this class will use Python as its vehicle of choice to practice Algorithmic Thinking, the concepts that you will learn in this class transcend any particular programming language.","AL
DS"
The Fundamentals of Computing Capstone Exam,"While most specializations on Coursera conclude with a project-based course, students in the &quot;Fundamentals of Computing&quot; specialization have completed more than 20+ projects during the first six courses of the specialization. Given that much of the material in these courses is reused from session to session, our goal in this capstone class is to provide a conclusion to the specialization that allows each student an opportunity to demonstrate their individual mastery of the material in the specialization.
With this objective in mind, the focus in this Capstone class will be an exam whose questions are updated periodically. This approach is designed to help insure that each student is solving the exam problems on his/her own without outside help. For students that have done their own work, we do not anticipate that the exam will be particularly hard. However, those students who have relied too heavily on outside help in previous classes may have a difficult time. We believe that this approach will increase the value of the Certificate for this specialization.",PD
Programming Fundamentals,"Programming is an increasingly important skill, whether you aspire to a career in software development, or in other fields. This course is the first in the specialization Introduction to Programming in C, but its lessons extend to any language you might want to learn. This is because programming is fundamentally about figuring out how to solve a class of problems and writing the algorithm, a clear set of steps to solve any problem in its class. This course will introduce you to a powerful problem-solving process—the Seven Steps—which you can use to solve any programming problem. In this course, you will learn how to develop an algorithm, then progress to reading code and understanding how programming concepts relate to algorithms.","PL
AL
AR"
"Pointers, Arrays, and Recursion","The third course in the specialization Introduction to Programming in C introduces the programming constructs pointers, arrays, and recursion. Pointers provide control and flexibility when programming in C by giving you a way to refer to the location of other data. Arrays provide a way to bundle data by guaranteeing sequences of data are grouped together. Finally, recursive functions—functions that call themselves—provide an alternative to iteration that are very useful for implementing certain algorithms.","AL
AR
CN
DS
IAS
PL
SDF
SP"
Interacting with the System and Managing Memory,"The final course in the specialization Introduction to Programming in C will teach you powerful new programming techniques for interacting with the user and the system and dynamically allocating memory. You will learn more sophisticated uses for pointers, such as strings and multidimensional arrays, as well as how to write programs that read and write files and take input from the user. Learning about dynamic memory allocation will allow your programs to perform complex tasks that will be applied in the final part of the specialization project: a Monte Carlo simulation for calculating poker hand probabilities.","AL
PD
SDF
SP"
Google Cloud Platform Fundamentals: Core Infrastructure,"&lt;&lt;&lt; ATTENTION &gt;&gt;&gt;
Learners interested in Google Cloud Platform can continue to learn in either of our latest GCP infrastructure specializations.
Option 1: The Developing Applications with Google Cloud Platform Specialization is available on Coursera. This brand-new Specialization teaches you to build secure, scalable, and intelligent cloud-native applications. Visit https://www.coursera.org/specializations/developing-apps-gcp for more details.
Option 2: The Architecting with Google Cloud Platform Specialization is also available. This Specialization has updated, improved content  that will help you if you are preparing for the Google Certified Professional - Cloud Architect exam. Head to https://www.coursera.org/specializations/gcp-architecture to explore the updated content.
Google Cloud Platform Fundamentals: Core Infrastructure covers the fundamentals of Google Cloud Platform and is the first course in both specializations. 
This course introduces you to important concepts and terminology for working with Google Cloud Platform (GCP). You learn about, and compare, many of the computing and storage services available in Google Cloud Platform, including Google App Engine, Google Compute Engine, and Google Container Engine.
Notes:
• You&#x27;ll need a Google/Gmail account and a credit card or bank account to sign up for the Google Cloud Platform free trial (Google services are currently unavailable in China).
• If you are a Google Cloud Platform customer with European Union (EU) and Russian billing addresses, read the VAT Overview documentation at: https://cloud.google.com/billing/docs/resources/vat-overview
• More Google Cloud Platform free trial FAQs are available at: https://cloud.google.com/free-trial/",NC
Getting Started With Application Development,"In this course, application developers learn how to design and develop cloud-native applications that seamlessly integrate components from the Google Cloud ecosystem. Through a combination of presentations, demos, and hands-on labs, participants learn how to apply best practices for application development and use the appropriate GCP storage services for object storage, relational data, caching, and analytics.",SP
Securing and Integrating Components of your Application,"In this course, application developers learn how to design and develop cloud-native applications that seamlessly integrate components from the Google Cloud ecosystem. Through a combination of presentations, demos, and hands-on labs, participants learn how to develop more secure applications, implement federated identity management, and integrate application components by using messaging, event-driven processing, and API gateways.","IAS
SP
GV"
A Developer's guide to Node-RED,"&gt;&gt;&gt; By enrolling in this course you agree to the End User License Agreement as set out in the FAQ.  Once enrolled you can access the license in the Resources area &lt;&lt;&lt;
Rapid application development using agile methodologies and processes are increasingly being used when developing applications.  There is pressure on development teams to reduce the time needed to convert an idea into a working solution, be it as part of an innovation workshop or hackathon, a prototype for a new solution idea or main stream development.
Developers are looking for new ways to allow them to be more production and innovations, such as Node-RED from the JS Foundation is a technology that allows a developer to rapidly create applications, taking a fraction of the time need coding write code.  
Node-RED is built on Node.js, so will run anywhere capable of hosting node.js applications, such as small single board computers like the Raspberry Pi or Beaglebone, on your laptop or workstation or in cloud environments, such as the IBM Cloud.
Node red allows developers to compose flows using a pallet of nodes, where each node provides prebuilt functionality, that can be connected to other nodes to rapidly construct an application.
This course assumes some basic knowledge of Node-RED, so if you have not used Node-RED then you may want to take a look at the Coursera course - A Developer’s Guide to the Internet of Things (https://www.coursera.org/learn/developer-iot/), which provides a beginner look at Node-RED.
What you will learn: 
The course will improve your use of Node-RED.  It will introduce some more advanced features available in key nodes, show you how to visualise data using dashboard nodes.  It shows you how to create web APIs using Node-RED and how to consume web services and how to make use of different storage technologies within a Node-RED flow.  The last section of the course shows how you can extend Node-RED by creating your own nodes.
 
What technology is required to complete the course?  
The course requires you to have an IBM Cloud account, as some of the assignment work does make use of designated cloud services.  You can create a free account on the IBM Cloud and in week 2 of the course we make a promotional code available, which unlocks some additional resources on the IBM Cloud, so you can complete the course without having to provide credit card information or pay for cloud services.",AR
Introduction to Embedded Systems Software and Development Environments,"Introduction to Embedded Systems Software and Development Environments is the first course of the upcoming Embedded Software Essentials Specialization. This course is focused on giving you real world coding experience and hands on project work with ARM based Microcontrollers. You will learn how to implement software configuration management and develop embedded software applications. Course assignments include creating a build system using the GNU Toolchain GCC, using Git version control, and developing software in Linux on a Virtual Machine. The course concludes with a project where you will create your own build system and firmware that can manipulate memory.
Later courses of the Specialization will use hardware tools to program and debug microcontrollers with bare-metal firmware. Using a Texas Instruments MSP432 Development Kit, you will configure a variety of peripherals, write numerous programs, and see your work execute on your own embedded platform!",IM
Architecting Smart IoT Devices,"This course will teach you how to develop an embedded systems device. In order to reduce the time to market, many pre-made hardware and software components are available today. You&#x27;ll discover all the available hardware and software components, such as processor families, operating systems, boards and networks. You&#x27;ll also learn how to actually use and integrate these components.
At the end of the course you will be ready to start architecting and implementing your own embedded device! You&#x27;ll learn how to debug and finetune your device and how to make it run on a low power supply.",IM
"Programming Languages, Part A","This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.
This course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.
The course assumes some prior experience with programming, as described in more detail in the first module.
The course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  The three parts are not quite equal in length: Part A is almost as substantial as Part B and Part C combined.
Week 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.",PL
Build Your First Android App (Project-Centered Course),"What you’ll achieve:
In this project-centered course*, you’ll design, build, and distribute your own unique application for the Android mobile platform. We’ll provide you with a set of customizable building blocks that you can assemble to create many different types of apps, and that will help you become familiar with many important specificities of Android development. When you complete the project, in addition to having a personalized app that you can use and share, you’ll have the skills and background you need to move on to more advanced coursework in Android development. 
 What you’ll need to get started:
This project-centered course is designed for learners who have some prior experience programming in Java, such as an introductory college course or Coursera’s Java Programming Specialization (https://www.coursera.org/specializations/java-programming).
You will need a computer with a stable Internet connection, but you will not need an Android phone - we’ll use free software that you can use to emulate a phone on your computer. We&#x27;ll use Android Studio as IDE; it is compatible with most computer and operating systems. You can find detailed system requirements here: https://developer.android.com/sdk/index.html#Requirements.
*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share. 
Time: 10 hours of study, 10 hours of active project work",AR
Introduction to Game Development,"If you love games and want to learn how to make them, then this course will start you down that path. Making games is a creative and technical art form. In this course you will familiarize yourself with the tools and practices of game development. You will get started developing your own videogames using the industry standard game development tools, including the Unity3D game engine and C#. At the end of the course you will have completed three hands-on projects and will be able to leverage an array of game development techniques to create your own basic games. This course is for individuals interested in becoming a game designer, game artist, or game programmer.","AR
IAS
PL
SDF
SP"
Developing Android Apps with App Inventor,"The course will give students hands-on experience in developing interesting Android applications. No previous experience in programming is needed, and the course is suitable for students with any level of computing experience. MIT App Inventor will be used in the course. It is a blocks-based programming tool that allows everyone, even novices, to start programming and build fully functional apps for Android devices. Students are encouraged to use their own Android devices for hands-on testing and exploitation.","AR
IAS"
Functional Program Design in Scala,"In this course you will learn how to apply the functional programming style in the design of larger applications. You&#x27;ll get to know important new functional programming concepts, from lazy evaluation to structuring your libraries using monads. We&#x27;ll work on larger and more involved examples, from state space exploration to random testing to discrete circuit simulators. You’ll also learn some best practices on how to write good Scala code in the real world.
Several parts of this course deal with the question how functional programming interacts with mutable state. We will explore the consequences of combining functions and state. We will also look at purely functional alternatives to mutable state, using infinite data structures or functional reactive programming.
Learning Outcomes. By the end of this course you will be able to:
 - recognize and apply design principles of functional programs,
 - design functional libraries and their APIs,
 - competently combine functions and state in one program,
 - understand reasoning techniques for programs that combine 
   functions and state,
 - write simple functional reactive applications.
Recommended background: You should have at least one year programming experience. Proficiency with Java or C# is ideal, but experience with other languages such as C/C++, Python, Javascript or Ruby is also sufficient. You should have some familiarity using the command line. This course is intended to be taken after Functional Programming Principles in Scala: https://www.coursera.org/learn/progfun1.",PL
Engineering Maintainable Android Apps,"Engineering Maintainable Android Apps, which is a 4 week MOOC that shows by example various methods for engineering maintainable Android apps, including test-driven development methods and how to develop/run unit tests using JUnit and Robotium (or equivalent automated testing frameworks for Android), as well as how to successfully apply common Java/Android software patterns to improve the extensibility and clarity of Android apps. Students will work on the appropriate automated unit quizzes, based on the material covered in the lecture videos. These lessons will demonstrate the benefits of good software engineering practices that are targeted at creating maintainable code for mobile apps.
There will be roughly 3-4 hours of student engagement time per week, including video lectures, and quizzes. The ordering of the modules within the course is designed to be flexible.  In particular, students can watch the videos in whatever order suits their experience and needs, e.g., they may want to watch the unit testing videos prior to the software pattern videos if they prefer to learn about unit testing first.",SE
The Arduino Platform and C Programming,"The Arduino is an open-source computer hardware/software platform for building digital devices and interactive objects that can sense and control the physical world around them. In this class you will learn how the Arduino platform works in terms of the physical board and libraries and the IDE (integrated development environment). You will also learn about shields, which are smaller boards that plug into the main Arduino board to perform other functions such as sensing light, heat, GPS tracking, or providing a user interface display. The course will also cover programming the Arduino using C code and accessing the pins on the board via the software to control external devices. Please note that this course does not include discussion forums.
Upon completing this course, you will be able to:
1.       Outline the composition of the Arduino development board
2.       Describe what it means to program the board&#x27;s firmware
3.       Read board schematics
4.       Install Arduino IDE
5.       Describe what &quot;shields&quot; are and how they are used
6.       Specify the role of libraries in the use of shields
7.       Compile and run a program
8.       Name C Variables and Types
9.       Name common C operators
10.     Use conditionals and loops
11.     Explain functions, their definition and invocation
12.     Explain the implications of global variables
13.     Undertake the Arduino build process
14.     Describe the role of the tools behind the IDE
15.     Describe how to invoke functions in classes
16.     Explain the structure of an Arduino sketch
17.     Access the pins of the Arduino
18.     Differentiate between digital and analog pin
19.     Debug embedded software
20.     Explain the importance of controllability and observability in the debugging process
21.     Describe common debugging architectures for embedded systems
22.     Explain how the UART Serial communication protocol works
23.     Describe how the Arduino Serial library performs serial communication",SF
IBM Blockchain Foundation for Developers,"If you&#x27;re a software developer and new to blockchain, this is the course for you. Several experienced IBM blockchain developer advocates will lead you through a series of videos that describe high-level concepts, components, and strategies on building blockchain business networks. You&#x27;ll also get hands-on experience modeling and building blockchain networks as well as create your first blockchain application. 
The first part of this course covers basic concepts of blockchain, and no programming skills are required. However, to complete three of the four labs, you must understand basic software object-oriented programming and how to use the command line. It&#x27;s also helpful, but not required, that you can write code in JavaScript. 
When you complete the course, you should understand what a blockchain business network is, how to build and model a simple blockchain solution, and the role of the developer in creating blockchain applications. 
If you successfully complete the course, you&#x27;ll receive a certificate of completion.  You&#x27;ll need to pass several end-of-section quizzes and a final exam that include multiple choice, true and false, and fill in the blank questions. 
This course does not cover Bitcoin or cryptocurrency in detail.","IS
SE
SP"
API Security on Google Cloud's Apigee API Platform,"Now that your APIs are developed, it&#x27;s time to talk about how to secure them. This course covers API security using the Apigee API platform. We&#x27;ll learn about how to properly secure your APIs by covering topics such as the types of OAuth, TLS, and SAML to name a few. We&#x27;ll apply these concepts with hands on labs to implement proper authentication and validation in your APIs.
By taking this course, you&#x27;ll come to have a high level understanding of API security and why it&#x27;s important. All supplemental materials will be provided to you for offline review / reference. Since this is the final course in the Specialization, you&#x27;ll come out of this course with a fully working and secure API to be used as reference for all your future builds!
Note: Before starting this course, please ensure that you have completed the &quot;API Design and Fundamentals of Google Cloud&#x27;s Apigee API Platform&quot; and &quot;API Development on Google Cloud&#x27;s Apigee API Platform&quot; courses.",SP
Introduction to Architecting Smart IoT Devices,"What will you learn?
Embedded Systems are so ubiquitous that some of us take them for granted: we find them in smartphones, GPS systems, airplanes and so on. But have you ever wondered how these devices actually work? If so, you&#x27;re in the right place! 
In this course, you&#x27;ll learn about the characteristics of embedded systems: the possibilities, dangers, complications and recipes for success. We&#x27;ll discuss all of this in the framework of a flourishing embedded systems field: the Internet of Things, where billions of intercommunicating devices could enable unprecedented, innovative products and services. If you&#x27;d like to learn how to create similarly innovative products, then this is the course for you!
At the end of the course, you&#x27;ll be able to:
- make the right choice for your own project when it comes to the target market, parallel executions, time and the lifecycle of your system
- hack, avoid failure and promote success 
- decide whether to buy or to build components
- how to assemble a good team
- install case tools
- learn how to work with SysML
This is an introductory course. Check out our more advanced course Architecting Smart IoT Devices soon if you want to go beyond the basics!",AR
Capstone MOOC for "Android App Development","The Capstone project integrates material from throughout the Android App Development Specialization to exercise and assess the ability of learners to create an interesting Android app. Learners will apply knowledge and skills learned in previous MOOCs in this Specialization, including Java programming features; Android activity, broadcast receiver, service, and content provider (plus SQLite) components; and unit, integration, and user interface testing. The project itself is similar in scope to previous assignments in the earlier MOOCs in the Specialization.  However, it is intentionally designed to enable learners to create a customized app that demonstrates their creativity and mastery of the Specialization topics.","SDF
AL
HCI
PL
SE"
Python Programming: A Concise Introduction,"The goal of the course is to introduce students to Python Version 3.x programming using hands on instruction. It will show how to install Python and use the Spyder IDE (Integrated Development Environment) for writing and debugging programs. The approach will be to present an example followed by a small exercise where the learner tries something similar to solidify a concept.  At the end of each module there will be an exercise where the student is required to write simple programs and submit them for grading.  It is intended for students with little or no programming background, although students with such a background should be able to move forward at their preferred pace.
The course is four modules long and is designed to be completed in four weeks.",PD
Introduction to MongoDB,"This course will get you up and running with MongoDB quickly, and teach you how to leverage its power for data analytics.
We&#x27;ll start by mastering the fundamentals of MongoDB, including MongoDB’s Document data model, importing data into a cluster, working with our CRUD API and Aggregation Framework. These topics will be taught through a demo application which will give you a great first encounter of how simple and practical it can be to build applications with MongoDB.
In addition to these essential topics, you will also learn and work with useful MongoDB tools and services. You will work with Atlas, MongoDB&#x27;s database as a service, MongoDB Compass, a schema visualization tool, as well as many other useful command-line utilities.",IS
The Raspberry Pi Platform and Python Programming for the Raspberry Pi,"The Raspberry Pi is a small, affordable single-board computer that you will use to design and develop fun and practical IoT devices while learning programming and computer hardware. In addition, you will learn how to set up up the Raspberry Pi environment, get a Linux operating system running, and write and execute some basic Python code on the Raspberry Pi. You will also learn how to use Python-based IDE (integrated development environments) for the Raspberry Pi and how to trace and debug Python code on the device. Please note that this course does not include discussion forums.",IS
3D Models for Virtual Reality,"This course will begin your journey to creating Virtual Reality experiences. A Virtual Reality experience is a new world that you step into and are entirely immersed in. Creating a VR experience means creating that world and all the objects in it. 
In this course you will learn the basics of 3D graphics: how we create objects and how to lay them out to create an environment. You will learn techniques like materials and texturing that make your objects appear realistic. You will also learn about audio techniques to ensure that your experiences sound great as well as looking great. In all of these topics we will pay attention to the particular requirements of Virtual Reality, including pitfalls and performance issues: making sure your environment runs fast enough in VR. 
You will learn all of this using the professional game and VR engine, Unity3D. Unity is one of the most used game engine and is a relatively easy, but fully featured, introduction to 3D development. 
The course will culminate in a project in which you will create your own VR scene. VR development is something you can only learn by doing it yourself, so working on your project will be the best way to learn.",HCI
Creative Programming for Digital Media & Mobile Apps,"This course is for anyone who would like to apply their technical skills to creative work ranging from video games to art installations to interactive music, and also for artists who would like to use programming in their artistic practice. 
This course will teach you how to develop and apply programming skills to creative work. This is an important skill within the development of creative mobile applications, digital music and video games. It will teach the technical skills needed to write software that make use of images, audio and graphics, and will concentrate on the application of these skills to creative projects. Additional resources will be provided for students with no programming background. 
At the end of this course, you will be able to:
* Write creative, audiovisual programs in the Processing environment that run on desktop and mobile 
* Programatically manipulate sound in creative ways 
* Display images and image sequences
* Generate interactive, algorithmic graphics
* Work with a 2D physics engine to create a basic game",SF
IBM Cloud: Deploying Microservices with Kubernetes,"In this course, you learn how to install the Kubernetes command-line interface (CLI), and create a Kubernetes cluster on which to run applications. Hands-on tutorials show you how to deploy microservices to a Kubernetes cluster. You also learn about securing and managing a Kubernetes cluster, and how to plan your Kubernetes cluster for deployment on IBM Cloud.
The ideal candidate for this course has a basic understanding of cloud computing, a working knowledge of developing microservices, and some experience working with IBM Cloud. Experience with using Docker, and familiarity with YAML is also a plus. 
To complete the hands-on tutorials in this course, you must use your own computing device and install the required software, as directed in the tutorials. You must have a Pay-As-You-Go or Subscription IBM Cloud account to create a Kubernetes cluster on IBM Cloud. There is no charge to create a Kubernetes cluster with the Lite Plan.","NC
OS
AR"
"Android App Components - Services, Local IPC, and Content Providers","This 4 week MOOC builds upon the core Android app components and concurrency frameworks covered in Course 2 by focusing on started and bound services, local inter-process communication (IPC), and content providers. Case study apps will be examined from multiple perspectives to learn how to program these app components using Android&#x27;s material design paradigm. Students will work incrementally on a hands-on project involving a material design-based RSS reader app. Each week you will add additional capabilities to the project, based on material covered in the lecture videos. You&#x27;ll spend roughly 4 hours per week watching video lectures, taking quizzes, and programming assignments with Java and Android.","SP
SDF
PL
IS
SE"
System Validation (2): Model process behaviour,"System Validation is the field that studies the fundamentals of system communication and information processing. It is the next logical step in computer science and improving software development in general. It allows automated analysis based on behavioural models of a system to see if a system works correctly. We want to guarantee that the systems does exactly what it is supposed to do. The techniques put forward in system validation allow to prove the absence of errors. It allows to design embedded system behaviour that is structurally sound and as a side effect enforces you to make the behaviour simple and insightful. This means that the systems are not only behaving correctly, but are also much easier to maintain and adapt. ’Model process behaviour&#x27; is the follow up MOOC to &#x27;Automata and behavioural equivalences&#x27;. This MOOC shows you how to model process behaviour, in particular protocols and distributed algorithms, dive deeper in the properties of system behaviour, and keep things simple to avoid a state space explosion. Reading material. J.F. Groote and M.R. Mousavi. Modeling and analysis of communicating systems. The MIT Press, 2014.
This course is part 2 of the set of courses for System Validation. System Validation, as a set of courses, is part of a larger EIT Digital online programme called &#x27;Internet of Things through Embedded Systems&#x27;.",SP
"System Validation (4): Modelling Software, Protocols, and other behaviour","System Validation is the field that studies the fundamentals of system communication and information processing. It allows automated analysis based on behavioural models of a system to see if a system works correctly. We want to guarantee that the systems does exactly what it is supposed to do. The techniques put forward in system validation allow to prove the absence of errors. It allows to design embedded system behaviour that is structurally sound and as a side effect enforces you to make the behaviour simple and insightful. This means that the systems are not only behaving correctly, but are also much easier to maintain and adapt. ’Modeling Software Protocols, and other behaviour&#x27; demonstrates the power of formal methods in software modelling, communication protocols, and other examples. Reading material. J.F. Groote and M.R. Mousavi. Modeling and analysis of communicating systems. The MIT Press, 2014.",SP
Introduction to Data Science in Python,"This course will introduce the learner to the basics of the python programming environment, including fundamental python programming techniques such as lambdas, reading and manipulating csv files, and the numpy library. The course will introduce data manipulation and cleaning techniques using the popular python pandas data science library and introduce the abstraction of the Series and DataFrame as the central data structures for data analysis, along with tutorials on how to use functions such as groupby, merge, and pivot tables effectively. By the end of this course, students will be able to take tabular data, clean it, manipulate it, and run basic inferential statistical analyses. 
This course should be taken before any of the other Applied Data Science with Python courses: Applied Plotting, Charting &amp; Data Representation in Python, Applied Machine Learning in Python, Applied Text Mining in Python, Applied Social Network Analysis in Python.",AL
"Applied Plotting, Charting & Data Representation in Python","This course will introduce the learner to information visualization basics, with a focus on reporting and charting using the matplotlib library. The course will start with a design and information literacy perspective, touching on what makes a good and bad visualization, and what statistical measures translate into in terms of visualizations. The second week will focus on the technology used to make visualizations in python, matplotlib, and introduce users to best practices when creating basic charts and how to realize design decisions in the framework. The third week will be a tutorial of functionality available in matplotlib, and demonstrate a variety of basic statistical charts helping learners to identify when a particular method is good for a particular problem. The course will end with a discussion of other forms of structuring and visualizing data. 
This course should be taken after Introduction to Data Science in Python and before the remainder of the Applied Data Science with Python courses: Applied Machine Learning in Python, Applied Text Mining in Python, and Applied Social Network Analysis in Python.",HCI
Applied Machine Learning in Python,"This course will introduce the learner to applied machine learning, focusing more on the techniques and methods than on the statistics behind these methods. The course will start with a discussion of how machine learning is different than descriptive statistics, and introduce the scikit learn toolkit through a tutorial. The issue of dimensionality of data will be discussed, and the task of clustering data, as well as evaluating those clusters, will be tackled. Supervised approaches for creating predictive models will be described, and learners will be able to apply the scikit learn predictive modelling methods while understanding process issues related to data generalizability (e.g. cross validation, overfitting). The course will end with a look at more advanced techniques, such as building ensembles, and practical limitations of predictive models. By the end of this course, students will be able to identify the difference between a supervised (classification) and unsupervised (clustering) technique, identify which technique they need to apply for a particular dataset and need, engineer features to meet that need, and write python code to carry out an analysis. 
This course should be taken after Introduction to Data Science in Python and Applied Plotting, Charting &amp; Data Representation in Python and before Applied Text Mining in Python and Applied Social Analysis in Python.",IS
Applied Text Mining in Python,"This course will introduce the learner to text mining and text manipulation basics. The course begins with an understanding of how text is handled by python, the structure of text both to the machine and to humans, and an overview of the nltk framework for manipulating text. The second week focuses on common manipulation needs, including regular expressions (searching for text), cleaning text, and preparing text for use by machine learning processes. The third week will apply basic natural language processing methods to text, and demonstrate how text classification is accomplished. The final week will explore more advanced methods for detecting the topics in documents and grouping them by similarity (topic modelling). 
This course should be taken after: Introduction to Data Science in Python, Applied Plotting, Charting &amp; Data Representation in Python, and Applied Machine Learning in Python.","SDF
GV
PL"
Applied Social Network Analysis in Python,"This course will introduce the learner to network analysis through tutorials using the NetworkX library. The course begins with an understanding of what network analysis is and motivations for why we might model phenomena as networks. The second week introduces the concept of connectivity and network robustness. The third week will explore ways of measuring the importance or centrality of a node in a network. The final week will explore the evolution of networks over time and cover models of network generation and the link prediction problem. 
This course should be taken after: Introduction to Data Science in Python, Applied Plotting, Charting &amp; Data Representation in Python, and Applied Machine Learning in Python.",NC
Python Data Structures,"This course will introduce the core data structures of the Python programming language. We will move past the basics of procedural programming and explore how we can use the Python built-in data structures such as lists, dictionaries, and tuples to perform increasingly complex data analysis. This course will cover Chapters 6-10 of the textbook “Python for Everybody”.  This course covers Python 3.","SDF
PL
PD
AL"
Using Python to Access Web Data,"This course will show how one can treat the Internet as a source of data.  We will scrape, parse, and read web data as well as access data using web APIs.  We will work with HTML, XML, and JSON data formats in Python.  This course will cover Chapters 11-13 of the textbook “Python for Everybody”. To succeed in this course, you should be familiar with the material covered in Chapters 1-10 of the textbook and the first two courses in this specialization.  These topics include variables and expressions, conditional execution (loops, branching, and try/except), functions, Python data structures (strings, lists, dictionaries, and tuples), and manipulating files.  This course covers Python 3.","NC
SDF"
Using Databases with Python,"This course will introduce students to the basics of the Structured Query Language (SQL) as well as basic database design for storing data as part of a multi-step data gathering, analysis, and processing effort.  The course will use SQLite3 as its database.  We will also build web crawlers and multi-step data gathering and visualization processes.  We will use the D3.js library to do basic data visualization.  This course will cover Chapters 14-15 of the book “Python for Everybody”. To succeed in this course, you should be familiar with the material covered in Chapters 1-13 of the textbook and the first three courses in this specialization. This course covers Python 3.","PD
PL
SDF
AL"
"Capstone: Retrieving, Processing, and Visualizing Data with Python","In the capstone, students will build a series of applications to retrieve, process and visualize data using Python.   The projects will involve all the elements of the specialization.  In the first part of the capstone, students will do some visualizations to become familiar with the technologies in use and then will pursue their own project to visualize some other data that they have or can find.  Chapters 15 and 16 from the book “Python for Everybody” will serve as the backbone for the capstone. This course covers Python 3.","AL
DS
HCI
PD
PL
SDF"
Algorithmic Toolbox,"The course covers basic algorithmic techniques and ideas for computational problems arising frequently in practical applications: sorting and searching, divide and conquer, greedy algorithms, dynamic programming. We will learn a lot of theory: how to sort data and how it helps for searching; how to break a large problem into pieces and solve them recursively; when it makes sense to proceed greedily; how dynamic programming is used in genomic studies. You will practice solving computational problems, designing new algorithms, and implementing solutions efficiently (so that they run in less than a second).","AL
AR
DS
IS
PBD
PL
SE
SDF"
Data Structures,"A good algorithm usually comes together with a set of good data structures that allow the algorithm to manipulate the data efficiently. In this course, we consider the common data structures that are used in various computational problems. You will learn how these data structures are implemented in different programming languages and will practice implementing them in our programming assignments. This will help you to understand what is going on inside a particular built-in implementation of a data structure and what to expect from it. You will also learn typical use cases for these data structures.
A few examples of questions that we are going to cover in this class are the following:
1. What is a good strategy of resizing a dynamic array?
2. How priority queues are implemented in C++, Java, and Python?
3. How to implement a hash table so that the amortized running time of all operations is O(1) on average?
4. What are good strategies to keep a binary tree balanced? 
You will also learn how services like Dropbox manage to upload some large files instantly and to save a lot of storage space!",DS
Algorithms on Graphs,"If you have ever used a navigation service to find optimal route and estimate time to destination, you&#x27;ve used algorithms on graphs. Graphs arise in various real-world situations as there are road networks, computer networks and, most recently, social networks! If you&#x27;re looking for the fastest time to get to work, cheapest way to connect set of computers into a network or efficient algorithm to automatically find communities and opinion leaders in Facebook, you&#x27;re going to work with graphs and algorithms on graphs.
In this course, you will first learn what a graph is and what are some of the most important properties. Then you&#x27;ll learn several ways to traverse graphs and how you can do useful things while traversing the graph in some order. We will then talk about shortest paths algorithms — from the basic ones to those which open door for 1000000 times faster algorithms used in Google Maps and other navigational services. You will use these algorithms if you choose to work on our Fast Shortest Routes industrial capstone project. We will finish with minimum spanning trees which are used to plan road, telephone and computer networks and also find applications in clustering and approximate algorithms.","AL
CN
GV
SE"
Algorithms on Strings,"World and internet is full of textual information. We search for information using textual queries, we read websites, books, e-mails. All those are strings from the point of view of computer science. To make sense of all that information and make search efficient, search engines use many string algorithms. Moreover, the emerging field of personalized medicine uses many search algorithms to find disease-causing mutations in the human genome.","AL
AR
IAS
IS"
Advanced Algorithms and Complexity,"You&#x27;ve learned the basic algorithms now and are ready to step into the area of more complex problems and algorithms to solve them. Advanced algorithms build upon basic ones and use new ideas. We will start with networks flows which are used in more typical applications such as optimal matchings, finding disjoint paths and flight scheduling as well as more surprising ones like image segmentation in computer vision. We then proceed to linear programming with applications in optimizing budget allocation, portfolio optimization, finding the cheapest diet satisfying all requirements and many others. Next we discuss inherently hard problems for which no exact good solutions are known (and not likely to be found) and how to solve them in practice. We finish with a soft introduction to streaming algorithms that are heavily used in Big Data processing. Such algorithms are usually designed to be able to process huge datasets without being able even to store a dataset.","AL
PD"
Parallel programming,"With every smartphone and computer now boasting multiple processors, the use of functional ideas to facilitate parallel programming is becoming increasingly widespread. In this course, you&#x27;ll learn the fundamentals of parallel programming, from task parallelism to data parallelism. In particular, you&#x27;ll see how many familiar ideas from functional programming map perfectly to to the data parallel paradigm. We&#x27;ll start the nuts and bolts how to effectively parallelize familiar collections operations, and we&#x27;ll build up to parallel collections, a production-ready data parallel collections library available in the Scala standard library. Throughout, we&#x27;ll apply these concepts through several hands-on examples that analyze real-world data, such as popular algorithms like k-means clustering.
Learning Outcomes. By the end of this course you will be able to:
- reason about task and data parallel programs,
- express common algorithms in a functional style and solve them in parallel,
- competently microbenchmark parallel code,
- write programs that effectively use parallel collections to achieve performance
Recommended background: You should have at least one year programming experience. Proficiency with Java or C# is ideal, but experience with other languages such as C/C++, Python, Javascript or Ruby is also sufficient. You should have some familiarity using the command line. This course is intended to be taken after Functional Program Design in Scala: https://www.coursera.org/learn/progfun2.",PD
Big Data Analysis with Scala and Spark,"Manipulating big data distributed over a cluster using functional concepts is rampant in industry, and is arguably one of the first widespread industrial uses of functional ideas. This is evidenced by the popularity of MapReduce and Hadoop, and most recently Apache Spark, a fast, in-memory distributed collections framework written in Scala. In this course, we&#x27;ll see how the data parallel paradigm can be extended to the distributed case, using Spark throughout. We&#x27;ll cover Spark&#x27;s programming model in detail, being careful to understand how and when it differs from familiar programming models, like shared-memory parallel collections or sequential Scala collections. Through hands-on examples in Spark and Scala, we&#x27;ll learn when important issues related to distribution like latency and network communication should be considered and how they can be addressed effectively for improved performance.
Learning Outcomes. By the end of this course you will be able to:
- read data from persistent storage and load it into Apache Spark,
- manipulate data with Spark and Scala,
- express algorithms for data analysis in a functional style, 
- recognize how to avoid shuffles and recomputation in Spark,
Recommended background: You should have at least one year programming experience. Proficiency with Java or C# is ideal, but experience with other languages such as C/C++, Python, Javascript or Ruby is also sufficient. You should have some familiarity using the command line. This course is intended to be taken after Parallel Programming: https://www.coursera.org/learn/parprog1.","PD
PL
SDF
SP
AL"
Functional Programming in Scala Capstone,"In the final capstone project you will apply the skills you learned by building a large data-intensive application using real-world data.
You will implement a complete application processing several gigabytes of data. This application will show interactive visualizations of the evolution of temperatures over time all over the world.
The development of such an application will involve:
 — transforming data provided by weather stations into meaningful information like, for instance, the average temperature of each point of the globe over the last ten years ;
 — then, making images from this information by using spatial and linear interpolation techniques ;
 — finally, implementing how the user interface will react to users’ actions.",GV
"Divide and Conquer, Sorting and Searching, and Randomized Algorithms","The primary topics in this part of the specialization are: asymptotic (&quot;Big-oh&quot;) notation, sorting and searching, divide and conquer (master method, integer and matrix multiplication, closest pair), and randomized algorithms (QuickSort, contraction algorithm for min cuts).","AL
DS"
"Graph Search, Shortest Paths, and Data Structures","The primary topics in this part of the specialization are: data structures (heaps, balanced search trees, hash tables, bloom filters), graph primitives (applications of breadth-first and depth-first search, connectivity, shortest paths), and their applications (ranging from deduplication to social network analysis).","AL
DS
GV
PL
SDF"
"Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming","The primary topics in this part of the specialization are: greedy algorithms (scheduling, minimum spanning trees, clustering, Huffman codes) and dynamic programming (knapsack, sequence alignment, optimal search trees).","AR
AL
SDF"
"Shortest Paths Revisited, NP-Complete Problems and What To Do About Them","The primary topics in this part of the specialization are: shortest paths (Bellman-Ford, Floyd-Warshall, Johnson), NP-completeness and what it means for the algorithm designer, and strategies for coping with computationally intractable problems (analysis of heuristics, local search).","AL
DS"
"Cloud Computing Concepts, Part 1","Cloud computing systems today, whether open-source or used inside companies, are built using a common set of core techniques, algorithms, and design philosophies – all centered around distributed systems. Learn about such fundamental distributed computing &quot;concepts&quot; for cloud computing.
 
Some of these concepts include: clouds, MapReduce, key-value/NoSQL stores, classical distributed algorithms, widely-used distributed algorithms, scalability, trending areas, and much, much more! 
 
Know how these systems work from the inside out. Get your hands dirty using these concepts with provided homework exercises. In the programming assignments, implement some of these concepts in template code (programs) provided in the C++ programming language. Prior experience with C++ is required.
 
The course also features interviews with leading researchers and managers, from both industry and academia.","DS
NC
PD
PL
SDF"
Cloud Computing Concepts: Part 2,"Cloud computing systems today, whether open-source or used inside companies, are built using a common set of core techniques, algorithms, and design philosophies – all centered around distributed systems. Learn about such fundamental distributed computing &quot;concepts&quot; for cloud computing.
 
Some of these concepts include: clouds, MapReduce, key-value/NoSQL stores, classical distributed algorithms, widely-used distributed algorithms, scalability, trending areas, and much, much more! 
 
Know how these systems work from the inside out. Get your hands dirty using these concepts with provided homework exercises. In the programming assignments, implement some of these concepts in template code (programs) provided in the C++ programming language. Prior experience with C++ is required.
 
The course also features interviews with leading researchers and managers, from both industry and academia.
This course builds on the material covered in the Cloud Computing Concepts, Part 1 course.",PD
"Cloud Computing Applications, Part 2: Big Data and Applications in the Cloud","Welcome to the Cloud Computing Applications course, the second part of a two-course series designed to give you a comprehensive view on the world of Cloud Computing and Big Data!
In this second course we continue Cloud Computing Applications by exploring how the Cloud opens up data analytics of huge volumes of data that are static or streamed at high velocity and represent an enormous variety of information. Cloud applications and data analytics represent a disruptive change in the ways that society is informed by, and uses information. We start the first week by introducing some major systems for data analysis including Spark and the major frameworks and distributions of analytics applications including Hortonworks, Cloudera, and MapR. By the middle of week one we introduce the HDFS distributed and robust file system that is used in many applications like Hadoop and finish week one by exploring the powerful MapReduce programming model and how distributed operating systems like YARN and Mesos support a flexible and scalable environment for Big Data analytics. In week two, our course introduces large scale data storage and the difficulties and problems of consensus in enormous stores that use quantities of processors, memories and disks. We discuss eventual consistency, ACID, and BASE and the consensus algorithms used in data centers including Paxos and Zookeeper. Our course presents Distributed Key-Value Stores and in memory databases like Redis used in data centers for performance. Next we present NOSQL Databases. We visit HBase, the scalable, low latency database that supports database operations in applications that use Hadoop. Then again we show how Spark SQL can program SQL queries on huge data. We finish up week two with a presentation on Distributed Publish/Subscribe systems using Kafka, a distributed log messaging system that is finding wide use in connecting Big Data and streaming applications together to form complex systems. Week three moves to fast data real-time streaming and introduces Storm technology that is used widely in industries such as Yahoo. We continue with Spark Streaming, Lambda and Kappa architectures, and a presentation of the Streaming Ecosystem. Week four focuses on Graph Processing, Machine Learning, and Deep Learning. We introduce the ideas of graph processing and present Pregel, Giraph, and Spark GraphX. Then we move to machine learning with examples from Mahout and Spark. Kmeans, Naive Bayes, and fpm are given as examples. Spark ML and Mllib continue the theme of programmability and application construction. The last topic we cover in week four introduces Deep Learning technologies including Theano, Tensor Flow, CNTK, MXnet, and Caffe on Spark.",IS
Cloud Networking,"In the cloud networking course, we will see what the network needs to do to enable cloud computing. We will explore current practice by talking to leading industry experts, as well as looking into interesting new research that might shape the cloud network’s future.
This course will allow us to explore in-depth the challenges for cloud networking—how do we build a network infrastructure that provides the agility to deploy virtual networks on a shared infrastructure, that enables both efficient transfer of big data and low latency communication, and that enables applications to be federated across countries and continents? Examining how these objectives are met will set the stage for the rest of the course.
This course places an emphasis on both operations and design rationale—i.e., how things work and why they were designed this way. We&#x27;re excited to start the course with you and take a look inside what has become the critical communications infrastructure for many applications today.",NC
Cloud Computing Project,"Note: You should complete all the other courses in this Specialization before beginning this course.
This six-week long Project course of the Cloud Computing Specialization will allow you to apply the learned theories and techniques for cloud computing from the previous courses in the Specialization, including Cloud Computing Concepts, Part 1, Cloud Computing Concepts, Part 2, Cloud Computing Applications, Part 1, Cloud Computing Concepts, Part 2, and Cloud Networking.","SF
IAS"
"Big Data Essentials: HDFS, MapReduce and Spark RDD","Have you ever heard about such technologies as HDFS, MapReduce, Spark? Always wanted to learn these new tools but missed concise starting material? Don’t miss this course either!
 
In this 6-week course you will:
- learn some basic technologies of the modern Big Data landscape, namely: HDFS, MapReduce and Spark;
- be guided both through systems internals and their applications;
- learn about distributed file systems, why they exist and what function they serve;
- grasp the MapReduce framework, a workhorse for many modern Big Data applications;
- apply the framework to process texts and solve sample business cases;
- learn about Spark, the next-generation computational framework;
- build a strong understanding of Spark basic concepts;
- develop skills to apply these tools to creating solutions in finance, social networks, telecommunications and many other fields.
Your learning experience will be as close to real life as possible with the chance to evaluate your practical assignments on a real cluster. No mocking, a friendly considerate atmosphere to make the process of your learning smooth and enjoyable.
 
Get ready to work with real datasets alongside with real masters!
Special thanks to:
- Prof. Mikhail Roytberg, APT dept., MIPT, who was the initial reviewer of the project, the supervisor and mentor of half of the BigData team. He was the one, who helped to get this show on the road.
- Oleg Sukhoroslov (PhD, Senior Researcher at IITP RAS), who has been teaching  MapReduce, Hadoop  and friends since 2008. Now he is leading the infrastructure team.
- Oleg Ivchenko (PhD student APT dept., MIPT), Pavel Akhtyamov (MSc. student at APT dept., MIPT) and Vladimir Kuznetsov (Assistant at P.G. Demidov Yaroslavl State University), superbrains who have developed and now maintain the infrastructure used for practical assignments in this course.
- Asya Roitberg, Eugene Baulin, Marina Sudarikova. These people never sleep to babysit this course day and night, to make your learning experience productive, smooth and exciting.","SF
DS
SDF
SE"
Big Data Applications: Machine Learning at Scale,"Machine learning is transforming the world around us. To become successful, you’d better know what kinds of problems can be solved with machine learning, and how they can be solved. Don’t know where to start? The answer is one button away.
 
During this course you will:
- Identify practical problems which can be solved with machine learning
- Build, tune and apply linear models with Spark MLLib
- Understand methods of text processing
- Fit decision trees and boost them with ensemble learning
- Construct your own recommender system.
 
As a practical assignment, you will 
- build and apply linear models for classification and regression tasks; 
- learn how to work with texts; 
- automatically construct decision trees and improve their performance with ensemble learning; 
- finally, you will build your own recommender system!
With these skills, you will be able to tackle many practical machine learning tasks.
 
We provide the tools, you choose the place of application to make this world of machines more intelligent.
Special thanks to:
- Prof. Mikhail Roytberg, APT dept., MIPT, who was the initial reviewer of the project, the supervisor and mentor of half of the BigData team. He was the one, who helped to get this show on the road.
- Oleg Sukhoroslov (PhD, Senior Researcher at IITP RAS), who has been teaching  MapReduce, Hadoop and friends since 2008. Now he is leading the infrastructure team.
- Oleg Ivchenko (PhD student APT dept., MIPT), Pavel Akhtyamov (MSc. student at APT dept., MIPT) and Vladimir Kuznetsov (Assistant at P.G. Demidov Yaroslavl State University), superbrains who have developed and now maintain the infrastructure used for practical assignments in this course.
- Asya Roitberg, Eugene Baulin, Marina Sudarikova. These people never sleep to babysit this course day and night, to make your learning experience productive, smooth and exciting.",IS
Big Data Applications: Real-Time Streaming,"There is a significant number of tasks when we need not just to process an enormous volume of data but to process it as quickly as possible. Delays in tsunami prediction can cost people’s lives. Delays in traffic jam prediction cost extra time. Advertisements based on the recent users’ activity are ten times more popular.
However, stream processing techniques alone are not enough to create a complete real-time system. For example to create a recommendation system we need to have a storage that allows to store and fetch data for a user with minimal latency. These databases should be able to store hundreds of terabytes of data, handle billions of requests per day and have a 100% uptime. NoSQL databases are commonly used to solve this challenging problem.
After you finish this course, you will master stream processing systems and NoSQL databases. You will also learn how to use such popular and powerful systems as  Kafka, Cassandra and Redis.
To get the most out of this course, you need to know Hadoop and Hive. You should also have a working knowledge of Spark, Spark SQL and Python.
Do you want to learn how to build Big Data applications that can withstand modern challenges? Jump right in!",IS
Big Data Services: Capstone Project,"Are you ready to close the loop on your Big Data skills? Do you want to apply all your knowledge you got from the previous courses in practice? Finally, in the Capstone project, you will integrate all the knowledge acquired earlier to build a real application leveraging the power of Big Data.
You will be given a task to combine data from different sources of different types (static distributed dataset, streaming data, SQL or NoSQL storage). Combined, this data will be used to build a predictive model for a financial market (as an example). First, you design a system from scratch and share it with your peers to get valuable feedback. Second, you can make it public, so get ready to receive the feedback from your service users. Real-world experience without any 3G-glasses or mock interviews.",PD
Introduction to the Internet of Things and Embedded Systems,"The explosive growth of the “Internet of Things” is changing our world and the rapid drop in price for typical IoT components is allowing people to innovate new designs and products at home. In this first class in the specialization you will learn the importance of IoT in society, the current components of typical IoT devices and trends for the future. IoT design considerations, constraints and interfacing between the physical world and your device will also be covered. You will also learn how to make design trade-offs between hardware and software. We&#x27;ll also cover key components of networking to ensure that students understand how to connect their device to the Internet. Please note that this course does not include discussion forums.
Upon completing this course, you will be able to:
1.       Define the term “Internet of Things”
2.       State the technological trends which have led to IoT
3.       Describe the impact of IoT on society
4.       Define what an embedded system is in terms of its interface
5.       Enumerate and describe the components of an embedded system
6.       Describe the interactions of embedded systems with the physical world
7.       Name the core hardware components most commonly used in IoT devices
8.       Describe the interaction between software and hardware in an IoT device
9.       Describe the role of an operating system to support software in an IoT device
10.     Explain the use of networking and basic networking hardware
11.     Describe the structure of the Internet
12.     Describe the meaning of a “network protocol”
13.     Explain MANETs and their relation to IoT","NC
IS
HCI"
Interfacing with the Arduino,"Arduino senses the environment by receiving inputs from add-on devices such as sensors, and can control the world around it by adjusting lights, motors, and other actuators. In this class you will learn how and when to use the different types of sensors and how to connect them to the Arduino. Since the external world uses continuous or analog signals and the hardware is digital you will learn how these signals are converted back-and-forth and how this must be considered as you program your device. You&#x27;ll also learn about the use of Arduino-specific shields and the shields software libraries to interface with the real world. Please note that this course does not include discussion forums.","SDF
AL
DS"
Interfacing with the Raspberry Pi,"The Raspberry Pi uses a variety of input/output devices based on protocols such as HDMI, USB, and Ethernet to communicate with the outside world. In this class you will learn how to use these protocols with other external devices (sensors, motors, GPS, orientation, LCD screens etc.) to get your IoT device to interact with the real world. Most physical devices use analog signals;  however computer hardware is digital so in this class you will learn how these signals are converted back-and-forth and how this must be considered as you program your device. The basic design of a sensor-actuator system will also be covered. You will also learn how to build more sophisticated hardware systems using Raspberry Pi expansion boards to create fun and exciting IoT devices. Please note that this course does not include discussion forums.",SP
Programming for the Internet of Things Project,"In this Capstone course, you will design a microcontroller-based embedded system. As an option, you can also build and test a system. The focus of your project will be to design the system so that it can be built on a low-cost budget for a real-world application. To complete this project you&#x27;ll need to use all the skills you&#x27;ve learned in the course (programming microcontrollers, system design, interfacing, etc.). The project will include some core requirements, but leave room for your creativity in how you approach the project. In the end, you will produce a unique final project, suitable for showcasing to future potential employers.  
Note that for the three required assignments you do NOT need to purchase software and hardware to complete this course. There is an optional fourth assignment for students who wish to build and demonstrate their system using an Arduino or Raspberry Pi. Please also note that this course does not include discussion forums.
Upon completing this course, you will be able to:
1.       Write a requirements specification document
2.       Create a system-level design
3.       Explore design options
4.       Create a test plan",SE
Google Cloud Platform Big Data and Machine Learning Fundamentals,"This 1-week accelerated on-demand course introduces participants to the Big Data and Machine Learning capabilities of Google Cloud Platform (GCP). It provides a quick overview of the Google Cloud Platform and a deeper dive of the data processing capabilities.
At the end of this course, participants will be able to:
• Identify the purpose and value of the key Big Data and Machine Learning products in the Google Cloud Platform
• Use CloudSQL and Cloud Dataproc to migrate existing MySQL and Hadoop/Pig/Spark/Hive workloads to Google Cloud Platform
• Employ BigQuery and Cloud Datalab to carry out interactive data analysis
• Choose between Cloud SQL, BigTable and Datastore
• Train and use a neural network using TensorFlow
• Choose between different data processing products on the Google Cloud Platform
Before enrolling in this course, participants should have roughly one (1) year of experience with one or more of the following:
• A common query language such as SQL
• Extract, transform, load activities
• Data modeling
• Machine learning and/or statistics
• Programming in Python
Google Account Notes:
• You&#x27;ll need a Google/Gmail account and a credit card or bank account to sign up for the Google Cloud Platform free trial (Google services are currently unavailable in China).
• If you are a Google Cloud Platform customer with European Union (EU) and Russian billing addresses, read the VAT Overview documentation at: https://cloud.google.com/billing/docs/resources/vat-overview
• More Google Cloud Platform free trial FAQs are available at: https://cloud.google.com/free-trial/",IS
Leveraging Unstructured Data with Cloud Dataproc on Google Cloud Platform,"This 1-week, accelerated course builds upon previous courses in the Data Engineering on Google Cloud Platform specialization. Through a combination of video lectures, demonstrations, and hands-on labs, you&#x27;ll learn how to create and manage computing clusters to run Hadoop, Spark, Pig and/or Hive jobs on Google Cloud Platform.  You will also learn how to access various cloud storage options from their compute clusters and integrate Google’s machine learning capabilities into their analytics programs.  
In the hands-on labs, you will create and manage Dataproc Clusters using the Web Console and the CLI, and use cluster to run Spark and Pig jobs. You will then create iPython notebooks that integrate with BigQuery and storage and utilize Spark. Finally, you integrate the machine learning APIs into your data analysis.
Pre-requisites
• Google Cloud Platform Big Data &amp; Machine Learning Fundamentals (or equivalent experience)
• Some knowledge of Python","AL
GV
IS
IAS
SDF
SE"
Serverless Data Analysis with Google BigQuery and Cloud Dataflow,"This 1-week, accelerated on-demand course builds upon Google Cloud Platform Big Data and Machine Learning Fundamentals. Through a combination of instructor-led presentations, demonstrations, and hands-on labs, students learn how to carry out no-ops data warehousing, analysis and pipeline processing.
Prerequisites:
• Google Cloud Platform Big Data and Machine Learning Fundamentals
• Experience using a SQL-like query language to analyze data
• Knowledge of either Python or Java
Google Account Notes:
• You&#x27;ll need a Google/Gmail account and a credit card or bank account to sign up for the Google Cloud Platform free trial (Google services are currently unavailable in China).
• If you are a Google Cloud Platform customer with European Union (EU) and Russian billing addresses, read the VAT Overview documentation at: https://cloud.google.com/billing/docs/resources/vat-overview
• More Google Cloud Platform free trial FAQs are available at: https://cloud.google.com/free-trial/",DS
Serverless Machine Learning with Tensorflow on Google Cloud Platform,"This one-week accelerated on-demand course provides participants a a hands-on introduction to designing and building machine learning models on Google Cloud Platform. Through a combination of presentations, demos, and hand-on labs, participants will learn machine learning (ML) and TensorFlow concepts, and develop hands-on skills in developing, evaluating, and productionizing ML models.
OBJECTIVES
This course teaches participants the following skills:
  ● Identify use cases for machine learning
  ● Build an ML model using TensorFlow
  ● Build scalable, deployable ML models using Cloud ML
  ● Know the importance of preprocessing and combining features
  ● Incorporate advanced ML concepts into their models
  ● Productionize trained ML models
PREREQUISITES
To get the most of out of this course, participants should have:
  ● Completed Google Cloud Fundamentals- Big Data and Machine Learning course OR have equivalent experience
  ● Basic proficiency with common query language such as SQL
  ● Experience with data modeling, extract, transform, load activities
  ● Developing applications using a common programming language such Python
  ● Familiarity with Machine Learning and/or statistics
Google Account Notes:
• You&#x27;ll need a Google/Gmail account and a credit card or bank account to sign up for the Google Cloud Platform free trial (Google services are currently unavailable in China).
• If you are a Google Cloud Platform customer with European Union (EU) and Russian billing addresses, read the VAT Overview documentation at: https://cloud.google.com/billing/docs/resources/vat-overview
• More Google Cloud Platform free trial FAQs are available at: https://cloud.google.com/free-trial/",IS
Building Resilient Streaming Systems on Google Cloud Platform,"This 1-week, accelerated on-demand course builds upon Google Cloud Platform Big Data and Machine Learning Fundamentals. Through a combination of video lectures, demonstrations, and hands-on labs, you&#x27;ll learn how to build streaming data pipelines using Google Cloud Pub/Sub and Dataflow to enable real-time decision making. You will also learn how to build dashboards to render tailored output for various stakeholder audience.
Prerequisites:
• Google Cloud Platform Big Data and Machine Learning Fundamentals (or equivalent experience)
• Some knowledge of Java
Objectives:
• Understand use-cases for real-time streaming analytics
• Use Google Cloud PubSub asynchronous messaging service to manage data events
• Write streaming pipelines and run transformations where necessary
• Get familiar with both sides of a streaming pipeline: production and consumption
• Interoperate Dataflow, BigQuery and Cloud Pub/Sub for real-time streaming and analysis",AR
Object Oriented Programming in Java,"Welcome to our course on Object Oriented Programming in Java using data visualization. People come to this course with many different goals -- and we are really excited to work with all of you! Some of you want to be professional software developers, others want to improve your programming skills to implement that cool personal project that you’ve been thinking about, while others of you might not yet know why you’re here and are trying to figure out what this course is all about.
This is an intermediate Java course. We recommend this course to learners who have previous experience in software development or a background in computer science.  Our goal is that by the end of this course each and every one of you feels empowered to create a Java program that’s more advanced than any you have created in the past and that is personally interesting to you. In achieving this goal you will also learn the fundamentals of Object Oriented Programming, how to leverage the power of existing libraries, how to build graphical user interfaces, and how to use some core algorithms for searching and sorting data. And this course is project-based, so we’ll dive right into the project immediately!
We are excited to be offering a unique course structure, designed to support learners of different backgrounds in succeeding at their own pace. The first module explains how this will work and if this course is right for you. We also recommend taking a few minutes to explore the course site. A good place to start is the navigation bar on the left. Click Course Content to see what material we’ll cover each week, as well preview the assignments you’ll need to complete to pass the course. Click Discussions to see forums where you can discuss the course material with fellow students taking the class. Be sure to introduce yourself to everyone in the Meet and Greet forum.
This course should take about 6 weeks to complete. You can check out the recommended course schedule below to see a quick overview of the lessons and assignments you’ll complete each week.
We’re excited you’re here learning with us. Let’s get started!","AL
DS
PL
PD
SDF
SE"
Data Structures and Performance,"How do Java programs deal with vast quantities of data? Many of the data structures and algorithms that work with introductory toy examples break when applications process real, large data sets.  Efficiency is critical, but how do we achieve it, and how do we even measure it?
This is an intermediate Java course. We recommend this course to learners who have previous experience in software development or a background in computer science, and in particular, we recommend that you have taken the first course in this specialization (which also requires some previous experience with Java).  
In this course, you will use and analyze data structures that are used in industry-level applications, such as linked lists, trees, and hashtables.  You will explain how these data structures make programs more efficient and flexible.  You will apply asymptotic Big-O analysis to describe the performance of algorithms and evaluate which strategy to use for efficient data retrieval, addition of new data, deletion of elements, and/or memory usage.
The program you will build throughout this course allows its user to manage, manipulate and reason about large sets of textual data.  This is an intermediate Java course, and we will build on your prior knowledge.  This course is designed around  the same video series as in our first course in this specialization, including explanations of core content, learner videos, student and engineer testimonials, and support videos -- to better allow you to choose your own path through the course!",SF
Advanced Data Structures in Java,"How does Google Maps plan the best route for getting around town given current traffic conditions?  How does an internet router forward packets of network traffic to minimize delay?  How does an aid group allocate resources to its affiliated local partners?
To solve such problems, we first represent the key pieces of data in a complex data structure. In this course, you’ll learn about data structures, like graphs, that are fundamental for working with structured real world data.  You will develop, implement, and analyze algorithms for working with this data to solve real world problems.   In addition, as the programs you develop in this course become more complex, we’ll examine what makes for good code and class hierarchy design so that you can not only write correct code, but also share it with other people and maintain it in the future.
The backbone project in this course will be a route planning application.  You will apply the concepts from each Module directly to building an application that allows an autonomous agent (or a human driver!) to navigate its environment.  And as usual we have our different video series to help tie the content back to its importance in the real world and to provide tiered levels of support to meet your personal needs.","AL
AR
SDF
SE"
Capstone: Analyzing (Social) Network Data,"In this capstone project we’ll combine  all of the skills from all four specialization courses to do something really fun: analyze social networks!  
The opportunities for learning are practically endless in a social network.  Who are the “influential” members of the network?  What are the sub-communities in the network?   Who is connected to whom, and by how many links?   These are just some of the questions you can explore in this project.
We will provide you with a real-world data set and some infrastructure for getting started, as well as some warm up tasks and basic project requirements, but then it’ll be up to you where you want to take the project.  If you’re running short on ideas, we’ll have several suggested directions that can help get your creativity and imagination going.  Finally, to integrate the skills you acquired in course 4 (and to show off your project!) you will be asked to create a video showcase of your final product.","NC
IAS"
Parallel Programming in Java,"This course teaches learners (industry professionals and students) the fundamental concepts of parallel programming in the context of Java 8. Parallel programming enables developers to use multicore computers to make their applications run faster by using multiple processors at the same time. By the end of this course, you will learn how to use popular parallel Java frameworks (such as ForkJoin, Stream, and Phaser) to write parallel programs for a wide range of multicore platforms including servers, desktops, or mobile devices, while also learning about their theoretical foundations including computation graphs, ideal parallelism, parallel speedup, Amdahl&#x27;s Law, data races, and determinism.
Why take this course?
•	All computers are multicore computers, so it is important for you to learn how to extend your knowledge of sequential Java programming to multicore parallelism.
•	Java 7 and Java 8 have introduced new frameworks for parallelism (ForkJoin, Stream) that have significantly changed the paradigms for parallel programming since the early days of Java.
•	Each of the four modules in the course includes an assigned mini-project that will provide you with the necessary hands-on experience to use the concepts learned in the course on your own, after the course ends.
•	During the course, you will have online access to the instructor and the mentors to get individualized answers to your questions posted on forums.
The desired learning outcomes of this course are as follows:
•	Theory of parallelism: computation graphs, work, span, ideal parallelism, parallel speedup, Amdahl&#x27;s Law, data races, and determinism
•	Task parallelism using Java’s ForkJoin framework
•	Functional parallelism using Java’s Future and Stream frameworks
•	Loop-level parallelism with extensions for barriers and iteration grouping (chunking)
•	Dataflow parallelism using the Phaser framework and data-driven tasks
Mastery of these concepts will enable you to immediately apply them in the context of multicore Java programs, and will also provide the foundation for mastering other parallel programming systems that you may encounter in the future  (e.g., C++11, OpenMP, .Net Task Parallel Library).",PD
Concurrent Programming in Java,"This course teaches learners (industry professionals and students) the fundamental concepts of concurrent programming in the context of Java 8.   Concurrent programming enables developers to efficiently and correctly mediate the use of shared resources in parallel programs.  By the end of this course, you will learn how to use basic concurrency constructs in Java such as threads, locks, critical sections, atomic variables, isolation, actors, optimistic concurrency and concurrent collections, as well as their theoretical foundations (e.g., progress guarantees, deadlock, livelock, starvation, linearizability).
Why take this course?
•	It is important for you to be aware of the theoretical foundations of concurrency to avoid common but subtle programming errors. 
•	Java 8 has modernized many of the concurrency constructs since the early days of threads and locks.
•	During the course, you will have online access to the instructor and mentors to get individualized answers to your questions posted on the forums.
•	Each of the four modules in the course includes an assigned mini-project that will provide you with the necessary hands-on experience to use the concepts learned in the course on your own, after the course ends.
The desired learning outcomes of this course are as follows:
•	Concurrency theory: progress guarantees, deadlock, livelock, starvation, linearizability
•	Use of threads and structured/unstructured locks in Java
•	Atomic variables and isolation
•	Optimistic concurrency and concurrent collections in Java (e.g., concurrent queues, concurrent  hashmaps)
•	Actor model in Java
Mastery of these concepts will enable you to immediately apply them in the context of concurrent Java programs, and will also help you master other concurrent programming system that you may encounter in the future  (e.g., POSIX threads, .NET threads).",PD
Distributed Programming in Java,"This course teaches learners (industry professionals and students) the fundamental concepts of Distributed Programming in the context of Java 8.  Distributed programming enables developers to use multiple nodes in a data center to increase throughput and/or reduce latency of selected applications.  By the end of this course, you will learn how to use popular distributed programming frameworks for Java programs, including Hadoop, Spark, Sockets, Remote Method Invocation (RMI), Multicast Sockets, Kafka, Message Passing Interface (MPI), as well as different approaches to combine distribution with multithreading.
Why take this course?
•	All data center servers are organized as collections of distributed servers, and it is important for you to also learn how to use multiple servers for increased bandwidth and reduced latency.
•	In addition to learning specific frameworks for distributed programming, this course will teach you how to integrate multicore and distributed parallelism in a unified approach.
•	Each of the four modules in the course includes an assigned mini-project that will provide you with the necessary hands-on experience to use the concepts learned in the course on your own, after the course ends.
•	During the course, you will have online access to the instructor and the mentors to get individualized answers to your questions posted on forums.
The desired learning outcomes of this course are as follows:
•	Distributed map-reduce programming in Java using the Hadoop and Spark frameworks
•	Client-server programming using Java&#x27;s Socket and Remote Method Invocation (RMI) interfaces
•	Message-passing programming in Java using the Message Passing Interface (MPI)
•	Approaches to combine distribution with multithreading, including processes and threads, distributed actors, and reactive programming
Mastery of these concepts will enable you to immediately apply them in the context of distributed Java programs, and will also provide the foundation for mastering other distributed programming frameworks that you may encounter in the future  (e.g., in Scala or C++).",DS
Introduction to Virtual Reality,"This course will introduce you to Virtual Reality (VR). The course will teach you everything from the basics of VR- the hardware and the history of VR- to different applications of VR, the psychology of Virtual Reality, and the challenges of the medium.
The course is designed for people who are new to VR as a medium. You may have experienced some virtual reality before, and may have some hardware- but this course is suitable to individuals who have never experienced VR and those who do not have much hardware- we will explain Mobile VR as well as devices such as the Oculus Rift and HTC Vive.
Introduction to Virtual Reality is the first course in the Virtual Reality Specialisation. A learner with no previous experience in Virtual Reality and/or game programming will be able to evaluate existing VR applications, and design, test, and implement their own VR experiences/games using Unity by the end of the specialisation.",HCI
3D Interaction Design in Virtual Reality,"This course will teach you about one of the most important aspects of VR, how you interact with a VR world. Virtual Reality is completely different from an on screen app or game. You are completely immersed in a VR world, so it doesn&#x27;t make sense to interact only through buttons or menus. You will get the most out of VR if you can interact with the world just as you would with the real world: with your natural body movements. You will learn about the basic concepts and technologies of VR Interaction. You will then get hands on, learning about how to move around in VR and how to interact with the objects in your world. The course will finish with some advice from experts on VR interaction design and you will do a project where you will get real experience of developing VR Interaction.",HCI
Building Interactive 3D Characters and Social VR,"Meeting another person is one of the most amazing experiences you can have in Virtual Reality. It is quite unlike communicating through any other medium except a real life face-to-face conversation. Because the other person is life size and shares a virtual space with you, body language works in a way that cannot be done on a flat screen. This course will enable you to create realistic social interactions in VR. 
You will learn about both the psychology of social interaction and the practical skills to implement it in Unity3D. We will take you through the basics of 3D character animation and how to create body language. You will learn about how to make characters that can respond to players’ speech and body language. You will also learn about avatars: the virtual representation of other players, and agents: computer controlled NPC characters and how to implement both of them. 
As many people have said before us, social is the future of VR. This course will help you become part of the future of Virtual Reality social experiences.",HCI
Making Your First Virtual Reality Game,"Virtual Reality is one of the most exciting experiences that technology can give us. The immersion and presence you can have in VR is quite unlike any other medium. Like many others, you are excited about the possibilities of this new medium and want to get started developing your own VR experiences. This course will take you through all of the steps you need to create a VR game or other project. 
This is the final course in our Specialisation: Virtual Reality. The previous courses teach you the skills you need to make a VR game. This course brings them all together to create a project of your own. 
We will guide you through all the steps of a VR project: coming up with an idea, storyboarding, prototyping, testing and implementation. By the end of this course you will have a complete VR project that demonstrates your skills and could be the first step in creating a professional game. 
We hope this course can be your entry into professional VR development. To help you get started, some good advice always helps. That is why we have interviewed VR experts from all over the world, ranging from technology pioneers with over 30 years experience in VR to the latest cutting edge VR creators. We have asked all of them to give you their advice and we hope it inspires you to become part of the future of VR.",HCI
Introduction to UI Design,"In this course, you will gain an understanding of the critical importance of user interface design. You will also learn industry-standard methods for how to approach the design of a user interface and key theories and frameworks that underlie the design of most interfaces you use today.
Through a series of case studies on commercial systems - many of which you likely use on a regular basis - we will illustrate the benefits of good design. We will also demonstrate how the costs of bad design can often be severe (in user experience, money, and even human lives).
You will then gain a high-level understanding of the user-interface design process. You will be introduced to common design scenarios - e.g. improving on existing designs and starting a new design from scratch - and the general design processes that tend to be used for each scenario.
Finally, we will begin introducing the large body of existing knowledge on design by providing overviews of core user interface design theories and concepts. This key foundational information will help you avoid “reinventing the wheel” when you are designing your interfaces in this specialization.",HCI
Prototyping and Design,"In this course you will learn how to design and prototype user interfaces to address the users and tasks identified in user research.  Through a series of lectures and exercises, you will learn and practice paper- and other low-fidelity prototyping techniques; you will learn and apply principles from graphic design, including design patterns; you will learn to write a design rationale; and you will learn how to design for specific populations and situations, including principles and practices of accessible design.",HCI
Evaluating User Interfaces,"In this course you will learn and practice several techniques for user interface evaluation.  First we start with techniques that can be applied alone or in a design team, including action analysis, walkthroughs, and heuristic evaluation.  Then we move on to user testing, including learning from a series of usability tests carried out in a real usability lab, and techniques to carry out your own tests even without a lab.  Finally, we wrap up the discussion of evaluation--and of UI Design in the specialization as a whole--by looking at the question of how to set and measure usability goals, and in turn, when a design is usable enough to release it.",HCI
UI Design Capstone,"This Capstone Course for the UI Design Specialization is a group design project in which you will combine and demonstrate the user research, design/prototyping, and evaluation skills you&#x27;ve learned by designing the solution to one of a set of selected projects.",HCI
Intermediate Object-Oriented Programming for Unity Games,"This course is the third course in the specialization about learning how to develop video games using the C# programming language and the Unity game engine on Windows or Mac. Why use C# and Unity instead of some other language and game engine? Well, C# is a really good language for learning how to program and then programming professionally. Also, the Unity game engine is very popular with indie game developers; Unity games were downloaded 16,000,000,000 times in 2016! Finally, C# is one of the programming languages you can use in the Unity environment.
This course assumes you have the prerequisite knowledge from the previous two courses in the specialization. You should make sure you have that knowledge, either by taking those previous courses or from personal experience, before tackling this course. The required prerequisite knowledge is listed in the &quot;Who this class is for&quot; section below. Throughout this course you&#x27;ll build on your foundational C# and Unity knowledge by developing more robust games with better object-oriented designs using file input and output, inheritance and polymorphism, and event handling.
This course gives you even more tools to help you build great games with C# and Unity!
Module 1: Start using files to implement your Unity games
Module 2: Learn how inheritance and polymorphism help us write less code for our games
Module 3: Implement event handling to make better object-oriented designs and add menus to your Unity games
Module 4: Explore the complete implementation of a small Unity game
Module 5: Complete final peer review",AR
Data Structures and Design Patterns for Game Developers,"This course is the fourth course in the specialization about learning how to develop video games using the C# programming language and the Unity game engine on Windows or Mac. Why use C# and Unity instead of some other language and game engine? Well, C# is a really good language for learning how to program and then programming professionally. Also, the Unity game engine is very popular with indie game developers; Unity games were downloaded 16,000,000,000 times in 2016! Finally, C# is one of the programming languages you can use in the Unity environment.
This course assumes you have the prerequisite knowledge from the previous three courses in the specialization. You should make sure you have that knowledge, either by taking those previous courses or from personal experience, before tackling this course. The required prerequisite knowledge is listed in the &quot;Who this class is for&quot; section below. Throughout this course you&#x27;ll build on your foundational C# and Unity knowledge by developing more robust games with better object-oriented designs using various data structures and design patterns.
Data structures and design patterns are both general programming and software architecture topics that span all software, not just games. Although we&#x27;ll discuss these ideas in the game domain, they also apply if you&#x27;re writing a web app in ASP.NET, building a tool using WinForms, or any other software you decide to build. 
Module 1: Explore a Dynamic Array data structure and learn the basics of algorithm analysis
Module 2: Learn about and use the common Linked List and Graph data structures
Module 3: Learn about and use several additional data structures: Stacks, Queues, and Trees
Module 4: Learn why design patterns are so useful and discover a number of design patterns useful in game development
Module 5: Complete final peer review","AL
DS"
C# Programming for Unity Game Development Capstone Project,"This is the final course in the C# Programming for Unity Game Development specialization. In this course, you&#x27;ll implement your own small game using C# and Unity from your initial idea to full implementation. You may already have an idea in mind, but if not, I&#x27;ll provide a number of suggested games for an 8-week course that assumes you&#x27;ve learned the material in the previous 4 courses in the specialization.
Your game won&#x27;t be commercial-quality; that would be unreasonable after learning about C# programming and Unity game development for a few months. It takes my UCCS students 4 years of courses and experience to get to the point where they can build a commercial-quality game in the senior capstone project. On the other hand, building your own game is the culmination of the material you&#x27;ve learned in the previous courses in the specialization.
That&#x27;s a great thing to do!
Module 1: Develop a planning document for your game
Module 2: Develop a prototype of your game
Module 3: Implement the menu and difficulty systems in your game
Module 4: Implement Iteration 1 of your game
Module 5: Implement Iteration 2 of your game
Module 6: Finish implementing your game for beta testing
Module 7: Conduct beta testing and modify your game as appropriate
Module 8: Complete final peer review",SP
Internet of Things V2: DragonBoard™ bring up and community ecosystem,"Do you want to develop skills to prototype embedded products using state-of-the-art technologies? In this course you will build a hardware and software development environment to guide your journey through the Internet of Things specialization courses. We will use the DragonBoard™ 410c single board computer (SBC). 
This is the first in a series of courses where you will learn both the theory and get the hands-on development practice needed to prototype Internet of Things products.  This course is suitable for a broad range of learners. 
 
This course is for you if:
- You want to learn how to use learn how to use Linux for embedded purposes.
- You want to pivot your career towards the design and development of Internet of Things enabled products
- You are an entrepreneur, innovator or member of a DIY community 
Learning Goals: 
After completing this course, you will be able to:
1) Know where you can find resources and help in the 96Boards ecosystem.
2) Describe the DragonBoard™ 410c peripherals, I/O expansion capabilities, Compute (CPU and Graphics) capabilities, and Connectivity capabilities.
3) Understand how to navigate and make use of the Linux terminal.
4) Configure at least one integrated development environment (IDE) for developing software.
5) Make use of Git and GitHub for version control purposes.
6) Create and build projects that interface with sensors and actuators through GPIO and Arduino.",AR
Internet of Things V2: Setting up and Using Cloud Services,"Have you wondered what exactly AWS is and why is it important?  Do you want to make informed design decisions about which services to use? Do you want to gain expertise to leverage the cloud for your own projects?
In this course, you will learn to interface with the AWS cloud. You will then develop software to send data to and receive data from the cloud. Along the way, you’ll learn how to structure your project with a variety of these difference services.
Learning Goals: 
After completing this course, you will be able to:
1) Understand what the cloud is and how it works.
2) Install and configure the AWS CLI and SDK on a Linux system.
3) Use various AWS services such as EC2, IoT, and many more.
4) Build projects that heavily leverage the cloud.
5) Integrate the cloud into embedded systems.",IAS
Internet of Things: Communication Technologies,"Have you wondered how “Things” talk to each other and the cloud? Do you understand the alternatives for conveying latency-sensitive real time data versus reliable signaling data? Building on the skills from the Sensing and Actuation course, we will explore protocols to exchange information between processors. 
In this course, you will learn how VoIP systems like Skype work and implement your own app for voice calls and text messages.  You will start by using the Session Initiation Protocol (SIP) for session management. Next, you will learn how voice codecs such as Adaptive Multi Rate (AMR) are used in 3G networks and use them for voice traffic in your app. 
Learning Goals: After completing this course, you will be able to:
1.	Implement session initiation, management and termination on your DragonBoard™ 410c using SIP.
2.	Discover other users and exchange device capabilities.
3.	Compare and contrast narrowband and wideband codecs and experience the voice quality differences between them.
4.	Implement and demonstrate VoIP calls using the DragonBoard 410c.",NC
Internet of Things: Multimedia Technologies,"Content is an eminent example of the features that contributed to the success of wireless Internet. Mobile platforms such as the Snapdragon™ processor have special hardware and software capabilities to make acquisition, processing and rendering of multimedia content efficient and cost-effective. 
In this course, you will learn the principles of video and audio codecs used for media content in iTunes, Google Play, YouTube, Netflix, etc.  You will learn the file formats and codec settings for optimizing quality and media bandwidth and apply them in developing a basic media player application. 
Learning Goals: After completing this course, you will be able to:
1.	Explain the tradeoffs between media quality and bandwidth for content delivery. 
2.	Extract and display metadata from media files.
3.	Implement and demonstrate a simple media player application using DragonBoard™ 410c.",AR
Internet of Things Capstone V2: Build a Mobile Surveillance System,"In the Capstone project for the Internet of Things specialization, you will design and build your own system that uses at least 2 sensors, at least 1 communication protocol and at least 1 actuator. You will have a chance to revisit and apply what you have learned in our courses to achieve a robust, practical and/or fun-filled project. 
We absolutely encourage you to design whatever you can think up!  This is your chance to be creative or to explore an idea that you have had.  But if you don’t have your own idea, we provide the description of a surveillance system, for you to build.  We will participate in the Capstone with you by building a surveillance system that features an off-grid solar powered workstation that will serve as a hub to multiple surveillance sensors. 
You will be able to demonstrate the knowledge and skills you have gained in this course through delivery of industry-appropriate documents such as System Design documents and Unit Test reports.  Additionally, you will be asked to describe and show case your project as a short video presentation – appropriate for demonstrating your knowledge and technical communication skills. 
Learning Goals: After completing this Capstone, you will be able to:
1.	Design systems using mobile platforms. You will gain experience in documenting and presenting designs.
2.	Develop systems that interface multiple sensors and actuators to the DragonBoard™ 410c system and develop the necessary software to create a fully functional system.
3.	Specify unit tests and system tests, run tests and prepare Test Reports as are commonly done by those working in this industry.
4.	Gain experience (and feedback!) in making technical presentations.",IAS
Design and Analyze Secure Networked Systems,"In this MOOC, we will learn the basic cyber security concepts, how to identify vulnerabilities/threat in a network system. We will apply CIA basic security services in the triage of recent cyberattack incidents, such as OPM data breach.   We will learn the risk management framework for analyzing the risks in a network system, and apply the basic security design principles to protect the data and secure computer systems. We will examine the trustworthiness of programs and data installed in our systems and show the proper way to verify their integrity and authenticity. We will apply principle of least privileges for controlling the shared access given to different groups of users and system processes. On Amazon Cloud instances, we will use GnuPG software to generate public/private key pair for signing/verifying documents and open source software, and for encrypting documents. We will learn how to publish software, the related signature and release key on  web server and publish public key to PGP key server for others to retrieve. We will learn Public Key Infrastructure (PKI) and  Linux utility to serve as a CA for an organization, learn how to sign certificate request for clients or servers in secure email and web applications.",SP
Basic Cryptography and Programming with Crypto API,"In this MOOC, we will learn the basic concepts and principles of crytography, apply basic cryptoanalysis to decrypt messages encrypted with mono-alphabetic substitution cipher, and discuss the strongest encryption technique of the one-time-pad and related quantum key distribution systems.  We will also learn the efficient symmetric key cryptography algorithms for encrypting data, discuss the DES and AES standards, study the criteria for selecting AES standard, present the block cipher operating modes and discuss how they can prevent and detect the block swapping attacks,  and examine how to defend against replay attacks. We will learn the Diffie-Hellman Symmetric Key Exchange Protocol to generate a symmetric key for two parties to communicate over insecure channel. We will learn  the modular arithmetic and the Euler Totient Theorem to appreciate the RSA Asymmetric Crypto Algorithm,  and use OpenSSL utility to realize the basic operations of RSA Crypto Algorithm. Armed with these knowledge, we learn how to use PHP  Crypto API to write secure programs for encrypting and decrypting documents  and for signing and verify documents. We then apply these techniques to enhance the registration process of a web site which ensures the account created is actually requested by the owner of the email account.",IS
Hacking and Patching,"In this MOOC, you will learn how to hack web apps with command injection vulnerabilities in a web site of your AWS Linux instance.   You will learn how to search valuable information on a typical Linux systems with LAMP services, and deposit and hide Trojans for future exploitation.  You will learn how to patch these web apps with input validation using regular expression. You will learn a security design pattern to avoid introducing injection vulnerabilities by input validation and replacing generic system calls with specific function calls.  You will learn how to hack web apps with SQL injection vulnerabilities and retrieve user profile information and passwords.  You will learn how to patch them with input validation and SQL parameter binding.  You will learn the hacking methodology, Nessus tool for scanning vulnerabilities, Kali Linux for penetration testing, and Metasploit Framework for gaining access to vulnerable Windows Systems, deploying keylogger, and perform Remote VNC server injection.  You will learn security in memory systems and virtual memory layout, and understand buffer overflow attacks and their defenses.  You will learn how to clone a Kali instance with AWS P2 GPU support and perform hashcat password cracking using dictionary attacks and known pattern mask attacks.",SP
Secure Networked System with Firewall and IDS,"In this MOOC, we will focus on learning how network systems are secured using firewalls and IDS.  This will include understanding the basic components of network security, constructing a dual-firewall DMZ, and defining security policies to implement and enforce these rules.  Building upon these lessons we will go in-depth on the popular Linux firewall.  Finally we will learn about Network IDS and Host IDS, including a deep dive into Snort.",SP
Smartphone Emerging Technologies,"Smartphones are one of the most influential devices that we use in our everyday lives. Smartphones consist of the most advanced hardware and software technologies that exist in the world, all combined together into a miraculous single easy-to-use portable system.
These lectures focus on the specifications, hardware modules, and OS (Operating System) iOS &amp; Android that enable smartphones to perform various features and functionalities. Since there are so many smartphone types, in the lectures, three smartphones were selected and compared. The lecture covers the specifications of the Samsung Galaxy S6 edge, LG G4, and the iPhone 6 plus, which are among the most popular recently released smartphones in the world!
With this new knowledge on Cellular Networks, Wi-Fi, Bluetooth, Platform, OS (Operating System), Chipsets, CPU (Central Processing Unit), GPU (Graphics Processing Unit), Display, Location &amp; Navigation system, and new Wireless Charging systems, you will be able to analyze, design, and plan new smartphones for the future.","NC
OS"
"Big Data, Cloud Computing, & CDN Emerging Technologies","You have most likely heard about Clouds and Big Data before, and already know how significantly important they are and will be in the future.
Cloud Computing enables us to easily use software as well as processing platforms and computing infrastructure (that are not equipped on our computers and smartphones) from any location through Internet services. Big Data provides us with new intelligence from massive data sets, which can help in situation/condition/status analysis and decision making. In addition, CDN is the best technology to provide information/contents to Internet users in the quickest and most efficient way. Therefore, the information/software/database/contents from Clouds and Big Data centers can be very effectively supported by CDNs. This is why these lectures are combined together in this course.","CN
DS
IAS
IM
SDF"
Internet Emerging Technologies,"Every information service is connected through the Internet. If your work is any bit related to information, there is no excuse, you have to know what the Internet is and how it works! The relation of information and the Internet is equivalent to the blood and blood vessels of our body, which we have been using and will be using every day of our lives.
This course will enlighten your understanding of what the Internet is and how it works. IP (Internet Protocol) IPv4 and IPv6 keep the Internet alive by enabling remote computers to communicate through various inter-connected networks through “inter-networking” technology, which is where the name “Internet” came from. TCP and UDP are used by the end devices (e.g., computers, smartphones, servers, clouds) that are communicating to connect applications/services across the Internet. The details of IPv4, IPv6, TCP, UDP, and Internet operations are covered in this course.","NC
IAS
IS"
Internet of Things & Augmented Reality Emerging Technologies,"What is the Internet of Things? What is augmented reality? This course deals with the new emerging technologies of IoT (Internet of Things) and AR (Augmented Reality).
IoT is a new emerging technology domain which will be used to connect all objects through the Internet for remote sensing and control. IoT uses a combination of WSN (Wireless Sensor Network), M2M (Machine to Machine), robotics, wireless networking, Internet technologies, and Smart Devices.
AR is the most effective technology in providing real-time and real-world view information to users, where advancements in Smart Devices are expected to trigger various new AR services.
Currently, IoT and AR technologies already exist and available services can be found. However, there is so much more to come in IoT and AR technologies, which is why it is so important to understand what can be provided through these technologies and how these technologies work.","CN
HCI"
Wireless Communication Emerging Technologies,"This course covers the services and specifications of the most popular wireless communication technologies used around the world. 
The most popular wireless communication technologies are mobile communication, WLAN (Wireless Local Area Network), and WPAN (Wireless Personal Area Network), which are all included in smartphones. Among WLAN types Wi-Fi is most popular, and among WPAN types Bluetooth is most popular. Therefore, the lectures in this course cover Wi-Fi and Bluetooth specifications.
In addition, the evolution of mobile communication technologies is explained starting from the 1st generation (1G) all the way to the most advanced 4th generation (4G) systems. In addition, further details on the state-of-the-art LTE (Long Term Evolution) and LTE-Advanced 4G mobile communication technologies are presented.","NC
SP"
An introduction to the game industry,"This course is a ""beginner course"" and is divided into three sections to meet the needs of beginners. Chapters 1-5 popularize knowledge and pave the way for beginners, chapters 6-7 further introduce students to understand the industry, and chapters 8-9 lead students to understand the industry development and product operation in China's game industry, step by step. In the second course, Game Planning and Design, the overall difficulty of knowledge will be upgraded, emphasis on practical operation, please be prepared.
More than half a century has passed since the birth of the game. However, many people still think that the games industry is immature, yet its rapid growth is remarkable. Game products with market potential are bringing forth new products in a variety of categories, beautiful and fashionable terminals, and the number of game players is surging. The game industry has gradually become a new growth point of creative economy in Europe, the United States, Japan, South Korea and other countries. This course includes the origin of games, game development history, game classification, game development and production process, world game industry overview and intellectual property protection, etc., laying a good foundation for training mature game industry marketing managers.",CN
Game planning and design,"This course provides a comprehensive and systematic introduction to the field of game planning from game positioning to content creation, from research and development training to operation methods, from project process to team building, laying a solid foundation for learners to enter the door of game design.
The course is compact, case - filled and easy to understand. The lecturer interprets the concept design, prototype design, rule design, plot design, level design and other contents in game development, taking into account specific level design practice and game editing tool use practice, trying to make the learners fully understand the principle of game design and master game design skills.",SP
Game development based on Unity engine,"Thanks to the Internet and the rapid growth of smartphones, mobile games such as Angry Birds and Temple Run have been hugely successful, making indie developers the first to make money. The development of 3D online games on mobile platforms has become a trend, with excellent works springing up. Clash of Clans (Clash of Clans) developed by Supercell Oy and Hearth Stone (Hearthstone) developed by Blizzard Entertainment are popular worldwide. Famous companies in the industry, such as NetEase, Tencent, Giant and Kaiying Network, have also shifted their game business focus to mobile platforms. A large number of new mobile game companies, such as Lilith and Yinhan Technology, have emerged in the market.
Unity engine is easy to use, versatile, cross-platform and other excellent features, has become the industry's most important development tool. The Unity game engine is now the development tool of choice for most indie developers and game studios around the world to quickly develop high-quality mobile games.
The Unity Game Programming Basics course focuses on developing mobile 3D games using the Unity engine. In tandem with the course, we designed MOOC HERO, a first-person 3D shooter for mobile platforms. The whole process is divided into three stages: the first stage introduces the physical system, the graphic system and the audio, which is used to build the domino scene; In the second stage, the terrain system of Unity is used to build the game scene, the domino model of the first stage is added to the game scene, adding players and enemy characters, using the animation system to control the player and enemy character animation playback, writing Unity script to realize the behavior of players and enemies and the game logic in the scene; In the third stage, the uGUI was used to design the interactive interface of the game, the particle system and the line renderer were used to achieve the effect of player shooting and scene flame, and the collection in the scene as well as the game victory and defeat screen were made. Finally, the project was deployed to the mobile platform.
In addition, network development, artificial intelligence, Shader (Shader) programming and other advanced functions of Unity engine will be studied in the second course of this special course about game programming.
In this course, you will understand the main features of The Unity engine and learn how to develop 3D games for mobile platforms using the Unity engine. You will be able to take a step forward in the game industry and indie game development.
","GV
AR
PL
SE"
Online Game Design and Development graduation project,"In recent years, with the continuous improvement of the performance of smart phones, smart phones can smoothly run games with exquisite picture quality and rich content, and the mobile game market has grown at an amazing speed. Famous game companies such as NetEase and Tencent have shifted their focus to the development and operation of mobile games. Mobile online games such as Onmyoji, Fantasy Westward Journey, CF CrossFire and Honor of Kings have long been ranked among the top of App Store charts. The success of games requires a deep understanding of the game industry, game planning, and game programming. The special course ""Online Game Design and Development"" also focuses on explaining the game industry, game planning and game programming, so that learners can master relevant knowledge points.
The network game design and development of graduation project refer to the entry requirements of netease game developers, netease game internal experts give constructive Suggestions, combined with the special course the game industry, game design, game development knowledge points, mobile phone games teaching requires learners to complete the project: longed for class heroes 3 design and development. The graduation project refers to the game functions and features of the current popular FPS games ""CF Crossfire Mobile Game"" and ""Overwatch"", and uses Unity engine, Photon network engine and PlayFab game background API to complete the development of ""MOOCC Hero 3"" game client. The graduation project described the big data analysis service provided by PlayFab, Segment and Amplitude middleware, analyzed the event data of MOOC3 and monitored the operation of the game. The graduation project described the key knowledge points of game numerical balance, used the numerical balance model to adjust the battle value of MOOC3 game to improve the game balance; Finally, it is recommended that learners deploy Photon server on Aliyun VIRTUAL machine and release MOOCC Hero 3 game to Android app market so that more players can experience your game.
Through the graduation project of ""Online Game Design and Development"", learners will have a deeper understanding of the knowledge points of the special course ""Online Game Design and Development"", which will lay a solid foundation for entering the game industry.

","GV
SDF
AR
DS
PL
SP
SE"
Swift: programar para iOS,"En este curso aprenderás todas las bases del lenguaje de programación Swift. Revisarás temas básicos, desde variables hasta el desarrollo de un par de aplicaciones.
Si eres un programador consolidado en Objective - C / iOS o eres un programador nuevo para la familia de dispositivos de Apple, ¡este curso es para ti! Repasarás temas muy básicos, como constantes y variables, revisarás los fundamentos del lenguaje y conceptos importantes, como opcionales, closures, funciones y muchos otros temas. Estarás trabajando con la versión 2.0 de Swift y aprenderás los cambios que han ocurrido y cómo aplicarlos en el desarrollo de una mejor aplicación móvil para iOS. 
¡Bienvenido al curso: Swift, programar para iOS!",AR
Interfaz de usuario en iOS,"En este curso podrás crear una interfaz gráfica para una aplicación móvil de iOS. Aplicarás el patrón de diseño Modelo-Vista-Controlador, el cual te permitirá crear aplicaciones fácilmente actualizables. Asimismo, emplearás los principales componentes gráficos que casi siempre aparecen en una interfaz y podrás identificar los principios básicos de diseño recomendados por Apple en la creación de aplicaciones exitosas. 
Hacia el final del curso te guiaremos para que puedas crear tu primera aplicación móvil completa, la cual será tu llave de entrada al mundo de las aplicaciones comerciales en iOS.
Para asegurar una experiencia exitosa en el estudio de este curso, es importante que tengas una experiencia previa en el lenguaje Swift y en el desarrollo de aplicaciones a través de Xcode.",HCI
Accediendo a la nube con iOS,"Las aplicaciones hoy en día, necesitan interactuar, comunicarse o utilizar otras aplicaciones. Al final del curso,  crearás una aplicación iOS con capacidad de conectarse a un servidor de datos, procesarlos, almacenarlos y visualizarlos.
Para la conexión usaremos servicios web del tipo RESTful. Los datos hoy día se encuentran en formato JSON y por tanto esa será la forma de procesarlos. En el almacenamiento usaremos &quot;core data&quot; que es un marco de trabajo en iOS que nos facilita la manipulación de datos y para visualizarlos usaremos tablas y colección de vistas.
Este curso es fundamental para la creación de aplicaciones empresariales que se comuniquen con servidores conectados a Internet y será muy importante para el desarrollo de tu proyecto final","NC
SP
DS"
Interactuando con el hardware del dispositivo iOS,"En este curso construirás aplicaciones que logren interactuar con el hardware del dispositivo, con el propósito de crear aplicaciones más interesantes, atractivas y útiles.
El hardware del dispositivo incluye aditamentos como bocinas, GPS, acelerómetro, cámara, etc., por lo que las aplicaciones pueden interactuar con este hardware para reproducir música, conocer la posición del dispositivo en el Globo Terráqueo, conocer la aceleración a la que está sujeto el dispositivo debido al movimiento que se realiza con él, o agregar fotografías del usuario a sus aplicaciones.",HCI
Desarrollo de Aplicaciones iOS - Proyecto Final,"Este proyecto te permitirá crear una aplicación para iOs que pueda ser adaptada para muchas situaciones en las que se requieren varios servicios (ejemplo: escuelas, ciudades, museos, parques de diversiones, etc.). También te permitirá desarrollar la habilidad de consultar otras fuentes, tan necesaria en la creación de software debido al constante cambio de las herramientas.
A lo largo del proyecto estarás trabajando con el software Swift, el cual estuviste aprendiendo a utilizar durante el desarrollo de los 4 cursos.
Esperamos te diviertas y te hayamos ayudado a convertirte en un desarrollador para iOs consolidado.",SP
Embedded Hardware and Operating Systems,"This course is intended for the Bachelor and Master&#x27;s students, who like practical programming and making IoTs applications!
In this course we will talk about two components of a cyber physical system, namely hardware and operating systems. 
After completing this course, you will have the knowledge of both hardware components and operating systems. You are able to plan and use embedded operating systems in resource-constraint devices for Internet-of-Things (cyber physical system) applications. In addition, you can use Cooja simulation for designing and simulating wireless sensor network applications.
We have 4 modules, each with a graded quiz in the end and finally we have one peer reviewed programming assignment
In case you have no experience with C programming, please check you a practical course like:
https://www.coursera.org/learn/arduino-platform. 
The course is actually quite fun at the end when you are playing around with Cooja simulation for IoTs applications. So you can create and simulate your own design for sensor network applications. A lot of features and examples of Contiki and Cooja can be explored via assignments. There are some optional assignments of wireless sensor network applications for students who want to explore more about embedded OS in IoTs applications.
    
- Marco Ramirez /University of Turku
- Igor Tcarenko/ University of Turku
- Nguyen Gia Tuan /University of Turku
Check out our whole curriculum: http://iot4health.utu.fi/",SP
Web Connectivity and Security in Embedded Systems,"Welcome to Web Connectivity and Security in Cyber Physical Systems!
In this course, we will explore several technologies that bring modern devices together, facilitating a network of connected things and making devices internet enabled. We will discuss rules, protocols, and standards for these devices to communicate with each other in the network. We will also go through security and privacy issues and challenges in cyber physical systems (CPS). We will explore measures and techniques for securing systems from different perspectives. Possible attack models are introduced and solutions to tackle such attacks are discussed. Moreover, some basic concepts related to privacy in cyber physical systems are presented.
The course comprises altogether five modules and is split up into two main sections. The first section contains three modules and centers on the problem of web connectivity in cyber physical systems. The second section consist of two modules focusing on security measures in such systems. Each module ends with a graded quiz, and there is a final peer reviewed exam at the end of the course covering the two main sections of the course. 
After completing this course, you will have the basic knowledge and capacity for designing the network architecture of your cyber physical system. This includes putting together different components, selecting suitable communication protocols, and utilizing these protocols in your system. You will also be able to define security requirements for your system and choose and implement a proper security and privacy technique to protect it.",IS
Development of Real-Time Systems,"This course is intended for the Master&#x27;s student and computer engineer who likes practical programming and problem solving!
After completing this course, you will have the knowledge to plan and set-up a real-time system both on paper and in practice.
The course centers around the problem of achieving timing correctness in embedded systems, which means to guarantee that the system reacts within the real-time requirements.
Examples of such systems include airbags, emergency breaks, avionics, and also multi-media systems like video playback and QoS in web servers.
The course teaches how to plan real-time systems in theory using established mathematical proofs and how to implement them in practice by using the most common scheduling methods.
We also learn and how to program the system in the C language using the FreeRTOS real-time kernel.
Finally we have a look at the future of real-time systems namely multi-core real-time systems!
This course focus on the learn-by-doing approach with many examples and real-world programming assignments.
We have 5 modules, each with a gentle graded quiz in the end and one peer reviewed programming assignment.
In case you have no experience with C programming, please check you a practical course like:
https://www.coursera.org/learn/arduino-platform
The course is actually quite fun!
-Simon Holmbacka / Åbo Akademi University
Check out our whole curriculum: https://research.it.abo.fi/",SF
"Algorithms, Part I","This course covers the essential information that every serious programmer needs to know about algorithms and data structures, with emphasis on applications and scientific performance analysis of Java implementations. Part I covers elementary data structures, sorting, and searching algorithms. Part II focuses on graph- and string-processing algorithms.","AL
AR
CN
DS
GV
HCI
IAS
IM
IS
NC
OS
PBD
PD
PL
SDF
SE
SF
SP"
Learn to Program: The Fundamentals,"Behind every mouse click and touch-screen tap, there is a computer program that makes things happen. This course introduces the fundamental building blocks of programming and teaches you how to write fun and useful programs using the Python language.","IM
IAS
PL
SDF
SE"
Introduction to Programming with MATLAB,"This course teaches computer programming to those with little to no previous experience. It uses the programming system and language called MATLAB to do so because it is easy to learn, versatile and very useful for engineers and other professionals. MATLAB is a special-purpose language that is an excellent choice for writing moderate-size programs that solve problems involving the manipulation of numbers. The design of the language makes it possible to write a powerful program in a few lines. The problems may be relatively complex, while the MATLAB programs that solve them are relatively simple: relative, that is, to the equivalent program written in a general-purpose language, such as C++ or Java. As a result, MATLAB is being used in a wide variety of domains from the natural sciences, through all disciplines of engineering, to finance, and beyond, and it is heavily used in industry. Hence, a solid background in MATLAB is an indispensable skill in today’s job market.
Nevertheless, this course is not a MATLAB tutorial. It is an introductory programming course that uses MATLAB to illustrate general concepts in computer science and programming. Students who successfully complete this course will become familiar with general concepts in computer science, gain an understanding of the general concepts of programming, and obtain a solid foundation in the use of MATLAB.
Students taking the course will get a MATLAB Online license free of charge for the duration of the course. The students are encouraged to consult the eBook that this course is based on. More information about these resources can be found on the Resources menu on the right.",PL
"Algorithms, Part II","This course covers the essential information that every serious programmer needs to know about algorithms and data structures, with emphasis on applications and scientific performance analysis of Java implementations. Part I covers elementary data structures, sorting, and searching algorithms. Part II focuses on graph- and string-processing algorithms.","AL
DS
AR
GV
IAS
IM
OS
PL
SDF
SF
SP"
Introduction to Logic,"This course is an introduction to Logic from a computational perspective. It shows how to encode information in the form of logical sentences; it shows how to reason with information in this form; and it provides an overview of logic technology and its applications - in mathematics, science, engineering, business, law, and so forth.",IS
"C++ For C Programmers, Part A",This course is for experienced C programmers who want to program in C++. The examples and exercises require a basic understanding of algorithms and object-oriented software.,"PL
SF"
Version Control with Git,"The Version Control with Git course provides  you with a solid, hands-on foundation for understanding the Git version control system.  Git is open source software originally created by Linus Torvalds. Git manages team files for large and small projects. This allows the team to continuously improve its product. It is used by most major technology companies, and is assumed knowledge for many modern programming and IT jobs.  It is a core component of DevOps, continuous delivery pipelines and cloud native computing. You could also use Git to manage the many continuously improving revisions of that book that you are writing. 
In this course, you will not learn everything there is to know about Git, but you will build a strong conceptual understanding of the technology, and afterward will be able to confidently dig deeper on any topic that interests you. This course assumes no previous knowledge of Git, but if you do have experience with it, you may find this course to be both useful and challenging. This is especially true if you currently &quot;know just enough Git to be dangerous&quot;. 
There are two paths in this course. Both rely heavily on hands-on labs. One path assumes that you have experience using a command line interface, and the other path uses the Sourcetree graphical client. If you are not experienced with a command line, we highly suggest that you go through the Sourcetree path. Eventually, you might want to go through both paths, so that you can decide which tool to use for specific tasks. Besides, repetition is good for learning :)
You can watch the videos and take the quizzes from your phone if you want, but the hands-on labs require you to have a Windows or Mac computer. If you use the command line path through the course, you can also use Linux. 
This course uses Bitbucket (bitbucket.org) as the hosted provider for remote Git repositories. Bitbucket is free for teams of up to 5 people, including private repositories. However, most of the knowledge that you gain in this course applies to Git itself, and you can apply this knowledge to other hosted Git providers (such as GitHub). 
This course tries to be as concise as possible. It will probably take you about 5-10 hours to go through one of the two paths, but your mileage may vary.",SE
IT Automation: It’s not that scary!,"This course is designed to give you an introduction to concepts related to the automatic management of infrastructure in the IT industry. Using tools like scripting languages, version control, configuration management systems, and monitoring solutions, this course will give you an introduction to automation in IT. It will have an emphasis on creating automation that’s both scalable and manageable. 
By the end of this course, you’ll be able to:
- cite the fundamentals of programming using the Ruby language.
- create basic automation scripts to perform system administration tasks.
- use regular expressions to extract meaning from raw text.
- manage code by using the version control system, Git.
- develop and understand the benefits of tests for the scripts and automation they create.
- deploy software using the Chef configuration management software and understand the principles of configuration management in the IT context.
- track the health of technology systems through monitoring and become familiar with common monitoring concepts and practices
Before taking this course, it&#x27;s advised (but not required) that you complete the earlier courses in this program. It’s helpful to be familiar with the following concepts:
- installation of software on a computer platform
- basic computer network terminology and concepts
- common system administrator tasks and responsibilities
This course has been designed to be completed completely in-browser. You don’t have to install any software on your computer. However, supplemental readings and instructions are provided, where appropriate, if you want to install the software and tools that we discuss in order to experiment on your own systems.
Except as otherwise noted, the contents on this site are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.",SP
Biology Meets Programming: Bioinformatics for Beginners,"Are you interested in learning how to program (in Python) within a scientific setting?
This course will cover algorithms for solving various biological problems along with a handful of programming challenges helping you implement these algorithms in Python.  It offers a gently-paced introduction to our Bioinformatics Specialization (https://www.coursera.org/specializations/bioinformatics), preparing learners to take the first course in the Specialization, &quot;Finding Hidden Messages in DNA&quot; (https://www.coursera.org/learn/dna-analysis).
Each of the four weeks in the course will consist of two required components.  First, an interactive textbook provides Python programming challenges that arise from real biological problems.  If you haven&#x27;t programmed in Python before, not to worry! We provide &quot;Just-in-Time&quot; exercises from the Codecademy Python track (https://www.codecademy.com/learn/python). And each page in our interactive textbook has its own discussion forum, where you can interact with other learners. Second, each week will culminate in a summary quiz.
Lecture videos are also provided that accompany the material, but these videos are optional.","AL
IS
PD
SDF"
System platform and C# program basis,"About ""system platform and C# program basics"" course:
As "".net platform software development technology ""special course for the first course, the course will from the introduction to computer knowledge, the first to introduce you to the computer basic knowledge and basic principle, including information representation and coding, system composition and working principle of the hardware and software, etc., and through the process of construction from the basic logic gates to arithmetic unit, To help you initially build bottom-up system construction thinking ability. This is a very important quality if you are going to work in systems design.
After the foundation is laid, this course will take you through a two-week walk through C# and show you how to design basic C# console applications. Including C# program language foundation, console input and output, basic program control structure. More importantly, this course will introduce you how to use Visual Studio integrated development environment to edit and debug C# programs through practical examples, which will lay a foundation for the rest of the course. Mastering good program debugging skills is a necessary skill for you to design software projects in the future.
If you are not familiar with some basic computer applications, please don't worry, this course is accompanied by a detailed instruction video on How to use OFFICE applications.
The course runs for four weeks, with weekly unit quizzes and assignments to help you understand how you are doing.",SP
C# advanced programming,"This course covers all the syntax of C# and how to write console programs in C#. The content covers arrays, methods, classes and objects. The course also covers object-oriented programming and learning how to build programs using classes and objects. .net architectures and simple data structures and algorithms will also be discussed briefly.","AL
IAS
DS
PL
SDF
SE"
Windows visual programming,"This course focuses on two aspects :(1) the syntax of C# and (2) object-oriented programming methods. The course uses a large number of examples to guide learners to master the content of the whole course from easy to difficult and from easy to deep. Programming experience in other languages is not required. Through this course, you will truly enter the world of programming.","PL
AR
AL
DS"
SQL Server database technology,"In the information society, it is the premise of scientific research and decision-making management to manage and utilize all kinds of information resources effectively. Database technology is an important technical means to effectively manage and utilize all kinds of information resources. Through this course, you will gain the basic knowledge of database technology, learn to manage data through SQL Server database management system, including database management system installation, database and data tables, insert data and maintain data, especially can use SQL Server according to various conditions of the required information query.",IM
Web development technology based on.net,"Web Development Techniques based on.NET is. NET environment for Web programming is an important course. The content includes Web principle and environment deployment, HTML foundation, CSS application, JavaScript foundation, ASP.NET technology; Focus on ASP.NET technology and related database application development, through examples to introduce the characteristics and applications of various technologies.
Through the study of this course, students can understand the development and status quo of Web application development technology, understand the Web principle, development process and environment deployment; Proficient in HTML language, CSS, JavaScript, grasp the characteristics of Web application development using ASP.NET; Master the use of various controls and ADO.NET related technology, master the use of data source controls and data binding controls; With the use of object-oriented thinking and ASP.NET related knowledge of the Web site requirements analysis, and then design and development ability. At the end of this course, students should be able to develop simple Web applications using ASP.NET.",SF
Net platform software development technology graduation project,"The graduation project will integrate the knowledge learned in 5 courses and design a project based on. Net platform for small software projects to verify whether you have it. Net application development basic capabilities.
Specific requirements of the project are as follows:
1. The system should include a client and a management terminal;
2. The client has the following functions:
① User login;
② User registration;
③ Ordering dishes;
④ Shopping cart function;
⑤ Order add, delete, change, check function;
3. The management terminal provides the following functions:
① User management;
② Order management (add, delete, change, check);
③ Dishes management (add, delete, change, check);
④ Statistical management (daily sales, monthly sales, user ordering details).
If you are able to complete a project independently in C# in a.net environment, you are already oriented. Net framework beginner programmer level.",SE
Python for Data Science,"This introduction to Python will kickstart your learning of Python for data science, as well as programming in general. This beginner-friendly Python course will take you from zero to programming in Python in a matter of hours.
Module 1 - Python Basics
•	
o	Your first program
o	Types
o	Expressions and Variables
o	String Operations
Module 2 - Python Data Structures
•	
o	Lists and Tuples
o	Sets
o	Dictionaries
Module 3 - Python Programming Fundamentals
o	Conditions and Branching
o	Loops
o	Functions
o	Objects and Classes
Module 4 - Working with Data in Python
o	Reading files with open
o	Writing files with open
o	Loading data with Pandas
o	Numpy 
finally, you will create a project to test your skills","AL
DS
SDF"
Data Analysis with Python,"Learn how to analyze data using Python. This course will take you from the basics of Python to exploring many different types of data. You will learn how to prepare data for analysis, perform simple statistical analyses, create meaningful data visualizations, predict future trends from data, and more!
Topics covered:
1) Importing Data sets
2) Cleaning the Data
3) Data frame manipulation
4) Summarizing the Data
5) Building machine learning Regression models
6) Building data pipelines
 Data Analysis with Python will be delivered through lecture, lab, and assignments. It includes following parts:
Data Analysis libraries: will learn to use Pandas, Numpy and Scipy libraries to work with a sample dataset. We will introduce you to pandas, an open-source library, and we will use it to load, manipulate, analyze, and visualize cool datasets. Then we will introduce you to another open-source library, scikit-learn, and we will use some of its machine learning algorithms to build smart models and make cool predictions.","AL
DS
PL
SDF"
Applied Data Science Capstone,"This capstone project course will give you a taste of what data scientists go through in real life when working with data. You will learn about why data cleaning and munging is an important part of data science and how it occupies more than 80% of a data scientist’s daily work. You will learn about location data and different location data providers, such as Foursquare. You will learn how to make RESTful API calls to the Foursquare API to retrieve data about venues in different neighborhoods around the world. You will also learn how to be creative in situations where data are not readily available by scraping web data and parsing HTML code. You will utilize python and pandas to manipulate data, which will help you help you refine your skills for analyzing data and creating interesting visuals. By the end of the first part of the course you would have compared different neighborhoods and shared your results. 
Data Scientists also need to be able to work with different kinds of machine learning techniques. In the second part of this course, you will build and apply a machine learning model using the geospatial data from the first part of the project as well as additional data sources, to investigate and attempt to predict neighborhood attributes using techniques like regression, decision trees, clustering, classification, etc.
Storytelling and presentation is a very important part of a Data Scientist’s job. By the end of course you would have shared Jupyter notebooks of your implementation and written a detailed report describing your findings. You will also perform peer review of other’s projects.","AL
DS
IS"
Data Processing Using Python,"This course (both Please click https://www.coursera.org/learn/python-data-processing for English version) for non-computer majors, start with Python basic grammar, From Python, how to fetch data locally and on the network, how to parse and represent data, to basic and advanced statistical analysis and visualization of data using The Python open source ecosystem SciPy, to designing a simple GUI interface to represent and process data.
The entire course is based on financial data and provides a more intuitive way to appreciate Python's simplicity, elegance, and robustness by building interesting examples. At the same time, it is discussed that Python has convenient and efficient data processing ability in humanities and social science fields such as literature, sociology and journalism as well as science and technology fields such as mathematics and biology in addition to business field, and it can be flexibly applied to various majors by analogy.
Recently (updated within the week of August 14, 2017), this course has been completely revised. The new version mainly changes in the following aspects:
1. Replace Python 2.x with Python 3.x;
2. Add Web crawler basic practice of Web page crawling and parsing, Web API and other content;
3. Others include adjusting the order of some courses and enriching the content of courses, especially the content of project practice.","SDF
PL
AR"
Database Management Essentials,"Database Management Essentials provides the foundation you need for a career in database development, data warehousing, or business intelligence, as well as for the entire Data Warehousing for Business Intelligence specialization. In this course, you will create relational databases, write SQL statements to extract information to satisfy business reporting requests, create entity relationship diagrams (ERDs) to design databases, and analyze table designs for excessive redundancy. As you develop these skills, you will use either Oracle or MySQL to execute SQL statements and a database diagramming tool such as the ER Assistant to create ERDs. We’ve designed this course to ensure a common foundation for specialization learners. Everyone taking the course can jump right in with writing SQL statements in Oracle or MySQL.",IM
The Unix Workbench,"Unix forms a foundation that is often very helpful for accomplishing other goals you might have for you and your computer, whether that goal is running a business, writing a book, curing disease, or creating the next great app. The means to these goals are sometimes carried out by writing software. Software can’t be mined out of the ground, nor can software seeds be planted in spring to harvest by autumn. Software isn’t produced in factories on an assembly line. Software is a hand-made, often bespoke good. If a software developer is an artisan, then Unix is their workbench. Unix provides an essential and simple set of tools in a distraction-free environment. Even if you’re not a software developer learning Unix can open you up to new methods of thinking and novel ways to scale your ideas. 
This course is intended for folks who are new to programming and new to Unix-like operating systems like macOS and Linux distributions like Ubuntu. Most of the technologies discussed in this course will be accessed via a command line interface. Command line interfaces can seem alien at first, so this course attempts to draw parallels between using the command line and actions that you would normally take while using your mouse and keyboard. You’ll also learn how to write little pieces of software in a programming language called Bash, which allows you to connect together the tools we’ll discuss. My hope is that by the end of this course you be able to use different Unix tools as if they’re interconnecting Lego bricks.","CN
AL
PL
SDF"
The Finite Element Method for Problems in Physics,"This course is an introduction to the finite element method as applicable to a range of problems in physics and engineering sciences. The treatment is mathematical, but only for the purpose of clarifying the formulation. The emphasis is on coding up the formulations in a modern, open-source environment that can be expanded to other applications, subsequently.
The course includes about 45 hours of lectures covering the material I normally teach in an
introductory graduate class at University of Michigan. The treatment is mathematical, which is
natural for a topic whose roots lie deep in functional analysis and variational calculus. It is not
formal, however, because the main goal of these lectures is to turn the viewer into a
competent developer of finite element code. We do spend time in rudimentary functional
analysis, and variational calculus, but this is only to highlight the mathematical basis for the
methods, which in turn explains why they work so well. Much of the success of the Finite
Element Method as a computational framework lies in the rigor of its mathematical
foundation, and this needs to be appreciated, even if only in the elementary manner
presented here. A background in PDEs and, more importantly, linear algebra, is assumed,
although the viewer will find that we develop all the relevant ideas that are needed.
The development itself focuses on the classical forms of partial differential equations (PDEs):
elliptic, parabolic and hyperbolic. At each stage, however, we make numerous connections to
the physical phenomena represented by the PDEs. For clarity we begin with elliptic PDEs in
one dimension (linearized elasticity, steady state heat conduction and mass diffusion). We
then move on to three dimensional elliptic PDEs in scalar unknowns (heat conduction and
mass diffusion), before ending the treatment of elliptic PDEs with three dimensional problems
in vector unknowns (linearized elasticity). Parabolic PDEs in three dimensions come next
(unsteady heat conduction and mass diffusion), and the lectures end with hyperbolic PDEs in
three dimensions (linear elastodynamics). Interspersed among the lectures are responses to
questions that arose from a small group of graduate students and post-doctoral scholars who
followed the lectures live. At suitable points in the lectures, we interrupt the mathematical
development to lay out the code framework, which is entirely open source, and C++ based.
Books:
There are many books on finite element methods. This class does not have a required
textbook. However, we do recommend the following books for more detailed and broader
treatments than can be provided in any form of class:
The Finite Element Method: Linear Static and Dynamic Finite Element Analysis, T.J.R.
Hughes, Dover Publications, 2000.
The Finite Element Method: Its Basis and Fundamentals, O.C. Zienkiewicz, R.L. Taylor and
J.Z. Zhu, Butterworth-Heinemann, 2005.
A First Course in Finite Elements, J. Fish and T. Belytschko, Wiley, 2007.
Resources:
You can download the deal.ii library at dealii.org. The lectures include coding tutorials where
we list other resources that you can use if you are unable to install deal.ii on your own
computer. You will need cmake to run deal.ii. It is available at cmake.org.",PD
An Introduction to Practical Deep Learning,"This course provides an introduction to Deep Learning, a field that aims to harness the enormous amounts of data that we are surrounded by with artificial neural networks, allowing for the development of self-driving cars, speech interfaces, genomic sequence analysis and algorithmic trading. 
You will explore important concepts in Deep Learning, train deep networks using Intel Nervana Neon, apply Deep Learning to various applications and explore new and emerging Deep Learning topics.","IS
IAS
AR
GV"
Image and Video Processing: From Mars to Hollywood with a Stop at the Hospital,"In this course, you will learn the science behind how digital images and video are made, altered, stored, and used. We will look at the vast world of digital imaging, from how computers and digital cameras form images to how digital special effects are used in Hollywood movies to how the Mars Rover was able to send photographs across millions of miles of space.
 
The course starts by looking at how the human visual system works and then teaches you about the engineering, mathematics, and computer science that makes digital images work. You will learn the basic algorithms used for adjusting images, explore JPEG and MPEG standards for encoding and compressing video images, and go on to learn about image segmentation, noise removal and filtering. Finally, we will end with image processing techniques used in medicine.
 
This course consists of 7 basic modules and 2 bonus (non-graded) modules. There are optional MATLAB exercises; learners will have access to MATLAB Online for the course duration. Each module is independent, so you can follow your interests.",IM
Data Processing Using Python,"This course (The English copy of &quot;用Python玩转数据&quot; &lt;https://www.coursera.org/learn/hipython/home/welcome&gt;)  is mainly for non-computer majors. It starts with the basic syntax of Python, to how to acquire data in Python locally and from network, to how to present data, then to how to conduct basic and advanced statistic analysis and visualization of data, and finally to how to design a simple GUI to present and process data, advancing level by level. 
This course, as a whole, based on Finance data and through establishment of popular cases one after another, enables learners to more vividly feel the simplicity, elegance and robustness of Python. Also, it discusses the fast, convenient and efficient data processing capacity of Python in humanities and social sciences fields like literature, sociology and journalism and science and engineering fields like mathematics and biology, in addition to business fields. Similarly, it may also be flexibly applied into other fields.
The course has been updated. Updates in the new version are : 
1) the whole course has moved from Python 2.x to Python 3.x 
2) Added manual webpage fetching and parsing. Web API is also added. 
3) Improve the content order and enrich details of some content especially for some practice projects.","NC
SDF
IS"
Operating Systems,"Operating System Principle is a professional basic course for the junior undergraduate students of computer science and technology major. This course focuses on the cultivation of the students view of system, through focus on the operating system's internal structure, working principle and the realization of the typical technology, causes the student to set up for the understanding of the operating system as a whole and each function module, system to master the computer professional knowledge, to further improve the students' ability of software development and system software development capabilities.
Any computer must load the corresponding operating system after, can constitute a functioning, complete computer system. Whether the function of the operating system is strong or not determines the comprehensive ability of the computer system. The performance of the operating system determines the performance of the whole computer system. The safety and reliability of the operating system determines the safety and reliability of the entire computer system. Operating system is the core and basic operating platform of software technology. Therefore, students majoring in computer science and technology need to learn and master the basic principles and professional knowledge of operating system.
The teaching objectives of this course are:
1. Master the basic concept, function composition, system structure and operating environment of the operating system;
2. Familiar with operating system working principle, design method and implementation technology, understand representative and typical operating system examples (such as UNIX, Linux and Windows);
3. Understand the evolution process, development and research trends, new technologies and new ideas of operating system, which will lay a good foundation for the subsequent study of relevant courses and the foundation for the subsequent career development.",OS
Build a Modern Computer from First Principles: Nand to Tetris Part II (project-centered course),"In this project-centered course you will build a modern software hierarchy, designed to enable the translation and execution of object-based, high-level languages on a bare-bone computer hardware platform. In particular, you will implement a virtual machine and a compiler for a simple, Java-like programming language, and you will develop a basic operating system that closes gaps between the high-level language and the underlying hardware platform. In the process, you will gain a deep, hands-on understanding of numerous topics in applied computer science, e.g. stack processing, parsing, code generation, and classical algorithms and data structures for memory management, vector graphics, input-output handling, and various other topics that lie at the very core of every modern computer system.
This is a self-contained course: all the knowledge necessary to succeed in the course and build the various systems will be given as part of the learning experience. The only prerequisite is knowledge of programming at the level acquired in introduction to computer science courses. All the software tools and materials that are necessary to complete the course will be supplied freely after you enrol in the course.
This course is accompanied by the textbook &quot;The Elements of Computing Systems&quot; (Nisan and Schocken, MIT Press). While not required for taking the course, the book provides a convenient coverage of all the course topics. The book is available in either hardcopy or ebook form, and MIT Press is offering a 30% discount off the cover price by using the discount code MNTT30 at https://mitpress.mit.edu/books/elements-computing-systems. 
The course consists of six modules, each comprising a series of video lectures, and a project. You will need about 2-3 hours to watch each module&#x27;s lectures, and about 15 hours to complete each one of the six projects. The course can be completed in six weeks, but you are welcome to take it at your own pace. You can watch a TED talk about this course by Googling &quot;nand2tetris TED talk&quot;. 
*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share.",PD
Interactive Computer Graphics,"Computer graphics can be a powerful tool for supporting visual problem solving, and interactivity plays a central role in harnessing the users&#x27; creativity. This course will introduce various interactive tools developed in computer graphics research field with their design rationales and algorithms. Examples include enhancements to graphical user interfaces, authoring tools for 2D drawings and 3D animations, and interactive computer-aided design systems. Rich live demonstrations and course assignments will give you insights and skills to design and implement such tools for your own problems.",GV
Cluster Analysis in Data Mining,"Discover the basic concepts of cluster analysis, and then study a set of typical clustering methodologies, algorithms, and applications. This includes partitioning methods such as k-means, hierarchical methods such as BIRCH, and density-based methods such as DBSCAN/OPTICS. Moreover, learn methods for clustering validation and evaluation of clustering quality. Finally, see examples of cluster analysis in applications.","IS
AL
CN"
Java programming,"The main objectives of ""Java Programming"" course are three: first, to master the syntax of Java language, to have a deeper understanding of the Java language mechanism, and to master the object-oriented characteristics of Java language. Two, master the basic API in JavaSE, master the application in collection, thread, input and output, graphical user interface, network, etc. 3. Be able to write applications of a certain scale, develop good programming habits, and be able to improve the quality of code by means of refactoring, design patterns, and unit testing.
This course requires some basic knowledge of programming, such as C or C++.","AL
DS
PD
SP
PL
SDF
AR
NC
SE"
Data Manipulation at Scale: Systems and Algorithms,"Data analysis has replaced data acquisition as the bottleneck to evidence-based decision making --- we are drowning in it.  Extracting knowledge from large, heterogeneous, and noisy datasets requires not only powerful computing resources, but the programming abstractions to use them effectively.  The abstractions that emerged in the last decade blend ideas from parallel databases, distributed systems, and programming languages to create a new class of scalable data analytics platforms that form the foundation for data science at realistic scales.
In this course, you will learn the landscape of relevant systems, the principles on which they rely, their tradeoffs, and how to evaluate their utility against your requirements. You will learn how practical systems were derived from the frontier of research in computer science and what systems are coming on the horizon.   Cloud computing, SQL and NoSQL databases, MapReduce and the ecosystem it spawned, Spark and its contemporaries, and specialized systems for graphs and arrays will be covered.
You will also learn the history and context of data science, the skills, challenges, and methodologies the term implies, and how to structure a data science project.  At the end of this course, you will be able to:
Learning Goals: 
1. Describe common patterns, challenges, and approaches associated with data science projects, and what makes them different from projects in related fields.
2. Identify and use the programming models associated with scalable data manipulation, including relational algebra, mapreduce, and other data flow models.
3. Use database technology adapted for large-scale analytics, including the concepts driving parallel databases, parallel query processing, and in-database analytics
4. Evaluate key-value stores and NoSQL systems, describe their tradeoffs with comparable systems, the details of important examples in the space, and future trends.
5. “Think” in MapReduce to effectively write algorithms for systems including Hadoop and Spark.  You will understand their limitations, design details, their relationship to databases, and their associated ecosystem of algorithms, extensions, and languages.
write programs in Spark
6. Describe the landscape of specialized Big Data systems for graphs, arrays, and streams",PD
Software Defined Networking,"In this course, you will learn about software defined networking and how it is changing the way communications networks are managed, maintained, and secured.","NC
SE
SDF"
"Programming Languages, Part B","[As described below, this is Part B of a 3-part course.  Participants should complete Part A first -- Part B &quot;dives right in&quot; and refers often to material from Part A.]
This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.
This course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.
The course assumes some prior experience with programming, as described in more detail in the first module of Part A.  Part B assumes successful completion of Part A.
The course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  
Week 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.",PL
Audio Signal Processing for Music Applications,"In this course you will learn about audio signal processing methodologies that are specific for music and of use in real applications. We focus on the spectral processing techniques of relevance for the description and transformation of sounds, developing the basic theoretical and practical knowledge with which to analyze, synthesize, transform and describe audio signals in the context of music applications.
The course is based on open software and content. The demonstrations and programming exercises are done using Python under Ubuntu, and the references and materials for the course come from open online repositories. We are also distributing with open licenses the software and materials developed for the course.",SP
Advanced Modeling for Discrete Optimization,"Optimization is a common form of decision making, and is ubiquitous in our society. Its applications range from solving Sudoku puzzles to arranging seating in a wedding banquet.  The same technology can schedule planes and their crews, coordinate the production of steel, and organize the transportation of iron ore from the mines to the ports. Good decisions in manpower and material resources management also allow corporations to improve profit by millions of dollars.  Similar problems also underpin much of our daily lives and are part of determining daily delivery routes for packages, making school timetables, and delivering power to our homes. Despite their fundamental importance, all of these problems are a nightmare to solve using traditional undergraduate computer science methods.
This course is intended for students who have completed Basic Modelling for Discrete Optimization. In this course you will learn much more about solving challenging discrete optimization problems by stating the problem in a state-of-the-art high level modeling language, and letting library constraint solving software do the rest.  This course will focus on debugging and improving models, encapsulating parts of models in predicates, and tackling advanced scheduling and packing problems. As you master this advanced technology, you will be able to tackle problems that were inconceivable to solve previously.
Watch the course promotional video here: https://www.youtube.com/watch?v=hc3cBvtrem0&amp;t=8s",IS
C++ programming,"This course will teach you the concepts and syntax of C++ programming, enabling you to write maintainable, scalable, and large-scale programs using an object-oriented approach to C++ programming. We recommend that you become familiar with C and basic programming before starting this course. This course will take you to master the C++ language classes, objects, operator overloading, inheritance, polymorphism and other object-oriented programming methods, as well as templates, standard template library STL and other generic programming mechanisms, experience and understand the advantages of object-oriented programming methods and generic programming methods.","AR
PD
PL
SDF
SP"
"Fundamentals of computer systems (I) : representation, transformation, and linking of programs","This course mainly introduces how data types and their operations, statements and procedure calls are implemented in computer systems. There are three main topics :(1) presentation. Representation and storage of data of different data types (such as signed integer, unsigned integer, floating point number, array, structure, etc.) in registers or memory; The format and encoding of instructions and their storage in memory; A representation of a storage address (pointer). (2) Conversion. The correspondence between procedures (function calls), loops, selections, etc. in high-level language programs and machine-level code. (3) Links. How multiple relocatable object files are linked to generate executable object files and loaded into the system.
",AR
"C++ For C Programmers, Part B",This course is for experienced C programmers who want to program in C++. The examples and exercises require a basic understanding of algorithms and object-oriented software.,"PL
AR
IM
SF"
"Programming Languages, Part C","[As described below, this is Part C of a 3-part course.  Participants should complete Parts A and B first -- Part C &quot;dives right in&quot; and refers often to material from Part A and Part B.]
This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.
This course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.
The course assumes some prior experience with programming, as described in more detail in the first module of Part A.  Part B assumes successful completion of Part A.
The course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  
Week 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.",PL
Pattern Discovery in Data Mining,"Learn the general concepts of data mining along with basic methodologies and applications. Then dive into one subfield in data mining: pattern discovery. Learn in-depth concepts, methods, and applications of pattern discovery in data mining. We will also introduce methods for data-driven phrase mining and some interesting applications of pattern discovery. This course provides you the opportunity to learn skills and content to practice and engage in scalable pattern discovery methods on massive transactional data, discuss pattern evaluation measures, and study methods for mining diverse kinds of patterns, sequential patterns, and sub-graph patterns.",IS
Introduction to Computing and C language fundamentals,"Have you ever wondered why a computer can calculate? How does a computer program work? Have you ever wondered: what are the possible future trends of computing? How is the program written? How to learn a programming language? What are the basic components of a programming language? This course, Introduction to Computing, will help you solve these puzzles.
By the end of this course, you will be able to explain the basic operation of computers and programs and their characteristics, and tell your friends about the history and development trend of computers. At the same time, you will be fully ""warmed up"" to ""computer programming language""!",SF
Business Management Programming in Python (part 2),"Continuing with business Programming in Python (PART 1), this course will continue to explore many of the core concepts of the Python language, including functions, strings, common data structures, file reading and writing, exception handling, and more. Finally, an example of financial data analysis is summarized. By the end of this course, you will have a better understanding of Python and be able to actually handle some simple data analysis problems in Python.","PD
PL
SDF"
Basic Modeling for Discrete Optimization,"Optimization is a common form of decision making, and is ubiquitous in our society. Its applications range from solving Sudoku puzzles to arranging seating in a wedding banquet.  The same technology can schedule planes and their crews, coordinate the production of steel, and organize the transportation of iron ore from the mines to the ports. Good decisions in manpower and material resources management also allow corporations to improve profit by millions of dollars.  Similar problems also underpin much of our daily lives and are part of determining daily delivery routes for packages, making school timetables, and delivering power to our homes. Despite their fundamental importance, all of these problems are a nightmare to solve using traditional undergraduate computer science methods.
This course is intended for students interested in tackling all facets of optimization applications. You will learn an entirely new way to think about solving these challenging problems by stating the problem in a state-of-the-art high level modeling language, and letting library constraint solving software do the rest. This will allow you to unlock the power of industrial solving technologies, which have been perfected over decades by hundreds of PhD researchers.  With access to this advanced technology, problems that are considered inconceivable to solve before will suddenly become easy.
Watch the course promotional video here: https://www.youtube.com/watch?v=hc3cBvtrem0&amp;t=8s",IS
Business Management Programming in Python (Part 1),"Starting from scratch, this course teaches Python, which is considered the most suitable programming language for beginners. The goal of this course is to enable students to learn the basic concepts of programming and computational thinking and to write independent programs that can solve computational problems. This course and the general program design course is the most different places, is that it is a problem in the field of business operation as the guide, so the course not only contains the prime factors decomposition, red ball white balls permutation and combination, triangle inequality, perpetual calendar, such as digital sorting examples of traditional programming courses and homework, but includes production, logistics, stock, investment, pricing and other issues, During the course of learning programming, students can also experience the application of programming and information technology in business management.
This course series is divided into three courses. As the first course, this course will introduce basic concepts of programming, basic Syntax of Python, selection, loops, lists, and conclude with some simple algorithms in the field of job management.","AL
PL
SDF"
Hands-on Text Mining and Analytics,"This course provides an unique opportunity for you to learn key components of text mining and analytics aided by the real world datasets and the text mining toolkit written in Java. Hands-on experience in core text mining techniques including text preprocessing, sentiment analysis, and topic modeling help learners be trained to be a competent data scientists. 
Empowered by bringing lecture notes together with lab sessions based on the y-TextMiner toolkit developed for the class, learners will be able to develop interesting text mining applications.",IS
Open Source tools for Data Science,"What are some of the most popular data science tools, how do you use them, and what are their features? In this course, you&#x27;ll learn about Jupyter Notebooks, RStudio IDE, Apache Zeppelin and Data Science Experience. You will learn about what each tool is used for, what programming languages they can execute, their features and limitations. With the tools hosted in the cloud on Cognitive Class Labs, you will be able to test each tool and follow instructions to run simple code in Python, R or Scala. To end the course, you will create a final project with a Jupyter Notebook on IBM Data Science Experience and demonstrate your proficiency preparing a notebook, writing Markdown, and sharing your work with your peers.",DS
 FPGA computing systems: Background knowledge and introductory materials,"This course is for anyone passionate in learning how a hardware component can be adapted at runtime to better respond to users/environment needs. This adaptation can be provided by the designers, or it can be an embedded characteristic of the system itself. These runtime adaptable systems will be implemented by using FPGA technologies.
Within this course we are going to provide a basic understanding on how the FPGAs are working and of the rationale behind the choice of them to implement a desired system.
This course aims to teach everyone the basics of FPGA-based reconfigurable computing systems. We cover the basics of how to decide whether or not to use an FPGA and, if this technology will be proven to be the right choice, how to program it.
This is an introductory course meant to guide you through the FPGA world to make you more conscious on the reasons why you may be willing to work with them and in trying to provide you the sense of the work you have to do to be able to gain the advantages you are looking for by using these technologies.
The course has no prerequisites and avoids all but the simplest mathematics and it presents technical topics by using analogizes to help also a student without a technical background to get at least a basic understanding on how an FPGA works.
One of the main objectives of this course is to try to democratize the understanding and the access to FPGAs technologies. FPGAs are a terrific example of a powerful technologies that can be used in different domains. Being able to bring this technologies to domain experts and showing them how they can improve their research because of FPGAs, can be seen as the ultimate objective of this course. Once a student completes this course, they will be ready to take more advanced FPGA courses.",AR
Fundamentals of Parallelism on Intel Architecture,"This course will introduce you to the multiple forms of parallelism found in modern Intel architecture processors and teach you the programming frameworks for handling this parallelism in applications.  You will get access to a cluster of modern manycore processors (Intel Xeon Phi architecture) for experiments with graded programming exercises.
This course can apply to various HPC and datacenter workloads and framework including artificial intelligence (AI). You will learn how to handle data parallelism with vector instructions, task parallelism in shared memory with threads, parallelism in distributed memory with message passing, and memory architecture parallelism with optimized data containers. This knowledge will help you to accelerate computational applications by orders of magnitude, all the while keeping your code portable and future-proof.
Prerequisite: programming in C/C++ or Fortran in the Linux environment and Linux shell proficiency (navigation, file copying, editing files in text-based editors, compilation).","PD
SDF
PL
SE"
Principles of Game Design,"You have a great idea for a game. Turning that idea into a reality isn&#x27;t just about knowing the tools. In this course you will practice moving from game concept through design documentation, prototyping and testing. Numerous elements go into the overall process of game design. These range from topics such as idea generation, story, character, and game world development, game mechanics and level design, and user experience design. You will explore the process for designing meaningful experiences for your players. At the end of the course learners will have produced a game&#x27;s high concept document, one page blueprint, a physical prototype, pitch and supporting design documentation to move from an idea in your head to a fleshed out design, ready for implementation.",AR
"Business Intelligence Concepts, Tools, and Applications","This is the fourth course in the Data Warehouse for Business Intelligence specialization. Ideally, the courses should be taken in sequence.  In this course, you will gain the knowledge and skills for using data warehouses for business intelligence purposes and for working as a business intelligence developer. You’ll have the opportunity to work with large data sets in a data warehouse environment and will learn the use of MicroStrategy&#x27;s Online Analytical Processing (OLAP) and Visualization capabilities to create visualizations and dashboards. 
The course gives an overview of how business intelligence technologies can support decision making across any number of business sectors. These technologies have had a profound impact on corporate strategy, performance, and competitiveness and broadly encompass  decision support systems, business intelligence systems, and visual analytics. Modules are organized around the business intelligence concepts, tools, and applications, and the use of data warehouse for business reporting and online analytical processing, for creating visualizations and dashboards, and for business performance management and descriptive analytics.",IS
Web Application Development with JavaScript and MongoDB,"In this course, you will develop more advanced web application programming skills. You will learn how to control data read and write access using methods, publish and subscribe. You will learn how to access your database and server shells using command line tools. You will use the SimpleSchema system to validate data and generate input forms automatically. You will see a complete collaborative code editing environment, TextCircle, being built from scratch. 
At the end of this course, you will be able to:
- use Meteor methods to control data write access
- use publish and subscribe to control data read access
- install and use advanced Meteor packages
- add user accounts to your applications
- implement complex MongoDB filters
- use the MongoDB and meteor server shells
- define data validations schemas using SimpleSchema
- generate data input forms automatically using SimpleSchema
In this course, you will complete:
2 programming assignments taking ~4 hours each to complete
4 quizzes, each taking ~20 minutes to complete
multiple practice quizzes, each taking ~5 minutes to complete
Participation in or completion of this online course will not confer academic credit for University of London programmes",SP
C Advanced programming,"If studied the introduction to computing and the C language foundation, you have entered the palace of the C language, then ""advanced C program design"" will help you to the next level, understanding "", ""the basic idea of structured programming, master the basic techniques of"" C programming "", to develop good programming habits and style of programming, Write ""truly living computer programs."" On completion of this course, you will be able to explain the basic concepts and knowledge of the C programming language and use C to write computer programs to solve practical problems in life and work.","PD
PL
SDF"
Relational Database Support for Data Warehouses,"Relational Database Support for Data Warehouses is the third course in the Data Warehousing for Business Intelligence specialization. In this course, you&#x27;ll use analytical elements of SQL for answering business intelligence questions. You&#x27;ll learn features of relational database management systems for managing summary data commonly used in business intelligence reporting. Because of the importance and difficulty of managing implementations of data warehouses, we&#x27;ll also delve into storage architectures, scalable parallel processing, data governance, and big data impacts.",IS
Computer programming,"(About the course)
This course will introduce computer programming in C. We will cover basic operations about computer, then move on to how to write computer program in a language called C. Various C concepts will be introduced.
(Course format)
We will have video lecture to introduce the concept of programming. The video will switch between the presentation slides and the actual coding process. After that we will have weekly programming homework to ensure that the students are able to practice what they learned from the video presentation. The students will practice on ideone.com, a web platform for compiling and running computer programs.
(Recommended background)
No special prior computer knowledge is required. However, the students are expected to be able to use a web browser, has basic English vocabulary, and arithmetic skills of junior high school graduates.","PL
SE"
Computer operating system,"Ever since the first computer was unveiled in 1946, scientists and engineers have been working to make computers work better for humans, leading to generations of operating systems. The operating system is the soul of the computer system. It manages the resources of the computer system and provides friendly man-machine interaction. For every computer user, it is very important to recognize and understand the operating system.
Nanjing University is the earliest operating system research and development and teaching unit in China. In 1980, it first published operating system teaching materials in China, and the teaching materials have been updated to the fifth edition in 2014.
This course is organized into six parts: overview of computer operating system, processor management, storage management, device management, file management, concurrent programming. Learners can understand the basic concepts and implementation principles of the operating system, and deeply understand the design methods and implementation technologies of the operating system.
If you are a computer science, software engineering, electronics, communication, control, information systems, electronic commerce, computing and information science, information technology related specialized student, can systematically study the contents of this course basic parts, if you want to work on research and development of the operating system, can be further learning advanced part of the content; And if you're a computer enthusiast,
You can learn the relevant parts of this course according to your own needs, and establish a cognition of the whole or part of the computer operating system.
This course has three characteristics: first, it emphasizes the computer hardware and software co-design technology and teaches the implementation methods, strategies and algorithms of each operating system module; Second, the realization of the operating system from the perspective of large-scale software system construction, training students to compromise methods and programs, comprehensive ability to solve macro problems; Third, the position of engineers is adopted to emphasize the structural characteristics of the operating system, that is, concept is more than theory, technology is more than algorithm, the whole is before the part, so as to cultivate students' ability to comprehensively solve practical problems. Welcome to this course!",OS
Ruby on Rails Web Services and Integration with MongoDB,"In this course, we will explore MongoDB, a very popular NoSQL database and Web Services concepts and integrate them both with Ruby on Rails. MongoDB is a used to handle documents with a pre-defined schema which will give the developers an ability to store, process and use data using it’s rich API. The modules will go in-depth from installation to CRUD operations, aggregation, indexing, GridFS and various other topics where we continuously integrate MongoDB with RailsRuby.  We will be covering the interface to MongoDB using the Mongo Ruby API and the Mongoid ORM framework (the MongoDB access counterpart to RDBMS/ActiveRecord within Rails).  The last portion of the course will focus on Web Services with emphasis on REST, its architectural style and integration of Web Services with Rails.  Core concepts of Web Services like request/response, filters, data representation (XML/JSON), web linking and best practices will covered in depth.
This course is ideal for students and professionals who have some programming experience and a working knowledge of databases.",DS
Game Development for Modern Platforms,"The device or &quot;platform&quot; that a game is developed for and played on has a massive impact on the game development process. In this hands-on course you will explore how to develop a game for a variety of modern platforms, including Web, Windows, Mac OS X, iOS, and Android. While building a complete game, you will learn intermediate and advanced game development techniques in the Unity game engine.  By the end of the course, you will understand how to develop, refine, package, and prepare your game for distribution on a variety of game platforms. Particular attention will be given to developing a 2D platformer game that supports multiple forms of input (keyboard/mouse, controller, and touch), works across multiple forms of output (screen size, screen resolution, sound), and performs well on a variety of computing devices.",AR
System Validation: Automata and behavioural equivalences,"Have you ever experienced software systems failing? Websites crash, calendar not synchronising, or even a power blackout. Of course you have! But did you know that many of these errors are the result of communication errors either within a system or between systems? Depending on the system, the impact of software failures can be huge, even resulting in massive economic damage or loss of lives. Software, and in particular the communication between software-intensive systems, is very complex and very difficult to get right. However, we _need_ dependability in the systems we use, directly or indirectly, to support us in our everyday lives.
System Validation helps you to design embedded system behaviour that is structurally sound. It also enforces you to make the behaviour simple and insightful; systems that are designed for sound behaviour are also much easier to maintain and adapt. System Validation is the field that studies the fundamentals of system communication and information processing. The techniques put forward in system validaton allow to prove the absence of errors. 
This first course ’Automata and behavioural equivalences&#x27;, builds the foundation of the subsequent courses, showing you how to look at system behaviour as state machines. It discusses behavioural equivalences and illustrate these in a number of examples and quizzes. This course explains labelled transition systems or automata to model behaviour for especially software controlled systems. An important question is when two behaviours represented by such automata are equal. The answer to this question is not at all straightforward, but the resulting equivalences are used as powerful tools to simplify complex behaviour. This allows us to exactly investigate and understand the behavioural properties of such systems precisely. Especially, in the combination with hiding of behaviour, equivalence reduction is a unique technique to obtain insight in the behaviour of systems, far more effective than simulation or testing. Using this insight we can make the models correct. Such models form an excellent basis for the production of concise, reliable and maintainable software.
This course is part I of the set of courses for System Validation. System Validation, as a set of courses, is part of a larger EIT Digital online programme called &#x27;Internet of Things through Embedded Systems&#x27;.",SF
Rails with Active Record and Action Pack,"You already know how to build a basic web application with the Ruby on Rails framework. Perhaps, you have even taken Course 1, &quot;Ruby on Rails: An Introduction&quot; (we highly recommend it) where you relied on external web services to be your “data layer”. But in the back of your mind, you always knew that there would come a time when you would need to roll up your sleeves and learn SQL to be able to interact with your own relational database (RDBMS). But there is an easier way to get started with SQL using the Active Record Object/Relational (ORM) framework. In this course, we will be able to use the Ruby language and the Active Record ORM framework to automate interactions with the database to quickly build the application we want.
 
In Rails with Active Record and Action Pack, we will explore how to interact with relational databases by using Active Record, a Ruby gem, which Rails uses by default for database access. We will then take a look at what role Active Record plays in the overall request-response cycle, when a client (the browser) requests data from the server, as well as how to submit the data to the server.  Of course, when accessing data, security is of paramount importance! We will talk about vulnerabilities such as SQL injection, as well as how to secure access to data by authenticating and authorizing users accessing the data. Take this course to build a Ruby on Rails application with Active Record to automate the detailed SQL interactions with our database.",AR
TDD – Desenvolvimento de Software Guiado por Testes,"Neste curso, assumimos que você já sabe projetar e desenvolver programas mais complexos em Java, com método e organização graças às boas práticas e princípios exercitados no curso anterior; mas você talvez não se sinta ainda confortável em projetar programas usando técnicas ágeis, como o desenvolvimento guiado por testes (TDD). 
O objetivo deste curso é expor você aos princípios e práticas de desenvolvimento guiado por testes, tanto para modelar quanto para desenvolver aplicações e componentes de software, sem abandonar os conceitos e princípios de orientação a objetos aprendidos no curso anterior. De fato, pregamos que tais conceitos e princípios fortalecem o emprego do TDD no desenvolvimento ágil de software com mais qualidade. Este curso terá um grande foco em atividades hands-on, permitindo a você captar todos os aspectos práticos da técnica e facilitar a sua aplicação quando estiver projetando e desenvolvendo software de maneira ágil nos próximos cursos.
Os conceitos de desenvolvimento de software com Java apresentados neste curso incluem o seguinte: revisão de testes de unidade; automação de testes; desenvolvimento guiado por testes; ciclo do TDD; refatoração de código de produção; ciclo de refatoração; uso de objetos stubs e mocks; boas práticas no TDD; modelagem de software por meio do TDD.
Ao final deste curso, você terá amadurecido de tal modo suas habilidades de programação que será capaz de implementar, agora usando o TDD, versões modificadas e estendidas do componente de gamificação constante do Trabalho de Conclusão da Especialização, com base nas boas práticas exercitadas neste curso.",SE
Develop and Deploy Windows Applications on Google Cloud Platform,"Learn to deploy and run Microsoft Windows® applications on Google Cloud Platform (GCP). Through lectures and hands-on labs, learn how to configure and run Microsoft Windows and Microsoft SQL Server in Google Compute Engine. You will also learn how to develop and deploy ASP.NET applications and deploy them to Google Compute Engine, Google App Engine, and Google Container Engine.
Course objectives
This course teaches participants the following skills:
• Configuring Microsoft Windows and Microsoft SQL Server in Google Compute Engine
• Deploying ASP.NET MVC applications to Google Compute Engine
• Deploying .NET Core applications to Google Compute Engine, Google Compute Engine, and Google Container Engine
Pre-requisites
• System-administration or application-development experience with Microsoft Windows
• A general familiarity with cloud computing",SP
Software engineering,"Welcome to the Software Engineering MOOC offered by Peking University.
With the development of information technology, software has penetrated into every aspect of human society production and life. Software engineering is the application of engineering methods to the development, operation and maintenance of software in order to improve the quality of software and reduce the development cost. Software engineering has become one of the most active and popular subjects nowadays.
The MOOC course is an introduction to software engineering courses, in the time of 11 weeks, 21 times, we will introduce the software engineering knowledge involved in various aspects, including the software process, software requirements, structured analysis and design method, method of object-oriented analysis and design, agile methodologies, software testing, software project management, software development tools and environment. Through the course teaching, we can have a preliminary understanding of the methodology of software development and maintenance, and lay a foundation for further study of various topics.
The course also includes a hands-on session, through a small software project, where you can experience all aspects of software development and develop an awareness of project management.
I. The arrangement of this course is as follows:
Week 1 Introduction to Software Engineering, software processes
Week 2 Software requirements
Week 3 Structured Approach 1
Week 4 Structured Approach 2
Week 5 Object Oriented Approach 1
Week 6 Object Oriented Approach 2
Week 7 Object Oriented Approach 3
Week 8 object-oriented Methods 4. Agile Development methods
Week 9 Software testing
Week 10 Software project management
Week 11 Software development tools and environments
Second, curriculum practice
This course offers three practice topics, each of which Outlines three basic requirements, which can be found in the handout in the course introduction. Please choose one of them according to your own interests and hobbies, and add an additional requirement on the basis of careful reading and thinking about the basic requirements, so as to complete this course practice as a system requirement.
The practice of the course is divided into three stages. The practice of structured method, object-oriented method, software testing and project management is carried out in week 4, 7 and 10 respectively, and corresponding documentation reports are completed.
Each student is required to grade the reports of three other students.
Iii. Course grading scheme
In the new version of the course, we have reduced the grade for practice from 30% to 12%. However, we still encourage students to actively complete the course practice exercises to deepen their understanding of the course.
(1) Quiz accounts for 88%
(2) Course practice accounts for 12%

Enjoy your study!",SE
Quantitative Model Checking,"The integration of ICT (information and communications technology) in different applications is rapidly increasing in e.g. Embedded and Cyber physical systems, Communication protocols and Transportation systems. Hence, their reliability and dependability increasingly depends on software. Defects can be fatal and extremely costly (with regards to mass-production of products and safety-critical systems).
First, a model of the real system has to be built. In the simplest case, the model reflects all possible states that the system can reach and all possible transitions between states in a (labelled) State Transition System. When adding probabilities and discrete time to the model, we are dealing with so-called Discrete-time Markov chains which in turn can be extended with continuous timing to Continuous-time Markov chains. Both formalisms have been used widely for modeling and performance and dependability evaluation of computer and communication systems in a wide variety of domains. These formalisms are well understood, mathematically attractive while at the same time flexible enough to model complex systems. 
Model checking focuses on the qualitative evaluation of the model. As formal verification method, model checking analyzes
the functionality of the system model. A property that needs to be analyzed has to be specified in a logic with consistent syntax and semantics. For every state of the model, it is then checked whether the property is valid or not.
The main focus of this course is on quantitative model checking for Markov chains, for which we will discuss efficient computational algorithms. The learning objectives of this course are as follows:
- Express dependability properties for different kinds of transition systems .
- Compute the evolution over time for Markov chains.
- Check whether single states satisfy a certain formula and compute the satisfaction set for properties.",IS
C# programming,"C# (also known as csharp) is an excellent object-oriented language, it inherits the advantages of C++ and Java languages, has a wide range of applications in Windows graphical user interface, Web applications, databases and other aspects. On the basis of introducing C# language and the basic principles of object-oriented programming, this course uses Visual Studio as a development tool to introduce C# to all kinds of common information processing methods, including text processing, graphics drawing, image processing, multimedia, network information acquisition, database application, etc.
In addition to theoretical knowledge, the course pays more attention to computer programming practice. The program examples are closely combined with daily study and work, which are lively and interesting with moderate difficulty.
This course requires knowledge of a programming language (C, etc.).",PL
The Advanced Object-Oriented Technology,"If the software developers as walking the martial arts, then all kinds of software development technology is martial arts on the body of the secret book. Some esoteric books are good at easy learning and dexterity, practitioners quickly master, and have immediate effect, but the loss of thick lasting; Some of the secrets of the beginning of learning and practicing ton difficult, although meditating bitter solution is still not the point, the need to adhere to continuous internal skill training formula into the fruit, but become the necessary treasure of the Martial arts warrior. This course is somewhat similar to the latter.
""Object-oriented Advanced Technology Course"" deeply, systematically and completely explains the analysis, design, implementation and reconstruction methods of current mainstream object-oriented software development methods, deeply explains the high-level technical details of UML language, as well as the latest development trend of object-oriented methods in recent years. This course is a collection of lectures, combined with the latest research results of the speaker, and through a large number of rich, complete, different fields, different technologies, the key knowledge points are connected, easy to understand and apply.
This course is not limited to programming skills in a particular object-oriented programming language, but contains complete examples based on current mainstream object-oriented programming languages. This course guides students to describe the real world and the software world from a more abstract and generic model perspective, that is, to construct analysis and design models and then implement them into software programming. This engineering philosophy is essential for developing large, complex, difficult, and critical software systems, and is a necessary quality for senior software technical positions such as senior programmer, system analyst, and software architect.
As a Chinese MOOC course aimed at a wide audience, this course strives to present Chinese culture atmosphere, vivid and interesting cases, a broad vision across disciplines, and in-depth and practical technical integration to friends with different needs and backgrounds.
At the same time, as a MOOC course to teach software expertise, this course will bring interesting software development project assignments to students with programming ability, so that they can feel the joy of applying what they have learned in actual software development and experience the profound connotation of object-oriented methodology.
This course will also invite professor Shao Weizhong and Associate Professor Ma Zhiyi from the School of Information Science and Technology of Peking University to explain some chapters and discuss some key issues in object-oriented methodology.",SE
Basic Modeling for Discrete Optimization,"Optimization problem is a common decision making problem, which is very common in our society. Its applications range from solving sudoku problems to seating arrangements for weddings. The same technology can be used to arrange flights and crew, regulate steel production, and dispatch steel from mines to ports. In production, reasonable decision-making of human resources and production materials can make enterprises gain thousands of profit increases. Similar problems exist in our daily lives, including deciding where packages are shipped, adjusting the time of school classes, and delivering energy to millions of homes. Although these questions are very basic, they can be very difficult to solve with the general knowledge of undergraduate education.","AL
PD
PL"
System Validation (3): Requirements by modal formulas,"System Validation is the field that studies the fundamentals of system communication and information processing. It allows automated analysis based on behavioural models of a system to see if a system works correctly. We want to guarantee that the systems does exactly what it is supposed to do. The techniques put forward in system validation allow to prove the absence of errors. It allows to design embedded system behaviour that is structurally sound and as a side effect enforces you to make the behaviour simple and insightful. This means that the systems are not only behaving correctly, but are also much easier to maintain and adapt. ’Requirements by modal formulas&#x27; is the third course that shows you how to specify requirements for the automata in order to establish the correct relation between the requirements and the behaviour of the system. Reading material. J.F. Groote and M.R. Mousavi. Modeling and analysis of communicating systems. The MIT Press, 2014.",SP
Software Testing,"This paper introduces the basic theory of software test and expounds the principle of diversity of software test design from the understanding of software Bug. Based on the principle of diversity, white box test and black box test are introduced, including random test, equivalence class test, control flow test, data flow test, etc. Invite industry experts to explain functional testing, performance testing, mobile application testing techniques.",SE
Malicious Software and its Underground Economy: Two Sides to Every Story,"Learn about traditional and mobile malware, the security threats they represent, state-of-the-art analysis and detection techniques, and the underground ecosystem that drives such a profitable but illegal business.
Malicious Software and its Underground Economy: Two Sides to Every Story is a short, introductory, and experimental (i.e., pilot) course featuring 6 lectures. Each lecture lasts roughly anything between 1h and 1.5h and is logically divided in a number of ~15 mins self-contained units. Although a non-negligible effort has been made to fulfill this breakdown, some units last definitely longer and require a bit more effort---just pause the video and take a break ;-)
In addition, the course features 6 multiple-choices mandatory quizzes (i.e., 1 per lecture) and 1 bonus quiz. Passing all the mandatory quizzes awards a &quot;pass&quot; mark of the course, while passing all the mandatory quizzes and the bonus one awards a &quot;distinction&quot; mark.",SP
"Games, Sensors and Media","You will learn to make fluid digital interactive experiences that are suitable for gaming and use the advanced sensor hardware built into the iPhone and iPad. This includes drawing 2D graphics, playing sounds and music, integrating with Game Center, the iOS physics engine and detecting device orientation and location.
Upon completing this course, you will be able to:
1.       Use the reverse geocode service to convert latitude and longitude to location names
2.       Implement GeoFences to make an app efficiently monitor an iOS device’s location
3.       Leverage the power of accelerometers, magnetometers and gyroscopes to orient a device in physical space
4.       Create an app that responds to ambient light levels by using screen brightness as a proxy
5.       Play sound effects and other media as audio
6.       Make a game like Pong
7.       Make a game like Breakout
8.       Manipulate graphics in a game environment
9.       Use the physics engine to create realistic game worlds
10.     React to multi-touch events for complex interaction design
11.     Detect and respond to collisions and contacts efficiently
12.     Chain complex sequences of actions, animations and sounds with precision
13.     Animate multi-frame sprites
14.     Create particle systems to simulate fire, smoke and magic (and more!)
15.     Interface with Game Center to create leaderboards and achievements that can be shared through social networks",GV
Quantitative Formal Modeling and Worst-Case Performance Analysis,"Welcome to Quantitative Formal Modeling and Worst-Case Performance Analysis. In this course, you will learn about modeling and solving performance problems in a fashion popular in theoretical computer science, and generally train your abstract thinking skills.   
After finishing this course, you have learned to think about the behavior of systems in terms of token production and consumption, and you are able to formalize this thinking mathematically in terms of prefix orders and counting functions. You have learned about Petri-nets, about timing, and about scheduling of token consumption/production systems, and for the special class of Petri-nets known as single-rate dataflow graphs, you will know how to perform a worst-case analysis of basic performance metrics, like throughput, latency and buffering.
Disclaimer: As you will notice, there is an abundance of small examples in this course, but at first sight there are not many industrial size systems being discussed. The reason for this is two-fold. Firstly, it is not my intention to teach you performance analysis skills up to the level of what you will need in industry. Rather, I would like to teach you to think about modeling and performance analysis in general and abstract terms, because that is what you will need to do whenever you encounter any performance analysis problem in the future. After all, abstract thinking is the most revered skill required for any academic-level job in any engineering discipline, and if you are able to phrase your problems mathematically, it will become easier for you to spot mistakes, to communicate your ideas with others, and you have already made a big step towards actually solving the problem. Secondly, although dataflow techniques are applicable and being used in industry, the subclass of single-rate dataflow is too restrictive to be of practical use in large modeling examples. The analysis principles of other dataflow techniques, however, are all based on single-rate dataflow. So this course is a good primer for any more advanced course on the topic.
This course is part of the university course on Quantitative Evaluation of Embedded Systems (QEES) as given in the Embedded Systems master curriculum of the EIT-Digital university, and of the Dutch 3TU consortium consisting of TU/e (Eindhoven), TUD (Delft) and UT (Twente). The course material is exactly the same as the first three weeks of QEES, but the examination of QEES is at a slightly higher level of difficulty, which cannot (yet) be obtained in an online course.","AL
GV
PD
PL
SF"
Advanced Modeling for Discrete Optimization,"Optimization problem is a common decision making problem, which is very common in our society. Its applications range from solving sudoku problems to seating arrangements for weddings. The same technology can be used to arrange flights and crew, regulate steel production, and dispatch steel from mines to ports. In production, reasonable decision-making of human resources and production materials can make enterprises gain thousands of profit increases. Similar problems exist in our daily lives, including deciding where packages are shipped, adjusting the time of school classes, and delivering energy to millions of homes. Although these questions are very basic, they can be very difficult to solve with the general knowledge of undergraduate education.","AL
AR
IAS
NC
OS
PL
SDF
SP"
System platform and computing environment,"This course is designed for those who have completed the basics of Discrete Optimization Modeling. You'll learn more about how to articulate challenging discrete optimization problems using advanced high-level modeling languages, and let the constraint solver do the rest. This course will focus on model debugging and refinement, how to encapsulate a complex constraint definition into a predicate, and how to approach complex project scheduling and packaging problems. When you master this advanced technology, you will be able to solve previously unimaginable problems.",DS
Game Design and Development Capstone,"In the game design and development capstone, you will create an original game from initial concept through implementation and then launch it to the world! Along the way, you will have the opportunity to put your game ideas in front of your peers and for the best-of-the-best you will have the chance to get feedback from game industry professionals. The capstone experience gives you the opportunity to push your skills further and demonstrate your newfound skills as a game developer. The capstone also contains guest talks from game industry professionals at Riot Games, Deep Silver Volition, Iron Galaxy, Radiant Entertainment, Goodgame Studios, Stardock, GREE, Heart Shaped Games, Kongregate, and more.",GV
Program development project practice,"As the graduation practice project of ""program design and Algorithm"" series of special courses, we cooperated with Tencent company to design a practical application problem for everyone -- search engine design. This is an actual development project represented by Internet companies. How to search efficiently? How to improve the accuracy of search effectively? ... You will be asked to solve a number of practical problems in search engine design. Through this project, we hope to measure your actual programming ability, and we hope that you can fully demonstrate the knowledge and skills you have learned. We will provide professional answers from Tencent senior engineers during the development of the project, and select some students who have completed the project to participate in the on-site communication in Tencent. Completion of this practical project demonstrates that you have the ability to undertake program development work in the enterprise.",PD
The Business of Cybersecurity Capstone,The first phase of graduation practice project is tentatively scheduled for June 2016.,"AL
IAS
PL"
Requirements Engineering: Secure Software  Specifications,"This specialization is intended for software engineers, development and product managers, testers, QA analysts, product analysts, tech writers, and security engineers. Even if you have experience in the requirements realm, this course will expand your knowledge to include new viewpoints, development styles, techniques and tools.
For anyone seeking a graduate degree, certificate, or professional degree in computer science, these courses will additionally give you a broad understanding of how requirements engineering is performed and help you get a first foot forward into your upcoming careers.
The Software Requirements specialization focuses on traditional software requirements elicitation and writing techniques, while also looking at requirements from a security standpoint. In traditional methods, non-functional requirements, such as security, are often ignored overall. In this specialization, students will be introduced to ways of eliciting requirements from stakeholders, how to analyze these requirements, conduct risk mitigation and analysis, prioritize requirements, document, and bring security concerns into the software lifecycle early on.","SDF
SP"
Python for Everybody,"This Specialization builds on the success of the Python for Everybody course and will introduce fundamental programming concepts including data structures, networked application program interfaces, and databases, using the Python programming language. In the Capstone Project, you’ll use the technologies learned throughout the Specialization to design and create your own applications for data retrieval, processing, and visualization.","NC
DS"
Software Development Lifecycle,"This Specialization is designed for people who are new to software engineering. It&#x27;s also for those who have already developed software, but wish to gain a deeper understanding of the underlying context and theory of software development practices.
At the end of this Specialization, we expect learners to be able to:
1.) Build high-quality and secure software using SDLC methodologies such as agile, lean, and traditional/waterfall.
2.) Analyze a software development team&#x27;s SDLC methodology and make recommendations for improvements.
3.) Compare and contrast software development methodologies with respect to environmental, organizational, and product constraints.",SE
Mastering Software Development in R,"This Specialization covers R software development for building data science tools. As the field of data science evolves, it has become clear that software development skills are essential for producing useful data science results and products. You will obtain rigorous training in the R language, including the skills for handling complex data, building R packages and developing custom data visualizations. You will learn modern software development practices to build tools that are highly reusable, modular, and suitable for use in a team-based environment or a community of developers.","AL
DS
PD
PL
SDF"
Object Oriented Java Programming: Data Structures and Beyond,"This Specialization covers intermediate topics in software development. You’ll learn object-oriented programming principles that will allow you to use Java to its full potential, and you’ll implement data structures and algorithms for organizing large amounts of data in a way that is both efficient and easy to work with. You’ll also practice critically evaluating your own code, and you’ll build technical communication skills that will help you prepare for job interviews and collaborative work as a software engineer. In the final Capstone Project, you’ll apply your skills to analyze data collected from a real-world (social) network. Google has contributed real-world projects and the involvement of its engineers as guest lecturers to these courses. A small, select group of top learners who complete the Specialization will be offered practice interviews with Google recruiters. Invitation to a practice interview does not guarantee an actual interview or employment.",SE
Software Product Management,"In this Software Product Management Specialization, you will master Agile software management practices to lead a team of developers and interact with clients. In the final Capstone Project, you will practice and apply management techniques to realistic scenarios that you will face as a Software Product Manager. You will have the opportunity to share your experiences and learn from the insights of others as part of a Software Product Management",SP
Secure Software Design,"This specialization is for those with limited workplace experience in software development to obtain the background, perspective and skills to recognize important security aspects of software they are expected to design. Mindsets and attitudes of successful designers--and hackers--are presented as well as project successes and failures","SP
SE
GV"
Object Oriented Programming in Java,"This Specialization is for aspiring software developers with some programming experience in at least one other programming language (e.g., Python, C, JavaScript, etc.) who want to be able to solve more complex problems through objected-oriented design with Java. In addition to learning Java, you will gain experience with two Java development environments (BlueJ and Eclipse), learn how to program with graphical user interfaces, and learn how to design programs capable of managing large amounts of data. These software engineering skills are broadly applicable across wide array of industries.","AL
IAS
HCI
OS
PL
SDF
SE"
Software Design and Architecture,"In the Software Design and Architecture Specialization, you will learn how to apply design principles, patterns, and architectures to create reusable and flexible software applications and systems. You will learn how to express and document the design and architecture of a software system using a visual notation.
Practical examples and opportunities to apply your knowledge will help you develop employable skills and relevant expertise in the software industry.","SDF
SE"
Agile Development,"In this Specialization, you&#x27;ll gain an understanding and appreciation of the principles and practice of agile management. You&#x27;ll learn to coordinate all aspects of the agile development process, including running design sprints, managing teams, and fostering a culture of experimentation. In the final Capstone Project, you&#x27;ll apply what you&#x27;ve learned to guide a real-world software development project to successful completion.
UVA Darden",SE
Java Programming and Software Engineering Fundamentals,"Take your first step towards a career in software development with this introduction to Java—one of the most in-demand programming languages and the foundation of the Android operating system. Designed for beginners, this Specialization will teach you core programming concepts and equip you to write programs to solve complex problems. In addition, you will gain the foundational skills a software engineer needs to solve real-world problems, from designing algorithms to testing and debugging your programs.","AR
IAS
PL
SE
SP"
Development of Secure Embedded Systems,"Three people died after the crash landing of an Asiana Airlines aircraft from Seoul, Korea, at San Fransisco International Airport (SFO) on July 6, 2013. The American National Transportation Safety Board (NTSB) established that the crash most probably was caused by the flight crew&#x27;s (in)actions. Three teenage girls lost their lives; two in the airplane and another was accidentally run over by a firetruck.
The human factor is often cause for accidents. NTSB and others report that more than 50 percent of plane crashes is caused by pilot error (and for road accidents it is even 90 perc.) Correctly designed safety and security critical systems can prevent these errors.
After following this course successfully, you are able to develop secure embedded systems that are at the core of these safety and security critical systems. You are even challenged to program your own landing guiding system in our capstone project.
If you are interested in building secure embedded systems for the benefit of humanity, this specialization is for you!
EIT Digital has chosen 3 MOOC topics of industrial interest, namely: 1) Embedded design and hardware, 2) Security in embedded connectivity and 3) Real-Time systems. These MOOCs show what it takes to program Internet-of-Things systems. We focus on tools used in the modern IoT industry, and we push for a practical learn-by-programming approach in which you are exposed to the actual development in an early stage.
We hope to see you soon!",SP
Full Stack Web and Multiplatform Mobile App Development,"Learn front-end and hybrid mobile development, with server-side support, for implementing a multi-platform solution.
The first two courses in this Specialization cover front-end frameworks: Bootstrap 4 and Angular. You’ll also learn to create hybrid mobile applications, using the Ionic framework, Cordova and NativeScript. On the server side, you’ll learn to implement NoSQL databases using MongoDB, work within a Node.js environment and Express framework, and communicate to the client side through a RESTful API. Learners enrolling in this Specialization are expected to have prior working knowledge of HTML, CSS and JavaScript.
Ideally learners should complete the courses in the specified sequence. It is strongly recommended that the Angular course be completed before proceeding with the Ionic and Cordova and/or the NativeScript course.",SP
Introduction to Programming in C,"This specialization develops strong programming fundamentals for learners who want to solve complex problems by writing computer programs. Through four courses, you will learn to develop algorithms in a systematic way and read and write the C code to implement them. This will prepare you to pursue a career in software development or other computational fields.","AL
AR
IAS
PD
PL
SDF"
Fundamentals of Computing,This Specialization covers much of the material that first-year Computer Science students take at Rice University. Students learn sophisticated programming skills in Python from the ground up and apply these skills in building more than 20 fun projects. The Specialization concludes with a Capstone exam that allows the students to demonstrate the range of knowledge that they have acquired in the Specialization.,"AL
AR
CN
IAS
IM
NC
OS
PL
SDF
SE
SP"
Developing Applications with Google Cloud Platform,"&gt;&gt;&gt; By enrolling in this specialization you agree to the Qwiklabs Terms of Service as set out in the FAQ and located at: https://qwiklabs.com/terms_of_service &lt;&lt;&lt;
In this specialization, application developers learn how to design, develop, and deploy applications that seamlessly integrate components from the Google Cloud ecosystem. Through 4 courses and a combination of presentations, demos, and hands-on labs, participants learn how to use GCP services and pre-trained machine learning APIs to build secure, scalable, and intelligent cloud-native applications.
This class is intended for application developers who want to build cloud-native applications or redesign existing applications that will run on Google Cloud Platform.
Specialization objectives
This course teaches participants the following skills:
• Use best practices for application development.
• Choose the appropriate data storage option for application data.
• Implement federated identity management.
• Develop loosely coupled application components or microservices.
• Integrate application components and data sources.
• Debug, trace, and monitor applications.
• Perform repeatable deployments with containers and deployment services.
• Choose the appropriate application runtime environment; use Google Container Engine as a runtime environment and later switch to a no-ops solution with Google App Engine flexible environment.",SP
Introduction to Scripting in Python,"This specialization is intended for beginners who would like to master essential programming skills. Through four courses, you will cover key programming concepts in Python 3 which will prepare you to use Python to perform common scripting tasks. This knowledge will provide a solid foundation towards a career in data science, software engineering, or other disciplines involving programming.","PL
PD
SF"
Architecting with Google Cloud Platform,"&gt;&gt;&gt; By enrolling in this specialization you agree to the Qwiklabs Terms of Service as set out in the FAQ and located at: https://qwiklabs.com/terms_of_service &lt;&lt;&lt;
This specialization introduces participants to the comprehensive and flexible infrastructure and platform services provided by Google Cloud Platform. Through a combination of presentations, demos, and hands-on labs, participants explore and deploy solution elements, including infrastructure components such as networks, systems and applications services. This course also covers deploying practical solutions including securely interconnecting networks, customer-supplied encryption keys, security and access management, quotas and billing, and resource monitoring.
This class is intended for the following participants:
● Cloud Solutions Architects, DevOps Engineers.
● Individuals using Google Cloud Platform to create new solutions or to integrate existing systems, application environments, and infrastructure with the Google Cloud Platform.",IM
Android App Development,"This Specialization enables learners to successfully apply core Java programming languages features &amp; software patterns needed to develop maintainable mobile apps comprised of core Android components, as well as fundamental Java I/O &amp; persistence mechanisms.
The Capstone project will integrate the material from throughout the Specialization to exercise and assess the ability of learners to create an interesting Android app by applying knowledge and skills learned in previous MOOCs, including Java programming features, Android Studio tools, Android Activity components, Material Design, file I/O and data persistence, unit testing, and software patterns. The project itself will be similar in design goals to previous assignments, however it will provide less of the skeleton code than earlier MOOCs provide to enable more creativity to learners and greater opportunity for learners to customize the app.","PD
AR
SF"
Functional Programming in Scala,"Discover how to write elegant code that works the first time it is run.
This Specialization provides a hands-on introduction to functional programming using the widespread programming language, Scala. It begins from the basic building blocks of the functional paradigm, first showing how to use these blocks to solve small problems, before building up to combining these concepts to architect larger functional programs. You&#x27;ll see how the functional paradigm facilitates parallel and distributed programming, and through a series of hands on examples and programming assignments, you&#x27;ll learn how to analyze data sets small to large; from parallel programming on multicore architectures, to distributed programming on a cluster using Apache Spark. A final capstone project will allow you to apply the skills you learned by building a large data-intensive application using real-world data.","PD
PL
SDF
SP"
An Introduction to Programming the Internet of Things (IOT),"Design, create, and deploy a fun IoT device using Arduino and Raspberry Pi platforms.
This Specialization covers embedded systems, the Raspberry Pi Platform, and the Arduino environment for building devices that can control the physical world. In the final Capstone Project, you’ll apply the skills you learned by designing, building, and testing a microcontroller-based embedded system, producing a unique final project suitable for showcasing to future employers. Please note that this specialization does not offer discussion forums.","AR
GV
HCI
IAS
IM
NC
OS
PL
SE
SF
SP"
Install and Manage Google Cloud's Apigee API Platform,"This three-course specialization introduces you to the design principles, installation steps and operational procedures required to successfully adopt the Apigee API Platform On-Premises.
Through a combination of video lectures, hands on labs, and supplemental materials, you&#x27;ll learn how to design Apigee topologies, install, manage and upgrade platform. As well as how to conduct post installation and recurrent activities corresponding to security, monitoring, scaling and troubleshooting.
This specialization is intended for Operations Engineers and Architects responsible for the installation and management of Apigee API Platform On-Premises.",SE
Virtual Reality,"This specialisation from the University of London will introduce you to virtual reality.
Virtual reality is one of the most highly requested skill sets in the jobs market, and this specialisation will give you an introduction to the subject and key skills in the field. You will hear from world-leading lecturers and industry experts, use Unity to develop your own VR environment, and end the specialisation by creating your first VR game.","GV
HCI"
Applied Data Science with Python,"The 5 courses in this University of Michigan specialization introduce learners to data science through the python programming language. This skills-based specialization is intended for learners who have basic a python or programming background, and want to apply statistical, machine learning, information visualization, text analysis, and social network analysis techniques through popular python toolkits such as pandas, matplotlib, scikit-learn, nltk, and networkx to gain insight into their data.
Introduction to Data Science in Python (course 1), Applied Plotting, Charting &amp; Data Representation in Python (course 2), and Applied Machine Learning in Python (course 3) should be taken in order and prior to any other course in the specialization. After completing those, courses 4 and 5 can be taken in any order. All 5 are required to earn a certificate.","IS
DS
PD"
Fundamentals of Computer Network Security,"This specialization in intended for IT professionals, computer programmers, managers, IT security professionals who like to move up ladder, who are seeking to develop network system security skills. Through four courses, we will cover the Design and Analyze Secure Networked Systems, Develop Secure Programs with Basic Cryptography and Crypto API, Hacking and Patching Web Applications, Perform Penetration Testing, and Secure Networked Systems with Firewall and IDS, which will prepare you to perform tasks as Cyber Security Engineer, IT Security Analyst, and Cyber Security Analyst.
The learning outcomes of this specialization include:
you should be able to create public/private keys, certificate requests, install/sign/verify them for web server and client authentication, secure emails, and code signing.
you should be able to write secure web apps with Crypto API to implement the confidentiality, integrity, and availability basic security services.
you should be able to hack web applications with vulnerabilities and patch them.
you should be able to apply penetration testing tool to exploit vulnerable systems.
you should be able to crack passwords given the hashes in password file using AWS P2 GPU.
you should be able to configure firewall and IDS for secure network systems
you should be able to specify effective security policies and implement efficient enforcement procedures by applying security design principles for securing network systems.",SP
"Parallel, Concurrent, and Distributed Programming in Java","Parallel, concurrent, and distributed programming underlies software in multiple domains, ranging from biomedical research to financial services. This specialization is intended for anyone with a basic knowledge of sequential programming in Java, who is motivated to learn how to write parallel, concurrent and distributed programs. Through a collection of three courses (which may be taken in any order or separately), you will learn foundational topics in Parallelism, Concurrency, and Distribution. These courses will prepare you for multithreaded and distributed programming for a wide range of computer platforms, from mobile devices to cloud computing servers.
To see an overview video for this Specialization, click here! For an interview with two early-career software engineers on the relevance of parallel computing to their jobs, click here.
Acknowledgments
The instructor, Prof. Vivek Sarkar, would like to thank Dr. Max Grossman for his contributions to the mini-projects and other course material, Dr. Zoran Budimlic for his contributions to the quizzes, Dr. Max Grossman and Dr. Shams Imam for their contributions to the pedagogic PCDP library used in some of the mini-projects, and all members of the Rice Online team who contributed to the development of the course content (including Martin Calvi, Annette Howe, Seth Tyger, and Chong Zhou).","PD
PL
SF
SP"
Desarrollo de Aplicaciones iOS,"Este Programa Especializado cubre los fundamentos del desarrollo de aplicaciones iOS, incluyendo programación con Swift, conceptos básicos de diseño UI, integración de contenido en iOS y prototipado. En el Proyecto Final, aplicarás las habilidades que has aprendido para crear un prototipo de aplicación iOS que funcione y que registre entradas y que comunique resultados a un servidor.",HCI
Data Structures and Algorithms,"This specialization is a mix of theory and practice: you will learn algorithmic techniques for solving various computational problems and will implement about 100 algorithmic coding problems in a programming language of your choice. No other online course in Algorithms even comes close to offering you a wealth of programming challenges that you may face at your next job interview. To prepare you, we invested over 3000 hours into designing our challenges as an alternative to multiple choice questions that you usually find in MOOCs. Sorry, we do not believe in multiple choice questions when it comes to learning algorithms...or anything else in computer science! For each algorithm you develop and implement, we designed multiple tests to check its correctness and running time — you will have to debug your programs without even knowing what these tests are! It may sound difficult, but we believe it is the only way to truly understand how the algorithms work and to master the art of programming. The specialization contains two real-world projects: Big Networks and Genome Assembly. You will analyze both road networks and social networks and will learn how to compute the shortest route between New York and San Francisco (1000 times faster than the standard shortest path algorithms!) Afterwards, you will learn how to assemble genomes from millions of short fragments of DNA and how assembly algorithms fuel recent developments in personalized medicine.","AL
DS"
Emerging Technologies: From Smartphones to IoT to Big Data,"This Specialization covers the concepts of the most important information technologies that you have been using and will be using throughout your entire life! Topics covered include Smartphones, OS, Cloud Computing, Big Data, CDN, Wi-Fi, Bluetooth, Mobile Communication, LTE, LTE-Advanced, IoT, AR, IPv4, IPv6, TCP, UDP, and Internet operations. The Specialization concludes with a Capstone project that allows you to apply the skills you&#x27;ve learned throughout the courses.","NC
OS
SP"
Cloud Computing,"The Cloud Computing Specialization takes you on a tour through cloud computing systems. We start in in the middle layer with Cloud Computing Concepts covering core distributed systems concepts used inside clouds, move to the upper layer of Cloud Applications and finally to the lower layer of Cloud Networking. We conclude with a project that allows you to apply the skills you&#x27;ve learned throughout the courses.
The first four courses in this Specialization form the lecture component of courses in our online Master of Computer Science Degree in Data Science. You can apply to the degree program either before or after you begin the Specialization.","NC
IAS"
Big Data for Data Engineers,"This specialization is made for people working with data (either small or big). If you are a Data Analyst, Data Scientist, Data Engineer or Data Architect (or you want to become one) — don’t miss the opportunity to expand your knowledge and skills in the field of data engineering and data analysis on the large scale.
In four concise courses you will learn the basics of Hadoop, MapReduce, Spark, methods of offline data processing for warehousing, real-time data processing and large-scale machine learning. And Capstone project for you to build and deploy your own Big Data Service (make your portfolio even more competitive).
Over the course of the specialization, you will complete progressively harder programming assignments (mostly in Python). Make sure, you have some experience in it. This course will master your skills in designing solutions for common Big Data tasks:
- creating batch and real-time data processing pipelines,
- doing machine learning at scale,
- deploying machine learning models into a production environment — and much more!
Join some of best hands-on big data professionals, who know, their job inside-out, to learn the basics, as well as some tricks of the trade, from them.
Special thanks to Prof. Mikhail Roytberg (APT dept., MIPT), Oleg Sukhoroslov (PhD, Senior Researcher, IITP RAS), Oleg Ivchenko (APT dept., MIPT), Pavel Akhtyamov (APT dept., MIPT), Vladimir Kuznetsov, Asya Roitberg, Eugene Baulin, Marina Sudarikova.","AL
DS
PD
PL
SDF
SE"
User Interface Design,"In this Specialization, you will learn industry-standard theory and methods for developing successful user interfaces (UIs). Upon completing this Specialization, you will have fluency with the user research, prototyping and evaluation techniques necessary for creating intuitive interfaces that facilitate good user experiences. You will also have demonstrated this fluency through an in-depth Capstone Project that can be shown to prospective employers in the fast-growing field of UI design.
Concepts and techniques covered include structured approaches for helping you understand your user base and their needs (e.g. contextual inquiry and design psychology), widely-employed prototyping and design methods (e.g. low-fidelity and paper prototyping), and robust techniques for helping you evaluate your design choices (e.g. heuristic evaluation and user studies). By the end of the Specialization, you will be comfortable applying these concepts and techniques to design an interface for a wide variety of users from around the world.",HCI
Algorithms,"Algorithms are the heart of computer science, and the subject has countless practical applications as well as intellectual depth. This specialization is an introduction to algorithms for learners with at least a little programming experience. The specialization is rigorous but emphasizes the big picture and conceptual understanding over low-level implementation and mathematical details. After completing this specialization, you will be well-positioned to ace your technical interviews and speak fluently about algorithms with other programmers and computer scientists.
About the instructor: Tim Roughgarden has been a professor in the Computer Science Department at Stanford University since 2004. He has taught and published extensively on the subject of algorithms and their applications.","AL
SP"
C# Programming for Unity Game Development,"This specialization is intended for beginning programmers who want to learn how to program Unity games using C#. The first course assumes no programming experience, and throughout the 5 courses in the specialization you&#x27;ll learn how to program in C# and how to use that C# knowledge to program Unity games. The C# and Unity material in the first 4 courses in the specialization is slightly more comprehensive than the content in the first 2 game programming courses at UCCS.","AR
GV
PL
SE"
Internet of Things,"This Specialization covers the development of Internet of Things (IoT) products and services—including devices for sensing, actuation, processing, and communication—to help you develop skills and experiences you can employ in designing novel systems. The Specialization has theory and lab sections. In the lab sections you will learn hands-on IoT concepts such as sensing, actuation and communication. In the final Capstone Project, developed in partnership with Qualcomm, you’ll apply the skills you learned on a project of your choice using the DragonBoard 410c platform.","NC
SP"
"Modern Robotics:  Mechanics, Planning, and Control","This Specialization provides a rigorous treatment of spatial motion and the dynamics of rigid bodies, employing representations from modern screw theory and the product of exponentials formula. Students with a freshman-level engineering background will quickly learn to apply these tools to analysis, planning, and control of robot motion. Students&#x27; understanding of the mathematics of robotics will be solidified by writing robotics software. Students will test their software on a free state-of-the-art cross-platform robot simulator, allowing each student to have an authentic robot programming experience with industrial robot manipulators and mobile robots without purchasing expensive robot hardware. It is highly recommended that Courses 1-6 of the Specialization are taken in order, since the material builds on itself.",SF
Data Engineering on Google Cloud Platform,"This five-week, accelerated online specialization provides participants a hands-on introduction to designing and building data processing systems on Google Cloud Platform. Through a combination of presentations, demos, and hand-on labs, participants will learn how to design data processing systems, build end-to-end data pipelines, analyze data and carry out machine learning. The course covers structured, unstructured, and streaming data.
This course teaches participants the following skills:
• Design and build data processing systems on Google Cloud Platform
• Leverage unstructured data using Spark and ML APIs on Cloud Dataproc
• Process batch and streaming data by implementing autoscaling data pipelines on Cloud Dataflow
• Derive business insights from extremely large datasets using Google BigQuery
• Train, evaluate and predict using machine learning models using Tensorflow and Cloud ML
• Enable instant insights from streaming data
This class is intended for experienced developers who are responsible for managing big data transformations including:
• Extracting, Loading, Transforming, cleaning, and validating data
• Designing pipelines and architectures for data processing
• Creating and maintaining machine learning and statistical models
• Querying datasets, visualizing query results and creating reports","CN
IAS
IM
AL
PD"
Net platform software development technology,"This specialized course is open to all who wish to become. Net programmer's introduction to learners. Net platform software development technology. The course starts with basic computer knowledge, no prior courses are required. This means that you will be able to quickly understand the course regardless of your current industry and professional background. We'll start from scratch by introducing you to the basics of computers. After that, the system will introduce C# programming methods and skills, to help you achieve ""from the entry to improve, to practical"" step. C# is specially designed by Microsoft. Net platform created a programming language, can access the powerful. NET framework class library, especially suitable for application development tasks with high requirements, especially enterprise applications, Web-based applications, and mobile applications. In order to help you really have all kinds of application development ability, after introducing C# programming methods, this special course also systematically describes SQL Server database technology, based on. Net Web development technology. With the support of online programming tests, you can effectively train and improve your actual programming skills. Finally, through the graduation training program jointly opened with Microsoft Research Asia, to help you have. Basic skills in Net application development and Web application development.","SDF
PL
SE"
Applied Data Science,"If you complete the course with good grades, you may be able to enter Microsoft for an internship and eventually a job position.",IM
Data Warehousing for Business Intelligence,"Evaluate business needs, design a data warehouse, and integrate and visualize data using dashboards and visual analytics.
This Specialization covers data architecture skills that are increasingly critical across a broad range of technology fields. You’ll learn the basics of structured data modeling, gain practical SQL coding experience, and develop an in-depth understanding of data warehouse design and data manipulation. You’ll have the opportunity to work with large data sets in a data warehouse environment to create dashboards and Visual Analytics. You will use of MicroStrategy, a leading BI tool, OLAP (online analytical processing) and Visual Insights capabilities to create dashboards and Visual Analytics. In the final Capstone Project, you’ll apply your skills to build a small, basic data warehouse, populate it with data, and create dashboards and other visualizations to analyze and communicate the data to a broad audience.",IAS
Data Mining ,"The Data Mining Specialization teaches data mining techniques for both structured data which conform to a clearly defined schema, and unstructured data which exist in the form of natural language text. Specific course topics include pattern discovery, clustering, text retrieval, text mining and analytics, and data visualization. The Capstone project task is to solve real-world data mining challenges using a restaurant review data set from Yelp.
Courses 2 - 5 of this Specialization form the lecture component of courses in the online Master of Computer Science Degree in Data Science. You can apply to the degree program either before or after you begin the Specialization.",IS
Programming and algorithms,"This special course aims to systematically develop your programming and writing skills. This series of courses starts with the basics of computing, which you can quickly understand regardless of your academic or industry background. At the same time, we also systematically introduced C programming, C++ programming, algorithm foundation, data structure and algorithm related content, each course is closely linked, step by step, can help you lay a solid foundation for program development; The course is complete with online programming tests, which will effectively train and improve your practical ability to write programs. And through the graduation practice program to provide you with application design to solve complex real world problems exercise, so as to accumulate practical development experience. Therefore, we hope that this special course will help you to complete the transition from only basic computer knowledge to the ability to use high quality programs to solve practical problems.","PL
SDF
SE"
Data Science at Scale,"Learn scalable data management, evaluate big data technologies, and design effective visualizations.
This Specialization covers intermediate topics in data science. You will gain hands-on experience with scalable SQL and NoSQL data management solutions, data mining algorithms, and practical statistical and machine learning concepts. You will also learn to visualize data and communicate results, and you’ll explore legal and ethical issues that arise in working with big data. In the final Capstone Project, developed in partnership with the digital internship platform Coursolve, you’ll apply your new skills to a real-world data science project.",IAS
Introduction to Applied Data Science,"In this Specialization learners will develop foundational Data Science skills to prepare them for a career or further learning that involves more advanced topics in Data Science. The specialization entails understanding what is Data Science and the various kinds of activities that a Data Scientist performs. It will familiarize learners with various open source tools, like Jupyter notebooks, used by Data Scientists. It will teach them about methodology involved in tackling data science problems. The specialization also provides knowledge of relational database concepts and the use of SQL to query databases. Learners will complete hands-on labs and projects to apply their newly acquired skills and knowledge.",IS
Responsive Website Development and Design,"This Specialization covers the basics of modern full stack web development, from UX design, to front-end coding, to custom databases. You’ll build foundational skills in a full range of technologies, including HTML/CSS, Javascript, and MongoDB, and you’ll learn to implement a reactive, multi-user web application using the meteor.js framework. We’ll also touch on more advanced topics, such as APIs, data visualization, and animation.",HCI
Excel/VBA for Creative Problem Solving,"This Specialization is for learners wishing to dramatically change the way that they use Excel spreadsheets by unleashing the power to automate and optimize spreadsheets using Visual Basic for Applications (VBA). The first two courses will teach learners the basics of VBA through the use of dozens of educational screencasts and a series of quizzes and in-application programming assignments. Finally, in Part 3 of the course, learners will complete 3 &quot;real world&quot; and somewhat open ended projects, which are graded through peer review.",AR
Ruby on Rails Web Development,"This Specialization covers the fundamentals of web development with Ruby on Rails. You’ll learn everything you need to develop your own web application using Ruby on Rails, SQL and NoSQL databases, and HTML/CSS, and Javascript. We will also touch on advanced topics such as security, services using HTTP/RESTful access patterns, and user access and user experience from multiple device platforms. In the final Capstone Project, you’ll apply your skills to develop a web application that hosts uploaded photos and displays them using a map.","AR
IAS
SP
SDF
PL"
iOS Development for Creative Entrepreneurs,"This Specialization focuses on the basics of iOS application development. You’ll gain the skills you need to create your own app, including fluency in Objective-C and UIKit and SpriteKit user interface concepts, and you’ll learn to leverage networking, security, audio, video, location, and sensor frameworks. In the final Capstone Project, you’ll apply your skills to create a networked game that leverages sensors on the phone to create a unique gaming experience, and that you can showcase in job applications and interviews or offer in the iTunes store.","AR
IAS
DS
HCI
NC
OS
SDF
SP"
Cybersecurity: Developing a Program for Your Business,"Cybersecurity is an essential business skill for the evolving workplace. For-profit companies, government agencies, and not-for-profit organizations all need technologically proficient, business-savvy information technology security professionals. In this Specialization, you will learn about a variety of processes for protecting business assets through policy, education and training, and technology best practices. You’ll develop an awareness of the risks and cyber threats or attacks associated with modern information usage, and explore key technical and managerial topics required for a balanced approach to information protection. Topics will include mobility, the Internet of Things, the human factor, governance and management practices.",IAS
"Programming Foundations with JavaScript, HTML and CSS","Learn foundational programming concepts (e.g., functions, for loops, conditional statements) and how to solve problems like a programmer. In addition, learn basic web development as you build web pages using HTML, CSS, JavaScript. By the end of the course, will create a web page where others can upload their images and apply image filters that you create.
After completing this course, you will be able to:
1. Think critically about how to solve a problem using programming;
2. Write JavaScript programs using functions, for loops, and conditional statements;
3. Use HTML to construct a web page with paragraphs, divs, images, links, and lists;
4. Add styles to a web page with CSS IDs and classes; and
5. Make a web page interactive with JavaScript commands like alert, onClick, onChange, adding input features like an image canvas, button, and slider.",HCI
How To Create a Website in a Weekend! (Project-Centered Course),"What you’ll achieve:
In this project-centered course*, you’ll design, build, and publish a basic website that incorporates text, sound, images, hyperlinks, plug-ins, and social media interactivity. We’ll provide you with step-by-step instructions, exercises, tips, and tools that enable you to set up a domain name, create an attractive layout for your pages, organize your content properly, ensure that your site functions well across different operating systems and on mobile devices, keep your site safe, and finally, let people know your site is online. We’ll even show you how to track your visitors. Throughout the course, you&#x27;ll engage in collaboration and discussion with other learners through course forums and peer review.
Once you complete your first website project using Wordpress, you can move on to our optional, extended module that covers more advanced techniques such as using a simple text editor, coding in HTML, CSS, and Javascript, and more.
What you’ll need to get started:
This project-centered course is designed for learners who have little or no prior experience developing a web site. You will need a computer with a stable Internet connection. We’ll use Wordpress to get you started, provide lots of downloadable examples, and guide you through the process of giving and receiving constructive peer-to-peer feedback.
*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share.",HCI
"HTML, CSS, and Javascript for Web Developers","Do you realize that the only functionality of a web application that the user directly interacts with is through the web page? Implement it poorly and, to the user, the server-side becomes irrelevant! Today’s user expects a lot out of the web page: it has to load fast, expose the desired service, and be comfortable to view on all devices: from a desktop computers to tablets and mobile phones.
In this course, we will learn the basic tools that every web page coder needs to know. We will start from the ground up by learning how to implement modern web pages with HTML and CSS. We will then advance to learning how to code our pages such that its components rearrange and resize themselves automatically based on the size of the user’s screen. You’ll be able to code up a web page that will be just as useful on a mobile phone as on a desktop computer. No “pinch and zoom” required! Last but certainly not least, we will get a thorough introduction to the most ubiquitous, popular, and incredibly powerful language of the web: Javascript. Using Javascript, you will be able to build a fully functional web application that utilizes Ajax to expose server-side functionality and data to the end user.",HCI
Introduction to Structured Query Language (SQL),"In this course, you&#x27;ll walk through installation steps for installing a text editor, installing MAMP or XAMPP (or equivalent) and creating a MySql Database. You&#x27;ll learn about single table queries and the basic syntax of the SQL language, as well as database design with multiple tables, foreign keys, and the JOIN operation. Lastly, you&#x27;ll learn to model many-to-many relationships like those needed to represent users, roles, and courses.",IS
Introduction to HTML5,"Thanks to a growing number of software programs, it seems as if anyone can make a webpage. But what if you actually want to understand how the page was created? There are great textbooks and online resources for learning web design, but most of those resources require some background knowledge. This course is designed to help the novice who wants to gain confidence and knowledge. We will explore the theory (what actually happens when you click on a link on a webpage?), the practical (what do I need to know to make my own page?), and the overlooked (I have a page, what do I do now?). Throughout the course there will be a strong emphasis on adhering to syntactic standards for validation and semantic standards to promote wide accessibility for users with disabilities.  The textbook we use is available online, “The Missing Link: An Introduction to Web Development and Programming” by Michael Mendez from www.opensuny.org. 
This course will appeal to a wide variety of people, but specifically those who would like a step-by-step description of the basics. There are no prerequisites for this course and it is assumed that students have no prior programming skills or IT experience. The course will culminate in a small final project that will require the completion of a very simple page with links and images. The focus of this course is on the basics, not appearance. You can see a sample final page at http://intro-webdesign.com/html5-plain.html.  
This is the first course in the Web Design For Everybody specialization. Subsequent courses focus on the marketable skills of styling the page with CSS3, adding interactivity with JavaScript and enhancing the styling with responsive design. You can see a sample site for the capstone course at http://intro-webdesign.com/",HCI
Building Web Applications in PHP,"In this course, you&#x27;ll explore the basic structure of a web application, and how a web browser interacts with a web server. You&#x27;ll be introduced to the request/response cycle, including GET/POST/Redirect. You&#x27;ll also gain an introductory understanding of Hypertext Markup Language (HTML), as well as the basic syntax and data structures of the PHP language, variables, logic, iteration, arrays, error handling, and superglobal variables, among other elements. An introduction to Cascading Style Sheets (CSS) will allow you to style markup for webpages. Lastly, you&#x27;ll gain the skills and knowledge to install and use an integrated PHP/MySQL environment like XAMPP or MAMP.",SE
Introduction to Web Development,"This course is designed to start you on a path toward future studies in web development and design, no matter how little experience or technical knowledge you currently have. The web is a very big place, and if you are the typical internet user, you probably visit several websites every day, whether for business, entertainment or education. But have you ever wondered how these websites actually work? How are they built? How do browsers, computers, and mobile devices interact with the web? What skills are necessary to build a website? With almost 1 billion websites now on the internet, the answers to these questions could be your first step toward a better understanding of the internet and developing a new set of internet skills.  
By the end of this course you’ll be able to describe the structure and functionality of the world wide web, create dynamic web pages using a combination of HTML, CSS, and JavaScript, apply essential programming language concepts when creating HTML forms, select an appropriate web hosting service, and publish your webpages for the world to see. Finally, you’ll be able to develop a working model for creating your own personal or business websites in the future and be fully prepared to take the next step in a more advanced web development or design course or specialization.",HCI
Introduction to CSS3,"The web today is almost unrecognizable from the early days of white pages with lists of blue links.  Now, sites are designed with complex layouts, unique fonts, and customized color schemes.   This course will show you the basics of Cascading Style Sheets (CSS3).  The emphasis will be on learning how to write CSS rules, how to test code, and how to establish good programming habits.     
When done correctly, the styling of a webpage can take enhance your page.   When done incorrectly the result can be worse than no styling at all.    To ensure that your sites do not put up  barriers for people with cognitive and/or physical disabilities, you will learn how to evaluate pages using the standardized POUR accessibility guidelines.    Upon completion of the course, learners will be able to sketch a design for a given HTML page.  Using that design they will use CSS to implement the design by adding fonts, colors, and  layouts.    
This is the second course in the Web Design For Everybody specialization.   Subsequent courses focus on adding interaction with JavaScript and enhancing the styling with responsive design.
It will be difficult to complete this course if you do not have access to a laptop or desktop computer for the homework.",HCI
Interactivity with JavaScript,"If you want to take your website to the next level, the ability to incorporate interactivity is a must.    But adding some of these types of capabilities requires a stronger programming language than HTML5 or CSS3, and JavaScript can provide just what you need.  With just a basic understanding of the language, you can create a page that will react to common events such as page loads, mouse clicks &amp; movements, and even keyboard input.      
This course will introduce you to the basics of the JavaScript language.  We will cover concepts such as variables, looping, functions, and even a little bit about debugging tools.  You will understand how the Document Object Model (DOM) is used by JavaScript to identify and modify specific parts of your page.  After the course, learners will be able to react to DOM Events and dynamically alter the contents and style of their page.   The class will culminate in a  final project - the creation of an interactive HTML5 form that accepts and verifies input.
This is the third course in the Web Design For Everybody specialization.  A basic understanding of HTML and CSS is expected when you enroll in this class.    Additional courses focus on enhancing the styling with responsive design and completing a capstone project.",HCI
Advanced Styling with Responsive Design,"It used to be the case that everyone viewed webpages on about the same size screen.  But with the explosion of the use of smartphones to access the Internet, the landscape of design has completely changed.  People viewing your site will now expect that it will perform regardless of the platform (smartphone, tablet, laptop, or desktop computer).  This ability to respond to any platform is called responsive design.
This course will expand upon the basic knowledge of CSS3 to include topics such as wireframes, fluid design, media queries, and the use of existing styling paradigms such as Bootstrap.  After the course, learners will be able to:
** Explain the mobile-first paradigm and the importance of wireframes in the design phase
** Create sites that behave across a range of platforms
** Utilize existing design frameworks such as Bootstrap
This is the fourth course in the Web Design For Everybody specialization.  A basic understanding of HTML and CSS is expected when you enroll in this class. Additional courses focus on adding interactivity with the JavaScript Programming Language and completing a capstone project.",HCI
Web Design for Everybody Capstone,"The capstone will develop a professional-quality web portfolio.  Students will demonstrate the ability to design and implement a responsive site for a minimum of three platforms.  Adherence to validation and accessibility standards will be required. The evolving student implementations will be reviewed each week by capstone peers and teaching assistants to make sure that the student keeps up with the agenda of the course. 
Upon completion of this course students will feel comfortable creating and/or updating existing front-end sites, utilizing existing frameworks, and testing sites for accessibility compliance.
This course is only open to students who have completed the first four courses in the Web Design for Everybody specialization: Introduction to HTML5, Introduction to CSS3, Interactivity with JavaScript, and Advanced Styling with Responsive Design.",HCI
Building Database Applications in PHP,"In this course, we&#x27;ll look at the object oriented patterns available in PHP. You&#x27;ll learn how to connect to a MySQL using the Portable Data Objects (PDO) library and issue SQL commands in the the PHP language. We&#x27;ll also look at how PHP uses cookies and manages session data. You&#x27;ll learn how PHP avoids double posting data, how flash messages are implemented, and how to use a session to log in users in web applications. We&#x27;ll then build the first &#x27;complete&#x27; application that has multiple screens to Create, Read, Update and Delete (CRUD) our data. This brings all the previous concepts together and will form the basis for all later web applications.",AR
"JavaScript, jQuery, and JSON","In this course, we&#x27;ll look at the JavaScript language, and how it supports the Object-Oriented pattern, with a focus on the unique aspect of how JavaScript approaches OO. We&#x27;ll explore a brief introduction to the jQuery library, which is widely used to do in-browser manipulation of the Document Object Model (DOM) and event handling. You&#x27;ll also learn more about JavaScript Object Notation (JSON), which is commonly used as a syntax to exchange data between code running on the server (i.e. in PHP) and code running in the browser (JavaScript/jQuery).
It is assumed that learners have already taken the Building Web Applications and Building Database Applications in PHP courses in this specialization.",HCI
Ruby on Rails: An Introduction,"Did you ever want to build a web application?  Perhaps you even started down that path in a language like Java or C#, when you realized that there was so much “climbing the mountain” that you had to do? Maybe you have heard about web services being all the rage, but thought they were too complicated to integrate into your web application. Or maybe you wondered how deploying web applications to the cloud works, but there was too much to set up just to get going.
 
In this course, we will explore how to build web applications with the Ruby on Rails web application framework, which is geared towards rapid prototyping.  Yes, that means building quickly! At the conclusion of this course, you will be able to build a meaningful web application and deploy it to the “cloud” using a Heroku PaaS (Platform as a Service). Best of all, it will almost feel effortless… Really!
 
“But wait”, you will say, “there is no way that we can build a useful application if there is no database involved. You need the data for an application to be useful.” Great point! But what if… instead of getting the data from the database, we get it from the internet by tapping into one of the web services out there that readily provides data needed by our application? “Ok, but that’s probably very complicated”, you will say. Take this course and you will be pleasantly surprised at just how easy it is!",SF
Capstone: Photo Tourist Web Application,"In this Capstone project for the Photo Tourist you will implement a Ruby on Rails web application that makes use of both a relational and NoSQL database for the backend and expose the data through services to the Internet using Web services and a responsive user interface operating in a browser from a desktop and mobile device. You will have a chance to revisit and apply what you have learned in our previous courses to build and deploy a fully functional web application to the cloud accessible to your co-workers, future employers, friends, and family.
In developing the Photo Tourist web application, you will get to work with different data types and data access scenarios (e.g., fielded data display and update, image upload/download, text search, access controlled information) to provide your users the ability to show off their photos and information from trips they have taken and to seek out photos and information from trips taken by others. Using the application you develop, your users will be able to
•	Create an account
•	Upload and download photos to the site and make them accessible to others
•	Provide descriptions of trips and photos that others can read
•	Organize photos by location and trip, 
•	Find photos based on location
•	Find photos based on text searches of descriptions 
•	Locate the place where the photo was taken on a map",IS
Business of Games and Entrepreneurship,"As well as a form of art and entertainment, games are about business. Whether you want to work at a game studio, start your own business or make games as a hobby, recognizing the dynamic landscape of the videogame industry is critical to finding your place. This course will introduce you to game production, project management, teamwork skills, and how to position your game ideas and yourself in the broader marketplace. By the end of the course, you will be able to develop an impactful portfolio of game work to get noticed and/or develop an effective business plan to bring your game to market.","AL
AR
SF"
"Responsive Website Basics: Code with HTML, CSS, and JavaScript ","In this course you will learn three key website programming and design languages: HTML, CSS and JavaScript. You will create a web page using basic elements to control layout and style.  Additionally, your web page will support interactivity. 
At the end of the course, you will be able to:
1. Define the purpose of HTML, CSS and JavaScript
2. Make a simple web page using HTML
3. Use CSS to control text styles and layout
4. Use CSS libraries such as Bootstrap to create responsive layouts
5. Use JavaScript variables and functions
6. Manipulate web page content using JavaScript
7. Respond to user input using JavaScript
In this course, you will complete: 
2 assignments writing HTML, CSS and JavaScript, each taking ~1 hour to complete
4 quizzes, each taking ~20 minutes to complete
1 programming exercise~30 minutes to complete
multiple practice quizzes, each taking ~5 minutes to complete
Participation in or completion of this online course will not confer academic credit for University of London programmes",HCI
Responsive Web Design,"In this course you will learn how to apply concepts from interaction design and human computer interaction in order to design and build an interactive, professional looking website. You will learn how to make your web page designs adapt to different screen sizes using responsive grid layouts. You will learn how to add navigation and other design elements, and you will learn how to separate data and display using JavaScript objects and templates. 
At the end of the course, you will be able to:
1. Explain why users need to know where they are, where they can go and what is on a web page
2. Create wireframe mockups of web pages 
3. Identify the key functional elements of web pages
4. Use Bootstrap components to realise page designs
5. Use JavaScript data structures such as arrays and objects to define the data used in a web page
6. Use the Handlebars template library to convert data to HTML 
7. Add interactivity to templates using JavaScript event listeners
In this course, you will complete:
1 website design assignment taking ~1 hour to complete
1 programming assignment taking ~1 hour to complete
4 quizzes, each taking ~20 minutes to complete
multiple practice quizzes, each taking ~5 minutes to complete
Participation in or completion of this online course will not confer academic credit for University of London programmes",HCI
Introduction to Meteor.js Development  ,"In this course, you will learn how to create a complete, multi-user web site using the Meteor.js framework and MongoDB. You will implement user authentication, security features, reactive templates and routing using iron router. You will carry out key database operations such as inserting, removing and updating data as well as sorting and filtering. You will see how a complete application can be built, line by line. 
At the end of the course, you will be able to:
1. Install the Meteor.js system and create a web application
2. Work with the Meteor.js packaging system
3. Write Meteor.js templates that can reactively display data
4. Use insert, remove and update operations on MongoDB
5. Write MongoDB data filters to search for and sort data
6 .Add  user authentication functionality to a website
7. Control what is displayed on the page using iron:router 
8. Implement basic security features 
In this course, you will complete:
1 server install assignment taking ~1 hour to complete
1 programming assignment taking ~8 hours to complete
4 quizzes, each taking ~20 minutes to complete
multiple practice quizzes, each taking ~5 minutes to complete
Prerequisites
This course is designed to build on top of the material delivered in the previous two courses in this specialisation. Therefore, we recommend that if you find this course too technically challenging that you first complete the previous courses before re-commencing this one. Specifically, we expect you to be able to code basic HTML, CSS and Javascript before you take this course. 
Participation in or completion of this online course will not confer academic credit for University of London programmes",SP
Java for Android,"This MOOC teaches you how to program core features and classes from the Java programming language that are used in Android, which is the dominant platform for developing and deploying mobile device apps. 
In particular, this MOOC covers key Java programming language features that control the flow of execution through an app (such as Java’s various looping constructs and conditional statements), enable access to structured data (such as Java&#x27;s built-in arrays and common classes in the Java Collections Framework, such as ArrayList and HashMap), group related operations and data into classes and interfaces (such as Java&#x27;s primitive and user-defined types, fields, methods, generic parameters, and exceptions), customize the behavior of existing classes via inheritance and polymorphism (such as subclassing and overriding virtual methods). Learners will apply these Java features in the context of core Android components (such as Activities and basic UI elements) by applying common tools (such as Android Studio) needed to develop Java programs and useful Android apps.  
Learners will work on several hands-on projects throughout the MOOC, i.e., each week will require learners to write solutions to programming assignments that reinforce the material covered in the lecture videos. There will be roughly 4-6 hours of student engagement time per week, including video lectures, quizzes, and programming assignments.",AR
"Android App Components - Intents, Activities, and Broadcast Receivers","This 4 week MOOC builds upon the overview of Java and Android covered in Course 1 by delving deeper into core Android app components, such as intents, activities, and broadcast receivers.  You will learn by example how to program these core Android components together with Android concurrency frameworks and basic Java file I/O classes (such as File and InputStream) and Android storage mechanisms (such as Shared Preferences). You&#x27;ll also learn how to use the Git source code management system. Throughout this MOOC you&#x27;ll work incrementally on a project involving downloading, storing, and display images from remote websites. Each week you will add additional capabilities to the project, based on material covered in the lecture videos. You&#x27;ll spend roughly 4 hours per week watching video lectures, taking quizzes, and programming assignments with Java and Android.","SP
AR
PL
SDF
SE
HCI"
Introduction To Swift Programming,"Introduction to Swift Programming is the first course in a four part specialization series that will provide you with the tools and skills necessary to develop an iOS App from scratch. By the end of this first course you will be able to demonstrate intermediate application of programming in Swift, the powerful new programming language for iOS. Guided by best practices you will become proficient with syntax, object oriented principles, memory management, functional concepts and more in programming with Swift. 
This course is unique in its dedication to teaching Swift programming. With new features and capabilities you will be at the forefront of writing iOS apps.
Currently this course is taught using Swift 2. The team is aware of the release of Swift 3 and will be making edits to the course in time. Please be aware that at this time the instruction is entirely with Swift 2. 
Please note that to take part in this course (and the full specialization) it is required to have a Mac computer and, though not required, ideally an iPhone, iPod, or an iPad. NOTE: This course has been designed and tested (and content delivered) on a Mac. While we are aware of hacks and workarounds for running Mac in a virtual machine on windows we do not recommended a PC. 
We hope you have fun on this new adventure.",AR
iOS App Development Basics,"iOS App Development Basics, the second course in the iOS App Development with Swift specialization, expands your programming skills and applies them to authentic app development projects. The topics covered in this course include Xcode basics, Core iOS and Cocoa Touch frameworks, simple user interface creation, MVC Architecture and much more.  With a focus on using Apple’s components to access sensors like camera, microphone and GPS, by the end of this course you will be able to create a basic App according to specified parameters and guidelines.
Currently this course is taught using Swift 2. The team is aware of the release of Swift 3 and will be making edits to the course in time. Please be aware that at this time the instruction is entirely with Swift 2.",SP
App Design and Development for iOS,"In App Design and Development for iOS, the third course of the iOS App Development with Swift specialization, you will be developing foundational programming skills to support graphical element presentation and data manipulation from basic functions through to advanced processing. You will continue to build your skill set to use and apply core graphics, touch handling and gestures, animations and transitions, alerts and actions as well as advanced algorithms, threading and more. By the end of this course you will be able to develop a more advanced, fully functioning app.
Currently this course is taught using Swift 2. The team is aware of the release of Swift 3 and will be making edits to the course in time. Please be aware that at this time the instruction is entirely with Swift 2.",HCI
Build Your Own iOS App,"In the Build Your Own iOS App capstone you will expand your repertoire of additional features and more advanced functions that may be implemented within the iOS environment. You will refine your development skill set and will apply your accumulated skills over the entire specialization series in an applied application development capstone project. This particular course is project based and structured around you building a high quality app as a capstone to the specialization.
Currently this course is taught using Swift 2. The team is aware of the release of Swift 3 and will be making edits to the course in time. Please be aware that at this time the instruction is entirely with Swift 2.",AR
Lean Software Development,"While scrum and XP were transforming the software development industry, there were another set of ideas (derived from lean manufacturing and Six Sigma) that started to influence software development methods.  These ideas around Lean Software Development forms the foundation of number of agile methods. 
In this course, we will explore lean concepts and cover some of the common Lean methods and techniques like Kanban, Value Stream Mapping, etc.
 
In this course, we will also learn techniques like Lean Startup and Design Thinking that can help team learn about user and market needs much faster and cheaper. 
As part of this course, you will also apply the knowledge gained  in this course to fictional case studies.  These projects will help you gain experience to confidently apply these techniques in real world.
At the end of the course,  you will be able to apply lean techniques / methods to software development.  You will also be able to apply methods to learn about your users and market needs much faster and cheaper.",SDF
Foundations of Objective-C App Development,"An introduction to the Objective-C programming language.  This will prepare you for more extensive iOS app development and build a foundation for advanced iOS development topics.
Objective-C programming requires a Mac laptop or desktop computer.  An iOS device is optional if the learner is willing to working exclusively with the simulator.  Some learners have been able to work with an OS X virtual machine on Windows, but explaining how to do that is beyond the scope of this course.
Upon completing this course, you will be able to:
1.       Read and write Objective-C
2.       Have a strong grasp of Objective-C objects
3.       Organize their code professionally using objects and blocks
4.       Prototype several entry-level apps",AR
Networking and Security in iOS Applications,"You will learn to extend your knowledge of making iOS apps so that they can securely interact with web services and receive push notifications. You&#x27;ll learn how to store data securely on a device using Core Data.  You’ll also learn to securely deploy apps to the App Store and beta users over-the-air.
The format of the course is through a series of code tutorials.  We will walk you through the creation of several apps that you can keep as a personal app toolbox.  When you make your own apps after this course, you can bring in these capabilities as needed.  When necessary we pop out of the code tutorials to talk about concepts at a higher level so that what you are programming makes sense.
Upon completing this course, you will be able to:
1.       Post Facebook, Twitter, Sina Weibo, Tencent Weibo messages to social media using single sign-on on behalf of a user.
2.       Use OAuth 2.0 to securely authenticate to Instagram and retrieve photos on behalf of a user
3.       JSON
4.       Describe JSON’s syntax
5.       Write well-formed JSON
6.       Work with JSON data objects in Objective-C
7.       Appropriately set the security settings for App Transport Security in iOS 9.0
8.       Use http, https and https with perfect forward secrecy to fetch web resources
9.       Obtain permissions to receive local push notifications
11.       Write an app that can send and receive local push notifications
12.       Obtain permissions to receive remote push notifications
13.       Write an app that can receive remote push notifications
14.       Authenticate using Apple’s cryptographic services such that the developer can use 3rd party infrastructure to send remote push notifications to their app.
15.       Securely store data on the user’s device.
16.       Authenticate using Apple’s cryptographic services such that they can deploy an app to the app store","SDF
IS
SP"
Best Practices for iOS User Interface Design,"You will learn to develop sophisticated user interfaces for iOS, with a focus on user interface design best practices, UI animations, and responsive design. You will learn about the key UI widgets, mapping interfaces and view restoration.",HCI
Toward the Future of iOS Development with Swift,"An introduction to the Swift programming language.  This will prepare you for more extensive iOS app development and build a foundation for advanced iOS development topics.
Upon completing this course, you will be able to:
1.       Associate the relationship of Swift and Objective-C and their use in iOS and Mac (OS X) programming
2.       Develop the ability to read and write Swift code
3.       Distinguish how both programming languages can be used together in applications
4.       Demonstrate how to write applications entirely in Swift with the help from several iOS programming samples
5.       Determine how Swift can be used for development on new platforms such as Apple Watch and Apple TV
6.       Create a working client-server iPhone application with location services that you can add to your portfolio.",AR
iOS Project: Transreality Game,"Students will produce a networked game that will leverage sensors on the phone to create a unique gaming experience.  The focus of the game will be to make it physical through real-world gestures, motion and knowledge of other players real-world location.  To do this students will need to integrate knowledge of graphics, networking, sensors, and user interface design alongside a skill set of tool usage.  The final project will involve milestones with opportunities to get ungraded peer review feedback from fellow learners so that they can iterate and improve their game program.  The final networked game that the students produce would be something they could showcase in job application materials, in an interview, or offer in the iTunes store.","GV
HCI
NC
PD
SP"
Programando con Java para aplicaciones Android,"¡Aprende lo mejor de Java para el desarrollo en Android! Descubre lo necesario para construir tus aplicaciones móviles de una forma sencilla, objetiva y práctica.
A lo largo del curso, verás diversos ejemplos para crear tu primer Hola Mundo y practicarás la programación orientada a objetos.","AR
IAS
DS
SP"
Fundamentos de Android,"Por medio de ejercicios prácticos, serás capaz de manipular las herramientas que Android te ofrece para desarrollar aplicaciones móviles. 
En este curso, instalarás el entorno de desarrollo Android Studio y manipularás sus más sofisticadas particularidades. Por ejemplo, la composición de archivos de un proyecto Android y los patrones más comunes para el desarrollo de tus aplicaciones.
Identificarás todas las opciones que tienes para emular con los Android Virtual Devices, su funcionamiento y configuración.
También, reconocerás, las herramientas exclusivas que Android Studio tiene para tus aplicaciones móviles.  Usando Material Design para Android harás que tus aplicaciones luzcan como siempre las quisiste. 
Además, conocerás las mejores prácticas de maquetado para tus aplicaciones, no codifiques si no tienes mockup.","AR
GV
HCI
PL
SDF"
Desarrollo de aplicaciones con Android,"Este curso te permitirá construir tu primer aplicación móvil profesional. Serás capaz de crear y controlar la vida de tus Activities y aprovechar el espacio en pantalla de los diferentes dispositivos Android implementando Fragments en tus aplicaciones. 
Dale persistencia a tu información utilizando todas las formas de almacenamiento que hay en Android desde un único archivo hasta una Base de Datos.
Podrás evaluar lo aprendido por medio de ejercicios prácticos que te permitirán ir desarrollando tu aplicación.",HCI
Desarrollo de aplicaciones avanzadas con Android,"En este curso se retoman los temas vistos en cursos anteriores. Se complementan con aspectos prácticos como la forma de implementar mapas en tus proyectos con el API de Google Maps. También, muestra cómo aprovechar el multitask de Android y hacer animaciones en 2D  para llevar tus aplicaciones a más dispositivos como weareables, televisiones y autos.
Después de este curso, podrás subir tu aplicación a Google Play Store y hacerte visible para el mundo entero.","AR
GV
HCI
OS
SF
SP"
Proyecto final - Construyendo una aplicación profesional con Android,"¡Es momento de construir tu propia aplicación profesional! 
En este curso, no sólo deberás desarrollar tu aplicación móvil sino que, ésta, contribuirá a la mejora de tu ciudad, de tu país o del mundo. 
Para lograrlo, retomarás lo aprendido a lo largo del programa especializado, usarás las herramientas avanzadas de Android y, por supuesto, es necesaria tu creatividad. 
Prepárate para convertirte en un desarrollador de aplicaciones profesionales.","AR
IAS
OS
PL
SF
SDF
SP"
Design Patterns,"This course extends object-oriented analysis and design by incorporating design patterns to create interactive applications. Through a survey of established design patterns, you will gain a foundation for more complex software applications. Finally, you will identify problematic software designs by referencing a catalog of code smells.
You will be challenged in the Capstone Project to redesign an existing Java-based Android application to implement a combination of design patterns. You will also critique a given Java codebase for code smells.
After completing this course, you will be able to: 
• Demonstrate how to use design patterns to address user interface design issues.	
• Identify the most suitable design pattern to address a given application design problem.	
• Apply design principles (e.g., open-closed, dependency inversion, least knowledge).	
• Critique code by identifying and refactoring anti-patterns.
• Apply the model-view-controller architectural pattern.",PL
Software Architecture,"The way that software components — subroutines, classes, functions, etc. —  are arranged,  and the interactions between them, is called architecture. In this course you will study the ways these architectures are represented, both in UML and other visual tools. We will introduce the most common architectures, their qualities, and tradeoffs. We will talk about how architectures are evaluated, what makes a good architecture, and an architecture can be improved. We&#x27;ll also talk about how the architecture touches on the process of software development.
In the Capstone Project you will document a Java-based Android application with UML diagrams and analyze evaluate the application’s architecture using the Architecture Tradeoff Analysis Method (ATAM).
After completing this course, you will be able to: 
• Compare and contrast the components, connections, protocols, topologies, constraints, tradeoffs, and variations of different types of architectural styles used in the design of applications and systems (e.g., main program and subroutine, object-oriented, interpreters, pipes and filters, database centric, event-based).	
• Describe the properties of layered and n-tier architectures.	
• Create UML ipackage, component, and deployment diagrams to express the architectural structure of a system.	
• Explain the behaviour of a system using UML activity diagrams.	
• Document a multi-application system with a layered architecture.",AR
Web Application Development: Basic Concepts,"This is the first course in a Coursera Specialization track involving Web Application Architectures.  This course will give you the basic background, terminology and fundamental concepts that you need to understand in order to build modern full stack web applications. A full stack web developer is familiar with each &quot;layer&quot;  of the software technologies involved in a web application, including data modeling and database technologies, the web server environment and middleware components, network protocols, the user interface and basic visual design and user interaction concepts. 
In this course we will learn by doing.  We will start by learning the major components of web application architectures, along with the fundamental design patterns and philosophies that are used to organize them.  You will build and continually refine a fully functional full-stack web application as we progress through the modules in this course.  Along the way you will be exposed to agile software development practices, numerous tools that software engineers are expected to know how to use, and a modern web application development framework.
This course is also available in Spanish. To join the Spanish version, visit this page: https://www.coursera.org/learn/apliweb.",IAS
Desarrollo de Aplicaciones Web: Conceptos Básicos,"Este es el primer curso en una línea de especialización de Coursera que trata el desarrollo de aplicaciones Web. Este curso le dará los conocimienots básicos, la terminología y los conceptos fundamentales que son necesarios para construir aplicaciones web integradas modernas. Un desarrollador de aplicaciones web integradas está familiarizado con cada &quot;capa&quot; de las tecnologías de software que participan en una aplicación web, incluidas las tecnologías de modelado de datos y bases de datos, los componentes del entorno de servidor web y middleware, protocolos de red, la interfaz de usuario y diseño visual básicos, y los conceptos de interacción del usuario.
En este curso vamos a aprender practicando. Vamos a empezar por el aprendizaje de los principales componentes de las arquitecturas de aplicaciones web, junto con los patrones de diseño fundamentales y filosofías que se utilizan para organizarlos. El alumno construirá y perfeccionará continuamente una aplicación web integrada totalmente funcional a medida que avanzamos a través de los módulos de este curso. En el camino el alumno levará a cabo prácticas ágiles de desarrollo de softwar, numerosas herramientas que los ingenieros de software deben sabe cómo utilizar, y un marco de desarrollo de aplicaciones web integradas modernas.",SE
Game development based on Unity engine,"Thanks to the Internet and the rapid growth of smartphones, mobile games such as Angry Birds and Temple Run have been hugely successful, making indie developers the first to make money. The development of 3D online games on mobile platforms has become a trend, with excellent works springing up. Clash of Clans (Clash of Clans) developed by Supercell Oy and Hearth Stone (Hearthstone) developed by Blizzard Entertainment are popular worldwide. Famous companies in the industry, such as NetEase, Tencent, Giant and Kaiying Network, have also shifted their game business focus to mobile platforms. A large number of new mobile game companies, such as Lilith and Yinhan Technology, have emerged in the market.",GV
Service-Oriented Architecture,"In addition, network development, artificial intelligence, Shader (Shader) programming and other advanced functions of Unity engine will be studied in the second course of this special course about game programming.","GV
AR
IM"
Introduction to Virtual Reality,"In this course, you will understand the main features of The Unity engine and learn how to develop 3D games for mobile platforms using the Unity engine. You will be able to take a step forward in the game industry and indie game development.","AR
GV
SF
SP"
Programming Mobile Applications for Android Handheld Systems: Part 2,"This course introduces you to the design and implementation of Android applications for mobile devices. You will build upon concepts from the prior course, including handling notifications, using multimedia and graphics and incorporating touch and gestures into your apps.",HCI
Advanced game development based on Unity engine,"Mobile online games such as Clash Royale and Cross Fire are popular among gamers. This course ""Advanced Unity Game Programming"" is the second game programming course of the special course. Through the course ""Basic Unity Game Programming"", learners have the basic ability to develop 3D single-player games on mobile platforms, but there is still a big gap with the development of network mobile games with next generation screen. The course ""Advanced Unity Game Programming"" focuses on the development of mobile online games, improving the game's playability and picture effect, and optimizing the performance of the game.",SP
Getting started with Augmented Reality,"This course will teach you the basics of developing mobile applications using Mixed and Augmented Reality (MAR) technologies.
 
Through hands-on projects, you’ll learn practical techniques to rapidly and easily prototype three different applications for Android smartphones and tablets – even with no previous coding experience.
If you’re a creative entrepreneur, this is your ideal introduction to today’s trends in the products and technologies of the emerging augmented reality market.
If you’re a journalist, media/content producer or teacher, you’ll discover how to augment print-based media with sounds, images and videos, and see how to create an augmented city map and geo-located augmented reality game for your audience.
If you’re a web designer or app developer, you’ll gain a range of technological building blocks that you can integrate into your service portfolio.
Whatever your background, you’ll learn how to design cutting-edge visual experiences that will enhance your job prospects.
What you’ll learn
•	All about the main MAR products and technologies on the market today
•	How to build three different augmented reality applications using an augmented reality browser and authoring tools
•	How to include image recognition and object tracking 
•	How to use geolocation functionality for outdoor augmented reality
•	Details of the ISO-ARAF standard, an innovative language for representing augmented reality content
Prerequisites
•	You don’t need any prior technical knowledge to take this course. 
•	If you’re familiar with markup languages (HTML, XML, etc) and content management systems, you may be more at ease  with the key concepts and techniques.
This MOOC is supported by the Patrick and Lina Drahi Foundation.
Follow us!
Twitter : https://twitter.com/MOOCMAR
Facebook : https://www.facebook.com/MOOCMAR/",AR
Web Applications for Everybody,"This specialization is a basic introduction to building web applications, and is an excellent starting point for learners who already have a basic understanding of programming, HTML, and CSS. In Web Applications for Everybody, learners will be introduced to web and database applications in PHP, using SQL for database creation, as well as functionality in JavaScript, jQuery, and JSON.
This specialization (and its prerequisites) will prepare learners with no experience in programming or technology for an entry level web developer position in PHP.","SP
SE"
Web Design for Everybody (Basics of Web Development and Coding),"This Specialization covers how to write syntactically correct HTML5 and CSS3, and how to create interactive web experiences with JavaScript. Mastering this range of technologies will allow you to develop high quality web sites that, work seamlessly on mobile, tablet, and large screen browsers accessible. During the capstone you will develop a professional-quality web portfolio demonstrating your growth as a web developer and your knowledge of accessible web design. This will include your ability to design and implement a responsive site that utilizes tools to create a site that is accessible to a wide audience, including those with visual, audial, physical, and cognitive impairments.",HCI
iOS App Development with Swift,"Master Swift, design elegant interactions, and create a fully functioning iOS app.
This Specialization covers the fundamentals of iOS application development in the Swift programming language. You’ll learn to use development tools such as XCode, design interfaces and interactions and evaluate their usability, and integrate camera, photo, and location information to enhance your app. In the final Capstone Project, you’ll apply your skills to create a fully-functioning photo editing app for iPhone, iPad, and Apple Watch. A Mac computer is required for success in this course.",HCI
Analysis of Algorithms,"This course teaches a calculus that enables precise quantitative predictions of large combinatorial structures. In addition, this course covers generating functions and real asymptotics and then introduces the symbolic method in the context of applications in the analysis of algorithms and basic structures such as permutations, trees, strings, words, and mappings.","DS
AL
AR"
Approximation Algorithms Part II,"Approximation algorithms, Part 2
This is the continuation of Approximation algorithms, Part 1. Here you will learn linear programming duality applied to the design of some approximation algorithms, and semidefinite programming applied to Maxcut.
By taking the two parts of this course, you will be exposed to a range of problems at the foundations of theoretical computer science, and to powerful design and analysis techniques. Upon completion, you will be able to recognize, when faced with a new combinatorial optimization problem, whether it is close to one of a few known basic problems, and will be able to design linear programming relaxations and use randomized rounding to attempt to solve your own problem. The course content and in particular the homework is of a theoretical nature without any programming assignments.  
This is the second of a two-part course on Approximation Algorithms.",AL
"Computer Science:  Algorithms, Theory, and Machines","This course  introduces the broader discipline of computer science to people having basic familiarity with Java programming.  It covers the second half of our book Computer Science: An Interdisciplinary Approach (the first half is covered in our Coursera course Computer Science: Programming with a Purpose, to be released in the fall of 2018). Our intent is to demystify computation and to build awareness about the substantial intellectual underpinnings and rich history of the field of computer science.
First, we introduce classic algorithms along with scientific techniques for evaluating performance, in the context of modern applications. Next, we introduce classic theoretical models that allow us to address fundamental questions about computation, such as computability, universality, and intractability. We conclude with machine architecture (including machine-language programming and its relationship to coding in Java) and logic design (including a full CPU design built from the ground up).
The course emphasizes the relationships between applications programming, the theory of computation, real computers, and the field&#x27;s history and evolution, including the nature of the contributions of Boole, Shannon, Turing, von Neumann, and others.","AL
AR
DS
PL
SDF"
Approximation Algorithms Part I,"Approximation algorithms, Part I
How efficiently can you pack objects into a minimum number of boxes? How well can you cluster nodes so as to cheaply separate a network into components around a few centers? These are examples of NP-hard combinatorial optimization problems. It is most likely impossible to solve such problems efficiently, so our aim is to give an approximate solution that can be computed in polynomial time and that at the same time has provable guarantees on its cost relative to the optimum. 
This course assumes knowledge of a standard undergraduate Algorithms course, and particularly emphasizes algorithms that can be designed using linear programming, a favorite and amazingly successful technique in this area. By taking this course, you will be exposed to a range of problems at the foundations of theoretical computer science, and to powerful design and analysis techniques. Upon completion, you will be able to recognize, when faced with a new combinatorial optimization problem, whether it is close to one of a few known basic problems, and will be able to design linear programming relaxations and use randomized rounding to attempt to solve your own problem. The course content and in particular the homework is of a theoretical nature without any programming assignments.  
This is the first of a two-part course on Approximation Algorithms.","AL
DS"
Algorithms for DNA Sequencing,"We will learn computational methods -- algorithms and data structures -- for analyzing DNA sequencing data. We will learn a little about DNA, genomics, and how DNA sequencing is used.  We will use Python to implement key algorithms and data structures and to analyze real genomes and DNA sequencing datasets.","SDF
AL
AR
PL
SF"
"Shortest Paths Revisited, NP-Complete Problems and What To Do About Them","In order to improve students' quality and innovation ability, mathematical modeling and efficient solving algorithm training are carried out. The main content involves: establishing mathematical model, designing correct solving algorithm, estimating algorithm efficiency, improving algorithm approach, estimating problem computational complexity, determining difficult problem and coping strategy, etc. This course is the basic part of the algorithm course, mainly involving the design, analysis and improvement of algorithms, and other content related to computational complexity will be introduced in the subsequent courses.","AL
AR"
"Graph Search, Shortest Paths, and Data Structures",Course Content Arrangement,"AL
AR
IAS
NC
OS
PL
SE
SP"
Data Structures,"The content of this course is divided into two parts: basic knowledge of algorithm, general algorithm design technology and analysis method.","AL
AR
IAS
DS
PD
SDF
SP"
Algorithmic Toolbox,"The second part is the general algorithm design techniques and analysis methods, mainly introduces divide-and-conquer strategy, dynamic programming, greedy method, backtracking and branch bound. This paper mainly introduces the application conditions, analysis methods and improvement approaches of these design techniques, and gives some important applications.","AL
DS"
"Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization","This course will teach you the &quot;magic&quot; of getting deep learning to work well. Rather than the deep learning process being a black box, you will understand what drives performance, and be able to more systematically get good results. You will also learn TensorFlow. 
After 3 weeks, you will: 
- Understand industry best-practices for building deep learning applications. 
- Be able to effectively use the common neural network &quot;tricks&quot;, including initialization, L2 and dropout regularization, Batch normalization, gradient checking, 
- Be able to implement and apply a variety of optimization algorithms, such as mini-batch gradient descent, Momentum, RMSprop and Adam, and check for their convergence. 
- Understand new best-practices for the deep learning era of how to set up train/dev/test sets and analyze bias/variance
- Be able to implement a neural network in TensorFlow. 
This is the second course of the Deep Learning Specialization.","AL
AR
IAS
NC
PL
SDF
SE
SP"
"Excel/VBA for Creative Problem Solving, Part 1","&quot;Excel/VBA for Creative Problem Solving, Part 1&quot; is aimed at learners who are seeking to augment, expand, optimize, and increase the efficiency of their Excel spreadsheet skills by tapping into the powerful programming, automation, and customization capabilities available with Visual Basic for Applications (VBA).  
This course is the first part of a three-part series and Specialization that focuses on the application of computing techniques in Excel/VBA to solve problems.  In this course (Part 1), you will: 1) create macros to automate procedures in Excel; 2) define your own user-defined functions; 3) create basic subroutines to interface with the user; 4) learn the basic programming structures in VBA; and 5) automate Excel’s Goal Seek and Solver tools and use numerical techniques to create “live solutions” to solve targeting and optimization problems.
New to computer programming?  The extremely intuitive and visual nature of VBA lends itself nicely to teaching and learning - what a fun way to learn to code!  No prior knowledge in programming nor advanced math skills are necessary yet seasoned programmers will pick up new and creative spreadsheet problem solving strategies.
After you have learned the basics of VBA, each module will introduce foundational and broad problems inspired by situations that you might encounter in the real world.  To pass each module, you&#x27;ll need to pass a mastery quiz and complete a problem solving assignment.  This course is unique in that the weekly assignments are completed in-application (i.e., on your own computer in Excel), providing you with valuable hands-on training.","AL
DS
PD
PL
SDF"
"Excel/VBA for Creative Problem Solving, Part 2","&quot;Excel/VBA for Creative Problem Solving, Part 2&quot; builds off of knowledge and skills obtained in &quot;Excel/VBA for Creative Problem Solving, Part 1&quot; and is aimed at learners who are seeking to augment, expand, optimize, and increase the efficiency of their Excel spreadsheet skills by tapping into the powerful programming, automation, and customization capabilities available with Visual Basic for Applications (VBA).
In Part 2 of the course, learners will: 1) learn how to work with arrays and import/export arrays from/to Excel using VBA code; 2) learn how to work with text strings and write data to .txt files and import information from .txt files; 3) automate the import, modification, and consolidation of information from multiple worksheets into a central worksheet as well as the import of information from multiple workbooks to a central workbook; and 4) gain experience with creating professional user forms to interface with the user, perform advanced calculations, and manipulate data on the spreadsheet.
Learners who have a foundational understanding of VBA code and programming structures can jump right into Part 2 of the course without taking Part 1 and use the screencasts in Part 1 as reference.
Each module will introduce foundational and broad problems inspired by situations that you might encounter in the real world.  To pass each module, you&#x27;ll need to pass a mastery quiz and complete a problem solving assignment.  This course is unique in that the weekly assignments are completed in-application (i.e., on your own computer in Excel), providing you with valuable hands-on training.","AL
AR
PD
SDF"
Genomic Data Science and Clustering (Bioinformatics V),"How do we infer which genes orchestrate various processes in the cell?  How did humans migrate out of Africa and spread around the world? In this class, we will see that these two seemingly different questions can be addressed using similar algorithmic and machine learning techniques arising from the general problem of dividing data points into distinct clusters.
In the first half of the course, we will introduce algorithms for clustering a group of objects into a collection of clusters based on their similarity, a classic problem in data science, and see how these algorithms can be applied to gene expression data.
In the second half of the course, we will introduce another classic tool in data science called principal components analysis that can be used to preprocess multidimensional data before clustering in an effort to greatly reduce the number dimensions without losing much of the &quot;signal&quot; in the data.
Finally, you will learn how to apply popular bioinformatics software tools to solve a real problem in clustering.",SDF
Bioinformatics Capstone: Big Data in Biology,"In this course, you will learn how to use the BaseSpace cloud platform developed by Illumina (our industry partner) to apply several standard bioinformatics software approaches to real biological data.
In particular, in a series of Application Challenges will see how genome assembly can be used to track the source of a food poisoning outbreak, how RNA-Sequencing can help us analyze gene expression data on the tissue level, and compare the pros and cons of whole genome vs. whole exome sequencing for finding potentially harmful mutations in a human sample.
Plus, hacker track students will have the option to build their own genome assembler and apply it to real data!",PD
Principles of Computing (Part 2),"This two-part course introduces the basic mathematical and programming principles that underlie much of Computer Science. Understanding these principles is crucial to the process of creating efficient and well-structured solutions for computational problems.  To get hands-on experience working with these concepts, we will use the Python programming language. The main focus of the class will be weekly mini-projects that build upon the mathematical and programming principles that are taught in the class. To keep the class fun and engaging, many of the projects will involve working with strategy-based games.
In part 2 of this course,  the programming portion of the class will focus on concepts such as recursion, assertions, and invariants. The mathematical portion of the class will focus on searching, sorting, and recursive data structures.  Upon completing this course, you will have a solid foundation in the principles of computation and programming.  This will prepare you for the next course in the specialization, which will begin to introduce a structured approach to developing and analyzing algorithms.  Developing such algorithmic thinking skills will be critical to writing large scale software and solving real world computational problems.","AL
AR
PL
SDF
SE"
Neural Networks and Deep Learning,"If you want to break into cutting-edge AI, this course will help you do so. Deep learning engineers are highly sought after, and mastering deep learning will give you numerous new career opportunities. Deep learning is also a new &quot;superpower&quot; that will let you build AI systems that just weren&#x27;t possible a few years ago. 
In this course, you will learn the foundations of deep learning. When you finish this class, you will:
- Understand the major technology trends driving Deep Learning
- Be able to build, train and apply fully connected deep neural networks 
- Know how to implement efficient (vectorized) neural networks 
- Understand the key parameters in a neural network&#x27;s architecture 
This course also teaches you how Deep Learning actually works, rather than presenting only a cursory or surface-level description. So after completing it, you will be able to apply deep learning to a your own applications. If you are looking for a job in AI, after this course you will also be able to answer basic interview questions. 
This is the first course of the Deep Learning Specialization.",IS
Structuring Machine Learning Projects,"You will learn how to build a successful machine learning project. If you aspire to be a technical leader in AI, and know how to set direction for your team&#x27;s work, this course will show you how.
Much of this content has never been taught elsewhere, and is drawn from my experience building and shipping many deep learning products. This course also has two &quot;flight simulators&quot; that let you practice decision-making as a machine learning project leader. This provides &quot;industry experience&quot; that you might otherwise get only after years of ML work experience.
After 2 weeks, you will: 
- Understand how to diagnose errors in a machine learning system, and 
- Be able to prioritize the most promising directions for reducing error
- Understand complex ML settings, such as mismatched training/test sets, and comparing to and/or surpassing human-level performance
- Know how to apply end-to-end learning, transfer learning, and multi-task learning
I&#x27;ve seen teams waste months or years through not understanding the principles taught in this course. I hope this two week course will save you months of time.
This is a standalone course, and you can take this so long as you have basic machine learning knowledge. This is the third course in the Deep Learning Specialization.",IS
Convolutional Neural Networks,"This course will teach you how to build convolutional neural networks and apply it to image data. Thanks to deep learning, computer vision is working far better than just two years ago, and this is enabling numerous exciting applications ranging from safe autonomous driving, to accurate face recognition, to automatic reading of radiology images. 
You will:
- Understand how to build a convolutional neural network, including recent variations such as residual networks.
- Know how to apply convolutional networks to visual detection and recognition tasks.
- Know to use neural style transfer to generate art.
- Be able to apply these algorithms to a variety of image, video, and other 2D or 3D data.
This is the fourth course of the Deep Learning Specialization.",AR
Sequence Models,"This course will teach you how to build models for natural language, audio, and other sequence data. Thanks to deep learning, sequence algorithms are working far better than just two years ago, and this is enabling numerous exciting applications in speech recognition, music synthesis, chatbots, machine translation, natural language understanding, and many others. 
You will:
- Understand how to build and train Recurrent Neural Networks (RNNs), and commonly-used variants such as GRUs and LSTMs.
- Be able to apply sequence models to natural language problems, including text synthesis. 
- Be able to apply sequence models to audio applications, including speech recognition and music synthesis.
This is the fifth and final course of the Deep Learning Specialization.
deeplearning.ai is also partnering with the NVIDIA Deep Learning Institute (DLI) in Course 5, Sequence Models, to provide a programming assignment on Machine Translation with deep learning. You will have the opportunity to build a deep learning project with cutting-edge, industry-relevant content.","AL
AR
NC
SP"
Discrete mathematics,"Discrete mathematics is one of the basic courses for computer majors. This course focuses on the important basic knowledge of computer science, such as counting problem of discrete objects, graph theory problem and network flow problem. This course will provide the necessary foundation for the future, such as data structure, algorithm design, complexity theory. The course content has important applications in the frontier fields of artificial intelligence, machine learning, network design and analysis. The course focuses on developing students' ability of logical thinking and problem solving.",DS
Algorithm based,"Algorithm represents the describe the strategy to solve the problem using the method of system mechanism, Beijing university of the curriculum will take you one by one to explore algorithm based enumeration, binary, greedy, recursive, depth-first search and breadth-first search, dynamic programming and other classic algorithms, realize their clever conception, feeling their USES algorithms to solve the problem of unique charm. By completing this course, you will not only be able to understand the principles of these algorithms, but also be able to apply and implement them flexibly. The programming tasks in this course will fully train your thinking and hands-on skills and develop the habit of thinking comprehensively and carefully. To meet the requirements of this course means that you have a preliminary algorithm foundation and strong programming ability.",AL
Advanced data structures and algorithms,"After learning basic data structures, we can now use programs to solve some real-world problems. But how do you improve the efficiency of your application?","AL
AR
CN
DS
IAS
OS
PL
SDF
SE
SP"
Program development project practice,"Advanced data structures and algorithms can meet the requirements of data scale and running time of some complex problems according to the actual situation, and help us solve problems more effectively. When we are faced with practical problems, advanced data structures and algorithms give us a broader space to choose the data structure that best fits the problem itself, and use relevant algorithms to improve operation efficiency.","AL
DS"
Machine Learning Foundations---Mathematical Foundations,"By the end of this course, you will be familiar with advanced data structures such as multidimensional arrays, generalized tables, Trie trees, AVL trees, and extended trees, and will be able to efficiently solve complex real-world applications with algorithms related to inner sorting, outer sorting, retrieval, and indexing. The rational use of these advanced data structures and related algorithms is the key factor for the efficiency of program operation. Learning this course well will make you more handy in later computer courses and project design, and will also let you stand in a higher perspective to understand problems and design programs.","AL
DS"
Discrete Mathematics Generality,"Discrete mathematics is the basic theory of computer science, the basic knowledge of discrete structure and the formalization of logical thinking are the basic skills of information technology students, and the basic concept of discrete mathematics is an important basis for science students to learn information courses.","DS
AL"
Advanced Data Structures in Java,"This course introduces the concept of computer science and information technology theory and the thought method, introduction to mathematical logic, set theory, graph theory, abstract algebra, and the basic concept of formal language and automaton and other parts, introduces basic concept of discrete mathematics and the connection between the spatial information technology and the combination of training students to understand and master the basic concept of discrete mathematics, Use formal methods to analyze problems, and be able to consciously use logical analysis, structural analysis and isomorphic analogy to solve problems.","AL
DS
IM"
Machine Learning Foundations---Algorithmic Foundations,"Machine learning is the study that allows computers to adaptively improve their performance with experience accumulated from the data observed. Our two sister courses teach the most fundamental algorithmic, theoretical and practical tools that any user of machine learning needs to know. This second course of the two would focus more on algorithmic tools, and the other course would focus more on mathematical tools.",IS
Data structure Fundamentals,"Learning C/C++ language, we already know how to program to solve problems, so how to deal with practical problems?","AL
AR
IAS
SDF
PL
SP"
Introduction to Computing and C language fundamentals,"Data structure is the basis of computer programming. It tells us how data is organized and stored in a computer. It can help us describe information and its relationships in practical problems. When we have a structured understanding of the actual problem itself, we can choose the appropriate solution.","AL
IAS
DS
HCI
IS
PL
SDF
SE
SP"
C Advanced programming,"By the end of this course, you will have mastered classic data structures such as linear tables, stacks and queues, strings, binary trees, trees, graphs, etc., and will use these basic data structures and related algorithms to solve practical problems. Solid knowledge of data structure is the key to project development and structural hierarchy design. Learning this course will make you get twice the result with half the effort in senior computer courses and graduation project design, and will also lay a solid foundation for you to become an excellent programmer.","SDF
AL
AR
PL
IS
NC
PD
SF"
C++ programming,"Supplementary: The content of this course is from the textbook: Data Structure and Algorithm (zhang Ming, Wang Tengjiao, Zhao Haiyan), Higher Education Press, 2008.","AL
DS"
Probabilistic Graphical Models 1: Representation,"Probabilistic graphical models (PGMs) are a rich framework for encoding probability distributions over complex domains: joint (multivariate) distributions over large numbers of random variables that interact with each other. These representations sit at the intersection of statistics and computer science, relying on concepts from probability theory, graph algorithms, machine learning, and more. They are the basis for the state-of-the-art methods in a wide variety of applications, such as medical diagnosis, image understanding, speech recognition, natural language processing, and many, many more. They are also a foundational tool in formulating many machine learning problems. 
This course is the first in a sequence of three. It describes the two basic PGM representations: Bayesian Networks, which rely on a directed graph; and Markov networks, which use an undirected graph. The course discusses both the theoretical properties of these representations as well as their use in practice. The (highly recommended) honors track contains several hands-on assignments on how to represent some real-world problems. The course also presents some important extensions beyond the basic PGM representation, which allow more complex models to be encoded compactly.",IS
Probabilistic Graphical Models 2: Inference,"Probabilistic graphical models (PGMs) are a rich framework for encoding probability distributions over complex domains: joint (multivariate) distributions over large numbers of random variables that interact with each other. These representations sit at the intersection of statistics and computer science, relying on concepts from probability theory, graph algorithms, machine learning, and more. They are the basis for the state-of-the-art methods in a wide variety of applications, such as medical diagnosis, image understanding, speech recognition, natural language processing, and many, many more. They are also a foundational tool in formulating many machine learning problems. 
This course is the second in a sequence of three. Following the first course, which focused on representation, this course addresses the question of probabilistic inference: how a PGM can be used to answer questions. Even though a PGM generally describes a very high dimensional distribution, its structure is designed so as to allow questions to be answered efficiently. The course presents both exact and approximate algorithms for different types of inference tasks, and discusses where each could best be applied. The (highly recommended) honors track contains two hands-on programming assignments, in which key routines of the most commonly used exact and approximate algorithms are implemented and applied to a real-world problem.",IS
Probabilistic Graphical Models 3: Learning,"Probabilistic graphical models (PGMs) are a rich framework for encoding probability distributions over complex domains: joint (multivariate) distributions over large numbers of random variables that interact with each other. These representations sit at the intersection of statistics and computer science, relying on concepts from probability theory, graph algorithms, machine learning, and more. They are the basis for the state-of-the-art methods in a wide variety of applications, such as medical diagnosis, image understanding, speech recognition, natural language processing, and many, many more. They are also a foundational tool in formulating many machine learning problems. 
This course is the third in a sequence of three. Following the first course, which focused on representation, and the second, which focused on inference, this course addresses the question of learning: how a PGM can be learned from a data set of examples. The course discusses the key problems of parameter estimation in both directed and undirected models, as well as the structure learning task for directed models. The (highly recommended) honors track contains two hands-on programming assignments, in which key routines of two commonly used learning algorithms are implemented and applied to a real-world problem.",IS
"Writing, Running, and Fixing Code in C","Building on the course Programming Fundamentals, this course will teach you how to write code by first planning what your program should do—an important approach for novice and professional programmers. You will learn how to compile and run your program, and then how to test and debug it. This course builds on the Seven Steps you have already learned and provides a framework for systematically testing for problems and fixing them, so you can find and fix problems efficiently.",PD
Mathematical Foundations for Cryptography,"Welcome to Course 2 of Introduction to Applied Cryptography. In this course, you will be introduced to basic mathematical principles and functions that form the foundation for cryptographic and cryptanalysis methods. These principles and functions will be helpful in understanding symmetric and asymmetric cryptographic methods examined in Course 3 and Course 4. These topics should prove especially useful to you if you are new to cybersecurity. It is recommended that you have a basic knowledge of computer science and basic math skills such as algebra and probability.",SP
Number Theory and Cryptography,"We all learn numbers from the childhood. Some of us like to count, others hate it, but any person uses numbers everyday to buy things, pay for services, estimated time and necessary resources. People have been wondering about numbers’ properties for thousands of years. And for thousands of years it was more or less just a game that was only interesting for pure mathematicians. Famous 20th century mathematician G.H. Hardy once said “The Theory of Numbers has always been regarded as one of the most obviously useless branches of Pure Mathematics”. Just 30 years after his death, an algorithm for encryption of secret messages was developed using achievements of number theory. It was called RSA after the names of its authors, and its implementation is probably the most frequently used computer program in the word nowadays. Without it, nobody would be able to make secure payments over the internet, or even log in securely to e-mail and other personal services. In this short course, we will make the whole journey from the foundation to RSA in 4 weeks. By the end, you will be able to apply the basics of the number theory to encrypt and decrypt messages, and to break the code if one applies RSA carelessly. You will even pass a cryptographic quest!
As prerequisites we assume only basic math (e.g., we expect you to know what is a square or how to add fractions), basic programming in python (functions, loops, recursion), common sense and curiosity. Our intended audience are all people that work or plan to work in IT, starting from motivated high school students.","AL
PD
IAS"
Discrete Optimization,"Tired of solving Sudokus by hand? This class teaches you how to solve complex search problems with discrete optimization concepts and algorithms, including constraint programming, local search, and mixed-integer programming.
Optimization technology is ubiquitous in our society. It schedules planes and their crews, coordinates the production of steel, and organizes the transportation of iron ore from the mines to the ports. Optimization clears the day-ahead and real-time markets to deliver electricity to millions of people. It organizes kidney exchanges and cancer treatments and helps scientists understand the fundamental fabric of life, control complex chemical reactions, and design drugs that may benefit billions of individuals.
This class is an introduction to discrete optimization and exposes students to some of the most fundamental concepts and algorithms in the field. It covers constraint programming, local search, and mixed-integer programming from their foundations to their applications for complex practical problems in areas such as scheduling, vehicle routing, supply-chain optimization, and resource allocation.","AL
DS"
Delivery Problem,"We’ll implement (in Python) together efficient programs for a problem needed by delivery companies all over the world millions times per day — the travelling salesman problem. The goal in this problem is to visit all the given places as quickly as possible. How to find an optimal solution to this problem quickly? We still don’t have provably efficient algorithms for this difficult computational problem and this is the essence of the P versus NP problem, the most important open question in Computer Science. Still, we’ll implement several solutions for real world instances of the travelling salesman problem. While designing these solutions, we will rely heavily on the material learned in the courses of the specialization: proof techniques, combinatorics, probability, graph theory. We’ll see several examples of using discrete mathematics ideas to get more and more efficient solutions.","AL
AR
PL
SDF"
Java programming,"The main objectives of ""Java Programming"" course are three: first, to master the syntax of Java language, to have a deeper understanding of the Java language mechanism, and to master the object-oriented characteristics of Java language. Two, master the basic API in JavaSE, master the application in collection, thread, input and output, graphical user interface, network, etc. 3. Be able to write applications of a certain scale, develop good programming habits, and be able to improve the quality of code by means of refactoring, design patterns, and unit testing.","AR
PL
SF
SP"
Building Arduino robots and devices,"For many years now, people have been improving their tools, studying the forces of nature and bringing them under control, using the energy of the nature to operate their machines. Last century is noted for the creation of machines which can operate other machines. Nowadays the creation of devices that interact with the physical world is available to anyone. 
Our course consists of a series of practical problems on making things that work independently: they make their own decisions, act, move, communicate with each other and people around, and control other devices. We will demonstrate how to assemble such devices and programme them using the Arduino platform as a basis.
After this course, you will be able to create devices that read the data about the external world with a variety of sensors, receive and forward this data to a PC, the Internet and mobile devices, and control indexing and the movement. The creation of such devices will involve design, the study of their components, the assemblage of circuit boards, coding and diagnostics. Along with the creation of the devices themselves, you will perform visualization on a PC, create a web page that will demonstrate one of your devices, and figure out how an FDM 3D-printer is configured and how it functions.   
Besides those keen on robotics or looking to broaden their horizons and develop their skills, the course will also be useful to anyone facing the task of home and industrial automation, as well as to anyone engaged in industrial design, advertising and art. 
The course does not require any special knowledge from the participants and is open even to students of upper secondary school. Programming skills and the level of English allowing to read technical documentation would be an advantage, but this is not obligatory.
The entire course is dedicated to practice, so the best way for you would be to get hold of some electronics, follow the illustrated examples and experiment on your own.
The kits can be purchased here: kits.cyberphysica.ru.
Taught by: Alexey Perepelkin, head of Robotics department in the Laboratory of innovative educational technologies at MIPT
Taught by: Dmitry Savitsky, researcher in the Laboratory of innovative educational technologies at MIPT",SP
"Big Data, Genes, and Medicine","This course distills for you expert knowledge and skills mastered by professionals in Health Big Data Science and Bioinformatics. You will learn exciting facts about the human body biology and chemistry, genetics, and medicine that will be intertwined with the science of Big Data and skills to harness the avalanche of data openly available at your fingertips and which we are just starting to make sense of. We’ll investigate the different steps required to master Big Data analytics on real datasets, including Next Generation Sequencing data, in a healthcare and biological context, from preparing data for analysis to completing the analysis, interpreting the results, visualizing them, and sharing the results.
Needless to say, when you master these high-demand skills, you will be well positioned to apply for or move to positions in biomedical data analytics and bioinformatics. No matter what your skill levels are in biomedical or technical areas, you will gain highly valuable new or sharpened skills that will make you stand-out as a professional and want to dive even deeper in biomedical Big Data. It is my hope that this course will spark your interest in the vast possibilities offered by publicly available Big Data to better understand, prevent, and treat diseases.",SP
Mathematics for Machine Learning: Multivariate Calculus,"This course offers a brief introduction to the multivariate calculus required to build many common machine learning techniques. We start at the very beginning with a refresher on the “rise over run” formulation of a slope, before converting this to the formal definition of the gradient of a function. We then start to build up a set of tools for making calculus easier and faster. Next, we learn how to calculate vectors that point up hill on multidimensional surfaces and even put this into action using an interactive game. We take a look at how we can use calculus to build approximations to functions, as well as helping us to quantify how accurate we should expect those approximations to be. We also spend some time talking about where calculus comes up in the training of neural networks, before finally showing you how it is applied in linear regression models. This course is intended to offer an intuitive understanding of calculus, as well as the language necessary to look concepts up yourselves when you get stuck. Hopefully, without going into too much detail, you’ll still come away with the confidence to dive into some more focused machine learning courses in future.",IS
Fundamentals of Digital Image and Video Processing,"In this class you will learn the basic principles and tools used to process images and videos, and how to apply them in solving practical problems of commercial and scientific interests.
Digital images and videos are everywhere these days – in thousands of scientific (e.g., astronomical, bio-medical), consumer, industrial, and artistic applications. Moreover they come in a wide range of the electromagnetic spectrum - from visible light and infrared to gamma rays and beyond. The ability to process image and video signals is therefore an incredibly important skill to master for engineering/science students, software developers, and practicing scientists.   Digital image and video processing continues to enable the multimedia technology revolution we are experiencing today. Some important examples of image and video processing include the removal of degradations images suffer during acquisition (e.g., removing blur from a picture of a fast moving car), and the compression and transmission of images and videos (if you watch videos online, or share photos via a social media website, you use this everyday!), for economical storage and efficient transmission. 
This course will cover the fundamentals of image and video processing.  We will provide a mathematical framework to describe and analyze images and videos as two- and three-dimensional signals in the spatial, spatio-temporal, and frequency domains. In this class not only will you learn the theory behind fundamental processing tasks including image/video enhancement, recovery, and compression - but you will also learn how to perform these key processing tasks in practice using state-of-the-art techniques and tools. We will introduce and use a wide variety of such tools – from optimization toolboxes to statistical techniques. Emphasis on the special role sparsity plays in modern image and video processing will also be given.  In all cases, example images and videos pertaining to specific application domains will be utilized.",SP
Discrete Mathematics,"Discrete mathematics forms the mathematical foundation of computer and information science. It is also a fascinating subject in itself.
Learners will become familiar with a broad range of mathematical objects like sets, functions, relations, graphs, that are omnipresent in computer science. Perhaps more importantly, they will reach a certain level of mathematical maturity - being able to  understand formal statements and their proofs; coming up with rigorous proofs themselves; and coming up with interesting results.
This course attempts to be rigorous without being overly formal. This means, for every concept we introduce we will show at least one interesting and non-trivial result and give a full proof. However, we will do so without too much formal notation, employing examples and figures whenever possible.
The main topics of this course are (1) sets, functions, relations, (2) enumerative combinatorics, (3) graph theory, (4) network flow and matchings. It does not cover modular arithmetic, algebra, and logic, since these topics have a slightly different flavor and because there are already several courses on Coursera specifically on these topics.",DS
Spatial Data Science and Applications,"Spatial (map) is considered as a core infrastructure of modern IT world, which is substantiated by business transactions of major IT companies such as Apple, Google, Microsoft, Amazon, Intel, and Uber, and even motor companies such as Audi, BMW, and Mercedes. Consequently, they are bound to hire more and more spatial data scientists.  Based on such business trend, this course is designed to present a firm understanding of spatial data science to the learners, who would have a basic knowledge of data science and data analysis, and eventually to make their expertise differentiated from other nominal data scientists and data analysts.  Additionally, this course could make learners realize the value of spatial big data and the power of open source software&#x27;s to deal with spatial data science problems.
This course will start with defining spatial data science and answering why spatial is special from three different perspectives - business, technology, and data in the first week.  In the second week, four disciplines related to spatial data science - GIS, DBMS, Data Analytics, and Big Data Systems, and the related open source software&#x27;s - QGIS, PostgreSQL, PostGIS, R, and Hadoop tools are introduced together.  During the third, fourth, and fifth weeks, you will learn the four disciplines one by one from the principle to applications.  In the final week, five real world problems and the corresponding solutions are presented with step-by-step procedures in environment of open source software&#x27;s.",SE
VLSI CAD Part I: Logic,"A modern VLSI chip has a zillion parts -- logic, control, memory, interconnect, etc.  How do we design these complex chips?  Answer: CAD software tools.  Learn how to build thesA modern VLSI chip is a remarkably complex beast:  billions of transistors, millions of logic gates deployed for computation and control, big blocks of memory, embedded blocks of pre-designed functions designed by third parties (called “intellectual property” or IP blocks).  How do people manage to design these complicated chips?  Answer: a sequence of computer aided design (CAD) tools takes an abstract description of the chip, and refines it step-wise to a final design. This class focuses on the major design tools used in the creation of an Application Specific Integrated Circuit (ASIC) or System on Chip (SoC) design. Our focus in this first part of the course is on key Boolean logic representations that make it possible to synthesize, and to verify, the gate-level logic in these designs.  This is the first step of the design chain, as we move from logic to layout.    Our goal is for students to understand how the tools themselves work, at the level of their fundamental algorithms and data structures. Topics covered will include: Computational Boolean algebra, logic verification, and logic synthesis (2-level and multi-level).
Recommended Background
Programming experience (C, C++, Java, Python, etc.) and basic knowledge of data structures and algorithms (especially recursive algorithms).  An understanding of basic digital design:  Boolean algebra, Kmaps, gates and flip flops, finite state machine design.  Linear algebra and calculus at the level of a junior or senior in engineering.  Exposure to basic VLSI at an undergraduate level is nice -- but it’s not necessary.  We will keep the course self-contained, but students with some VLSI will be able to skip some background material.e tools in this class.",AR
Core Database Concepts,"This course introduces the world of database systems. It provides the foundation that will enable learners to master skills in data modeling and information, as well as extract information using existing database management systems. The following main topics are covered: database design/modeling, data storage and indexing, query processing/optimization, transaction management, database security, and data analytics.","IS
DS"
Deep Learning in Computer Vision,"Deep learning added a huge boost to the already rapidly developing field of computer vision. With deep learning, a lot of new applications of computer vision techniques have been introduced and are now becoming parts of our everyday lives. These include face recognition and indexing, photo stylization or machine vision in self-driving cars. 
The goal of this course is to introduce students to computer vision, starting from basics and then turning to more modern deep learning models. We will cover both image and video recognition, including image classification and annotation, object recognition and image search, various object detection techniques, motion estimation, object tracking in video, human action recognition, and finally image stylization, editing and new image generation. In course project, students will learn how to build face recognition and manipulation system to understand the internal mechanics of this technology, probably the most renown and oftenly demonstrated in movies and TV-shows example of computer vision and AI.",AR
Introduction to Graph Theory,"We invite you to a fascinating journey into Graph Theory — an area which connects the elegance of painting and the rigor of mathematics;  is simple, but not unsophisticated. Graph Theory gives us, both an easy way to pictorially represent many major mathematical results, and insights into the deep theories behind them. 
In this course, among other intriguing applications, we will see how GPS systems find shortest routes, how engineers design integrated circuits, how biologists assemble genomes, why a political map can always be colored using a few colors. We will study Ramsey Theory which proves that in a large system, complete disorder is impossible! 
By the end of the course, we will implement an algorithm which finds an optimal assignment of students to schools. This algorithm, developed by David Gale and Lloyd S. Shapley, was later recognized by the conferral of Nobel Prize in Economics.
As prerequisites we assume only basic math (e.g., we expect you to know what is a square or how to add fractions), basic programming in python (functions, loops, recursion), common sense and curiosity. Our intended audience are all people that work or plan to work in IT, starting from motivated high school students.","AL
DS"
Build a Modern Computer from First Principles: From Nand to Tetris (Project-Centered Course),"What you’ll achieve:
In this project-centered course* you will build a modern computer system, from the ground up. We’ll divide this fascinating journey into six hands-on projects that will take you from constructing elementary logic gates all the way through creating a fully functioning general purpose computer. In the process, you will learn - in the most direct and constructive way - how computers work, and how they are designed.
What you’ll need:
This is a self-contained course: all the knowledge necessary to succeed in the course and build the computer system will be given as part of the learning experience. Therefore, we assume no previous computer science or engineering knowledge, and all learners are welcome aboard. You will need no physical materials, since you will build the computer on your own PC, using a software-based hardware simulator, just like real computers are designed by computer engineers in the field. The hardware simulator, as well as other software tools, will be supplied freely after you enroll in the course.
Course format:
The course consists of six modules, each comprising a series of video lectures, and a project. You will need about 2-3 hours to watch each module&#x27;s lectures, and about 5-10 hours to complete each one of the six projects. The course can be completed in six weeks, but you are welcome to take it at your own pace. You can watch a TED talk about this course by Googling &quot;nand2tetris TED talk&quot;.
*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share.","AR
IAS
PL
SDF
SP"
Digital Signal Processing,"Digital Signal Processing is the branch of engineering that, in the space of just a few decades, has enabled unprecedented levels of interpersonal communication and of on-demand entertainment. By reworking the principles of electronics, telecommunication and computer science into a unifying paradigm, DSP is a the heart of the digital revolution that brought us CDs, DVDs, MP3 players, mobile phones and countless other devices. 
The goal, for students of this course, will be to learn the fundamentals of Digital Signal Processing from the ground up. Starting from the basic definition of a discrete-time signal, we will work our way through Fourier analysis, filter design, sampling, interpolation and quantization to build a DSP toolset complete enough to analyze a practical communication system in detail. Hands-on examples and demonstration will be routinely used to close the gap between theory and practice.
To make the best of this class, it is recommended that you are proficient in basic calculus and linear algebra; several programming examples will be provided in the form of Python notebooks but you can use your favorite programming language to test the algorithms described in the course.",SP
Combinatorics and Probability,"Counting is one of the basic mathematically related tasks we encounter on a day to day basis. The main question here is the following. If we need to count something, can we do anything better than just counting all objects one by one? Do we need to create a list of all phone numbers to ensure that there are enough phone numbers for everyone? Is there a way to tell that our algorithm will run in a reasonable time before implementing and actually running it? All these questions are addressed by a mathematical field called Combinatorics.
In this course we discuss most standard combinatorial settings that can help to answer questions of this type. We will especially concentrate on developing the ability to distinguish these settings in real life and algorithmic problems. This will help the learner to actually implement new knowledge. Apart from that we will discuss recursive technique for counting that is important for algorithmic implementations.
One of the main `consumers’ of Combinatorics is Probability Theory. This area is connected with numerous sides of life, on one hand being an important concept in everyday life and on the other hand being an indispensable tool in such modern and important fields as Statistics and Machine Learning. In this course we will concentrate on providing the working knowledge of basics of probability and a good intuition in this area. The practice shows that such an intuition is not easy to develop.
In the end of the course we will create a program that successfully plays a tricky and very counterintuitive dice game.
As prerequisites we assume only basic math (e.g., we expect you to know what is a square or how to add fractions), basic programming in python (functions, loops, recursion), common sense and curiosity. Our intended audience are all people that work or plan to work in IT, starting from motivated high school students.",CN
Practical Reinforcement Learning,"Welcome to the Reinforcement Learning course. 
Here you will find out about:
- foundations of RL methods: value/policy iteration, q-learning, policy gradient, etc.
--- with math &amp; batteries included
- using deep neural networks for RL tasks
--- also known as &quot;the hype train&quot;
- state of the art RL algorithms
--- and how to apply duct tape to them for practical problems.
- and, of course, teaching your neural network to play games
--- because that&#x27;s what everyone thinks RL is about. We&#x27;ll also use it for seq2seq and contextual bandits.
Jump in. It&#x27;s gonna be fun!",IS
Kinematics: Describing the Motions of Spacecraft,"The movement of bodies in space (like spacecraft, satellites, and space stations) must be predicted and controlled with precision in order to ensure safety and efficacy. Kinematics is a field that develops descriptions and predictions of the motion of these bodies in 3D space. This course in Kinematics covers four major topic areas: an introduction to particle kinematics, a deep dive into rigid body kinematics in two parts (starting with classic descriptions of motion using the directional cosine matrix and Euler angles, and concluding with a review of modern descriptors like quaternions and Classical and Modified Rodrigues parameters). The course ends with a look at static attitude determination, using modern algorithms to predict and execute relative orientations of bodies in space.
After this course, you will be able to...
* Differentiate a vector as seen by another rotating frame and derive frame dependent velocity and acceleration vectors
* Apply the Transport Theorem to solve kinematic particle problems and translate between various sets of attitude descriptions
* Add and subtract relative attitude descriptions and integrate those descriptions numerically to predict orientations over time
* Derive the fundamental attitude coordinate properties of rigid bodies and determine attitude from a series of heading measurements",SP
Kinetics: Studying Spacecraft Motion,"As they tumble through space, objects like spacecraft move in dynamical ways. Understanding and predicting the equations that represent that motion is critical to the safety and efficacy of spacecraft mission development. Kinetics: Modeling the Motions of Spacecraft trains your skills in topics like rigid body angular momentum and kinetic energy expression shown in a coordinate frame agnostic manner, single and dual rigid body systems tumbling without the forces of external torque, how differential gravity across a rigid body is approximated to the first order to study disturbances in both the attitude and orbital motion, and how these systems change when general momentum exchange devices are introduced.
After this course, you will be able to...
*Derive from basic angular momentum formulation the rotational equations of motion and predict and determine torque-free motion equilibria and associated stabilities
* Develop equations of motion for a rigid body with multiple spinning components and derive and apply the gravity gradient torque
* Apply the static stability conditions of a dual-spinner configuration and predict changes as momentum exchange devices are introduced
* Derive equations of motion for systems in which various momentum exchange devices are present
Please note: this is an advanced course, best suited for working engineers or students with college-level knowledge in mathematics and physics.",SF
Control of Nonlinear Spacecraft Attitude Motion,"This course trains you in the skills needed to program specific orientation and achieve precise aiming goals for spacecraft moving through three dimensional space. First, we cover stability definitions of nonlinear dynamical systems, covering the difference between local and global stability. We then analyze and apply Lyapunov&#x27;s Direct Method to prove these stability properties, and develop a nonlinear 3-axis attitude pointing control law using Lyapunov theory. Finally, we look at alternate feedback control laws and closed loop dynamics. 
After this course, you will be able to...
* Differentiate between a range of nonlinear stability concepts
* Apply Lyapunov’s direct method to argue stability and convergence on a range of dynamical systems
* Develop rate and attitude error measures for a 3-axis attitude control using Lyapunov theory
* Analyze rigid body control convergence with unmodeled torque",SP
Addressing Large Hadron Collider Challenges by Machine Learning,"The Large Hadron Collider (LHC) is the largest data generation machine for the time being. It doesn’t produce the big data, the data is gigantic. Just one of the four experiments generates thousands gigabytes per second. The intensity of data flow is only going to be increased over the time. So the data processing techniques have to be quite sophisticated and unique. In this course we’ll introduce students into the main concepts of the Physics behind those data flow so the main puzzles of the Universe Physicists are seeking answers for will be much more transparent. Of course we will scrutinize the major stages of the data processing pipelines, and focus on the role of the Machine Learning techniques for such tasks as track pattern recognition, particle identification, online real-time processing (triggers) and search for very rare decays. The assignments of this course will give you opportunity to apply your skills in the search for the New Physics using advanced data analysis techniques. Upon the completion of the course you will understand both the principles of the Experimental Physics and Machine Learning much better.",SP
C# programming,"C# (also known as csharp) is an excellent object-oriented language, it inherits the advantages of C++ and Java languages, has a wide range of applications in Windows graphical user interface, Web applications, databases and other aspects. On the basis of introducing C# language and the basic principles of object-oriented programming, this course uses Visual Studio as a development tool to introduce C# to all kinds of common information processing methods, including text processing, graphics drawing, image processing, multimedia, network information acquisition, database application, etc.","AL
AR
IAS
PL
SDF
SP"
Global Warming II: Create Your Own Models in Python,"In addition to theoretical knowledge, the course pays more attention to computer programming practice. The program examples are closely combined with daily study and work, which are lively and interesting with moderate difficulty.","AL
AR
IAS
PD
PL
SDF
SE
SP"
The Advanced Object-Oriented Technology,"This course requires knowledge of a programming language (C, etc.).","AL
AR
IAS
IM
NC
OS
PL
SDF
SE
SP"
Distributed Database Systems,"The increased capabilities of a collection of logically interrelated databases distributed over a computer network enable scalable data processing. This course addresses the components of these systems, covering the following main topics: distributed database architectures, distributed data storage and indexing, distributed and parallel query processing/optimization, and concurrency control in distributed Parallel Database Systems.",PD
Deep Learning,"If you want to break into AI, this Specialization will help you do so. Deep Learning is one of the most highly sought after skills in tech. We will help you become good at Deep Learning.
In five courses, you will learn the foundations of Deep Learning, understand how to build neural networks, and learn how to lead successful machine learning projects. You will learn about Convolutional networks, RNNs, LSTM, Adam, Dropout, BatchNorm, Xavier/He initialization, and more. You will work on case studies from healthcare, autonomous driving, sign language reading, music generation, and natural language processing. You will master not only the theory, but also see how it is applied in industry. You will practice all these ideas in Python and in TensorFlow, which we will teach.
You will also hear from many top leaders in Deep Learning, who will share with you their personal stories and give you career advice.
AI is transforming multiple industries. After finishing this specialization, you will likely find creative ways to apply it to your work.
We will help you master Deep Learning, understand how to apply it, and build a career in AI.",IS
Probabilistic Graphical Models ,"Probabilistic graphical models (PGMs) are a rich framework for encoding probability distributions over complex domains: joint (multivariate) distributions over large numbers of random variables that interact with each other. These representations sit at the intersection of statistics and computer science, relying on concepts from probability theory, graph algorithms, machine learning, and more. They are the basis for the state-of-the-art methods in a wide variety of applications, such as medical diagnosis, image understanding, speech recognition, natural language processing, and many, many more. They are also a foundational tool in formulating many machine learning problems.",IS
Introduction to Discrete Mathematics for Computer Science,"Discrete Math is needed to see mathematical structures in the object you work with, and understand their properties. This ability is important for software engineers, data scientists, security and financial analysts (it is not a coincidence that math puzzles are often used for interviews). We cover the basic notions and results (combinatorics, graphs, probability, number theory) that are universally needed. To deliver techniques and ideas in discrete mathematics to the learner we extensively use interactive puzzles specially created for this specialization. To bring the learners experience closer to IT-applications we incorporate programming examples, problems and projects in our courses.","DS
AL
IAS
IS
NC
PL
SDF"
Introduction to Applied Cryptography,"Cryptography is an essential component of cybersecurity. The need to protect sensitive information and ensure the integrity of industrial control processes has placed a premium on cybersecurity skills in today’s information technology market. Demand for cybersecurity jobs is expected to rise 6 million globally by 2019, with a projected shortfall of 1.5 million, according to Symantec, the world’s largest security software vendor. According to Forbes, the cybersecurity market is expected to grow from $75 billion in 2015 to $170 billion by 2020. In this specialization, students will learn basic security issues in computer communications, classical cryptographic algorithms, symmetric-key cryptography, public-key cryptography, authentication, and digital signatures. These topics should prove useful to those who are new to cybersecurity, and those with some experience.",SP
Mathematics for Machine Learning,"For a lot of higher level courses in Machine Learning and Data Science, you find you need to freshen up on the basics in maths - stuff you may have studied before in school or university, but which was taught in another context, or not very intuitively, such that you struggle to relate it to how it’s used in Computer Science. This specialisation aims to bridge that gap, getting you up to speed in the underlying maths, building an intuitive understanding, and relating it to Machine Learning and Data Science.
In the first course on Linear Algebra we look at what linear algebra is and how it relates to data. Then we look through what vectors and matrices are and how to work with them.
The second course, Multivariate Calculus, builds on this to look at how to optimise fitting functions to get good fits to data. It starts from introductory calculus and then uses the matrices and vectors from the first course to look at data fitting.
The third course, Dimensionality Reduction with Principal Components Analysis, uses the maths from the first two courses to do simple optimisation for the situation where you don’t have an understanding of how the data variables relate to each other.
At the end of this specialisation you will have gained the prerequisite mathematical knowledge to continue your journey and take more advanced courses in machine learning.",IS
Advanced Machine Learning,"This specialization gives an introduction to deep learning, reinforcement learning, natural language understanding, computer vision and Bayesian methods. Top Kaggle machine learning practitioners and CERN scientists will share their experience of solving real-world problems and help you to fill the gaps between theory and practice. Upon completion of 7 courses you will be able to apply modern machine learning methods in enterprise and understand the caveats of real-world data and settings.",IS
Bitcoin and Cryptocurrency Technologies,"To really understand what is special about Bitcoin, we need to understand how it works at a technical level. We’ll address the important questions about Bitcoin, such as:
How does Bitcoin work? What makes Bitcoin different? How secure are your Bitcoins? How anonymous are Bitcoin users? What determines the price of Bitcoins? Can cryptocurrencies be regulated? What might the future hold?
After this course, you’ll know everything you need to be able to separate fact from fiction when reading claims about Bitcoin and other cryptocurrencies. You’ll have the conceptual foundations you need to engineer secure software that interacts with the Bitcoin network. And you’ll be able to integrate ideas from Bitcoin in your own projects.
Course Lecturers:
Arvind Narayanan, Princeton University",SF
Cryptography I,"Cryptography is an indispensable tool for protecting information in computer systems. In this course you will learn the inner workings of cryptographic systems and how to correctly use them in real-world applications. The course begins with a detailed discussion of how two parties who have a shared secret key can communicate securely when a powerful adversary eavesdrops and tampers with traffic. We will examine many deployed protocols and analyze mistakes in existing systems. The second half of the course discusses public-key techniques that let two parties generate a shared secret key. Throughout the course participants will be exposed to many exciting open problems in the field and work on fun (optional) programming projects. In a second course (Crypto II) we will cover more advanced cryptographic tasks such as zero-knowledge, privacy mechanisms, and other forms of encryption.",SP
The Bits and Bytes of Computer Networking,"This course is designed to provide a full overview of computer networking. In this course, we’ll cover everything from the fundamentals of modern networking technologies and protocols to practical applications and network troubleshooting. 
By the end of this course, you’ll be able to:
- describe computer networks in terms of a five-layer model. 
- understand all of the standard protocols involved with TCP/IP communications. 
- grasp powerful network troubleshooting tools and techniques. 
- learn network services like DNS and DHCP that help make computer networks run.
Except as otherwise noted, the contents on this site are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.","NC
AR"
Operating Systems and You: Becoming a Power User,"In this course, you’ll learn how to use the major operating systems, Windows and Linux, which are a core component of IT. Through a combination of video lectures, demonstrations, and hands-on practice, you’ll learn about the main components of an operating system and how to perform critical tasks like managing software and users, and configuring hardware. 
By the end of this course you’ll be able to:
- navigate the Windows and Linux filesystems using a graphical user interface and command line interpreter.
- set up users, groups, and permissions for account access.
- install, configure, and remove software on the Windows and Linux operating systems.
- configure disk partitions and filesystems.
- understand how system processes work and how to manage them.
- work with system logs and remote connection tools.
- utilize operating system knowledge to troubleshoot common issues in an IT Support Specialist role.
Except as otherwise noted, the contents on this site are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.",OS
 System Administration and IT Infrastructure Services,"This course will transition you from working on a single computer to a whole fleet. Systems administration is the field of IT that’s responsible for maintaining reliable computers systems in a multi-user environment. In this course, you’ll learn about the infrastructure services that keep all organizations, big and small, up and running. You’ll learn how to manage and configure servers, how to use industry tools to manage computers, user information, and user productivity. Finally, you’ll learn how to recover your organization’s IT infrastructure in the event of a disaster. 
By the end of this course you’ll be able to:
- utilize best practices for choosing hardware, vendors, and services for your organization.
- understand how the most common infrastructure services that keep an organization running work and how to manage infrastructure servers.
- manage an organization’s computers and users using the directory services, Active Directory, and OpenLDAP.
- choose and manage the tools that your organization will use.
- backup your organization’s data and be able to recover your IT infrastructure in the case of a disaster.
- utilize systems administration knowledge to plan improve processes for IT environments.
Except as otherwise noted, the contents on this site are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.",SE
 IT Security: Defense against the digital dark arts ,"This course covers a wide variety of IT security concepts, tools, and best practices. It introduces threats and attacks and the many ways they can show up. We’ll give you some background of encryption algorithms and how they’re used to safeguard data. Then, we’ll dive into the three As of information security: Authentication, authorization, and accounting. We’ll also cover network security solutions, ranging from firewalls to Wifi encryption options. The course is rounded out by putting all these elements together into a multi-layered, in-depth security architecture, followed by recommendations on how to integrate a culture of security into your organization or team.
At the end of this course, you’ll understand:
- how various encryption algorithms and techniques work and their benefits and limitations.
- various authentication systems and types.
- the difference between authentication and authorization.
At the end of this course, you’ll be able to:
- evaluate potential risks and recommend ways to reduce risk.
- make recommendations on how best to secure a network.
- help others to understand security concepts and protect themselves.",SP
Technical Support Fundamentals,"In this course, you’ll be introduced to the world of Information Technology, or IT. This course is the first of a series that aims to prepare you for a role as an entry-level IT Support Specialist. You’ll learn about the different facets of Information Technology, like computer hardware, the Internet, computer software, and job-related skills. You’ll also learn about the history of computers, and the pioneers who shaped the world of computing that we know today. This course covers a wide variety of topics in IT that are designed to give you an overview of what’s to come in this IT Support Professional Certificate.
By the end of this course, you’ll be able to:
- understand how the binary system works.
- assemble a computer from scratch.
- choose and install an operating system on a computer.
- understand what the Internet is, how it works, and the impact it has in the modern world.
- learn how applications are created and how they work under the hood of our computer.
- utilize common problem-solving methodologies and soft skills in an Information Technology setting.
Except as otherwise noted, the contents on this site are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.",IS
Introduction to Cyber Attacks,"This course provides learners with a baseline understanding of common cyber security threats, vulnerabilities, and risks. An overview of how basic cyber attacks are constructed and applied to real systems is also included. Examples include simple Unix kernel hacks, Internet worms, and Trojan horses in software utilities. Network attacks such as distributed denial of service (DDOS) and botnet- attacks are also described and illustrated using real examples from the past couple of decades. 
Familiar analytic models are outlined such as the confidentiality/integrity/availability (CIA) security threat framework, and examples are used to illustrate how these different types of threats can degrade real assets. The course also includes an introduction to basic cyber security risk analysis, with an overview of how threat-asset matrices can be used to prioritize risk decisions. Threats, vulnerabilities, and attacks are examined and mapped in the context of system security engineering methodologies.",SF
Cyber Attack Countermeasures,"This course introduces the basics of cyber defense starting with foundational models such as Bell-LaPadula and information flow frameworks. These underlying policy enforcements mechanisms help introduce basic functional protections, starting with authentication methods. Learners will be introduced to a series of different authentication solutions and protocols, including RSA SecureID and Kerberos, in the context of a canonical schema. 
 
The basics of cryptography are also introduced with attention to conventional block ciphers as well as public key cryptography. Important cryptographic techniques such as cipher block chaining and triple-DES are explained. Modern certification authority-based cryptographic support is also discussed and shown to provide basis for secure e-commerce using Secure Sockets Layer (SSL) schemes.",SP
Real-Time Cyber Threat Detection and Mitigation,"This course introduces real-time cyber security techniques and methods in the context of the TCP/IP protocol suites. Explanation of some basic TCP/IP security hacks is used to introduce the need for network security solutions such as stateless and stateful firewalls. Learners will be introduced to the techniques used to design and configure firewall solutions such as packet filters and proxies to protect enterprise assets.
Perimeter solutions such as firewalls and intrusion prevention systems are shown to have significant drawbacks in common enterprise environments. The result of such weakness is shown to often exist as advanced persistent threats (APTs) from nation-state actors. Such attacks, as well as DDOS and third-party attacks, are shown to have potential solutions for modern enterprise.",SP
Enterprise and Infrastructure Security,"This course introduces a series of advanced and current topics in cyber security, many of which are especially relevant in modern enterprise and infrastructure settings. The basics of enterprise compliance frameworks are provided with introduction to NIST and PCI. Hybrid cloud architectures are shown to provide an opportunity to fix many of the security weaknesses in modern perimeter local area networks.
 
Emerging security issues in blockchain, blinding algorithms, Internet of Things (IoT), and critical infrastructure protection are also described for learners in the context of cyber risk. Mobile security and cloud security hyper-resilience approaches are also introduced. The course completes with some practical advice for learners on how to plan careers in cyber security.",SP
Usable Security,"This course focuses on how to design and build secure systems with a human-centric focus. We will look at basic principles of human-computer interaction, and apply these insights to the design of secure systems with the goal of developing security measures that respect human performance and their goals within a system.","SP
HCI"
Software Security ,"This course we will explore the foundations of software security. We will consider important software vulnerabilities and attacks that exploit them -- such as buffer overflows, SQL injection, and session hijacking -- and we will consider defenses that prevent or mitigate these attacks, including advanced testing and program analysis techniques. Importantly, we take a &quot;build security in&quot; mentality, considering techniques at each phase of the development cycle that can be used to strengthen the security of software systems. Successful learners in this course typically have completed sophomore/junior-level undergraduate work in a technical field, have some familiarity with programming, ideally in C/C++ and one other &quot;managed&quot; program language (like ML or Java), and have prior exposure to algorithms. Students not familiar with these languages but with others can improve their skills through online web tutorials.",SP
Cryptography,"This course will introduce you to the foundations of modern cryptography, with an eye toward practical applications.",IS
Hardware Security,"In this course, we will study security and trust from the hardware perspective. Upon completing the course, students will understand the vulnerabilities in current digital system design flow and the physical attacks to these systems. They will learn that security starts from hardware design and be familiar with the tools and skills to build secure and trusted hardware.",SP
Cybersecurity Capstone Project,"This course presents an intensive experience during which students build a software system they intend to be secure, and then attempt to show that other students&#x27; projects are insecure, by finding flaws in them.
A Note on Capstone Frequency:
Please note that sessions of this Cybersecurity Capstone Project only run 3-4 times a year, depending on course team availability and learner interest. Please keep this in mind as you enroll into the Capstone program. While you will still be able to access certain elements of the course between sessions, you will not be able to submit assignments or be grouped into teams unless you are in an actively running session.",SP
Internet Connection: How to Get Online?,"Welcome to the first of five courses in the Cisco Networking Basics Specialization.
This course is developed by the Cisco Networking Academy. Cisco Networking Academy is an IT skills and career building program that connects millions of students, educators, and employers worldwide. Cisco partners with learning institutions worldwide to deliver technical training and problem-solving experiences to individuals studying networking, security, and IoT technologies. We&#x27;ve helped more than 6 million people prepare for IT careers since 1997.
Have you ever wondered how you are able to open a web page from a server that is located in another country or how you are able to send documents and videos to the intended recipient without it going to the wrong device? In this course, you will be introduced to the fundamentals concepts of computer networking. More importantly, by the end of this course, you will understand how data travels in your home network.
At the end of this course, you will be able to:
1. Explain how data networks work.
2. Define basic data networking terms.
3. Explain what is needed for devices to have network connectivity or Internet access.
4. Use the Cisco Packet Tracer simulation and modeling tool to build and test a small data network.
5. Identify the devices and component on your home network.
6. Build a simple peer-to-peer network.",NC
Network Protocols and Architecture,"Welcome to the second of five courses in the Cisco Networking Basics Specialization.
Have ever wondered how devices on computer networks truly communicate?  There are specific protocols or rules and standards that every device must follow to access the Internet and to communicate over a network.   In this course, you will examine the principles of network communication, how networks are designed and what specifically is being sent and received by different devices when we send pictures, text messages, video or any other data across the network. What exactly is sent and how is it sent are the questions that will be answered in this course.
At the end of this course, you will be able to:
1. Explain how protocols and standards benefit a global internetwork.
2. Describe how the Ethernet Protocol transmits data within a LAN.
3. Explain IPv4 addressing and the role subnet masks.
4. Use Cisco Packet Tracer to connect hosts to a wireless router in a LAN.
5. Use a protocol analyzer or &quot;packet sniffer&quot; to open and examine a data packet that has been transmitted across a network.
6. Examine a Windows computer to locate the physical or MAC address used send and receive data.",NC
Data Communications and Network Services,"Welcome to the third of five courses in the Cisco Networking Basics Specialization.
Now that you know the basics of what an network is and how the devices on a network communicate with each other, it is time to explore the network further.   In this course, you will learn the benefits and limitations of the IPv4 addressing system and why NAT and IPv6 were implemented to address the limitations. You will also explore common network services and protocols such as email, web services, instant messaging, DNS, HTTP, HTML, SMTP, Telnet, and SSH.
At the end of this course, you will be able to:
1. Describe the role of network services including DHCP and DNS.
2. Use Cisco Packet Tracer to configure a router to perform DHCP services for a LAN. 
3. Explain use of IPv4 private addresses with NAT.
4. Compare TCP and UDP protocol operations for efficiency and reliability.
5. Describe the network services and applications for file transfer, web access, email, remote access and instant messaging.
6. Observe how web requests are processed by the web client and the server.
7. Use various tools to verify network operations.",NC
Home Networking Basics,"Welcome to the fourth of five courses in the Cisco Networking Basics Specialization.
In the first three courses of this specialization, you were focused on understanding how computer networks work and how to access the network. Now that you have a firm grasp of that, you can dive deeper into how do you actually build and secure a home network that includes lots of wireless devices. Wireless requires different configurations than a wired network. Both wireless and wired networks are susceptible to security threats and attacks. You will work through the different types of threats and attacks that typically occur and understand the different software tools that can be used to mitigate those security threats.
At the end of this course, you will be able to:
1. Build and secure a home wireless network.
2. Connect and configure a home wireless router in order to provide a secure connection to the Internet.
3. Describe different methods of connecting devices to a home network, including wired and wireless connections.
4. Explain how Wi-Fi communication is implemented in a small LAN environment.
5. Explain the inherent risks associated with wireless network connectivity.
6. Implement the best practices for securing wireless network access, including methods for secure authentication and encryption.
7. Describe common types of network security threats and attacks.
8. Explain how software tools can mitigate network security threats.","NC
AR
SP"
Introduction to Cisco Networking,"Welcome to the fifth and final course in the Cisco Networking Basics Specialization.
In the first four courses of this specialization, you were focused on understanding how computer networks work and how to access the network. Now that you have a firm grasp of how to build and secure a wireless home network, you will be introduced to the basics of adding Cisco routers and switches to networks that are typically deployed in small to medium sized businesses.  You will perform the basic setup and configuration steps needed to get switches and routers connected in a small network. You will also learn how to configure the router and the switch for remote access. You will use two different types of simulation tools to practice configuration steps. After completing required configuration tasks, you will use various show commands to verify configurations and use the ping command to verify basic connectivity between devices. Expect lots of opportunities for practicing Cisco device configuration. This course requires the use of Cisco Packet Tracer to simulate the network environment.  You will need to download and use Cisco Packet Tracer throughout the course.
At the end of this course, you will be able to:
1. Describe the features and functions of various Cisco devices installed in a typical simple computer network.
2. Use the Packet Tracer simulation software to practice configuration tasks using the command line interface.
3. Connect and configure a Cisco switch and small business router in order to provide network connectivity in a small LAN environment.
4. Use a structured troubleshooting strategy to identify and fix network connectivity issues.
5. Enter and view the results of common Cisco CLI commands.
6. Use best practices to secure Cisco networking devices from unauthorized access.
7. Use command line utilities to test and verify network connectivity.
8. Use common network utilities to test connectivity between network attached devices.
9. Explain issues that can cause Internet connectivity problems.
10. Describe how to report problems and assist in troubleshooting connections with an ISP help desk.",CN
Introduction to Cybersecurity for Business,"The world runs computers.  From small to large businesses, from the CEO down to level 1 support staff, everyone uses computers.  This course is designed to give you a practical perspective on computer security.  This course approaches computer security in a way that anyone can understand.  Ever wonder how your bank website is secure when you connect to it?  Wonder how other business owners secure their network?  Wonder how large data breaches happen?  This is practical computer security.  It will help you answer the question – what should I focus on?",SP
Cyber Threats and Attack Vectors,"Data breaches occur nearly every day.  From very large retailers, down to your fantasy football website, and anywhere in between, they have been compromised in some way.  How did the attackers get in?  What did they do with the data they compromised?  What should I be concerned with in my own business or my systems?  This course is the second course in the Practical Computer Security.  It will discuss types of threats and attack vectors commonly seen in today’s environment.  I hate to be the bearer of bad news, but threats are all over the place!  This course isn’t designed to insight fear that there is no hope for keeping systems and business secure, but rather educate you on how attacks are carried out so that you have a better sense of what to look out for in your business or with your systems.",SP
Detecting and Mitigating Cyber Threats and Attacks,"Computer attacks and data breaches are inevitable.  It seems like every day a data breach occurs and the victims of the data breach suffer.  Their information is stolen or posted online.  The company’s or businesses who had the breach go on, learn a little from the attack, and just give credit monitoring out as if nothing happened.  What if you could help prevent a data breach in your organization?  This is the third course in the Practical Computer Security specialization.  This course looks at detection and mitigation of threats and attack vectors and discusses how to use tools and principles to protect information.  By the end of the course you should be able to make suggestions on what type of detection and mitigation strategy is right for your systems or business given the known threats and attack vectors.  You should be able to discuss what features you want in a firewall, or how cash registers or sensitive data systems should be secured.  The project at the end of the course will allow you to apply what you have learned to argue what type of detection and mitigation strategies should have been employed by companies and businesses that have suffered a data breach.",SP
Proactive Computer Security,"I’ve heard this before – “I’m not sure my computer security practices are working”.  I reply “Have you tested them?”  This course is the fourth and final course in the Practical Computer Security specialization.  In this course, you’ll learn how to proactively test what you have put in place to protect your data.  In the first week you’ll be able to discuss the basics of deterrents and how to “trick” attackers into believing they’ve hit a goldmine of data away from your real systems.  In week 2, you’ll be able to understand and discuss the steps of penetration testing methodology.  In week 3, you will be able to understand and apply what you have learned on your own systems to test whether your systems are secure or not.  In week 4, we’ll discuss planning for your own methodology that you can apply to your own systems.  And finally in week 5, we’ll finish up with a project that will allow you to test your skills in a safe environment.",SP
Enterprise System Management and Security ,"The world runs on computers.  Your watch, your TV, your car.  You might be familiar on how to operate each of these.  Your home computer you are even more familiar with operating it.  But what does it take to really take computer systems to the next level?  - The enterprise level.  In this course we discuss what makes home computing systems different from enterprise computing systems. This course will also help you prepare and design your own home lab to explore enterprise operating systems.
This course is for anyone who is exploring what it might take to have a job as a system administrator or for those who are already specialized in one area of system management and would like to move to another.  This course may also be for those who are looking to understand how computer security plays an important role in system management. 
At the end of the course, you will also be able to illustrate how different enterprise technologies play role in computing at an enterprise level.  You will also be able to discuss the three pillars of the CIA triad and how they apply to enterprise systems.  
While there is no technical and software component installs necessary for the completion of this course, supplemental how-to guides will be provided if you wish to follow along on the technical portion presented during the course.",SE
Windows Server Management and Security,"Microsoft Windows has been at the forefront of enterprise computing for several decades.  What most office workers see is the desktop side – such as Windows 7, 8 or 10.  This course explores what it takes to design and build the server side of Windows in an enterprise environment.  This course will explore everything from Windows Server installation to configuring users, to hardening the server operating system itself.  
This course is the second course in the System Management and Security Specialization focusing on enterprise system management.  The first week of this course provides an overview of how Windows operates in an enterprise environment and what it may look like in the real world.  Week 2 of the course will show you how Windows users interact with the system.  At the end of Week 2, you will be able to demonstrate how Windows authentication works at the end of Week 2.  Week 3 will explore authorization in a Windows environment.  At the end of Week 3, you will be able to differentiate between different authorization mechanisms and use different technologies to secure data within the environment.  Week 4 explores built in security features of Windows and demonstrates how to use each technology effectively and in what circumstances you would use what technology for what purpose. At the end of week 4, you will be able to determine which technology is the best technology to use to secure certain portions of the Windows operating system.",SF
Linux Server Management and Security,"Whether you are accessing a bank website, Netflix or your home router, chances are that your computer is interacting with a Linux system.  The world runs on Linux.  In this course, we will dive into how Linux works from an enterprise perspective.  
In week 1 we will look at what Linux is used for in the enterprise.  By the end of week 1, you will be able to differentiate between different versions of Linux and understand how they are used in an enterprise environment.  In week 2, we will explore how Linux systems are configured.  By the end of week 2, you will be able to demonstrate different Linux commands and how they are used.  You will also be able to interact with a Linux system.  In week 3, we will explore Linux authentication mechanisms and how to add users and user controls to a Linux system.  By the end of week 3, you should be able to demonstrate how to appropriately add users to a Linux machine and secure them.  In week 4, we will explore how to harden a Linux system.  By the end of week 4, you should be able to classify different technologies to secure Linux and differentiate access control methods for Linux applications.","IS
SP"
Fundamentals of Network Communication,"In this course, we trace the evolution of networks and identify the key concepts and functions that form the basis for layered architecture. We introduce examples of protocols and services that are familiar to the students, and we explain how these services are supported by networks. Further, we explain fundamental concepts in digital communication, and focus on error control techniques that include parity check, polynomial code, and Internet checksum. Students will be required to have some previous programming experience in C-programming (C++/Java), some fundamental knowledge of computer organization and IT architecture and a background in computer science is a plus.","NC
IS"
Peer-to-Peer Protocols and Local Area Networks,"In this course, we discuss peer-to-peer protocols and local area networks. Part one in this course is to answer the question of how does a peer-to-peer protocol deliver reliable data transfer service across unreliable transmission lines or networks.  We focus on several medium access control protocols and their performance analysis. In the second part, we discuss how medium access control protocols coordinate the access to the communication channel so that information gets through from a source to a destination in the same broadcast local area network. We further discuss local area network and wireless LAN.","NC
OS
SP"
Packet Switching Networks and Algorithms,"In this course, we deal with the general issues regarding packet switching networks. We discuss packet networks from two perspectives. One perspective involves external view of the network, and is concerned with services that the network provides to the transport layer that operates above it at the end systems. The second perspective is concerned with the internal operation of a network, including approaches directing information across the network, addressing and routing procedures, as well as congestion control inside the network.","NC
AR"
TCP/IP and Advanced Topics,"In this course, we give an in-depth study of the TCP/IP protocols. We examine the details of how IP enables communications across a collection of networks. We pay particular attention to the hierarchical structure of IP addresses and explain their role in ensuring scalability of the Internet. The role of address prefixes and the uses of masks are explained in details. We review in details about TCP three-way handshake, flow control, and congestion control. Furthermore, we provide an introduction to some advanced topics, including Multicast, SDN and security","NC
SP"
Cybersecurity and Mobility,"This course is for you if you are interested in transitioning toward a managerial role in cybersecurity and mobility. Through interviews with industry experts in this area, you will be able to analyze innovations powering the rapid spread of information technology and how they present new challenges for protecting data. For example, mobile devices increase convenience but often bypass traditional security measures. After this course, you will be able to describe how the nature of the threat evolves, as culprits employ a burgeoning set of sophisticated tools to take advantage of our growing reliance on networks for critical-data exchange.
If you want to pursue a career in the public sector, the stakes are high as well. The proliferation of hackers, inevitable human errors, bring-your-own-device (BYOD) initiatives, and the ever-broadening need to share information weigh heavily on government and education organizations, and consume substantial resources. The Pentagon, for example, has proposed to spend $23 billion on network security initiatives through 2018. This sounds like a large sum, until you consider the scope and importance of the U.S. government information resources this investment must protect.
After completing the course modules you will be able to explain how yesterday’s prevention strategies are no longer adequate for stopping advanced, targeted attacks. Effective cybersecurity must be multi-dimensional and tiered, as threats can originate from virtually anywhere, target numerous levels of an organization, and sometimes persist for months or years before an information security staff is aware of an attack or breach. Therefore securing networks requires a holistic approach that incorporates several elements.",SP
Cybersecurity and the Internet of Things,"Welcome! You may have heard about the Internet of Things (IoT). But you may also have wondered about what it is. Or for that matter, what does it mean to you or an organization. This course is for you if you are curious about the most recent trends and activities in the internet capabilities and concerns about programmed devices. There are complexities and areas of necessary awareness when the industrial sector becomes connected to your home. Security policies and practices have not yet caught up to the internet capabilities of some of our most common products. The “connected home”, “consumer wearables”, or even an employee’s HVAC system may cause an unanticipated threat to your business environment.
 
You will explore current security and privacy related concerns in each of these areas. Every module will include readings, videos, case studies, and a quiz to help make sure you understand the material and concepts we talk about. This course offers a place to learn, reflect, and plan for a smart community approach to IoT. Portions of this course may seem extremely technical in nature. That is because the “things” in IoT represents engineering. Try to grasp the concept in that case.",SP
Cybersecurity and the X-Factor,"What is the X-Factor? In Cybersecurity, the X-Factor related to unknown and unpredictable human behavior within and outside of your organization. “No one really knows why humans do what they do”, (David K. Reynolds), and because of this organizations can be unprepared for malicious, untrained, or even best intentioned behavior that can cause alarm and sometimes irreparable harm.  
This course will introduce you to the types of training available to reduce the impact of the X-Factor, evaluate its effectiveness, explore the Security Education, Training and Awareness (SETA) program, and learn why it may fail. The course will conclude with information designed to assist you with some critical components for your business security program. Activities focused on hactivism, cyberinsurance, and ransomware will round out your knowledge base.  Your team of instructors has prepared a series of readings, discussions, guest lectures, and quizzes to engage you in this exciting topic.",SP
The Business of Cybersecurity Capstone,"This course intends to make the student familiar with information security management. When you have finished with this course you will know more about: 
• Governance: including the mission, roles and responsibilities of the InfoSec governance function, and the strategic planning process and InfoSec’s role in the organization’s strategic planning effort.
• You will understand the various types of InfoSec policies and how effective information security policy is created and used.
• Risk management and the risk management process
• Certain laws and ethical issues impacting information security in the organization. And some common information security management practices such as benchmarking and performance measures.",IS
Classical Cryptosystems and Core Concepts,"Welcome to Introduction to Applied Cryptography.  Cryptography is an essential component of cybersecurity. The need to protect sensitive information and ensure the integrity of industrial control processes has placed a premium on cybersecurity skills in today’s information technology market.  Demand for cybersecurity jobs is expected to rise 6 million globally by 2019, with a projected shortfall of 1.5 million, according to Symantec, the world’s largest security software vendor. According to Forbes, the cybersecurity market is expected to grow from $75 billion in 2015 to $170 billion by 2020. In this specialization, you will learn basic security issues in computer communications, classical cryptographic algorithms, symmetric-key cryptography, public-key cryptography, authentication, and digital signatures. These topics should prove especially useful to you if you are new to cybersecurity Course 1, Classical Cryptosystems, introduces you to basic concepts and terminology related to cryptography and cryptanalysis. It is recommended that you have a basic knowledge of computer science and basic math skills such as algebra and probability.","IS
SP
SF"
Symmetric Cryptography,"Welcome to Symmetric Cryptography! 
Symmetric cryptography relies on shared secret key to ensure message confidentiality, so that the unauthorized attackers cannot retrieve the message. The course describes substitution and transposition techniques, which were the bases for classical cryptography when the message is encoded in natural language such as English. Then, we build on product ciphers (using both substitution and transposition/permutation) to describe modern block ciphers and review the widely used cipher algorithms in DES, 3-DES, and AES. Lastly, we enable the use of block ciphers to support variable data length by introducing different modes of block cipher operations in ECB, CBC, CFB, OFB, and CTR modes.
This course is cross-listed and is a part of the two specializations, the Applied Cryptography specialization and the Introduction to Applied Cryptography specialization.",SP
Asymmetric Cryptography and Key Management,"Welcome to Asymmetric Cryptography and Key Management! 
In asymmetric cryptography or public-key cryptography, the sender and the receiver use a pair of public-private keys, as opposed to the same symmetric key, and therefore their cryptographic operations are asymmetric. This course will first review the principles of asymmetric cryptography and describe how the use of the pair of keys can provide different security properties. Then, we will study the popular asymmetric schemes in the RSA cipher algorithm and the Diffie-Hellman Key Exchange protocol and learn how and why they work to secure communications/access. Lastly, we will discuss the key distribution and management for both symmetric keys and public keys and describe the important concepts in public-key distribution such as public-key authority, digital certificate, and public-key infrastructure. This course also describes some mathematical concepts, e.g., prime factorization and discrete logarithm, which become the bases for the security of asymmetric primitives, and working knowledge of discrete mathematics will be helpful for taking this course; the Symmetric Cryptography course (recommended to be taken before this course) also discusses modulo arithmetic.
This course is cross-listed and is a part of the two specializations, the Applied Cryptography specialization and the Introduction to Applied Cryptography specialization.",IS
Homeland Security & Cybersecurity Connection - It's Not About the Terrorists,"Welcome to Course 1 in CS4950, Homeland Security and Cybersecruity. In this course we examine the origins of homeland security and its co0nnection with cybersecurity. Homeland security is about safeguarding the United States from domestic catastrophic destruction. Catastrophic destruction comes in two forms: natural and manmade. For most of history the manmade variety came in the form of warfare and required the combined resources of a nation state. All that changed March 20th, 1995. On that date, members of a quasi-religious cult in Japan attacked the Tokyo subway system using Sarin gas. It was the first deployment of a weapon of mass destruction my a non-state actor. The power of destruction once reserved to nation states was now available to small groups, even individuals. The incident was a wake up call for governments around the world. Defense establishments designed to keep rogue states in check were practically useless against non-state actors. Overnight, the number of potential enemies multiplied a hundred, maybe even a thousand-fold. In response to the Tokyo Subway Attacks, the United States took measures to protect itself from WMD attack by non-state actors. Those measures were still being enacted when the nation was attacked on 9/11. On September 11, 2001, nineteen hijackers inflicted as much damage as the Imperial Japanese Navy on December 7, 1941. The investigating 9/11 Commission noted the attacks for their &quot;surpassing disproportion&quot;. The hijackers had achieved WMD effects without using WMD. They did this by subverting the nation&#x27;s transportation infrastructure, turning passenger jets into guided missiles. Again, the security implications were profound. Non-state actors seeking to inflict domestic catastrophic destruction did not need to import, fabricate, or acquire WMD as the nation was surrounded by the means of its own destruction in the form of critical infrastructure. The vulnerability of critical infrastructure had not gone unnoticed. Again, in response to the Tokyo Subway attacks, which themselves had been an attack on Japanese infrastructure, President Clinton in 1996 commissioned a panel to investigate the threat to United States&#x27; infrastructure. The panel replied in 1997 that there was no immediate threat to US infrastructure, but they were concerned with the growing risk of cyber attack. The same cyber physical systems that fueled the explosive growth of the Internet were being incorporated into Industrial Control Systems that underpinned much of the nation&#x27;s critical infrastructure. The panel noted that the knowledge and skills necessary to mount a cyber attack on the nation&#x27;s infrastructure was growing. As a result of this observation, President Clinton in 1998 ordered the protection of US critical infrastructure, especially from cyber attack. Following 9/11, critical infrastructure protection and cybersecurity were designated core missions in the 2002 Homeland Security Act establishing the new Department of Homeland Security. They remain core missions to this day, but many don&#x27;t see the connection. The connection is this: cybersecurity is essential to critical infrastructure protection, which is essential to homeland security, which is about safeguarding the United States from domestic catastrophic destruction.  I look forward to working with you in the coming lessons.  Best wishes and good luck!
Course 1: Homeland Security &amp; Cybersecurity Connection
Course 2: Cybersecurity Policy for Water and Electricity Infrastructures
Course 3: Cybersecurity Policy for Aviation and Internet Infrastructures
Course 4: Homeland Security &amp; Cybersecurity Future",SP
Cybersecurity Policy for Water and Electricity Infrastructures,"This course will examine the drinking water and electricity infrastructures, and various policies that have been developed to help guide and strengthen their cybersecurity programs.  The drinking water and electricity infrastructures are two of fourteen subsectors comprising what are known as &quot;lifeline infrastructure&quot;. The 2013 National Infrastructure Protection Plan identifies four lifeline infrastructure sectors: 1) water, 2) energy, 3) transportation, and 4) communications. These sectors are designated &quot;lifeline&quot; because many other infrastructures depend upon them.  The drinking water subsector is part of the water sector, and the electricity subsector is part of the energy sector.  Both subsectors are overseen by the Department of Homeland Security National Protection and Programs Directorate which manages the DHS National Infrastructure Protection Program. The NIPP employs a five-step continuous improvement program called the Risk Management Framework. NIPP implementation is overseen by DHS-designated Sector-Specific Agencies staffed by various Federal departments. The Sector-Specific Agencies work in voluntary cooperation with industry representatives to apply the Risk Management Framework and document results in corresponding Sector-Specific Plans.  The program began in 2007 and the most recent Sector-Specific Plans were published in 2016. In February 2013, President Obama issued Executive 13636 directing the National Institute of Standards and Technology to develop a voluntary set of recommendations for strengthening infrastructure cybersecurity measures. EO13636 also asked Federal agencies with regulating authority to make a recommendation whether the NIST Cybersecurity Framework should be made mandatory. The Environmental Protection Agency who is both the SSA and regulatory authority for the drinking water subsector recommended voluntary application of the NIST Cybersecurity Framework. The Department of Energy who is both the SSA and regulatory authority for the electricity subsector replied that it was already implementing the Electricity Subsector Cybersecurity Capability Maturity Model, which indeed was what the NIST Cybersecurity Framework was based on.  The Department of Energy, though, recommended voluntary application of the ES-C2M2. This module will examine both the drinking water and electricity lifeline infrastructure subsectors, and elements and application of the NIST Cybersecurity Framework and ES-C2M2.",SP
Cybersecurity Policy for Aviation and Internet Infrastructures,"In this course we will examine the aviation and Internet infrastructures, and various policies that have been developed to help guide and strengthen their cybersecurity programs.  The aviation and Internet infrastructures are also considered &quot;lifeline infrastructure&quot; as part of the transportation and communications sectors. Both subsectors are overseen by the Department of Homeland Security National Protection and Programs Directorate which manages the DHS National Infrastructure Protection Program. SSA responsibility for the aviation subsector is shared between the Transportation Security Administration and Federal Aviation Administration under the auspices of the Department of Homeland Security and Department of Transportation respectively.  The Department of Homeland Security retains sole responsibility as the Sector-Specific Agency for the Internet subsector.  While TSA and FAA have regulatory over the aviation subsector, DHS has no regulatory authority whatsoever over the Internet. In response to Executive Order 13636 issued by President Obama in February 2013, both sets of SSAs recommended continuing with voluntary cybersecurity measures. TSA and FAA reported they were working to implement the Transportation Roadmap across all transportation subsectors, including aviation. DHS reported that it was working with Internet providers to implement the Cyber Assessment Risk Management Approach. Despite some differences, the Transportation Roadmap and CARMA are very similar to the NIST Cybersecrity Framework and ES-C2M2 examined previously.  That is to say, they are predicated on a continuous improvement process that engages the whole organization in identifying and implementing incremental changes to enhance cybersecurity practices based on prevailing standards. This module will examine both the aviation and Internet lifeline infrastructure subsectors, and elements and application of the Transportation Roadmap and CARMA.",SP
Homeland Security and Cybersecurity Future,"This course takes a look at the future of cybersecurity with respect to what is being done to lessen the potential for catastrophic destruction resulting from cyber attack on critical infrastructure.  In this respect, we take a short survey of potential technological solutions and response options.  We conclude this module by taking a look at unique aspects of the cyber profession and personal considerations for those who want to make cybersecurity a career.",SP
Cryptography and Information Theory,"Welcome to Cryptography and Information Theory! 
This course combines cryptography (the techniques for protecting information from unauthorized access) and information theory (the study of information coding and transfer). More specifically, the course studies cryptography from the information-theoretical perspectives and discuss the concepts such as entropy and the attacker knowledge capabilities, e.g., Kerckhoff&#x27;s Principle. It also contrasts information-theoretic security and computational security to highlight the different train of thoughts that drive the cryptographic algorithmic construction and the security analyses.
This course is a part of the Applied Cryptography specialization.",IS
Cryptographic Hash and Integrity Protection,"Welcome to Cryptographic Hash and Integrity Protection! 
This course reviews cryptographic hash functions in general and their use in the forms of hash chain and hash tree (Merkle tree). Building on hash functions, the course describes message authentication focusing on message authentication code (MAC) based on symmetric keys. We then discuss digital signatures based on asymmetric cryptography, providing security properties such as non-repudiation which were unavailable in symmetric-cryptography-based message authentication.
This course is a part of the Applied Cryptography specialization.",IS
Access Controls ,"Welcome to Access Controls!
The Access Controls Course provides information pertaining to specify what users are permitted to do, the resources they are allowed to access, and what operations they are able to perform on a system. Access Controls help managers limit and monitor systems use at a user level or group membership. You will understand the different access control systems and how they should be implemented to protect the system and data using the different levels of confidentiality, integrity, and availability.
The Access Controls course provides information pertaining to specifying what users are permitted to do, the resources they are allowed to access, and what operations they are able to perform on a system. Access Controls help managers limit and monitor systems use at a user level, and is usually predefined based on authority level or group membership. You will understand the different access control systems and how they should be implemented to protect the system and data using the different levels of confidentiality, integrity, and availability.
  Objectives
1. Describe how to implement Authentication mechanisms
2. Identify and operate internetwork trust architectures
3. Describe the process of administering identity management life cycle
4. Implement the different types of access controls (Subject/Object based)","IS
IAS"
Security Operations and Administration,"Security operations and administration is the task of identifying an organization&#x27;s information assets and the documentation needed for policy implementation, standards, procedures, and guidelines to ensure confidentiality, integrity, and availability. You will understand the process necessary for working with management and information owners, custodians, and users so that proper data classifications are defined. This will ensure the proper handling of all hard copy and electronic information.
      The Security operations and Administration course addresses basic security concepts and the application of those concepts in the day to day operation and administration of enterprise computer systems and the information that they host.Ethical considerations in general, and the (ISC)2 Code of Ethics in particular, provide the backdrop for any discussion of information security and SSCP candidates will be tested on both. Information security professionals often find themselves in positions of trust and must be beyond reproach in every way.Several core principles of information security stand above all others and this domain covers these principles in some depth. It can be said that the CIA triad of confidentiality, integrity and availability forms the basis for almost everything that we do in information security and the SSCP candidate must not only fully understand these principles but be able to apply them in all situations. additional security concepts covered in this domain include privacy, least privilege, non-repudiation and the separation of duties.
  
 Course Objectives
1. Define Code of Ethics
2. Describe the security concepts
3. Document and operate security controls
4. Describe the asset management process
5. Implement compliance controls
6. Assess compliance controls
7. Describe the change management process
8. Contribute to the security awareness training program
9. Contribute to physical security operations",SP
"Identifying, Monitoring, and Analyzing Risk and Incident Response and Recovery ","Risk Identification, Monitoring, and Analysis: In the Risk Identification, Monitoring, and Analysis session, you will learn how to identify, measure, and control losses associated with adverse events. You will review, analyze, select, and evaluate safeguards for mitigating risk.You will learn processes for collecting information, providing methods of identifying security events, assigning priority levels, taking the appropriate actions, and reporting the findings to the correct individuals. After collection of the details from monitoring, we can analyze to determine if the system is being operated in accordance with accepted industry practices, and in compliance with organization policies and procedures.        
 Incident Response and Recovery: In the Incident Response and Recovery Session, you will gain an understanding of how to handle incidents using consistent, applied approaches in order to resolve. Once an incident is identified, action will be necessary in order to resolve. We will examine processes such as damage recovery, data integrity and preservation, and the collection, handling, reporting, and prevention. You will be introduced to the Business Continuity Plan (BCP) and Disaster Recovery Plan (DRP) concepts and how they can be utilized in order to mitigate damages, recover business operations, and avoid critical business interruption. Through the use of the DRP, you will understand the procedures for emergency response and post-disaster recovery.    
 Course Objectives  
1.  Describe the risk management process
2. Perform security assessment activities
3. Describe processes for operating and maintaining monitoring systems
4. Identify events of interest
5. Describe the various source systems
6. Interpret reporting findings from monitoring results
7. Describe the incident handling process
8. Contribute to the incident handling process based upon role within the organization
9. Describe the supporting role in forensics investigation processes
10. Describe the supporting role in the business continuity planning process
11. Describe the supporting role in the disaster recovery planning process",SP
Cryptography,"Welcome to Cryptography!
Cryptography is the practice and study of techniques for securing communications in the presence of third parties. You will learn how to protect information in order to ensure its integrity, confidentiality, authenticity, and non-repudiation.
You will come out with a basic understanding of cryptographic concepts and how to apply them, implement secure protocols, key management concepts, key administration and validation, and Public Key Infrastructure.
Course Objectives
1. Apply the fundamental concepts of cryptography
2. Describe the difference between symmetric and asymmetric cryptography
3. Define the basic requirements for cryptography
4. Identify processes to support secure protocols
5. Describe the process for implementing cryptographic systems
6. Define key management concepts
7. Define Public Key Infrastructure
8. Identify processes for key administration and validation
9. Describe the implementation of secure protocols",IS
Networks and Communications Security,"Welcome to Networks and Communications Security Course!
In the Networks and Communications Security Course, you will learn about the network structure, data transmission methods, transport formats, and the security measures used to maintain integrity, availability, authentication, and confidentiality of the information being transmitted.
Concepts for both public and private communication networks will be discussed.
Course Objectives
1. Describe network-related security issues
2. Identify protective measures for telecommunication technologies
3. Define processes for controlling network access
4. Identify processes for managing LAN-based security
5. Describe procedures for operating and configuring networked-based
security devices
6. Define procedures to implement and operate wireless technologies",SP
Systems and Application Security,"Welcome to Systems and Application Security Course!
In the Systems and Application Security Course, you will gain an understanding of computer code that can be described as harmful or malicious. Both technical and non-technical attacks will be discussed. You will learn how an organization can protect itself from these attacks. You will learn concepts in endpoint device security, cloud infrastructure security, securing big data systems, and securing virtual environments.
Objectives
1. Identify malicious code activity
2. Describe malicious code and the various countermeasures
3. Describe the processes for operating endpoint device security
4. Define mobile device management processes
5. Describe the process for configuring cloud security
6. Explain the process for securing big data systems
7. Summarize the process for securing virtual environments",SP
Reliable Cloud Infrastructure: Design and Process,"This online course equips students to build highly reliable and efficient solutions on Google Cloud Platform, using proven design patterns and principles derived from Google Site Reliability Engineering (SRE). It is a continuation of the Architecting with Google Cloud Platform Specialization and assumes hands-on experience with the technologies covered in the other courses in the specialization.
Through a combination of presentations, challenges, and hands-on labs, participants learn to design GCP deployments that are highly reliable and secure; and how to operate GCP deployments in a highly available and cost-effective manner.
This course teaches participants the following skills:
● Design for high availability, scalability, and maintainability.
● Assess tradeoffs and make sound choices among Google Cloud Platform products..
● Integrate on-premises and cloud resources.
● Identify ways to optimize resources and minimize cost.
● Implement processes that minimize downtime, such as monitoring and alarming, unit and integration testing, production resilience testing, and incident post-mortem analysis.
● Implement policies that minimize security risks, such as auditing, separation of duties and least privilege.
● Implement technologies and processes that assure business continuity in the event of a disaster.
Prerequisites
● Completion of prior courses in the Architecting with Google Cloud Platform Specialization or equivalent experience
● Basic proficiency with command-line tools and Linux operating system environments
● Systems Operations experience including deploying and managing applications, either on-premises or in a public cloud
environment","SP
AR
SDF
SE"
Essential Cloud Infrastructure: Foundation,"This 1-week, accelerated on-demand course introduces participants to the comprehensive and flexible infrastructure and platform services provided by Google Cloud Platform. Through a combination of video lectures, demos, and hands-on labs, participants explore and deploy solution elements, including infrastructure components such as networks, virtual machines and applications services. You will learn how to use the Google Cloud Platform through the console and Cloud Shell. You&#x27;ll also learn about the role of a cloud architect, approaches to infrastructure design, and virtual networking configuration with Virtual Private Cloud (VPC), Projects, Networks, Subnetworks, IP addresses, Routes, and Firewall rules.
Prerequisites
To get the most out of this course, participants should have:
• Completed Google Cloud Platform Fundamentals (Core Infrastructure or AWS Professionals.) or have equivalent experience
• Basic proficiency with command-line tools and Linux operating system environments
• Systems Operations experience including deploying and managing applications, either on-premises or in a public cloud environment","CN
IAS
PL
SP"
Introduction to TCP/IP,"You use the Internet through your PC (Personal Computer), laptop, tablet, smartpad, and smartphone every day in everything you do. Through your own PC/laptop, you can easily learn everything about the Internet, and that is what this course is focused on. In this course ‘Introduction to TCP/IP,’ you will learn the operational functions of Internet technologies (which include IPv4, IPv6, TCP, UDP, addressing, routing, domain names, etc.) and your PC/laptop&#x27;s security and gateway Internet setup and basic principles. In addition, through a simple Wireshark experiment, you will see the TCP/IP packets and security systems in action that are serving your PC/laptop, that serves you.","NC
IAS"
Essential Cloud Infrastructure: Core Services,"&gt;&gt;&gt; By enrolling in this course you agree to the Qwiklabs Terms of Service as set out in the FAQ and located at: https://qwiklabs.com/terms_of_service &lt;&lt;&lt;
This accelerated on-demand course introduces participants to the comprehensive and flexible infrastructure and platform services provided by Google Cloud Platform. Through a combination of video lectures, demos, and hands-on labs, participants explore and deploy solution elements, including infrastructure components such as networks, systems and applications services. This course also covers deploying practical solutions including securely interconnecting networks, customer-supplied encryption keys, security and access management, quotas and billing, and resource monitoring.
Prerequisites: 
To get the most out of this course, participants should have:
• Completed Google Cloud Platform Fundamentals (Core Infrastructure or AWS Professionals.) or have equivalent experience
• Completed Essential Cloud Infrastructure: Foundation or have equivalent experience
• Basic proficiency with command-line tools and Linux operating system environments
• Systems Operations experience including deploying and managing applications, either on-premises or in a public cloud environment",SP
Information Security: Context and Introduction,"In this course you will explore information security through some introductory material and gain an appreciation of the scope and context around the subject. This includes a brief introduction to cryptography, security management and network and computer security that allows you to begin the journey into the study of information security and develop your appreciation of some key information security concepts.
The course concludes with a discussion around a simple model of the information security industry and explores skills, knowledge and roles so that you can determine and analyse potential career opportunities in this developing profession and consider how you may need to develop personally to attain your career goals. 
After completing the course you will have gained an awareness of key information security principles regarding information, confidentiality, integrity and availability. You will be able to explain some of the key aspects of information risk and security management, in addition, summarise some of the key aspects in computer and network security, including some appreciation of threats, attacks, exploits and vulnerabilities. You will also gain an awareness of some of the skills, knowledge and roles/careers opportunities within the information security industry.",IS
Cybersecurity and Its Ten Domains,"This course is designed to introduce students, working professionals and the community to the exciting field of cybersecurity. Throughout the MOOC, participants will engage in community discourse and online interaction. Participants will gain knowledge and understanding of cybersecurity and its domains. They will engage with expertly produced videos, gain insight from industry experts, participate in knowledge assessments, practice assessing their environmental awareness, and gain access to materials that address governance and risk management, compliance, business continuity and disaster recovery, cryptography, software development security, access control, network security, security architecture, security operations, and physical and environmental security. Learning will be assessed using strategies aligned to knowledge and understanding. 
You do not need prior experience in IT security to do well in this course. All you need is a willingness to learn. We will point you to relevant open and free resources to assist you.
At the end of this course, you will have the option of applying for undergraduate level course credit at Kennesaw State University (dependent on admission to Kennesaw State University as a degree seeking or a non-degree seeking student). More information is available in final module &quot;Receive Course (undergraduate) Credit at Kennesaw State University&quot;.",SP
Elastic Cloud Infrastructure: Scaling and Automation,"&gt;&gt;&gt; By enrolling in this course you agree to the Qwiklabs Terms of Service as set out in the FAQ and located at: https://qwiklabs.com/terms_of_service &lt;&lt;&lt;
This accelerated on-demand course introduces participants to the comprehensive and flexible infrastructure and platform services provided by Google Cloud Platform. Through a combination of video lectures, demos, and hands-on labs, participants explore and deploy solution elements, including infrastructure components such as networks, systems and applications services. This course also covers deploying practical solutions including securely interconnecting networks, load balancing, autoscaling, infrastructure automation and managed services.
Prerequisites: 
To get the most out of this course, participants should have:
• Completed Google Cloud Platform Fundamentals (Core Infrastructure or AWS Professionals.) or have equivalent experience
• Completed Essential Cloud Infrastructure: Foundation or have equivalent experience
• Completed Essential Cloud Infrastructure: Core Services or have equivalent experience
• Basic proficiency with command-line tools and Linux operating system environments
• Systems Operations experience including deploying and managing applications, either on-premises or in a public cloud environment",SF
Elastic Cloud Infrastructure: Containers and Services,"&gt;&gt;&gt; By enrolling in this course you agree to the Qwiklabs Terms of Service as set out in the FAQ and located at: https://qwiklabs.com/terms_of_service &lt;&lt;&lt;
In this course, learners explore services provided to applications built on GCP that enhance their scalability and maintainability. They work with services like Google Cloud Pub/Sub and Google Cloud Functions to make applications more efficient. They explore the use of containers on GCP. The course concludes with a review of the specialization.
Prerequisites: 
To get the most out of this course, participants should have:
• Completed Google Cloud Platform Fundamentals (Core Infrastructure or AWS Professionals.) or have equivalent experience
• Completed Essential Cloud Infrastructure: Foundation or have equivalent experience
• Completed Essential Cloud Infrastructure: Core Services or have equivalent experience
• Completed Elastic Cloud Infrastructure: Scaling and Automation or have equivalent experience
• Basic proficiency with command-line tools and Linux operating system environments
• Systems Operations experience including deploying and managing applications, either on-premises or in a public cloud environment",AR
Computer Organization,"This course focuses on the internal structure and working principle of the computer, focuses on the interface and interaction between software and hardware, and pays attention to the correspondence between basic concepts and real systems.","AR
CN
IAS
IM
NC
OS
PL
SDF
SP"
"Internet History, Technology, and Security","The impact of technology and networks on our lives, culture, and society continues to increase. The very fact that you can take this course from anywhere in the world requires a technological infrastructure that was designed, engineered, and built over the past sixty years. To function in an information-centric world, we need to understand the workings of network technology. This course will open up the Internet and show you how it was created, who created it and how it works. Along the way we will meet many of the innovators who developed the Internet and Web technologies that we use today. 
What You Will Learn:
After this course you will not take the Internet and Web for granted. You will be better informed about important technological issues currently facing society. You will realize that the Internet and Web are spaces for innovation and you will get a better understanding of how you might fit into that innovation. If you get excited about the material in this course, it is a great lead-in to taking a course in Web design, Web development, programming, or even network administration. At a minimum, you will be a much wiser network citizen.",NC
International Cyber Conflicts,"By nature, cyber conflicts are an international issue that span across nation-state borders. By the end of the course, you will be able to apply the knowledge gained for analysis and management of international cyber incidents and conflicts including for activities such as development of policy related to cybercrime and cyberwarfare. Management of cyber incidents and conflicts requires an interdisciplinary perspective including an understanding of: 1) characteristics of the cyber threats and conflicts themselves, 2) international efforts to reduce and improve cyber security, and 3) psychological and sociopolitical factors. 
The course is designed to reach an international audience and will encourage discussion on relevant current events among participants to enrich the experience with various personal and cultural perspectives on cutting-edge issues. In addition, assignments and other assessments will supplement video lectures and selected readings to ensure application of the material.
After taking this course you will be able to:
• Identify different types of actors involved in cyber threats (individuals, organizations &amp; nation-states)
• Distinguish between different types of threats and issues in cyber security including, data theft, political espionage, critical infrastructure protection, and propaganda
• Detail the basic characteristics of the Internet infrastructure and international efforts to address Internet governance
• List several international efforts to address cyber crime and espionage
• Evaluate how principals that govern international conflicts might be applied in context of cyber security
• Apply different psychological theories of human motivation and cooperation and communication and political theories in analysis of different international issues related to cyber security including censorship, media operations and role of social technologies.
Grading:
Your grade is assessed based on discussion posts and quizzes. Individual taking this course for credit (i.e. students at the University at Albany y will be required to engage in additional activities communicated to them directly). 
Recommended Background:
No background knowledge or skills are necessary, but an understanding and familiarity of cyber security, Internet infrastructure and international law would be advantageous for anyone who participates in the course.
ACKNOWLEDGEMENTS
Ersin Dincelli and Nic DePaula were the instructional designers for the course who assisted in the recording of the videos, reviewing material, creating slides, assessments and some of the content. Without their tremendous effort this would not have been possible. We also acknowledge the financial support for the recordings from the University at Albany as well as the support from Media and Marketing. Finally, thanks to Lisa Stephens who is the SUNY liaison to Coursera for being a strong supporter of the MOOC.",IAS
Networks Illustrated: Principles without Calculus,"What makes WiFi faster at home than at a coffee shop? How does Google order its search results from the trillions of webpages on the Internet? Why does Verizon charge $15 for every GB of data we use? Is it really true that we are connected in six social steps or less?
These are just a few of the many intriguing questions we can ask about the social and technical networks that form integral parts of our daily lives. This course is about exploring the answers, using a language that anyone can understand. We will focus on fundamental principles like “sharing is hard”, “crowds are wise”, and “network of networks” that have guided the design and sustainability of today’s networks, and summarize the theories behind everything from the social connections we make on platforms like Facebook to the technology upon which these websites run.
Unlike other networking courses, the mathematics included here are no more complicated than adding and multiplying numbers. While mathematical details are necessary to fully specify the algorithms and systems we investigate, they are not required to understand the main ideas. We use illustrations, analogies, and anecdotes about networks as pedagogical tools in lieu of detailed equations.
Please note that per Princeton University policy, no certificates, credentials or reports are awarded in connection with this course.",NC
"Networks: Friends, Money, and Bytes","You pick up your iPhone while waiting in line at a coffee shop. You google a not-so-famous actor, get linked to a Wikipedia entry listing his recent movies and popular YouTube clips of several of them. You check out user reviews on Amazon and pick one, download that movie on BitTorrent or stream that in Netflix. But suddenly the WiFi logo on your phone is gone and you&#x27;re on 3G. Video quality starts to degrade, but you don&#x27;t know if it&#x27;s the server getting crowded or the Internet is congested somewhere. In any case, it costs you $10 per Gigabyte, and you decide to stop watching the movie, and instead multitask between sending tweets and calling your friend on Skype, while songs stream from iCloud to your phone. You&#x27;re happy with the call quality, but get a little irritated when you see there&#x27;re no new followers on Twitter. You may wonder how they all kind of work, and why sometimes they don&#x27;t. Take a look at the list of 20 questions below. Each question is selected not just for its relevance to our daily lives, but also for the core concepts in the field of networking illustrated by its answers. This course is about formulating and answering these 20 questions.","NC
SF
SP"
Securing Digital Democracy,"In this course, you&#x27;ll learn what every citizen should know about the security risks--and future potential — of electronic voting and Internet voting. We&#x27;ll take a look at the past, present, and future of election technologies and explore the various spaces intersected by voting, including computer security, human factors, public policy, and more.",SP
Operating systems and virtualization security,"Operating system is the basic software of computer system, and system virtualization has become the core technology of cloud computing platform. Without the security provided by them, the security of these computer systems and their data will not be guaranteed. This course will introduce the theories, technologies and methods related to the security of operating system (Linux) and system virtualization (Xen) from the perspective of combining theory and engineering practice, including: Security concepts, security mechanisms, security models, security architecture, security development methods, security standards and evaluation methods, etc., help you learn and understand the knowledge system, practical techniques and methods in this field.",SP
The Internet and You,"Can the Internet be controlled? Should it be? How does the history of the Internet help predict what we should expect for its future? Is net neutrality a lost cause or something worth fighting for? The Internet continues to surprise us as a force for change and disruption in our daily lives and society at large. While it seems as though these significant disruptions are a recent phenomena, in reality we have seen these profound societal disruptions since the 1990s. In this Teach-Out, participants will learn how the Internet has affected human communication, the sharing and discovery of information, and social interactions. Discussions on current trends and potential ways the Internet will continue to affect society will also be explored, as well as how learners can empower their own productivity and impact in the ever-evolving landscape of the Internet.
A Teach-Out is:
-an event – it takes place over a fixed, short period of time
-an opportunity – it is open for free participation to everyone around the world
-a community – it will be joined by a large number of diverse individuals
-a conversation – an opportunity to give and take ideas and information from people
The University of Michigan Teach-Out Series provides just-in-time community learning events for participants around the world to come together in conversation with the U-M campus community, including faculty experts. The U-M Teach-Out Series is part of our deep commitment to engage the public in exploring and understanding the problems, events, and phenomena most important to society.
Teach-Outs are short learning experiences, each focused on a specific current issue. Attendees will come together over a few days not only to learn about a subject or event but also to gain skills. Teach-Outs are open to the world and are designed to bring together individuals with wide-ranging perspectives in respectful and deep conversation. These events are an opportunity for diverse learners and a multitude of experts to come together to ask questions of one another and explore new solutions to the pressing concerns of our global community. Come, join the conversation!
Find new opportunities at teach-out.org.",IS
Introduction to Cyber Security,"Introduction to Cyber Security was designed to help learners develop a deeper understanding of modern information and system protection technology and methods. The learning outcome is simple: We hope learners will develop a lifelong passion and appreciation for cyber security, which we are certain will help in future endeavors. Students, developers, managers, engineers, and even private citizens will benefit from this learning experience. Special customized interviews with industry partners were included to help connect the cyber security concepts to live business experiences.",IS
Cybersecurity for Business,"It seems anymore that you can&#x27;t listen to the news without hearing of a data breach. You may have heard it said before that there are 2 types of companies out there, the ones who have been breached and those who will be breached. Defending against attackers who want to compromise assets can seem like an arduous task, but learning how attacks work and more importantly how to defend against those attacks can be very fulfilling. This specialization is designed to introduce you to practical computer security by teaching you the fundamentals of how you use security in the business world. This course is for those who want to understand how to defend computer systems and assets from attackers and other threats. It is also for those who want to understand how threats and attacks are carried out to help better defend their systems. This specialization is designed for senior business leaders to middle management and system administrators, so they can all speak the same language and get a better handle on their organization&#x27;s security. Additionally, the course material may help you in passing some industry leading computer security examinations such as Security+ and CISSP.",IS
Computer Security and Systems Management,"The Computer Security and Systems Management Specialization focuses on computing in an enterprise environment. Combining both theory and real world experience and architecture, the courses will prepare you to design and audit secure enterprise systems. The courses will cover practical use of major server operating systems in an enterprise environment and how to design and operate them securely.",IS
Applied Cryptography,"This specialization is intended for the learners interested in or already pursuing a career in computer security or other cybersecurity-related fields. Through four courses, the learners will cover the security of information systems, information entropy, classical cryptographic algorithms, symmetric cryptography, asymmetric/public-key cryptography, hash functions, message authentication codes, digital signatures, key management and distribution, and other fundamental cryptographic primitives and protocols.",SP
Computer Communications,"This specialization is developed for seniors and fresh graduate students to understand fundamental network architecture concepts and their impacts on cyber security, to develop skills and techniques required for network protocol design, and prepare for a future of constant change through exposure to network design alternatives. Students will require a prior knowledge of C programming, an understanding of math probability and a computer science background is a plus.","NC
IAS"
Homeland Security and Cybersecurity,"Homeland security is about safeguarding the United States from domestic catastrophic destruction. Cybersecurity has emerged as a priority homeland security concern because a coordinated cyber attack against critical infrastructure could result in the worst catastrophe in the nation’s history. This specialization examines the cybersecurity problem, and takes a close look at what is being done to safeguard the United States from domestic catastrophic destruction by cyber attack. At the conclusion of this course, we hope learners grasp the central message that cybersecurity is essential to critical infrastructure protection, which is essential to homeland security, which is about safeguarding the United States from domestic catastrophic destruction.",SP
(ISC)² Systems Security Certified Practitioner (SSCP) ,"Pursue better IT security job opportunities and prove knowledge with confidence. The SSCP Professional Training Certificate shows employers you have the IT security foundation to defend against cyber attacks – and puts you on a clear path to earning SSCP certification.
Learn on your own schedule with 120-day access to content aligned with the latest (ISC)2 SSCP exam domains. We’re offering the complete online self-paced program for only $1,000 – a $200 savings when you get all domains bundled together.
3 Steps to Career Advancement
1. Register for the course
2. Gain access for 180 days
3. Register and sit for the SSCP certification exam
Upon completing the SSCP Professional Certificate, you will:
1. Complete six courses of preparing you to sit for the Systems Security Certified Practitioner (SSCP) certification exam as outlined below.
Course 1 - Access Controls
Course 2 - Security Operations and Administration
Course 3 - Risk Identification, Monitoring, and Analysis/Incident Response and Recovery
Course 4 - Cryptography
Course 5 - Network and Communication Security
Course 6 - Systems and Application Security
2. Receive a certificate of program completion.
3. Understand how to implement, monitor and administer an organization’s IT infrastructure in accordance with security policies and procedures that ensure data confidentiality, integrity and availability.",SP
Cybersecurity,"The Cybersecurity Specialization covers the fundamental concepts underlying the construction of secure systems, from the hardware to the software to the human-computer interface, with the use of cryptography to secure interactions. These concepts are illustrated with examples drawn from modern practice, and augmented with hands-on exercises involving relevant tools and techniques. Successful participants will develop a way of thinking that is security-oriented, better understanding how to think about adversaries and how to build systems that defend against them.",SP
Cisco Networking Basics,"Welcome to the Cisco Networking Basics Specialization. The five courses included in this specialization are designed for beginners in computing that want to understand the basics of how data is sent and received in a network and how small computer networks are created. People who may be in non-networking professions that want to understand how their home or small business networks actually work will enjoy this course.
These courses introduce a variety of concepts, practice activities and simulations that help build the learner’s skills and understanding of computer networking. You will learn how to set up a basic home network, configure devices for connectivity, understand how communication takes place on a network, and what minimal best practices should be implemented to secure the network. Learners will also be introduced to Cisco IOS® software used to manage Cisco routers and switches.
Previous networking knowledge is not required.","NC
DS"
Fundamentals of Graphic Design,"Graphic Design is all around us! Words and pictures—the building blocks of graphic design—are the elements that carry the majority of the content in both the digital world and the printed world. As graphic design becomes more visible and prevalent in our lives, graphic design as a practice becomes more important in our culture.
Through visual examples, this course will teach you the fundamental principles of graphic design: imagemaking, typography, composition, working with color and shape... foundational skills that are common in all areas of graphic design practice. I don&#x27;t just want you to watch a video of someone talking about design, I want you to MAKE design! If you want to be a designer you have to be a maker and a communicator, so this course will offer you lots of opportunities to get your hands dirty with exercises and with more practical projects.
At the end of this course you will have learned how to explore and investigate visual representation through a range of image-making techniques; understand basic principles of working with shape, color and pattern; been exposed to the language and skills of typography; and understand and have applied the principles of composition and visual contrast. If you complete the course, along with its optional (but highly recommended) briefs, you will have a core set of graphic design skills that you can apply to your own projects, or to more deeply investigate a specialized area of graphic design.
To succeed in this course you will need access to a computer. You can complete this course without one but it will be tougher. Access to, and a beginner&#x27;s level knowledge of Adobe Creative Suite programs, such as Illustrator, Photoshop and InDesign will help you, especially if you want to complete the optional briefs.",GV
Computer Architecture,"In this course, you will learn to design the computer architecture of complex modern microprocessors.","AR
CN
IAS
NC
SF
SP"
Social Computing,People are social creatures and the modern Internet reflects that. Technology has made collaboration at a distance possible in new ways that present their own set of challenges. This course will introduce you to the major challenges and opportunities for creating online communities. What does the future hold? Learn how social computing can create collaboration experiences that go beyond what’s possible face to face.,HCI
Input and Interaction,"In this course, you will learn relevant fundamentals of human motor performance, perception, and cognition that inform effective interaction design. You will use these models of how people work to design more effective input and interaction techniques. You’ll apply these to both traditional graphic and gestural interfaces.",HCI
Information Design,"A blank canvas is full of possibility. If you have an idea for a user experience, how do you turn it into a beautiful and effective user interface?  This covers covers principles of visual design so that you can effectively organize and present information with your interfaces. You&#x27;ll learn concrete strategies to create user interfaces, including key lessons in typography, information architecture, layout, color, and more. You’ll learn particular issues that arise in new device contexts, such as mobile and responsive interfaces. You will learn how to apply these design principles in a modern context of increasingly diverse form factors - from tablets, to walls, to watches.",HCI
Intro to Digital Manufacturing with Autodesk Fusion 360,"The manufacturing industry is making a digital transformation, allowing companies to customize production through advances in machine learning, sustainable design, generative design, and collaboration, with integrated design and manufacturing processes. This course introduces innovations in CAD and digital manufacturing, speaking to the rapid changes taking place that are forever transforming the future of making.
This course will also explore foundational concepts behind Autodesk® Fusion 360™ CAD/CAM. Fusion 360 is a cloud-based CAD/CAM tool for collaborative product development that combines industrial design, mechanical engineering, and machine tool programming into one software solution. Through a series of lectures and hands-on exercises, this course provides the core philosophy behind the software. By understanding how designs are both made and assembled, you&#x27;ll learn to create better designs from the start.
After completing this course, you will be able to:
• Summarize an understanding of digital manufacturing, principles of sustainable design, and manufacturing processes.
• Explain and discuss how trends such as generative design and machine learning are influencing innovation, and how things are made. 
• Demonstrate knowledge and skills in foundational concepts of Fusion 360 CAD/CAM software.
• Practice design collaboration and file management best practices using Fusion 360 cloud-based features",IM
Autodesk Fusion 360 Integrated CAD/CAM/CAE,"Design, engineering, and manufacturing are undergoing a digital transformation, and the need for a collaborative product development environment is becoming an ever-growing requirement. Autodesk® Fusion 360™ meets this need by connecting CAD, CAM, and CAE in a single cloud-based platform unlike any other tool of its kind. This course builds upon digital manufacturing trends and foundational CAD concepts discussed in Course 1 of this series by introducing Fusion 360 as a problem-solving tool. In this course, we take the next step in connecting CAD, CAM, and CAE through a series of short exercises on 3D modeling, rendering, simulation, and computer aided manufacturing.
After completing this course series, you will be able to:
• Demonstrate knowledge of and apply job entry level skills in computer aided design, computer aided engineering (CAE) and computer aided manufacturing (CAM) using Fusion 360 software.
• Describe and apply design based workflows for design, engineering and manufacturing using Fusion 360 software.
• Utilize Fusion 360 cloud based collaboration features for project sharing and design review.","PD
IM"
3D Model Creation with Autodesk Fusion 360,"Design is the first phase in the digital manufacturing process. In this course, through a series of lectures and hands-on lessons, we’ll examine a designer’s approach to the design and manufacturing process—from concept to 3D model. We’ll start by applying design thinking to understand user needs, and then we’ll explore design criteria as we dive deeper into Autodesk® Fusion 360™ sketching, modeling, rendering, and documentation features.","DS
HCI"
Engineering Design Process with Autodesk Fusion 360,"This course provides a deeper exploration of mechanical assemblies and simulation, which are key engineering features of the design and manufacturing process. The foundation of engineering design is exploration and iteration. Design is rarely a perfectly linear and straightforward process. In this course, we&#x27;ll explore mechanical assembly design and simulation, focusing on testing and improving design components and performance. As we move through design assumptions, testing, and refining design ideas, we&#x27;ll come closer to a final design, while developing a deeper knowledge in Autodesk® Fusion 360™ for simulating and analyzing product functionality.
After completing this course, you will be able to:
• Describe the engineering design process and workflow in Fusion 360.
• Summarize the trends that are influencing the design industry.
• Demonstrate knowledge and skills in more advanced Fusion 360 CAD and simulation skills",AR
Manufacturing Process with Autodesk Fusion 360,"Designing a product is only part of the process. Now, can that product be manufactured? A CNC machinist works with computer numeric controlled (CNC) machines from generating the machine code to machine setup and run. Understanding both CAD and CAM is essential to this portion of a design. Even if you are not the end user who programs a machine, it is invaluable to know how it’s done. This knowledge translates directly to part design by helping make intelligent design decisions with manufacturing in mind. This course introduces you to the integrated CAD/CAM approach behind Fusion 360 CAD/CAM as well as 3D printed design setup and finally assembly and testing. All stages of product design in one place!
After completing this course, you will be able to:
 • Explain the Fusion 360 integrated CAD/CAM manufacturing workflow.
 • Summarize the trends that are influencing the future of manufacturing.
 • Demonstrate knowledge and skills in foundational concepts of Fusion 360 CAD/CAM software.
 • Set up a Flight Controller.
 • Assemble a quadcopter.
 • Fly the final design.","AR
SDF"
Introduction to Game Design,"Welcome! This course is an introduction to the primary concepts of gaming, and an exploration of how these basic concepts affect the way gamers interact with our games. In this course you will understand what defines a “game” and the mechanics and rules behind different types of games. Through four linked assignments you&#x27;ll learn ways to create and describe a game concept, and specifically what makes a compelling game. This course focuses on the conceptual underpinnings of games, and all assignments can be completed with a pencil and paper – no previous programming knowledge is required.","GV
HCI"
Story and Narrative Development for Video Games,"In this course, you will examine how storytelling acts as a vital mechanism for driving video gameplay forward. Looking at several historical and contemporary games, you will be asked to evaluate and interpret different story styles with the goal of identifying themes and procedures for your own game ideas. We&#x27;ll examine traditional narrative story processes, such as three-act structure, and how they fit into game story flows and the strategic elements of gameplay.  Ultimately, you will learn how to define character, setting, and structure to create a compelling game concept.",GV
World Design for Video Games,"Start creating your world. A game world is not just a backdrop for your game—be it minimal or detailed, contained or part of a much bigger universe, it provides the context for your player. Ultimately, a game world should feel alive and wholly unique to any player who will experience it. 
In this course, we will explore game worlds in existing games and study the art and influences that inform their themes and styles. We will also investigate key components of environment and level design as well as strategies designers use to define gameplay or advance it. We’ll also look at navigation and the elements that make your world as real (or unreal) as you want it to be. A weekly challenge will prompt you to explore styles and inspirations for possible game worlds, and you’ll learn effective ways to communicate your ideas from concepts to presentation-worthy proofs of concept.",GV
Character Design for Video Games,"In this course you will explore concepts and approaches involved in creating successful character designs that can be applied to video games. Following a first week delving into some foundational concepts for successful character design, each of the remaining three weeks are structured as a &quot;master class&quot; where you will observe three professional character designers at work in the studio: Andy Ristaino (Adventure Time), Jacky Ke Jiang (Journey), and Robertryan Cory (SpongeBob SquarePants). Each designer will take on two different design challenges on the fly and address the various issues in designing characters for games, such as movement, expression, and technical limitations. At the end of each week you will have an opportunity to try out some of the concepts from that week&#x27;s lesson on characters of your own design. 
This is a fun and engaging class especially useful for students interested in animation in film and TV as well as games, and is suitable for students of any drawing ability.",AR
Game Design Document: Define the Art & Concepts,"The Capstone project is a place for you to develop your game idea into a fully-fleshed proposal. A game design document is your game bible, the go-to document that defines the genre of your game, its look and feel, and the evolution of gameplay. This four-part capstone project guides you to distill and improve the foundational aspects of your game so that you may express your ideas in a clear and productive way.
Note: Only learners who have earned a certificate in the four previous courses in the Specialization are eligible to take the Capstone.","AL
CN
GV
HCI
PD
PL
SDF"
Gamification,"Gamification is the application of game elements and digital game design techniques to non-game problems, such as business and social impact challenges. This course will teach you the mechanisms of gamification, why it has such tremendous potential, and how to use it effectively. For additional information on the concepts described in the course, you can purchase Professor Werbach&#x27;s book For the Win: How Game Thinking Can Revolutionize Your Business in print or ebook format in several languages.",HCI
Introduction to FPGA Design for Embedded Systems,"Programmable Logic has become more and more common as a core technology used to build electronic systems.  By integrating soft-core or hardcore processors, these devices have become complete systems on a chip, steadily displacing general purpose processors and ASICs.  In particular, high performance systems are now almost always implemented with FPGAs. 
This course will give you the foundation for FPGA design in Embedded Systems along with practical design skills.  You will learn what an FPGA is and how this technology was developed, how to select the best FPGA architecture for a given application, how to use state of the art software tools for FPGA development, and solve critical digital design problems using FPGAs. You use FPGA development tools to complete several example designs, including a custom processor.  If you are thinking of a career in Electronics Design or an engineer looking at a career change, this is a great course to enhance your career opportunities.
Hardware Requirements: 
You must have access to computer resources to run the development tools, a PC running either Windows 7, 8, or 10 or a recent Linux OS which must be RHEL 6.5 or CentOS Linux 6.5 or later.   Either Linux OS could be run as a virtual machine under Windows 8 or 10.  The tools do not run on Apple Mac computers.  Whatever the OS, the computer must have at least 8 GB of RAM.  Most new laptops will have this, or it may be possible to upgrade the memory.",CN
How to Build a Chatbot Without Coding,"This course will teach you how to create useful chatbots without the need to write any code.
Leveraging IBM Watson&#x27;s Natural Language Processing capabilities, you&#x27;ll learn how to plan, implement, test, and deploy chatbots that delight your users, rather than frustrate them.
True to our promise of not requiring any code, you&#x27;ll learn how to visually create chatbots with Watson Assistant (formerly Watson Conversation) and how to deploy them on your own website through a handy WordPress plugin. Don&#x27;t have a website? No worries, one will be provided to you.
Chatbots are a hot topic in our industry and are about to go big. New jobs requiring this specific skill are being added every day, consultants demand premium rates, and the interest in chatbots is quickly exploding.
Gartner predicts that by 2020, 85% of customer interactions with the enterprise will be through automated means (that&#x27;s chatbots and related technologies).
Here is your chance to learn this highly in demand set of skills with a gentle introduction to the topic that leaves no stone unturned.",AR
UX / UI: Fundamentos para o design de interface,"Aprenda com uma das maiores startups do Brasil, a Taqtile sobre com criar a melhor experiência para o seu usuário, formas de gerar ideias, princípios básicos de design e como desenvolver interfaces de aplicativos e sites, esse curso introdutório é composto de aulas teóricas com exemplos práticos de aplicação de cada assunto abordado. 
Neste curso serão abordados os seguintes temas:
Como conhecer o seu usuário
Usabilidade e Prototipação rápida
Arquitetura de informação e wireframe
Princípios de design
Acessibilidade e multi plataforma
Elementos de interface do usuário
Linguagem da empresa, lidando com o cliente e copyright
Monitoração, Mensuração e Teste 
Ao final desse curso, esperamos que você esteja familiarizado com os principais conceitos, ferramentas e metodologias de criação de interfaces e experiência de usuário. 
Não deixe de ver as perguntas frequentes antes de se inscrever
Conheça os nossos outros cursos:
- Criação de Startups: Como desenvolver negócios inovadores
       https://www.coursera.org/learn/criacao-startups  
- Consolidando empresas: Estrutura jurídica e financeira
       https://www.coursera.org/learn/consolidando-empresas
- Marketing Digital
       https://www.coursera.org/learn/estrategia-marketing-digital 
- Inove na gestão de equipes e negócios: o crescimento da empresa
       https://www.coursera.org/learn/gestao-equipes-negocios 
- Marketing e vendas B2B: fechando novos negócios
       https://www.coursera.org/learn/marketing-vendas-b2b",HCI
Digital Systems: From Logic Gates to Processors,"This course gives you a complete insight into the modern design of digital systems fundamentals from an eminently practical point of view. Unlike other more &quot;classic&quot; digital circuits courses, our interest focuses more on the system than on the electronics that support it. This approach will allow us to lay the foundation for the design of complex digital systems.
You will learn a set of design methodologies and will use a set of (educational-oriented) computer-aided-design tools (CAD) that will allow you not only to design small and medium size circuits, but also to access to higher level courses covering so exciting topics as application specific integrated circuits (ASICs) design or computer architecture, to give just two examples.
Course topics are complemented with the design of a simple processor, introduced as a transversal example of a complex digital system. This example will let you understand and feel comfortable with some fundamental computer architecture terms as the instruction set, microprograms and microinstructions.
After completing this course you will be able to:
   * Design medium complexity digital systems.
   * Understand the description of digital systems using high-level languages such as VHDL.
   * Understand how computers operate at their most basic level (machine language).",AR
"Data Warehouse Concepts, Design, and Data Integration","This is the second course in the Data Warehousing for Business Intelligence specialization. Ideally, the courses should be taken in sequence.
In this course, you will learn exciting concepts and skills for designing data warehouses and creating data integration workflows. 
These are fundamental skills for data warehouse developers and administrators. You will have hands-on experience for data warehouse design and use open source products for manipulating pivot tables and creating data integration workflows.You will also gain conceptual background about maturity models, architectures, multidimensional models, and management practices, providing an organizational perspective about data warehouse development. If you are currently a business or information technology professional and want to become a data warehouse designer or administrator, this course will give you the knowledge and skills to do that. By the end of the course, you will have the design experience, software background, and organizational context that prepares you to succeed with data warehouse development projects.  
In this course, you will create data warehouse designs and data integration workflows that satisfy the business intelligence needs of organizations. When you’re done with this course, you’ll be able to:
   * Evaluate an organization for data warehouse maturity and business architecture alignment;
   * Create a data warehouse design and reflect on alternative design methodologies and design goals;
   * Create data integration workflows using prominent open source software;
   * Reflect on the role of change data, refresh constraints, refresh frequency trade-offs, and data quality goals in data integration process design; and
   * Perform operations on pivot tables to satisfy typical business analysis requests using prominent open source software",SDF
Artificial Intelligence,"The course has two main objectives:
1. Let students know how to achieve artificial intelligence through search
2. Enable students to apply relevant techniques to their own problems",IS
VR and 360 Video Production,"Welcome to Daydream Impact Virtual Reality (VR) and 360 video production course! Our mission is to give you the skills needed to use VR to advocate for a cause and communicate your mission.
This course will introduce you to Virtual Reality (VR) and 360 video production, guiding you through a step-by-step process to create VR content. To begin, we recommend taking a few minutes to explore the course site and review the material. 
Best of luck as you get started - we hope you enjoy the course, and are successful in using VR to make an impact.",SP
Mobile Interaction Design: How to Design Usable Mobile Products and Services,"Every mobile app gives you something. It could be not only something tangible like the pair of jeans you&#x27;ve ordered using the app but also a piece of work like waking you up in the morning. It could be a feeling, for instance, a feeling of enjoyment obtained from watching a video clip or a feeling of closeness flashed out after receiving an old photo from a loving person via some instant messenger. That &quot;something&quot; is actually the reason why you use the app, it is the heart of the product, and in this course we will not talk about it. Surprised? You shouldn’t be. There are always two sides of a coin. There should be a person who makes that &quot;something&quot; accessible. It is astonishingly important because the use of the product loses its meaning if users can’t get what they want.
The main objective of the course is to teach you to shape mobile products and services for people’s use. To do that, you’ll need to learn:
- Interaction design activities and their place in the whole product design process
- User research methods with a focus on the qualitative ones
- Usability inspection and empirical usability evaluation methods
- The process of design creation and best practices from interaction design, information architecture and visual design fields of study with a focus on the former
Interfaces of handheld devices and tablets are in the spotlight. However, the processes and techniques covered by the course can be successfully applied to design interactions with mobile web apps and wearables. It should be noted that this course does not cover topics such as design management and mobile development, and it will as well not teach you how to use wireframing and prototyping tools.
What makes the course unique is a focus on the way of thinking during a design process, the representation of a designer’s decisions in the form of design questions that make the continuous reflection on the design process possible and leads to the growth of the number of proposed design alternatives. The second unique thing about this course is a focus on the explanation of the concept of usability problems, and the processes of discovering and analysing them.
Upon completion of the course, you will be able to:
- Improve designs by eliminating different kinds of interaction problems
- Design huge chunks of user interfaces in the case of adding a new feature to a product
- Redesign a complete app by a given set of functions (e.g., extending an existing product to a new platform)
The practical part of the course will require you to discover and eliminate interaction problems of a chosen mobile app. You will go through running guerrilla usability study, analysing gathered data, and making evidence-based design changes, which will enable you to create your first case study.",HCI
Graphic Design,"Graphic design is all around us, in a myriad of forms, both on screen and in print, yet it is always made up of images and words to create a communication goal. This four-course sequence exposes students to the fundamental skills required to make sophisticated graphic design: process, historical context, and communication through image-making and typography. The sequence is completed by a capstone project that applies the skills of each course and peer feedback in a finished branding project suitable for a professional portfolio.
The goal of this specialization is to equip learners with a set of transferable formal and conceptual tools for “making and communicating” in the field of graphic design. This core skill set will equip learners for formal studies in graphic design, and a starting point for further work in interface design, motion graphics, and editorial design.","AR
GV"
Interaction Design,"You will learn how to design technologies that bring people joy, rather than frustration. You&#x27;ll learn how to generate design ideas, techniques for quickly prototyping them, and how to use prototypes to get feedback from other stakeholders like your teammates, clients, and users. You&#x27;ll also learn principles of visual design, perception, and cognition that inform effective interaction design.",HCI
Game Design: Art and Concepts,"Stemming from the principles of storytelling and design established in CalArts’ renowned Animation programs, this Specialization lays a primary foundation for experimentation and exploration of video game design, story, character development, and winning gameplay before programming begins. These four courses emphasize the self-reliance and personal expression of the gaming artist, and encourage you to take conceptual risks and develop new modes of expression and form through gaming. In the final Capstone Project, you’ll put your creative skills to work by generating an engaging game design document for a personal game project, outlining the conceptual, narrative and aesthetic elements of your game.","GV
HCI"
CAD and Digital Manufacturing,"The future of making is here, bringing with it radical changes in the way things are designed, made, and used. And it’s disrupting every industry. With the right knowledge and tools, this disruption is your opportunity—whether you&#x27;re an entrepreneur, designer, or engineer.
Today’s dominant technology trends—cloud computing, mobile technology, social connection, and collaboration—are driving businesses and consumers alike to explore profoundly different ways to design, make, and use things. This kind of industry transformation has happened before, but the pace of change is now much faster. In today’s competitive landscape, anyone can be an innovator—and it’s all about who innovates first.
Through this specialization, you will learn the foundations of product innovation and digital manufacturing while developing your technical skills within Autodesk® Fusion 360™.",PD
Foundations of Computing,"This course presents some formal notations that are commonly used for the description of computation and of computing systems, for the specification of software and for mathematically rigorous arguments about program properties. &nbsp;The following areas of study constitute the backbone of the course. Predicate calculus and natural deduction, inductive definitions of data types as a basis for recursive functions and structural induction, formal language theory (particularly regular expressions, finite state machines and context free grammars), and specification languages.",IS
Programming as Problem Solving,"This course is the first of three core computer science courses on programming. It introduces students to the field of computer science as a discipline for solving problems through computation and provides the foundation for more advanced courses on programming and software development. Data structures and algorithms, the key concepts at the core of computer science, receive their first treatment in this course. The course addresses both functional and imperative programming paradigms.The course covers functional programming in depth, developing the core idea of functions operating on data structures. &nbsp;Students learn the organization of programming languages using types, how programs are evaluated (reduction), functional composition, recursive functions, algebraic data types, pattern matching, parametric polymorphism, higher-order functions. &nbsp;Students also gain exposure to structural induction and proof, introduction to asymptotic analysis of basic data structures, abstract data types, modules, laziness, and streams. The functional paradigm demonstrates elegant solutions to many programming problems.The course also introduces imperative programming as an alternative paradigm to functional programming, highlighting similarities and contrasting differences. Students learn the basic ingredients of imperative programs: mutable variables, sequencing, conditionals, iteration, functions, eager evaluation, and side effects.The course also introduces students to standard productivity tools for software development that will be used throughout the course and remainder of the computer science degree. These include distributed software revision control systems.The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.",PL
Programming for Scientists,"This course teaches introductory programming within a problem solving framework applicable to the sciences. The course emphasises technical programming, the simulation of scientific systems and the processing of scientific data. There is an emphasis on designing and writing correct code. Testing and debugging are seen as integral to the programming enterprise. Both top-down and object oriented design are taught. There will be an introduction to widely-used computer science algorithms and to machine architecture. The course will be taught using one or more programming languages which are widely applicable to scientific work.","AL
AR
IAS
PL
SDF
SP"
Structured Programming,"This course introduces students to the fundamentals of software development with a substantial group software project at its center. Major foci are data structures, object oriented programming, and an introduction to software engineering. Students will extend their understanding of software productivity tools, using revision control for group work, and be introduced to test-driven development as an integral part of software construction.Students will be introduced to an industrial strength object oriented programming language, extending their understanding of the imperative programming paradigm with a solid grounding in object oriented programming. &nbsp;Inheritance, polymorphism, and parametric types are taught, as well as concepts such as boxing and auto boxing. The important role of standard libraries and their collection types will be emphasized. &nbsp;GUI programming will be introduced.The course includes a deeper treatment of data structures, using hash tables, trees and lists, which are used to provide concrete implementations of abstract library collection types. The theory of data structures and their time and space complexity will thus be tied to the practice of using standard collections such as those offered by object oriented languages.The foundations of software engineering including: major development paradigms (such as big plan up front, agile, and formal methods), risk are introduced.The Advanced version of this course covers these topics in more depth, allowing students to deepen their understanding and experience.","SDF
SE
PL"
Software Design Methodologies,"This course continues to build on topics taught in the previous two courses. It focuses on construction of medium scale programs, using design patterns and tools that are used in the software development process. Students will gain further experience with industry standard revision control and integrated development environment (IDE) tools.Students will learn appropriate application of programming abstractions they have learned in previous courses to the structuring of medium scale software: inheritance, generic types, polymorphism, procedural abstraction, and abstract recursive data structures (including abstract syntax trees as a program representation, and tools that manipulate them).The course also covers more advanced data structures, such as priority queues, B-trees, red-black trees, and AVL trees, and deepens understanding of appropriate algorithmic strategies.The course also treats intellectual property considerations in software development and deployment.","SDF
PL
SE"
Computer Organisation and Program Execution,"This course lays the foundations for the understanding of CPU architectures, networking and operating systems. Additionally, it introduces topics which cut across many computer systems, such as cross-layer communication and basic concurrency (as well as basic ideas of virtualization and efficiency through proximity).CPU architectures are discussed from first principles (digital logic) and are expanded into current day designs. This also involves assembler level programming to connect hardware circuits to the world of software. Representations of data types and high-level code at the machine level will be made clear by keeping the relations between high-level and machine-level code throughout the course. It will also look at how concurrent software constructs can or cannot be translated into parallel hardware operations.This course will cover a wide range of topics such as digital logic: transistors, gates, and combinatorial circuits; clocks; registers and register banks; arithmetic-logic units; data representation: big-endian and littleendian integers; ones and twos complement arithmetic; signed and unsigned values; Von-Neumann architecture and bottleneck; instruction sets; RISC and CISC designs; instruction pipelines and stalls; rearranging code; memory and address spaces; physical and virtual memory; interleaving; page tables; memory caches; bus architecture; polling and interrupts; DMA; device programming; assembly language; optimizations; concurrency and parallelism; and data pipelining.Knowledge of the principles of networking and operating systems (as well as their relation to computer hardware) are essential for every computer scientist and this course will provide those foundations.The relation of assembler level building blocks (macros) to constructs in direct compiled language is demonstrated throughout the course.While this course provides the above foundations (which stand on their own), it also prepares students for the follow-up course COMP2310 Systems, Networks and Concurrency, which rounds off the knowledge about concurrency in current computer systems of any scale, as well as expands the knowledge in networking and operating systems.",AR
Introduction to Computer Science I,"CourseInformation: CSC 127A provides an introduction to programming in Java. The course focuses not only on the language features of Java, but also on issues of program design and development. This course is intended for students in technical disciplines (math, computer science, other sciences, engineering, MIS, etc).","PL
AL
SDF
SE"
Introduction to Computer Science II,CourseInformation: Students will be asked to write various programs in Java (approximately 100-250 lines of code) and will be graded both on the correctness of their solutions and the design choices they have made in developing their programs.,"AL
AR
DS
GV
IAS
HCI
IM
NC
PL
SE
SF
SP"
 Computing: Science and Creativity," The evolution of computing from counting through artificial intelligence, the relevance and impact of computing, historical events, and influential mathematicians, scientists, entrepreneurs, and startups. Emphasis is placed on theories and hypothesis testing with scientific rigor. Students experience computing as a creative activity, use abstraction to focus on relevant concepts, develop algorithms, solve problems, and see how data and information facilitate the creation of knowledge. Programming will be done in a friendly, graphical environment. Lectures and labs are designed to improve critical thinking skills, communication, problem solving capabilities, and teamwork. Includes a weekly lab.",IS
Ergalics: The Science of Computing,"CourseInformation: Programming in a high-level language such as Java for students with significant prior programming experience. Emphasis on program design issues. Programming topics: basic control structures, primitive data types, arrays, classes,recursion, linked structures, binary trees, hashing.","AL
AR
IAS
PD
PL
SDF
SE"
Introduction to Discrete Structures,"CourseInformation: Introduction to the structures and proof techniques used in computer science: sets, relations, functions, predicate logic, induction,finite automata, grammars, parsing.","PL
SDF
AR"
Essential Computing for the Sciences," This course teaches essential computing skills for students in scientific disciplines. No prior background in programming is required. The content focuses on three computational skills: (i) basic programming in a scripting language such as Python, and knowledge of its supported data structures; (ii) facility with the UNIX operating system environment, including file structure, regular expressions, and job control; (iii) essential database skills, including database accession and interfacing through the SQL query language.","AR
HCI
IAS
OS
PL
SDF
SE
SP"
Computer Organization,CourseInformation: Basic machine organization; elementary hardware concepts;interrupts. Machine operations and instructions; assembly language concepts and programming.,"AR
IAS
IM
OS
PL
SDF
SP"
Research Topics in Computer Science,CourseInformation: Weekly presentations by faculty describing their research and opportunities for undergraduate participation. Strongly recommended for honors students as a way to build contacts with department faculty. Freshman and sophomores should register for CSC 296H; juniors and seniors should register for CSC496H.,"AR
IAS
DS"
Object-Oriented Programming ,CourseInformation: This course explores object-oriented features such as inheritance and amp; Design object-oriented design issues. The course also presents event-driven programming and the Java Swing classes for constructing interactive Graphical User Interfaces (GUIs). It will also include some of the Unified Modeling Language (UML) and several design patterns.,"HCI
PL
SDF
SE"
 Web Programming ,"Introduction to the techniques and technologies for developing dynamic web sites. Topics include a web server, PHP as the server-side scripting language, the MySQL database, JavaScript and AJAX for enriching web services, and page layout with HTML and CSS. Security concerns will be considered with details for prevention of such vulnerabilities in web applications. This course includes a team project to deploy a dynamic website. Weekly laboratory. ","HCI
PL
SDF
SP"
Analysis of Discrete Structures,"CourseInformation: Topics include trees, graphs, program verification, algorithm analysis,recurrence relations, algorithm classes (greedy, divide and conquer), hashing,combinatorics and elementary probability.","AL
AR
DS
IAS
IS
PL
SDF"
Cloud Computing ,"This course focuses on cloud programming, with an emphasis on using the cloud to solve Big Data problems. The course will not only look at how distributed systems, databases, networks, etc. are used to implement cloud computing platforms and cloud applications, but also the impact of the infinite scalability and pay-as-you-go on the platforms and applications. Prerequisites: CSC 227, or CSC 127A and CSC 127B, or equivalent.","DS
NC
PD
SDF"
Systems Programming ,"CourseInformation: Programming in C, including single and multi-dimensional arrays，lists, stacks, queues, trees, and bit manipulation. Unix topics, including debuggers, makefiles, shell programming, and other topics that support C programming.","AL
AR
IAS
OS
PL
SDF
SE"
Comparative Programming Languages,CourseInformation: This course is a study of several modern programming languages and the programming paradigm that each language strives to accommodate. Functional programming is studied with ML. Logic programming is studied with Prolog. Icon is studied to provide an alternative perspective on traditional procedural programming.,PL
Building Modern Applications with Python and C++,"CourseInformation: Many modern applications are frequently built with an amalgam of a high-level scripting language and a low-level compiled language. This course covers techniques used for combining these types of languages, in particular Python with C/C++. We will see the basics of Python, modules systems, tools and libraries (GUI, I/O etc.), and issues in linking. No knowledge of either Python or C/C++ is assumed. The course will be mainly Python, but covers enough C/C++ to see the issues in bringing the languages together.","AL
AR
PL
SDF
SE"
C# Programming for .NET Platform,"CourseInformation: Introduction to C# and the .NET Platform for students with a Java background,covering the structures, paradigms, and problems for which the language and the platform were designed while teaching real-world applications of object-oriented programming and multilanguage systems.","PL
SE"
Developing Enterprise Web Applications,"CourseInformation: Developing Enterprise Web Applications.Explores the issues involved in designing and building enterprise web applications : client/server and n-tier architectures, database access, XML,web services.","AR
IAS
DS
IM
NC
OS
SE"
Introduction to Parallel ,CourseInformation: Concepts and applications of parallel and distributed programs.amp; Distributed Programming nbsp;Process interaction using shared variables and message passing; parallel computing; development of correct programs; general problem solving techniques; scientific computing; distributed systems.nbsp;Programming assignments on multiple processor machines.,"PD
PL
SDF
NC
DS"
Computer Networking,"CourseInformation: Theory and practice of computer networks, emphasizing the principles underlying the design of network software and the role of the communications system in distributed computing.","NC
OS
SDF
SP"
Computer Graphics,"CourseInformation: This course presents an introduction to computer graphics designed to give the student an overview of fundamental principles. Course work stresses the reduction of concepts to practice in the form of numerous programming assignments. The course will include an overview of common graphics hardware,2D and 3D transformations and viewing, and basic raster graphics concepts such as scan-conversion, bitblt's, and clipping. Methods for modeling objects as polygonal meshes or smooth surfaces, and as rendering such as hidden-surface removal, shading, illumination, and shadows will be investigated.",GV
Software Engineering,"CourseInformation: This course introduces the fundamental software engineering techniques for developing correct, efficient, reliable, maintainable and evolvable software for a large project. In the highly dynamic and competitive software industry, the customers' needs may sometimes be difficult to understand in advance or may change while the software is being developed. Therefore, software products may need to evolve iteratively instead of being designed completely in advance. The class project in this course will attempt to give you an experience in developing a high quality, evolvable software product.",SE
Geometric Algorithms,"CourseInformation: Study of algorithms for geometric objects, using a computational geometry approach, with emphasis on applications for graphics, VLSI and GIS. How to represent and overlay maps, find nearest neighbors, solve linear programming problems, search geometric data bases and more.","AL
AR
GV
PD
SDF"
Data Visualization,"This course will present the fundamentals of data visualization, the art and science of using a computer to generate visual depictions of data. The course will present the foundations of graphic design, perceptual psychology and cognitive science, as well as the algorithmic basis for many for the visualization techniques. While statistical techniques may determine correlations among the data, visualization helps us frame what questions to ask.The course is targeted at students looking for effective ways of understanding data from their own fields, as well as students interested in learning the fundamentals that will enable them to build and improve the state of the art. The successful student will learn to design, critique and improve data visualizations. Prerequisites: CSC 335, CSC 345; CSC Major.  ",HCI
Algorithms,"CourseInformation: The emphasis is on learning techniques for designing algorithms and data structures for various computer applications. We will learn how to create algorithms, to analyze them, and prove their correctness.","AL
AR
IAS
NC
PD
PL
SDF
SP"
Green Computing,"This course covers fundamental principles of energy management faced by designers of hardware, operating systems, and data centers. We will explore basic energy management option in individual components such as CPUs, network interfaces, hard drives, memory. We will further present the energy management policies at the operating system level that consider performance vs. energy saving tradeoffs. Finally we will consider large scale data centers where energy management is done at multiple layers from individual components in the system to shutting down entries subset of machines. We will also discuss energy generation and delivery and well as cooling issues in large data centers. Prerequisites : CSC 452 or equivalent course in operating systems; CSC Major. ",PD
Algorithms in Bioinformatics,"This course introduces fundamental results in discrete algorithms for combinatorial problems in bioinformatics and computational biology. The emphasis is on realistic models of computational problems that arise in the analysis of biological data, and practical algorithms for their solution. The content has depth in the area of biological sequence analysis, and breadth in areas such as phylogeny construction, protein structure prediction, and genome rearrangement analysis. Grades are based on homeworks, exams, programming projects, and a class presentation. Prerequisites: CSC 345. For undergraduate computer science majors, it is recommended that they have taken CSC 445. For both computer science and non-computer science majors, mathematical maturity will be helpful. ","AL
AR
DS
PL
SDF"
Principles of Operating Systems,"CourseInformation: This course studies the principles and concepts that govern the design of modern computer operating systems. In general terms, the course covers the two primary functions of an operating system: insulating users and applications from details of the computer hardware, and managing the allocation of resources to improve efficiency. Specific topics covered include the process model of computation and the related areas of mutual exclusion and process synchronization, including the use of semaphores, message passing, and monitors. Process deadlock detection and prevention are also discussed. With respect to resource management, areas covered include processor scheduling,memory management, and management of secondary storage devices, such as magnetic disks. Memory management topics consist of swapping, virtual addressing, paging, segmentation, and sharing. Secondary storage management topics include file system organization, access methods, and performance optimizations. Implementation techniques are discussed for each of these topics, as well as protection and security concerns. Finally, the course will cover alternative operating system architectures, and the implications of future trends in computing on operating system design.",OS
Compilers ,"CourseInformation: CSC 453 covers the design and implementation of translator-oriented systems; Systems Software programs, especially compilers. Topics covered include lexical analysis, top down and bottom up parsing, syntax-directed code generation, and debuggers.","PL
SDF
SE"
Database Systems,"CourseInformation: This is a broad coverage course which gives students a detailed examination of the use of database management systems. The topics covered include conceptual design, data models, query languages, logical database design, physical database design, and introduction to query optimization.","AR
IAS
IM
PL
SDF
SE"
 Computer Security,"This is an introductory course covering the fundamentals of computer security. In particular, the course will cover basic concepts of computer security such as threat models and security policies, and will show how these concepts apply to specific areas such as communication security, software security, operating systems security, network security, web security, and hardware-based security.Prerequisites: CSC 352 or similar course in systems programming; CSC Major. ","SF
SP
IAS
AR
IAS
NC
OS
PD
DS"
"Automata, Grammars ","CourseInformation: This course is an introduction to the fundamental models of computation used Languagesthroughout computer science: finite automata, pushdown automata, and Turing machines. The hierarchical relationships among these models, their relative power and limitations, and their variants are studied. Student skills are developed in understanding and using rigorous definition and proof to attack precisely formulated questions about computability and computation. The only successful method known for learning these skills is by working challenging problems, therefore, heavy emphasis is laid upon student problem assignments and careful evaluation of student solutions. The course aims at improving students written communication skills, and serves as the program's writing emphasis course.","AL
IAS
NC
PL
SDF"
Introduction to Computer Vision,"CourseInformation: Computer vision is about building systems that see. Such a system would be able to take images and output a representation of what is in the world in front of the camera. We are all familiar with this process as it happens whenever we look around. However, putting this capability into a machine has proven to be very difficult and is the topic of much current research. In this course we will study the basic approaches that have been developed to analyze image data in an attempt to solve this problem, and their applications to other related areas such as computer graphics and image databases. This course should be considered by students interested in computer vision, image processing, image databases, computer graphics, artificial intelligence, and cognitive science.","AR
CN
IAS
GV
PL
SDF"
Research Topics in Computer Science,CourseInformation: Weekly presentations by faculty describing their research and opportunities for undergraduate participation. Strongly recommended for honors students as a way to build contacts with department faculty. Freshman and sophomores should register for CSC 296H; juniors and seniors should register for CSC496H. ,"NC
IAS"
Principles of Programming Languages,"CourseInformation: This course will define, analyze and evaluate important concepts found in current programming languages. Its goals are to build an ability to evaluate and compare programming languages, both from the user's and implementor's view,and to develop precise mechanisms for specifying the semantics of programming languages.",PL
Parallel ,"CourseInformation: Basic concepts and semantics of concurrent programs. Synchronization methods; Distributed Computing and programming techniques: locks, semaphores, monitors, message passing, programming paradigms. High performance computing: hardware, applications,programming tools and techniques, parallelizing compilers, performance tuning.Distributed computing: RPC and rendezvous, distributed systems, decentralized control algorithms.","NC
PD
PL
SDF
SP"
Principles of Computer Networking,"CourseInformation: This course explores the principles of computer networking and its role in distributed computing. The focus of the course is on the TCP/IP protocol suite as well as Internet architecture and infrastructure design. The course covers the underlying concepts of networking by discussing such topics as: Foundations of networking: communication, analog vs. digital, delay/latency, bandwidth,etc., Network architecture: protocols, layering, encapsulation, Resourceallocation: multiaccess networks, congestion control, End-to-end services:reliability, flow control, message order, Experimental functionality:multicast, mobility, integrated and differentiated services, Switching:forwarding, routing, contention, multicast, scalability, Performance: latency,throughput, burstiness, jitter, Applications: web, remote file access, audio and video.",NC
Geometric Algorithms,"CourseInformation: The study of algorithms for geometric objects, using a computational geometry approach, with an emphasis on applications for graphics, VLSI, GIS, robotics, and sensor networks. Topics may include the representation and overlaying of maps, finding nearest neighbors, solving linear programming problems, and searching geometric databases. Graduate-level requirements include reading a paper in the field of computational geometry or related literature and discussing this paper with the instructor.","AL
AR
GV
SDF"
 Advanced Information Visualization," Information visualization is a research area that focuses on the use of visualization techniques to help people understand and analyze data. Visualization allows us to perceive relationships, patterns, and trends. While statistical techniques may determine correlations among the data, visualization helps us frame what questions to ask. Providing efficient and effective data visualization is a difficult challenge in many real world examples. One challenge lies in developing algorithmically efficient methods to visualize large and complex data sets. Another challenge is to develop effective visualizations that make the underlying patterns and trends easy to see. Even tougher is the challenge of providing interactive access, analysis, and filtering. All of these tasks become still more difficult with the size of the data sets arising in modern applications.This course will explore current research problems in visualizing large and complex data such as social networks with hundreds of thousands of participants and millions of relationships. Modeling such data and developing effective visualization tools is a challenging theoretical and practical task. This course will focus on classical as well as modern methods through projects that utilize real world large datasets from Netflix, IMDB, DBLP, and the Tree of Life.  ",GV
Design ,"CourseInformation: The emphasis of this course is on techniques for designing algorithms for; Analysis of Algorithms various computer applications. In the process of learning and practicing methods of algorithm design, we will see many examples of important algorithms.We will also discuss techniques for implementing algorithms and improving program performance.","AL
AR
GV
HCI
IAS
DS
PL
SDF"
 Green Computing,"This course covers fundamental principles of energy management faced by designers of hardware, operating systems, and data centers. We will explore basic energy management option in individual components such as CPUs, network interfaces, hard drives, memory. We will further present the energy management policies at the operating system level that consider performance vs. energy saving tradeoffs. Finally we will consider large scale data centers where energy management is done at multiple layers from individual components in the system to shutting down entries subset of machines. We will also discuss energy generation and delivery and well as cooling issues in large data centers. Prerequisites : CSC 452 or equivalent course in operating systems; CSC Major. ",PD
 Algorithms in Bioinformatics,"This course introduces fundamental results in discrete algorithms for combinatorial problems in bioinformatics and computational biology. The emphasis is on realistic models of computational problems that arise in the analysis of biological data, and practical algorithms for their solution. The content has depth in the area of biological sequence analysis, and breadth in areas such as phylogeny construction, protein structure prediction, and genome rearrangement analysis. Grades are based on homeworks, exams, programming projects, and a class presentation. Prerequisites: CSC 345. For undergraduate computer science majors, it is recommended that they have taken CSC 445. For both computer science and non-computer science majors, mathematical maturity will be helpful. Prerequisites: CSC 345. For undergraduate computer science majors, it is recommended that they have taken CSC 445. For both computer science and non-computer science majors, mathematical maturity will be helpful. ","AL
DS"
Advanced Operating Systems,"CourseInformation: This course studies fundamental concepts in modern operating systems,emphasizing the design of operating systems for parallel and distributed systems.","IS
DS
OS
SDF
SP"
Principles of Compilation,"CourseInformation: This course considers advanced topics in compilation. Emphasis will be placed on advanced topics in code generation, register allocation, and optimization.Specific topics discussed will include: LR parsing - code generation and machine independent peephole analysis - code generation for modern architectures such as RISC machines - register allocation - formulation and solution of data flow problems - optimization using data flow information.","PL
AL
SE"
Database Systems Implementation,"CourseInformation: CSC 560 is a graduate-level course in database systems that will emphasize the DBMS architecture and implementation issues. The topics to be covered include:#183; Storage structures: disk, records, pages and files  #183; Operating systems issues and buffer management #183; Access methods: B+-tree, dynamic hashing, multidimensional indexes  #183; Query evaluation and optimization    #183; Transaction: concurrency control and recovery   #183; Parallel database systems  #183; Special topics: decision support, web database","AR
IAS
DS
OS
PL
SE
SP"
Computer Security,"This is an introductory course covering the fundamentals of computer security. In particular, the course will cover basic concepts of computer security such as threat models and security policies, and will show how these concepts apply to specific areas such as communication security, software security, operating systems security, network security, web security, and hardware-based security.Prerequisites: CSC 352 or similar course in systems programming; CSC Major. Prerequisites: CSC 352 or similar course in systems programming.",SP
Computer Architecture,"CourseInformation: CSC 576 introduces the design of computer systems from basic components to complete systems. The objectives of this course are to give students a basic understanding of hardware capabilities and to better comprehend software/hardware interfaces and tradeoffs. The course covers general design issues, such as the design and use of instruction sets,microcoding, pipelining, the memory hierarchy, caches, and hardware support for virtual memory. These issues are discussed in the context of standard uniprocessor architectures. Towards the end of the course, several distinct architectures will be discussed, including supercomputers and parallel architectures.","AR
IAS
NC
OS
SDF
SP"
Advanced Topics in Programming Languages,"CourseInformation: Design, implementation, and compilation of programming languages; specific topics to be determined by current literature and faculty and student interest.",PL
Advanced Topic: Sensor and Ad Hoc Network Optimization,CourseInformation: Problems in design and development of large systems of programs; specific topics to be determined by current literature and faculty and student interest.,"SF
SE
GV
PL"
Advanced Topics: Great Results in Discrete Algorithms,CourseInformation: Design and analysis of algorithms; specific topics to be determined by current literature and faculty and student interest.,"AL
AR
IAS
DS
NC
PL
SDF
SP"
Advanced Topics in Operating Systems ,"CourseInformation: Operating system design, development, analysis, and performance; specific topics to be determined by current literature and faculty and student interest.",OS
Topics in Computing,"CourseInformation: Presentation of current research topics in systems, theory, languages and architecture. For a current list of speakers and topics, see the colloquium speakers page.","AR
IAS
IS
NC
PL
SDF"
Foundations of Data Science ,"Offered through: Electrical Engin and Computer Sci  Foundations of data science from three perspectives: inferential thinking, computational thinking, and real-world relevance. Given data arising from some real-world phenomenon, how does one analyze that data so as to understand that phenomenon? The course teaches critical concepts and skills in computer programming and statistical inference, in conjunction with hands-on analysis of real-world datasets, including economic data, document collections, geographical data, and social networks. It delves into social and legal issues surrounding data analysis, including issues of privacy and data ownership.",IS
Introduction to Computational Thinking with Data ,"Offered through: Electrical Engin and Computer Sci  Foundations of data science from three perspectives: inferential thinking, computational thinking, and real-world relevance. Given data arising from some real-world phenomenon, how does one analyze that data so as to understand that phenomenon? The course teaches critical concepts and skills in computer programming and statistical inference, in conjunction with hands-on analysis of real-world datasets, including economic data, document collections, geographical data, and social networks. It delves into social and legal issues surrounding data analysis, including issues of privacy and data ownership.An introduction to computational thinking and quantitative reasoning, preparing students for further coursework, especially Foundations of Data Science (CS/Info/Stat C8). Emphasizes the use of computation to gain insight about quantitative problems with real data. Expressions, data types, collections, and tables in Python. Programming practices, abstraction, and iteration. Visualizing univariate and bivariate data with bar charts, histograms, plots, and maps. Introduction to statistical concepts including averages and distributions, predicting one variable from another, association and causality, probability and probabilistic simulation. Relationship between numerical functions and graphs. Sampling and introduction to inference.",IS
Matlab for Programmers,"Offered through: Electrical Engin and Computer Sci An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.Rules &amp; RequirementsCredit Restrictions: Students will receive no credit for 10 after having taken W10, 61A, 61B, or 61C.",AR
The Beauty and Joy of Computing ,"This course meets the programming prerequisite for 61A. An introduction to the beauty and joy of computing. The history, social implications, great principles, and future of computing. Beautiful applications that have changed the world. How computing empowers discovery and progress in other fields. Relevance of computing to the student and society will be emphasized. Students will learn the joy of programming a computer using a friendly, graphical language, and will complete a substantial team programming project related to their interests.Rules &amp; RequirementsCredit Restrictions: Students will receive no credit for W10 after taking 10, 61A, 61B or 61C. A deficient grade in 10 may be removed by taking W10.","AL
PD
SDF"
The Structure and Interpretation of Computer Programs (Self-Paced) ,"Introductory programming and computer science. Abstraction as means to control program complexity. Programming paradigms: functional, object-oriented, client/server, and declarative (logic). Control abstraction: recursion and higher order functions. Introduction to asymptotic analysis of algorithms. Data abstraction: abstract data types, type-tagged data, first class data types, sequences implemented as lists and as arrays, generic operators implemented with data-directed programming and with message passing. Implementation of object-oriented programming with closures over dispatch procedures. Introduction to interpreters and compilers. There are several significant programming projects. Course may be completed in one or two semesters. Students must complete a mimimum of two units during their first semester of 61AS.","AR
SDF
PL"
Data Structures ,"An introduction to programming and computer science focused on abstraction techniques as means to manage program complexity. Techniques include procedural abstraction; control abstraction using recursion, higher-order functions, generators, and streams; data abstraction using interfaces, objects, classes, and generic operators; and language abstraction using interpreters and macros. The course exposes students to programming paradigms, including functional, object-oriented, and declarative approaches. It includes an introduction to asymptotic analysis of algorithms. There are several significant programming projects.","PL
PD
AL"
Discrete Mathematics and Probability Theory ,"Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.","AL
DS"
Computational Structures in Data Science ,"Development of Computer Science topics appearing in Foundations of Data Science (C8); expands computational concepts and techniques of abstraction. Understanding the structures that underlie the programs, algorithms, and languages used in data science and elsewhere. Mastery of a particular programming language while studying general techniques for managing program complexity, e.g., functional, object-oriented, and declarative programming. Provides practical experience with composing larger systems through several significant programming projects.","AR
PD
PL
SDF
IS"
Special Topics ,"In this course, students will explore the data science lifecycle, including question formulation, data collection and cleaning, exploratory data analysis and visualization, statistical inference and prediction​, and decision-making.​ This class will focus on quantitative critical thinking​ and key principles and techniques needed to carry out this cycle. These include languages for transforming, querying and analyzing data; algorithms for machine learning methods including regression, classification and clustering; principles behind creating informative data visualizations; statistical concepts of measurement error and prediction; and techniques for scalable data processing.","DS
IAS
PL
SDF
SE"
Programmable Digital Systems Laboratory ,"The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.",HCI
Computer Security ,"This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet's scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).","NC
IAS
OS
AR"
Software Engineering,"Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.",SE
Efficient Algorithms and Intractable Problems ,"Concept and basic techniques in the design and analysis of algorithms; models of computation; lower bounds; algorithms for optimum search trees, balanced trees and UNION-FIND algorithms; numerical and algebraic algorithms; combinatorial algorithms. Turing machines, how to count steps, deterministic and nondeterministic Turing machines, NP-completeness. Unsolvable and intractable problems.","AL
AR
GV
IAS
NC
PL
SDF"
Computability and Complexity ,"Algorithms and probabilistic models that arise in various computational biology applications: suffix trees, suffix arrays, pattern matching, repeat finding, sequence alignment, phylogenetics, genome rearrangements, hidden Markov models, gene finding, motif finding, stochastic context free grammars, RNA secondary structure. There are no biology prerequisites for this course, but a strong quantitative background will be essential.","AL
PL
SDF
DS"
Foundations of Computer Graphics ,"Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.","GV
HCI"
Introduction to Database Systems ,"Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.",IS
Introduction to Artificial Intelligence ,"Theoretical foundations, algorithms, methodologies, and applications for machine learning. Topics may include supervised methods for regression and classication (linear models, trees, neural networks, ensemble methods, instance-based methods); generative and discriminative probabilistic models; Bayesian parametric learning; density estimation and clustering; Bayesian networks; time series models; dimensionality reduction; programming projects covering a variety of real-world applications.",IS
Quantum Information Science and Technology ,"This multidisciplinary course provides an introduction to fundamental conceptual aspects of quantum mechanics from a computational and informational theoretic perspective, as well as physical implementations and technological applications of quantum information science. Basic sections of quantum algorithms, complexity, and cryptography, will be touched upon, as well as pertinent physical realizations from nanoscale science and engineering.","AR
IAS
NC
PL
SF"
VLSI Systems Design ,"The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.",HCI
Human-Computer Interaction Research ,"This course is a broad introduction to conducting research in Human-Computer Interaction. Students will become familiar with seminal and recent literature; learn to review and critique research papers; re-implement and evaluate important existing systems; and gain experience in conducting research. Topics include input devices, computer-supported cooperative work, crowdsourcing, design tools, evaluation methods, search and mobile interfaces, usable security, help and tutorial systems.",HCI
Security in Computer Systems ,Develops a thorough grounding in Internet and network security suitable for those interested in conducting research in the area or those more broadly interested in security or networking. Potential topics include denial-of-service; capabilities; network intrusion detection/prevention; worms; forensics; scanning; traffic analysis; legal issues; web attacks; anonymity; wireless and networked devices; honeypots; botnets; scams; underground economy; attacker infrastructure; research pitfalls.,SP
Advanced Topics in Computer Systems ,"Graduate survey of systems for managing computation and information, covering a breadth of topics: early systems; volatile memory management, including virtual memory and buffer management; persistent memory systems, including both file systems and transactional storage managers; storage metadata, physical vs. logical naming, schemas, process scheduling, threading and concurrency control; system support for networking, including remote procedure calls, transactional RPC, TCP, and active messages; security infrastructure; extensible systems and APIs; performance analysis and engineering of large software systems. Homework assignments, exam, and term paper or project required.","DS
NC"
Advanced Topics in Computer Systems ,"Continued graduate survey of large-scale systems for managing information and computation. Topics include basic performance measurement; extensibility, with attention to protection, security, and management of abstract data types; index structures, including support for concurrency and recovery; parallelism, including parallel architectures, query processing and scheduling; distributed data management, including distributed and mobile file systems and databases; distributed caching; large-scale data analysis and search. Homework assignments, exam, and term paper or project required.","DS
PD
PL
SDF
SE"
Design of Programming Languages ,"Models for parallel programming. Fundamental algorithms for linear algebra, sorting, FFT, etc. Survey of parallel machines and machine structures. Exiting parallel programming languages, vectorizing compilers, environments, libraries and toolboxes. Data partitioning techniques. Techniques for synchronization and load balancing. Detailed study and algorithm/program development of medium sized applications.","PD
PL
SDF
SP"
Applications of Parallel Computers ,"Parallel programming, from laptops to supercomputers to the cloud. Goals include writing programs that run fast while minimizing programming effort. Parallel architectures and programming languages and models, including shared memory (eg OpenMP on your multicore laptop), distributed memory (MPI and UPC on a supercomputer), GPUs (CUDA and OpenCL), and cloud (MapReduce, Hadoop and Spark). Parallel algorithms and software tools for common computations (eg dense and sparse linear algebra, graphs, structured grids). Tools for load balancing, performance analysis, debugging. How high level applications are built (eg climate modeling). On-line lectures and office hours.","PD
PL
SDF
SP"
Computer Networks ,". Fundamental theoretical issues in designing parallel algorithms and architectures. Shared memory models of parallel computation. Parallel algorithms for linear algegra, sorting, Fourier Transform, recurrence evaluation, and graph problems. Interconnection network based models. Algorithm design techniques for networks like hypercubes, shuffle-exchanges, threes, meshes and butterfly networks. Systolic arrays and techniques for generating them. Message routing.","PD
PL
AR
DS"
Computational Geometry,"Paradigms for computational vision. Relation to human visual perception. Mathematical techniques for representing and reasoning, with curves, surfaces and volumes. Illumination and reflectance models. Color perception. Image segmentation and aggregation. Methods for bottom-up three dimensional shape recovery: Line drawing analysis, stereo, shading, motion, texture. Use of object models for prediction and recognition.","GV
AR
HCI"
Statistical Learning Theory ,"Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.","GV
AR
CN
IM
PD
PL
SDF"
Advanced Computer Graphics Algorithms and Techniques ,"This course provides a graduate-level introduction to advanced computer graphics algorithms and techniques. Students should already be familiar with basic concepts such as transformations, scan-conversion, scene graphs, shading, and light transport. Topics covered in this course include global illumination, mesh processing, subdivision surfaces, basic differential geometry, physically based animation, inverse kinematics, imaging and computational photography, and precomputed light transport.",GV
Implementation of Data Base Systems ,"As robot autonomy advances, it becomes more and more important to develop algorithms that are not solely functional, but also mindful of the end-user. How should the robot move differently when it's moving in the presence of a human? How should it learn from user feedback? How should it assist the user in accomplishing day to day tasks? These are the questions we will investigate in this course.We will contrast existing algorithms in robotics with studies in human-robot interaction, discussing how to tackle interaction challenges in an algorithmic way, with the goal of enabling generalization across robots and tasks. We will also sharpen research skills: giving good talks, experimental design, statistical analysis, literature surveys.",HCI
Natural Language Processing,"This course provides an introduction to theoretical foundations, algorithms, and methodologies for machine learning, emphasizing the role of probability and optimization and exploring a variety of real-world applications. Students are expected to have a solid foundation in calculus and linear algebra as well as exposure to the basic tools of logic and probability, and should be familiar with at least one modern, high-level programming language.",IS
Introduction to Teaching Computer Science,"This is a course for aspiring teachers or those who want to instruct with expertise from evidence-based research and proven best practices. It provides pedagogical training by introducing the Big Ideas of Teaching and Learning, and illustrating how to put them into practice. The course is divided into three sections—instructing the individual; a group; and psycho-social factors that greatly affect learning at any level. These sections are designed to enhance any intern’s, tutor’s, or TA’s skillset. Class is discussion based, and covers theoretical and practical pedagogical aspects to teaching in STEM. An integral feature of the course involves providing weekly tutoring sessions.",SP
The Digital World,"Description:Removes the mystery surrounding computers and the ever-growing digital world. Introduces a range of topics and many aspects of multimedia, along with explanations of the underlying digital technology and its relevance to our society. Other topics include artificial intelligence, IT security, ethics and the economics of computing as well as the effects of its pervasiveness in today&#39;s world. Introductory programming and analytic skills are developed through HTML, Photoshop, Excel and Python assignments. CSCI0020 is a good introduction to a wide range of CS topics that have broad relevance in our society. No prerequisites. Cannot be taken to fulfill CS Concentration.",IS
Introduction to Scientific Computing and Problem Solving,"Description:An introduction to using computers to solve STEM (Science, Technology, Engineering and Mathematics) programming, data analysis, visualization and simulation problems from engineering, neuroscience, biology, mathematics and finance. Tools utilized may include Python, MATLAB, Julia, Excel, and Wolframalpha. By course end, students should be able to use MATLAB to solve a large variety of scientific data analysis, visualization and simulation problems. No prior programming experience is required (MATLAB is easy and fun to use). A calculus course (perhaps in high school) is highly recommended. Not for CS concentrators.","AR
CN
DS
IAS
NC
PL
SDF
SF
SP"
A Data-Centric Introduction to Programming,"Description:An introduction to computer programming with a focus on skills needed for data-intensive applications. Topics include core constructs for processing both tabular and structured data; decomposing problems into programming tasks; data structures; algorithms; and testing programs for correct behavior. This course is not intended for CS concentrators. In particular, it does not substitute for CSCI 0150, 0170, or 0190.","NC
CN
SDF
AL"
A First Byte of Computer Science,"Description:Introduces non-CS concentrators to the academic discipline of computer science, its thought processes, and its relevance to other fields and modern life more generally. The target audience is students who are interested in learning more about what computer science is about and the ideas it has to offer tomorrow&#39;s citizens and scholars. Topics include the basics of computation and programming, a taste of theoretical computer science and algorithms, and an introduction to codes and artificial intelligence. Although students will learn to read and understand short programs, the course will not teach or require advanced programming skills. LILE","AR
IAS
PL
SDF"
Data Fluency for All,"Description:This course is intended to introduce Brown students to computational techniques that data scientists use to tell stories. Data fluency encompasses both data literacy, the basics of statistics and machine learning, and data communication, which relies heavily on principles of design. Students will gain hands-on experience by using tools to analyze real world data sets and to visualize them. Sample application domains include just about every field, since the only requirement is data, which there almost always are (e.g., the complete works of Shakespeare is a sample data set).",IAS
User Interfaces and User Experience,"Description:Topics include understanding when to use different interfaces, modeling and representing user interaction, principles of user experience design, eliciting requirements and feedback from users, methods for designing and prototyping interfaces, and user interface evaluation. Students interested in learning the process behind building a user interface and gaining hands-on experience designing a user interface should take this course. Programming experience is unnecessary. There will be assignments, readings, and design labs. CSCI 0130 is the same lecture, labs, and readings as CSCI 1300 but half of the assignments will be different (CSCI 1300 will have assignments with computer science prerequisites). Website: http://cs.brown.edu/courses/csci1300/",HCI
Introduction to Object-Oriented Programming and Computer Science,"Description:Emphasizes object-oriented design and programming in Java, an effective modern technique for producing modular, reusable, internet-aware programs. Also introduces interactive computer graphics, user interface design, and some fundamental data structures and algorithms. The course features a sequence of successively more complex graphics programs, including Tetris, and culminating in a significant final project such as an interactive sketching program, Othello, PacMan or a student-designed application. CS15 helps provide a serious introduction to the field intended for both potential concentrators and those who may take only a single course. No prerequisites, no prior knowledge of programming required.","AR
IAS
DS
GV
HCI
IM
NC
PL
SDF
SE"
Introduction to Algorithms and Data Structures,"Description:This course teaches fundamental techniques for problem solving by computer that are relevant to most areas of Computer Science, both theoretical and applied. Algorithms and data structures for sorting, searching, graph problems and geometric problems are covered. Programming assignments conform with the object-oriented methodology introduced in CSCI0150. Prerequisite: CSCI0150 or written permission.","AL
AR
DS
PL
SDF"
Accelerated Introduction to Computer Science,"Description:A one-semester introduction to CS covering programming integrated with core data structures, algorithms, and analysis techniques, similar to the two-course introductory sequences (CSCI 0150 - CSCI 0160 and CSCI 0170 - CSCI 0180). Students wishing to take CSCI 0190 must pass a online placement exam. Though the exam is most appropriate for students who have had some prior programming experience, all are welcome to try learning the material and doing the exam. Exam information can be found here: http://cs.brown.edu/courses/cs019/2017/. The exam is administered over the summer according to the schedule published by the course. Students who have not passed the exam won&#39;t be allowed to register.","AL
AR
DS
PL
SDF"
Introduction to Discrete Structures and Probability,"Description:The objective of the course is to place on solid foundations the most common structures of Computer Science, to illustrate proof techniques, to provide the background for an introductory course in computational theory and to introduce basic concepts of probability theory. It introduces Boolean algebras, logic, set theory, elements of algebraic structures, graph theory, combinatorics and probability. No prerequisites.","AL
CN"
Introduction to Software Engineering,"Description:Techniques for designing, building, and maintaining large,scalable, and reusable systems. We will cover advanced programming techniques using Java and Javascript. Course assignments will familiarize students with software testing, relational databases, concurrency techniques such as threads, and software engineering tools like git, profilers, and debuggers. A major component of the course will be a group software project of your own design. Prerequisite: CSCI0160, CSCI0180 or CSCI 0190; CSCI0220 is recommended.",SE
Introduction to Computer Systems,"Description:High-level computer architecture and systems programming. The course covers the organization of computer systems (in terms of storage units, caches, processors, and I/O controllers) and teaches students assembly-language programming and C-language programming. Extensive programming exercises introduce students to systems-level programming on Linux systems, as well as to multi-threaded programming with POSIX threads. Students will be introduced to the functions of operating systems. Prerequisite: CSCI 0150, 0180, or 0190.","AR
IAS
OS
PD
SDF
SE"
Directions:  The Matrix in Computer Science,"Description:An introduction to vectors and matrices and their role in computer science. The course material consists of three components: (1) concepts, theorems, and proofs, (2) procedures and programs, and (3) applications and working with data. The course revolves around weekly lab sessions in each of which students apply the concepts to a real task with real data. Lab topics include transformations in 2-d graphics, error-correcting codes, image compression using wavelets, synthesizing a new perspective in a photo, face recognition, news story categorization, cancer diagnosis using machine learning, matching airplanes to destinations, Google&#39;s PageRank method. Other topics addressed in the course include linear programming, zero-sum games, rudimentary cryptographic methods, linear regression, and discrete linear dynamical systems such as a spreading computer virus.",AR
Theory of Computation,"Description:The course introduces basic models of computation including languages, finite-state automata and Turing machines. Proves fundamental limits on computation (incomputability, the halting problem). Provides the tools to compare the hardness of computational problems (reductions). Introduces computational complexity classes (P, NP, PSPACE and others). Prerequisite: CSCI 0220 or 1450.","IM
IAS
NC
PL
SDF
SP"
Computer Graphics,"Description:This course offers an in-depth exploration of fundamental concepts in 2D and 3D computer graphics. It introduces 2D raster graphics techniques, including scan conversion, simple image processing, interaction techniques and user interface design. The bulk of the course is devoted to 3D modeling, geometric transformations, and 3D viewing and rendering. A sequence of assignments culminates in a simple geometric modeler and ray tracer. C++ and the graphics library OGL are used throughout the course, as is shader programming on the GPU, taught from the first lab onwards. The final project is typically a small group project spec&#39;d and implemented by the group using shaders to create special effects.","GV
HCI"
Computer Graphics Lab,Description:CSCI 1234 is a half-credit course intended to be taken concurrently with CSCI 1230 and provides students with a greater understanding of the material by having them extend each of 1230&#39;s assignments to greater depth.,"PL
SDF"
Introduction to Computer Animation,"Description:Introduction to 3D computer animation production including story writing, production planning, modeling, shading, animation, lighting and compositing. The first part of the course leads students through a series of exercises that build on each other to learn basic skills in 2D and 3D animation. At each step, student work is evaluated for expressiveness, technical correctness and aesthetic qualities. Students then work in groups (3-4 students) to create a polished short animation. The class format includes lecture, in-class projects, and viewing animations. The emphasis, however, is on in-class critique of ongoing work which is essential to the cycle of visually evaluating work in progress, determining possible improvements, and implementing them for further evaluation.",CN
Database Management Systems,"Description:Introduction to database structure, organization, languages and implementation. Relational model. Query languages, query processing, query optimization, normalization, file structures, concurrency control and recovery algorithms, and distributed databases. Studies of actual systems. While database management system usage is covered, emphasis is on the systems-building aspects of these large, complex systems. We also relate the material to modern applications such as the web. Prerequisites: CSCI 160, CSCI 180, or CSCI 190. One of CSCI 330 or CSCI 320 is strongly recommended.","AR
CN
DS
IAS
PD
PL
SDF
SP"
Intermediate 3D Computer Animation,"Description:CSCI1280 continues work begun in CSCI1250 with deeper exploration of the core technical and artistic aspects of 3D computer animation. In the first portion of the course, students complete a series of tutorials and animation assignments in which they learn more complex modeling, character rigging, animation, shading, lighting, and dynamics techniques. Then, students independently explore one area in more depth and create a portfolio-quality demonstration, alone or in pairs. We read and discuss technical texts as well as works on artistic motivation and view related animated films. The emphasis of class time will be on critiquing ongoing student work. Prerequisite: CSCI1250. Enrollment limited to 20. Written permission required.",AR
User Interfaces and User Experience,"Description:Topics include understanding when to use different interfaces, modeling and representing user interaction, principles of user experience design, eliciting requirements and feedback from users, methods for designing and prototyping interfaces, and user interface evaluation. Students interested in learning the process behind building a user interface and gaining hands-on experience designing a user interface should take this course. There will be assignments, readings, and design labs. CSCI 1300 and CS 0130 share the same lecture, labs, and readings but half of the assignments will be different (CSCI 1300 will have assignments with computer science prerequisites). Website: http://cs.brown.edu/courses/csci1300/",HCI
Creating Modern Web Applications,"Description:This course covers all aspects of web application development, including the initial concept, user-centric design, development methodologies, front end development, databases, back end development, security, testing, load testing, accessibility, and deployment. There will be a substantial team project. The course is designed both for students with substantial programming background (equivalent to CS32 or CS33) who want to learn how to use this background to build web applications, and for students with a substantial background in web design including HTML and Javascript who are interested in learning how to extend design techniques to incorporate the technologies needed in modern web applications. Project teams will consist of students with both types of backgrounds. this course, if taken in the senior year, will satisfy the capstone requirement for CS ScB concentrators.",SP
Virtual Reality Design for Science,"Description:Explores the visual and human-computer interaction design process for scientific applications in Brown&#39;s immersive virtual reality Cave. Joint with RISD. Computer Science and design students learn how to work effectively together; study the process of design, learn about scientific problems, create designs for scientific applications; critique, evaluate, realize and iterate designs, and demonstrate final projects. Prerequisite: permission of the instructor.",HCI
C S 142  - Introduction to Computer Programming,Introduction to Computer ProgrammingIntroduction to object-oriented program design and development. Principles of algorithm formulation and implementation.,"AL
AR
DS
IAS
IS
PL
SDF
SE"
C S 224  - Introduction to Computer Systems,"Introduction to Computer SystemsHow a computer works, from hardware to high-level programming. Logic circuits, computer instructions, assembly language, binary arithmetic, C programming, program translation, data structures, and algorithm analysis.","AR
DS
IAS
PL
SDF
SE"
C S 235  - Data Structures and Algorithms,"Data Structures and AlgorithmsFundamental data structures and algorithms of computer science; basic algorithm analysis; recursion; sorting and searching; lists, stacks, queues, trees, hashing; object-oriented data abstraction.","AL
DS
IAS
PD
SDF"
C S 236  - Discrete Structures,"Discrete StructuresIntroduction to grammars and parsing; predicate and propositional logic; proof techniques; sets, functions, relations, relational data model; graphs and graph algorithms.",DS
C S 240  - Advanced Programming Concepts,"Advanced Programming ConceptsAdvanced software development with an object-oriented focus. Design, implementation, and testing of several large programs in a Java and Linux environment using current technologies.","AR
IAS
PD
PL
SDF
SE"
C S 252  - Introduction to Computational Theory,"Introduction to Computational TheoryFinite state automata, regular languages, lexical analysis; push-down automata, context-free languages, parsing; Turing machines and unrestricted grammars; computability complexity, NP-completeness.",IS
C S 312  - Algorithm Design and Analysis,"Algorithm Design and AnalysisA study of the design and analysis of algorithms as solutions to problems, including dynamic programming, linear programming, greedy algorithms, divide-and-conquer algorithms, graph algorithms, and intelligent search algorithms.","AL
AR
IAS
DS
PL
SDF"
C S 324  - Systems Programming,"Systems ProgrammingSystems programming principles and concepts, including Linux systems programming, multiprocessing, concurrency, exceptional control flow, caching, sockets, protocols, and non-blocking I/O.",SP
C S 340  - Software Design and Testing,"Software Design and TestingPrinciples of software design, design patterns, design representation, refactoring. Principles of software quality assurance and testing. Development and testing tools.",SE
C S 404  - Ethics and Computers in Society,"Ethics and Computers in SocietySocietal impact of computer technology, the computer scientist's place in society, ethical issues. Reading, discussion, and writing seminar.",SP
MATH 112  - Calculus 1,Calculus 1Differential and integral calculus: limits; continuity; the derivative and applications; extrema; the definite integral; fundamental theorem of calculus; L'Hopital's rule.,"AL
AR
GV
HCI
IAS
NC
PL
SDF
SP"
MATH 113  - Calculus 2,"Calculus 2Techniques and applications of integration; sequences, series, convergence tests, power series; parametric equations; polar coordinates.","AR
IAS
PD
SDF"
MATH 313  - Elementary Linear Algebra,"Elementary Linear AlgebraLinear systems, matrices, vectors and vector spaces, linear transformations, determinants, inner product spaces, eigenvalues, and eigenvectors.","AR
CN
DS
IAS
IM
NC
GV
PL
SDF
SE"
PHSCS 121  - Introduction to Newtonian Mechanics,"Introduction to Newtonian MechanicsLinear, circular, and projectile motion; their prediction from forces and torques. Conservation of energy and momentum. Weekly lab.","AR
NC
GV
PD
SDF"
MATH 431  - Probability Theory,"Probability TheoryAxiomatic probability theory, conditional probability, discrete / continuous random variables, expectation, conditional expectation, moments, functions of random variables, multivariate distributions, laws of large numbers, central limit theorem.","AL
DS
IAS
PD"
STAT 121  - Principles of Statistics,"Principles of StatisticsGraphical displays and numerical summaries, data collection methods, probability, sampling distributions, confidence intervals and hypothesis testing involving one or two means and proportions, contingency tables, correlation and simple linear regression.","CN
IAS
NC"
STAT 201  - Statistics for Engineers and Scientists,"Statistics for Engineers and ScientistsThe scientific method; probability, random variables, common discrete and continuous random variables, central limit theorem; confidence intervals and hypothesis testing; completely randomized experiments; factorial experiments.",NC
C S 330  - Concepts of Programming Languages,"Concepts of Programming LanguagesPrinciples and concepts characterizing high-level computer programming languages, process and data abstration, encapsulation, inheritance, functional programming, logic programming, scanners, and parsers.",PL
C S 345  - Operating Systems Design,Operating Systems DesignPrinciples and concepts of operating systems design and the implementation of an operating system.,OS
C S 355  - Interactive Graphics and Image Processing,"Interactive Graphics and Image ProcessingIntroduces basic concepts of computer graphics, user interfaces and image processing. Includes homogenous coordinate transforms, image transforms, event driven programming and color models. Extends Model-View-Controller architecture.",HCI
C S 401R - Topics in Computer Science,Topics in Computer ScienceUndergraduate level subjects as announced before each semester.,"AL
AR
CN
DS
GV
HCI
IAS
IM
IS
NC
OS
PBD
PD
PL
SDF
SE
SF
SP"
C S 412  - Linear Programming and Convex Optimization,"Linear Programming and Convex OptimizationOptimization, problem formulation, and solution algorithms, including simplex and interior point methods. Applications from control, data mining, finance, game theory, learning, network flow, operations research, and statistical estimation.","AL
AR
IAS
DS
GV
HCI
PD
PL
SDF"
C S 428  - Software Engineering,"Software EngineeringAnalysis, design, implementation, and testing of significant software systems.",SE
C S 431  - Algorithmic Languages and Compilers,"Algorithmic Languages and CompilersFormal description of algorithmic languages and techniques used in their compilation: semantics, ambiguities, procedures, replication, iteration, recursion.",PL
C S 450  - Introduction to Digital Signal and Image Processing,"Introduction to Digital Signal and Image ProcessingOne- and two-dimensional signal-processing fundamentals, including sampling, noise, transforms, filtering, enhancement, and compression. Hands-on experimentation with speech, music, still images, and full-motion video.",SDF
C S 452  - Database Modeling Concepts,"Database Modeling ConceptsDatabase models: relational, deductive, object-oriented. Integrity constraints, query languages, database design.","IM
AL"
C S 453  - Fundamentals of Information Retrieval,"Fundamentals of Information RetrievalConcepts and terminology of information retrieval (IR) systems. Design methodologies and issues. Fundamental IR models examined: Boolean, Vector Space, Probabilistic models, and evaluation strategies.",NC
C S 455  - Computer Graphics,Computer GraphicsInteractive computer graphics systems programming and architecture.,GV
C S 456  - Introduction to User Interface Software,"Introduction to User Interface SoftwareIntroduction to software architectures and techniques for graphical user interfaces. Input devices, windowing systems, event-driven programming, interactive geometry.",HCI
C S 460  - Computer Communications and Networking,"Computer Communications and NetworkingIntroduction to data communications and computer networking. Communications fundamentals, computer networks, software, architecture, telecommunications, regulation, standards.","CN
GV
SP"
C S 462  - Large-Scale Distributed System Design,"Large-Scale Distributed System DesignPrinciples and concepts of designing and building distributed systems. Introduction to architectures for distributed computation. Reliability, availability, and scalability of large applications. Cloud computing and APIs.","DS
AR
IAS
SF"
C S 465  - Computer Security,"Computer SecurityIntroduction to computer security fundamentals: confidentiality, integrity, authentication, and access control. Secret key and public key cryptography, network security protocols, viruses, and fire walls.",SP
C S 470  - Introduction to Artificial Intelligence,"Introduction to Artificial IntelligenceIntroduction to core areas of artifical intelligence; intelligent agents, problem solving and search, knowledge-based systems and inference, planning, uncertainty, learning, and perception.",IS
C S 478  - Tools for Machine Learning,Tools for Machine LearningMachine learning models and other mechanisms allowing computers to learn and find knowledge from data.,IS
C S 479  - Natural Language Processing,"Natural Language ProcessingIntroduction to natural language processing (NLP). Relevant problems include web search, speech recognition, machine translation, spam filtering, text classification, question answering, spell checking. Building real tools, understanding human language, applying techniques beyond NLP.","IM
IAS
SDF
CN
PL
AR
SP"
C S 484  - Parallel Processing,"Parallel ProcessingTheoretical and practical study of parallel processing including multi-core, fine-grained, and clustered architectures, parallel programming languages, and parallel algorithms.",PD
C S 486  - Verification and Validation,"Verification and ValidationFoundational topics in verification and validation; the application of logic to building correct systems. Covers logics to formally specify properties of systems, verifications of basic systems, and advanced topics in formal verification for complex systems.","AL
PD
PL
SDF
SE"
C S 501R - Advanced Topics in Computer Science,Advanced Topics in Computer ScienceAdvanced undergraduate- and graduate-level subjects as announced before each semester.,"AL
AR
CN
DS
GV
HCI
IAS
IM
IS
NC
OS
PBD
PD
PL
SDF
SE
SF
SP"
C S 513  - Robust Control,Robust ControlIntroduction to the analysis and design of feedback systems guaranteed to perform well in spite of model uncertainty.,"SP
SDF
IAS
GV
AR"
C S 557  - Computer-Aided Geometric Design,"Computer-Aided Geometric DesignFree-form curves and surfaces; mathematical theory and algorithms. Bezier and B-spline curves and surfaces, subdivision surfaces, T-splines, free-form deformation, and intersection algorithms. Several programming projects.","AR
CN"
C S 260  - Web Programming,Web ProgrammingIntroduction to web application design and implementation. Both front end and back end development with an emphasis on REST architectures.,"AL
AR
GV
HCI
IAS
IM
NC
OS
PL
PD
SDF
SE
SP"
C S 405  - Creating and Managing a Software Business,"Creating and Managing a Software BusinessEntrepreneurship, idea/opportunity generation, strategic planning, legal organization, product development, marketing/sales, customer support, fund raising, and effective management.",SP
EC EN 424  - Computer Systems,"Computer SystemsMachine-level representations of programs and data, processor architecture, program performance optimizaton, memory hierarchies, virtual memory, linking, exceptions.","AR
IAS
NC
PL
SDF
SP"
EC EN 425  - Real-Time Operating Systems,"Real-Time Operating SystemsHardware/software interface, real-time kernel internals, implementation of high-level language constructs, issues in real-time application software development.","CN
IAS
OS
SE"
IT 567  - Cyber Security and Penetration Testing,"Cyber Security and Penetration TestingAdvanced computer systems security. Vulnerabilities and exploits. System and network attacks. Ethical hacking and penetration testing. Cyber security, cyber weapons, and advanced persistent threats. Legal and regulatory requirements for security and privacy.",SP
MATH 411  - Numerical Methods,"Numerical MethodsIterative solvers for linear systems, eigenvalue, eigenvector approximations, numerical solutions to nonlinear systems, numerical techniques for initial and boundary value problems, elementary solvers for PDEs.","AR
IAS
NC
SE"
MATH 485  - Mathematical Cryptography,Mathematical CryptographyA mathematical introduction to some of the high points of modern cryptography.,"IS
AR"
C S 493R - Computing Competitions,"Computing CompetitionsStudents work in teams to prepare for and compete in computer science competitions in areas such as programming, data science, and ethical hacking.","AL
AR
IAS
DS"
"ACM 11. Introduction to Matlab and Mathematica.	 ","third term. Prerequisites: Ma 1 abc. CS 1 or prior programming experience recommended.?Matlab: basic syntax and development environment  debugging  help interface  basic linear algebra  visualization and graphical output  control flow  vectorization  scripts, and functions  file i/o  arrays, structures, and strings  numerical analysis (topics may include curve fitting, interpolation, differentiation, integration, optimization, solving nonlinear equations, fast Fourier transform, and ODE solvers)  and advanced topics (may include writing fast code, parallelization, object-oriented features). Mathematica: basic syntax and the notebook interface, calculus and linear algebra operations, numerical and symbolic solution of algebraic and differential equations, manipulation of lists and expressions, Mathematica programming (rule-based, functional, and procedural) and debugging, plotting, and visualization. The course will also emphasize good programming habits and choosing the appropriate language/software for a given scientific task.","SDF
PL
NC"
"ACM 95/100 ab. Introductory Methods of Applied Mathematics for the Physical Sciences	"," second, third terms. Prerequisites: Ma 1 abc, Ma 2 or equivalents.?Complex analysis: analyticity, Laurent series, contour integration, residue calculus. Ordinary differential equations: linear initial value problems, linear boundary value problems, Sturm-Liouville theory, eigenfunction expansions, transform methods, Green’s functions. Linear partial differential equations: heat equation, separation of variables, Laplace equation, transform methods, wave equation, method of characteristics, Green’s functions.          ","AR
IAS"
"ACM 104. Applied Linear Algebra.	","first term. Prerequisites: Ma 1 abc, Ma 2/102. This is an intermediate linear algebra course aimed at a diverse group of students, including junior and senior majors in applied mathematics, sciences and engineering. The focus is on applications. Matrix factorizations play a central role. Topics covered include linear systems, vector spaces and bases, inner products, norms, minimization, the Cholesky factorization, least squares approximation, data fitting, interpolation, orthogonality, the QR factorization, ill-conditioned systems, discrete Fourier series and the fast Fourier transform, eigenvalues and eigenvectors, the spectral theorem, optimization principles for eigenvalues, singular value decomposition, condition number, principal component analysis, the Schur decomposition, methods for computing eigenvalues, non-negative matrices, graphs, networks, random walks, the Perron-Frobenius theorem, PageRank algorithm.          ","AL
AR
IAS
NC"
"ACM/EE 106 ab. Introductory Methods of Computational Mathematics.	","  second, third terms. Prerequisites: Ma 1 abc, Ma 2, Ma 3, ACM 11, ACM 95/100 ab or equivalent. The sequence covers the introductory methods in both theory and implementation of numerical linear algebra, approximation theory, ordinary differential equations, and partial differential equations. The linear algebra parts covers basic methods such as direct and iterative solution of large linear systems, including LU decomposition, splitting method (Jacobi iteration, Gauss-Seidel iteration)  eigenvalue and vector computations including the power method, QR iteration and Lanczos iteration  nonlinear algebraic solvers. The approximation theory includes data fitting  interpolation using Fourier transform, orthogonal polynomials and splines  least square method, and numerical quadrature. The ODE parts include initial and boundary value problems. The PDE parts include finite difference and finite element for elliptic/parabolic/hyperbolic equation. Stability analysis will be covered with numerical PDE. Programming is a significant part of the course.      ","NC
AR"
"CMS/ACM 107. Linear Analysis with Applications.	","  first term. Prerequisites: ACM 104 or equivalent, Ma 1b or equivalent. Covers the basic algebraic, geometric, and topological properties of normed linear spaces, inner-product spaces, and linear maps. Emphasis is placed both on rigorous mathematical development and on applications to control theory, data analysis and partial differential equations.          ","AR
IAS
NC"
"Ec/ACM/CS 112. Bayesian Statistics.	 	","third term. Prerequisites: Ma 3, ACM/EE 116 or equivalent. This course provides an introduction to Bayesian Statistics and its applications to data analysis in various fields. Topics include: discrete models, regression models, hierarchical models, model comparison, and MCMC methods. The course combines an introduction to basic theory with a hands-on emphasis on learning how to use these methods in practice so that students can apply them in their own work. Previous familiarity with frequentist statistics is useful but not required.",IS
"CMS/ACM 113. Mathematical Optimization.	","first term. Prerequisites: ACM 95/100 ab, ACM 11, or instructor’s permission.?Corequisite: It is suggested that students take CMS/ACM 104 concurrently. This class studies mathematical optimization from the viewpoint of convexity. Topics covered include duality and representation of convex sets  linear and semidefinite programming  connections to discrete, network, and robust optimization  relaxation methods for intractable problems  as well as applications to problems arising in graphs and networks, information theory, control, signal processing, and other engineering disciplines.      ","AR
DS
GV
NC
PL
SDF"
"ACM/CS 114 ab. Parallel Algorithms for Scientific Applications.?		"," second, third term. Prerequisites: ACM 11, 106 or equivalent.?Introduction to parallel program design for numerically intensive scientific applications. Parallel programming methods  distributed-memory model with message passing using the message passing interface  shared-memory model with threads using open MP, CUDA  object-based models using a problem-solving environment with parallel objects. Parallel numerical algorithms: numerical methods for linear algebraic systems, such as LU decomposition, QR method, CG solvers  parallel implementations of numerical methods for PDEs, including finite-difference, finite-element  particle-based simulations. Performance measurement, scaling and parallel efficiency, load balancing strategies.     ",PD
"ACM/EE 116 Introduction to Probability Models.		"," first term. Prerequisites: Ma 2, Ma 3.This course introduces students to the fundamental concepts, methods, and models of applied probability and stochastic processes. The course is application oriented and focuses on the development of probabilistic thinking and intuitive feel of the subject rather than on a more traditional formal approach based on measure theory. The main goal is to equip science and engineering students with necessary probabilistic tools they can use in future studies and research. Topics covered include sample spaces, events, probabilities of events, discrete and continuous random variables, expectation, variance, correlation, joint and marginal distributions, independence, moment generating functions, law of large numbers, central limit theorem, random vectors and matrices, random graphs, Gaussian vectors, branching, Poisson, and counting processes, general discrete- and continuous-timed processes, auto- and cross-correlation functions, stationary processes, power spectral densities.          ",SP
"CMS/ACM/EE 117. Probability and Random Processes.		"," first term. Prerequisites: ACM 104 and ACM/EE 116. The course will start with a quick reminder on probability spaces, discrete and continuous random variables. It will cover the following core topics: branching processes, Poisson processes, limit theorems, Gaussian variables, vectors, spaces, processes and measures, the Brownian motion, Gaussian learning, game theory and decision theory (finite state space), martingales (concentration, convergence, Doob’s inequalities, optional/optimal stopping, Snell’s envelope), large deviations (introduction, if time permits).          ","DS
IS
AL"
"Ma/ACM 142. Ordinary and Partial Differential Equations	"," second term. Prerequisite: Ma 108  Ma 109 is desirable.?The mathematical theory of ordinary and partial differential equations, including a discussion of elliptic regularity, maximal principles, solubility of equations. The method of characteristics.         ","AR
IAS
IM
NC
PD
SDF"
"Ma/ACM 144 a.?Probability.	 first, second terms.	"," Prerequisites: For 144a, Ma 108b is strongly recommended  for 144b, 108b and 144a are prerequisite.?Overview of measure theory. Random walks and the Strong law of large numbers via the theory of martingales and Markov chains. Characteristic functions and the central limit theorem. Poisson process and Brownian motion. Topics in statistics.         ","IS
PD"
"ACM/CS 157. Statistical Inference.	 third term. 	","Prerequisites: ACM/EE 116, Ma 3. Statistical Inference is a branch of mathematical engineering that studies ways of extracting reliable information from limited data for learning, prediction, and decision making in the presence of uncertainty. This is an introductory course on statistical inference. The main goals are: develop statistical thinking and intuitive feel for the subject  introduce the most fundamental ideas, concepts, and methods of statistical inference  and explain how and why they work, and when they don’t. Topics covered include summarizing data, fundamentals of survey sampling, statistical functionals, jackknife, bootstrap, methods of moments and maximum likelihood, hypothesis testing, p-values, the Wald, t-, permutation, likelihood ratio tests, multiple testing, scatterplots, simple linear regression, ordinary least squares, interval estimation, prediction, graphical residual analysis.        ",IS
"ACM/CS/EE 158. Mathematical Statistics.	 	","third term. Prerequisites: CMS/ACM 113, ACM/EE 116 and ACM/CS 157. Fundamentals of estimation theory and hypothesis testing  minimax analysis, Cramer-Rao bounds, Rao-Blackwell theory, shrinkage in high dimensions  Neyman-Pearson theory, multiple testing, false discovery rate  exponential families  maximum entropy modeling  other advanced topics may include graphical models, statistical model selection, etc. Throughout the course, a computational viewpoint will be emphasized.     ",SP
"ACM 159. Inverse Problems and Data Assimilation.	","  first term. Prerequisites: Basic differential equations, linear algebra, probability and statistics: ACM 104, ACM/EE 106 ab, ACM/EE 116, ACM/CS 157 or equivalent. Models in applied mathematics often have input parameters that are uncertain  observed data can be used to learn about these parameters and thereby to improve predictive capability. The purpose of the course is to describe the mathematical and algorithmic principles of this area. The topic lies at the intersection of fields including inverse problems, differential equations, machine learning and uncertainty quantification. Applications will be drawn from the physical, biological and data sciences.         ",SP
"ACM/EE 170. Mathematics of Signal Processing.	"," third term. Prerequisites: CMS/ACM 104, CMS/ACM 113, and CMS/ACM 116  or instructor’s permission.?This course covers classical and modern approaches to problems in signal processing. Problems may include denoising, deconvolution, spectral estimation, direction-of-arrival estimation, array processing, independent component analysis, system identification, filter design, and transform coding. Methods rely heavily on linear algebra, convex optimization, and stochastic modeling. In particular, the class will cover techniques based on least-squares and on sparse modeling. Throughout the course, a computational viewpoint will be emphasized.         ",SP
"ACM 201 ab. Partial Differential Equations.		"," first, second terms. Prerequisite: ACM 11, 101 abc or instructor’s permission.?Fully nonlinear first-order PDEs, shocks, eikonal equations. Classification of second-order linear equations: elliptic, parabolic, hyperbolic. Well-posed problems. Laplace and Poisson equations  Gauss’s theorem, Green’s function. Existence and uniqueness theorems (Sobolev spaces methods, Perron’s method). Applications to irrotational flow, elasticity, electrostatics, etc. Heat equation, existence and uniqueness theorems, Green’s function, special solutions. Wave equation and vibrations. Huygens’ principle. Spherical means. Retarded potentials. Water waves and various approximations, dispersion relations. Symmetric hyperbolic systems and waves. Maxwell equations, Helmholtz equation, Schr?dinger equation. Radiation conditions. Gas dynamics. Riemann invariants. Shocks, Riemann problem. Local existence theory for general symmetric hyperbolic systems. Global existence and uniqueness for the inviscid Burgers’ equation. Integral equations, single- and double-layer potentials. Fredholm theory. Navier-Stokes equations. Stokes flow, Reynolds number. Potential flow  connection with complex variables. Blasius formulae. Boundary layers. Subsonic, supersonic, and transonic flow.        ","DS
IS
NC"
"ACM 204. Topics in Convexity.	 second term.	"," Prerequisites: CMS/ACM 104 and CMS/ACM 113  or instructor’s permission.?The content of this course varies from year to year among advanced subjects in linear algebra, convex analysis, and related fields. Specific topics for the class include matrix analysis, operator theory, convex geometry, or convex algebraic geometry. Lectures and homework will require the ability to understand and produce mathematical proofs.         ","AL
AR
GV
IAS
DS
PL
SDF
SP"
"ACM 210 ab. Numerical Methods for PDEs.		"," second, third terms. Prerequisite: ACM 11, 106 or instructor’s permission.?Finite difference and finite volume methods for hyperbolic problems. Stability and error analysis of nonoscillatory numerical schemes: i) linear convection: Lax equivalence theorem, consistency, stability, convergence, truncation error, CFL condition, Fourier stability analysis, von Neumann condition, maximum principle, amplitude and phase errors, group velocity, modified equation analysis, Fourier and eigenvalue stability of systems, spectra and pseudospectra of nonnormal matrices, Kreiss matrix theorem, boundary condition analysis, group velocity and GKS normal mode analysis  ii) conservation laws: weak solutions, entropy conditions, Riemann problems, shocks, contacts, rarefactions, discrete conservation, Lax-Wendroff theorem, Godunov’s method, Roe’s linearization, TVD schemes, high-resolution schemes, flux and slope limiters, systems and multiple dimensions, characteristic boundary conditions  iii) adjoint equations: sensitivity analysis, boundary conditions, optimal shape design, error analysis. Interface problems, level set methods for multiphase flows, boundary integral methods, fast summation algorithms, stability issues. Spectral methods: Fourier spectral methods on infinite and periodic domains. Chebyshev spectral methods on finite domains. Spectral element methods and h-p refinement. Multiscale finite element methods for elliptic problems with multiscale coefficients.        ","CN
IM
NC"
"ACM 213. Topics in Optimization.	 	","third term. Prerequisites: CMS/ACM 104, CMS/ACM 113.?Material varies year-to-year. Example topics include discrete optimization, convex and computational algebraic geometry, numerical methods for large-scale optimization, and convex geometry.          ","AL
AR
DS
NC
OS
PL
SDF"
"ACM 216. Markov Chains, Discrete Stochastic Processes and Applications.		"," second term. Prerequisite: ACM/EE 116 or equivalent.?Stable laws, Markov chains, classification of states, ergodicity, von Neumann ergodic theorem, mixing rate, stationary/equilibrium distributions and convergence of Markov chains, Markov chain Monte Carlo and its applications to scientific computing, Metropolis Hastings algorithm, coupling from the past, martingale theory and discrete time martingales, rare events, law of large deviations, Chernoff bounds.          ","AL
IAS"
"ACM/EE 217. Advanced Topics in Stochastic Analysis.	 	","third term. Prerequisite: ACM 216 or equivalent.?The topic of this course changes from year to year and is expected to cover areas such as stochastic differential equations, stochastic control, statistical estimation and adaptive filtering, empirical processes and large deviation techniques, concentration inequalities and their applications. Examples of selected topics for stochastic differential equations include continuous time Brownian motion, Ito’s calculus, Girsanov theorem, stopping times, and applications of these ideas to mathematical finance and stochastic control.          ","NC
DS
SP"
"Ae/ACM/ME 232 abc. Computational Fluid Dynamics.		"," first, second terms. Prerequisites: Ae/APh/CE/ME 101 abc or equivalent  ACM 100 abc or equivalent.?Development and analysis of algorithms used in the solution of fluid mechanics problems. Numerical analysis of discretization schemes for partial differential equations including interpolation, integration, spatial discretization, systems of ordinary differential equations  stability, accuracy, aliasing, Gibbs and Runge phenomena, numerical dissipation and dispersion  boundary conditions. Survey of finite difference, finite element, finite volume and spectral approximations for the numerical solution of the incompressible and compressible Euler and Navier-Stokes equations, including shock-capturing methods.       ","AR
IAS
NC
SP
SDF"
"ACM 257. Special Topics in Financial Mathematics.?	","  third term. Prerequisite: ACM 95/100 or instructor’s permission. A basic knowledge of probability and statistics as well as transform methods for solving PDEs is assumed.?This course develops some of the techniques of stochastic calculus and applies them to the theory of financial asset modeling. The mathematical concepts/tools developed will include introductions to random walks, Brownian motion, quadratic variation, and Ito-calculus. Connections to PDEs will be made by Feynman-Kac theorems. Concepts of risk-neutral pricing and martingale representation are introduced in the pricing of options. Topics covered will be selected from standard options, exotic options, American derivative securities, term-structure models, and jump processes.          ",IS
"ACM 270. Advanced Topics in Applied and Computational Mathematics.		"," second, third terms.?Advanced topics in applied and computational mathematics that will vary according to student and instructor interest. May be repeated for credit.          ","AR
IAS"
"CS 1. Introduction to Computer Programming.	 	","first term.?A course on computer programming emphasizing the program design process and pragmatic programming skills. It will use the Python programming language and will not assume previous programming experience. Material covered will include data types, variables, assignment, control structures, functions, scoping, compound data, string processing, modules, basic input/output (terminal and file), as well as more advanced topics such as recursion, exception handling and object-oriented programming. Program development and maintenance skills including debugging, testing, and documentation will also be taught. Assignments will include problems drawn from fields such as graphics, numerics, networking, and games. At the end of the course, students will be ready to learn other programming languages in courses such as CS 11, and will also be ready to take more in-depth courses such as CS 2 and CS 4.          ","AL
DS
PL
SDF
SP"
"CS 2. Introduction to Programming Methods.	","  second term. Prerequisites: CS 1 or equivalent.?CS 2 is a demanding course in programming languages and computer science. Topics covered include data structures, including lists, trees, and graphs  implementation and performance analysis of common algorithms  algorithm design principles, in particular recursion and dynamic programming  concurrency and network programming  basic numerical computation methods. Heavy emphasis is placed on the use of compiled languages and development tools, including source control and debugging. The course includes weekly laboratory exercises and written homework covering the lecture material and program design. The course is intended to establish a foundation for further work in many topics in the computer science option.      ","AL
DS
PL
SDF
SE"
"CS 3. Introduction to Software Engineering.		"," third term. Prerequisites: CS 2 or equivalent.?CS 3 is a practical introduction to software engineering with an emphasis on understanding and minimizing risk in large software projects. Students will work in teams on a course-long project. Topics covered include revision control, code reviews, testing and testability, code readability, API design, refactoring, and documentation. The course provides opportunities to present your work to the class, and emphasizes working with other people’s code, both that of classmates and pre-existing frameworks.          ",SE
"CS 4. Fundamentals of Computer Programming.		"," second term. Prerequisite: CS 1 or instructor’s permission.This course gives students the conceptual background necessary to construct and analyze programs, which includes specifying computations, understanding evaluation models, and using major programming language constructs (functions and procedures, conditionals, recursion and looping, scoping and environments, compound data, side effects, higher-order functions and functional programming, and object-oriented programming). It emphasizes key issues that arise in programming and in computation in general, including time and space complexity, choice of data representation, and abstraction management. This course is intended for students with some programming background who want a deeper understanding of the conceptual issues involved in computer programming.          ",PL
"Ma/CS 6 abc. Introduction to Discrete Mathematics.		"," first, second, third terms. Prerequisite: for Ma/CS 6 c, Ma/CS 6 a or Ma 5 a or instructor’s permission.?First term: a survey emphasizing graph theory, algorithms, and applications of algebraic structures. Graphs: paths, trees, circuits, breadth-first and depth-first searches, colorings, matchings. Enumeration techniques  formal power series  combinatorial interpretations. Topics from coding and cryptography, including Hamming codes and RSA. Second term: directed graphs  networks  combinatorial optimization  linear programming. Permutation groups  counting nonisomorphic structures. Topics from extremal graph and set theory, and partially ordered sets. Third term: elements of computability theory and computational complexity. Discussion of the P=NP problem, syntax and semantics of propositional and first-order logic. Introduction to the G?del completeness and incompleteness theorems.    ","DS
PL"
"CS 9 ab. Introduction to Computer Science Research.	",  first and second term. This course will introduce students to research areas in CS through weekly overview talks by Caltech faculty and industry researchers aimed at first-year undergraduates. Others may wish to take the course to gain an understanding of the scope of research in computer science. Graded pass/fail.          ,IAS
"CS 11. Computer Language Shop.	","  first, second, third terms. Prerequisite: CS 1 or instructor’s permission.?A self-paced lab that provides students with extra practice and supervision in transferring their programming skills to a particular programming language  the course can be used for any language of the student’s choosing, subject to approval by the instructor. A series of exercises guide the student through the pragmatic use of the chosen language, building his or her familiarity, experience, and style. More advanced students may propose their own programming project as the target demonstration of their new language skills. CS 11 may be repeated for credit of up to a total of nine units.         ","AL
AR
CN
PD
SDF
SE"
"CS 21. Decidability and Tractability.	 	","second term. Prerequisite: CS 2 (may be taken concurrently).?This course introduces the formal foundations of computer science, the fundamental limits of computation, and the limits of efficient computation. Topics will include automata and Turing machines, decidability and undecidability, reductions between computational problems, and the theory of NP-completeness.          ","AL
AR
CN
HCI
IM
IS
PL
SDF"
"CS 24. Introduction to Computing Systems.		"," third term. Prerequisites: Familiarity with C equivalent to having taken the CS 11 C track.?Basic introduction to computer systems, including hardware-software interface, computer architecture, and operating systems. Course emphasizes computer system abstractions and the hardware and software techniques necessary to support them, including virtualization (e.g., memory, processing, communication), dynamic resource management, and common-case optimization, isolation, and naming.          ","AR
IAS
AR
PL
OS
PBD
SDF
SE
SF
SP"
"CS 38. Algorithms.	"," third term. Prerequisites: CS 2  Ma/CS 6 a or Ma 121 a  and CS 21 or CS/EE/Ma 129 a.?This course introduces techniques for the design and analysis of efficient algorithms. Major design techniques (the greedy approach, divide and conquer, dynamic programming, linear programming) will be introduced through a variety of algebraic, graph, and optimization problems. Methods for identifying intractability (via NP-completeness) will be discussed.        ","AL
DS
PL
SDF"
"EE/CS 51. Principles of Microprocessor Systems.		"," first term.?The principles and design of microprocessor-based computer systems. Lectures cover both hardware and software aspects of microprocessor system design such as interfacing to input and output devices, user interface design, real-time systems, and table-driven software. The homework emphasis is on software development, especially interfacing with hardware, in assembly language.          ","AR
IAS
IM
NC
SP"
"EE/CS 52 ab. Microprocessor Systems Laboratory.	 	","6 units (1-5-0) third term  second, third terms.?Prerequisites: EE/CS 51 or equivalent. The student will design, build, and program a specified microprocessor-based system. This structured laboratory is organized to familiarize the student with electronic circuit construction techniques, modern development facilities, and standard design techniques. The lectures cover topics in microprocessor system design such as display technologies, interfacing with analog systems, and programming microprocessors in high-level languages.         ",IAS
"EE/CS 53. Microprocessor Project Laboratory.	","?  first, second, third terms. Prerequisites: EE/CS 52 ab or equivalent.?A project laboratory to permit the student to select, design, and build a microprocessor-based system. The student is expected to take a project from proposal through design and implementation (possibly including PCB fabrication) to final review and documentation. May be repeated for credit.          ","AR
IAS
IS
PD
PL
SDF
SE
SP"
"CS 81 a. Undergraduate Projects in Computer Science.												","En 87 (CS 87). Computational Literature.  third term. Computational literature is a course that surveys the evolution poetry and poets have undergone from the end of the Romantic era and the invention of the analytical engine (1833) up until the predicted moment of Singularity (2045)--the advent of artificial intelligence. Students will explore the shift in aesthetics from the expression of the self to a future in which the self is controlled by algorithms, computation and behavior patterns of particles within a greater network. Students will discuss the precursors of digital poetry  from modernists, to Oulipo and the l=a=n=g=u=a=g=e poets, ending with contemporary voices in poetry and future ones. Students will create forms of nonexpressive poetry and construct them as algorithms, taking into account the influences of the internet and programming languages on both our lives and literature. Students may apply one term of En 85, 86, 87, or 89 to the additional HSS requirements, and all other courses in this series will receive Institute credit. Students may also enroll in this course as CS 87 for computer science credit.         ",GV
"CS 101 abc. Special Topics in Computer Science. 	"," offered by announcement. Prerequisites: CS 21 and CS 38, or instructor’s permission.?The topics covered vary from year to year, depending on the students and staff. Primarily for undergraduates.          ","AL
IAS
DS"
"ACM/CS 114. Parallel Algorithms for Scientific Applications.	"," second, third term. Prerequisites: ACM 11, 106 or equivalent.?Introduction to parallel program design for numerically intensive scientific applications. Parallel programming methods  distributed-memory model with message passing using the message passing interface  shared-memory model with threads using open MP, CUDA  object-based models using a problem-solving environment with parallel objects. Parallel numerical algorithms: numerical methods for linear algebraic systems, such as LU decomposition, QR method, CG solvers  parallel implementations of numerical methods for PDEs, including finite-difference, finite-element  particle-based simulations. Performance measurement, scaling and parallel efficiency, load balancing strategies.     ",PD
"CS 115. Functional Programming.	","third term. Prerequisites: CS 1 and CS 4.?This course is a both a theoretical and practical introduction to functional programming, a paradigm which allows programmers to work at an extremely high level of abstraction while simultaneously avoiding large classes of bugs that plague more conventional imperative and object-oriented languages. The course will introduce and use the lazy functional language Haskell exclusively. Topics include: recursion, first-class functions, higher-order functions, algebraic data types, polymorphic types, function composition, point-free style, proving functions correct, lazy evaluation, pattern matching, lexical scoping, type classes, and modules. Some advanced topics such as monad transformers, parser combinators, dynamic typing, and existential types are also covered.          ",PL
"CS 116. Reasoning about Program Correctness.	 	","first term. Prerequisite: CS 1 or equivalent.?This course presents the use of logic and formal reasoning to prove the correctness of sequential and concurrent programs. Topics in logic include propositional logic, basics of first-order logic, and the use of logic notations for specifying programs. The course presents a programming notation and its formal semantics, Hoare logic and its use in proving program correctness, predicate transformers and weakest preconditions, and fixed-point theory and its application to proofs of programs.          ","PL
AR
SDF
SP"
"Ma/CS 117 abc. Computability Theory.	 	","first, second, third terms. Prerequisite: Ma 5 or equivalent, or instructor’s permission.?Various approaches to computability theory, e.g., Turing machines, recursive functions, Markov algorithms  proof of their equivalence. Church’s thesis. Theory of computable functions and effectively enumerable sets. Decision problems. Undecidable problems: word problems for groups, solvability of Diophantine equations (Hilbert’s 10th problem). Relations with mathematical logic and the G?del incompleteness theorems. Decidable problems, from number theory, algebra, combinatorics, and logic. Complexity of decision procedures. Inherently complex problems of exponential and superexponential difficulty. Feasible (polynomial time) computations. Polynomial deterministic vs. nondeterministic algorithms, NP-complete problems and the P = NP question.         ","DS
IS"
"CS 118. Logic Model Checking for Formal Software Verification.		"," second term.?An introduction to the theory and practice of logic model checking as an aid in the formal proofs of correctness of concurrent programs and system designs. The specific focus is on automata-theoretic verification. The course includes a study of the theory underlying formal verification, the correctness of programs, and the use of software tools in designs.          ",SF
"CS 119. Reliable Software: Testing and Monitoring.	","?  third term. Prerequisites: CS 1 or equivalent  CS 116 and CS 118 are recommended.?The class discusses theoretical and practical aspects of software testing and monitoring. Topics include finite state machine testing algorithms, random testing, constraint-based testing, coverage measures, automated debugging, logics and algorithms for runtime monitoring, and aspect-oriented approaches to monitoring. Emphasis is placed on automation. Students will be expected to develop and use software testing and monitoring tools to develop reliable software systems.         ","SF
PL"
"CS/Ph 120 Quantum Cryptography.	","?  first term. Prerequisites: Ma 1b, CS 21, CS 38 or equivalent recommended and Ph 12b or Ph 2b recommended (or instructor's permission), This course is an introduction to quantum cryptography: how to use quantum effects, such as quantum entanglement and uncertainty, to implement cryptographic tasks with levels of security that are impossible to achieve classically. The course covers the fundamental ideas of quantum information that form the basis for quantum cryptography, such as entanglement and quantifying quantum knowledge. We will introduce the security definition for quantum key distribution and see protocols and proofs of security for this task. We will also discuss the basics of device-independent quantum cryptography as well as other cryptographic tasks and protocols, such as bit commitment or position-based cryptography.          ",IS
"CS 122. Database System Implementation.	","?  second term. Prerequisites: CS2, CS38, CS 121 and familiarity with Java, or instructor’s permission.?This course explores the theory, algorithms, and approaches behind modern relational database systems. Topics include file storage formats, query planning and optimization, query evaluation, indexes, transaction processing, concurrency control, and recovery. Assignments consist of a series of programming projects extending a working relational database, giving hands-on experience with the topics covered in class. The course also has a strong focus on proper software engineering practices, including version control, testing, and documentation.          ","AL
DS
PD
SDF
SP"
"CS 123. Projects in Database Systems.	 	","Prerequisites: CS121 and CS122.?Students are expected to execute a substantial project in databases, write up a report describing their work, and make a presentation.          ",PD
"CS 124. Operating Systems.		"," First term. Prerequisites: CS 24.?This course explores the major themes and components of modern operating systems, such as kernel architectures, the process abstraction and process scheduling, system calls, concurrency within the OS, virtual memory management, and file systems. Students must work in groups to complete a series of challenging programming projects, implementing major components of an instructional operating system. Most programming is in C, although some IA32 assembly language programming is also necessary. Familiarity with the material in CS 24 is strongly advised before attempting this course.          ",OS
"EE/Ma/CS 126 ab. Information Theory.	 	","first, second terms. Prerequisites: Ma 2.?Shannon’s mathematical theory of communication, 1948-present. Entropy, relative entropy, and mutual information for discrete and continuous random variables. Shannon’s source and channel coding theorems. Mathematical models for information sources and communication channels, including memoryless, first- order Markov, ergodic, and Gaussian. Calculation of capacity and rate-distortion functions. Kolmogorov complexity and universal source codes. Side information in source coding and communications. Network information theory, including multiuser data compression, multiple access channels, broadcast channels, and multiterminal networks. Discussion of philosophical and practical implications of the theory. This course, when combined with EE 112, EE/Ma/CS 127, EE 161, and/or EE 167 should prepare the student for research in information theory, coding theory, wireless communications, and/or data compression.          ",IS
"EE/Ma/CS 127. Error-Correcting Codes.		"," second term. Prerequisites: Ma 2.?This course develops from first principles the theory and practical implementation of the most important techniques for combating errors in digital transmission or storage systems. Topics include algebraic block codes, e.g., Hamming, BCH, Reed-Solomon (including a self-contained introduction to the theory of finite fields)  and the modern theory of sparse graph codes with iterative decoding, e.g. LDPC codes, turbo codes, fountain coding. Emphasis will be placed on the associated encoding and decoding algorithms, and students will be asked to demonstrate their understanding with a software project.         ",NC
"CS/EE/Ma 129 abc. Information and Complexity.?	 	",(1-4-4) third term. Prerequisite: basic knowledge of probability and discrete mathematics.?A basic course in information theory and computational complexity with emphasis on fundamental concepts and tools that equip the student for research and provide a foundation for pattern recognition and learning theory.?          ,IS
"CS 131. Programming Languages.	 	","third term. Prerequisites  CS 4. CS 131 is a course on programming languages and their implementation. It teaches students how to program in a number of simplified languages representing the major programming paradigms in use today (imperative, object-oriented, and functional). It will also teach students how to build and modify the implementations of these languages. Emphasis will not be on syntax or parsing but on the essential differences in these languages and their implementations. Both dynamically-typed and statically-typed languages will be implemented. Relevant theory will be covered as needed.  Implementations will mostly be interpreters, but some features of compilers will be covered if time permits. Enrollment limited to 20 students.         ",PL
"ME/CS 132 ab. Advanced Robotics: Navigation and Vision.	 	","second, third terms. Prerequisite: ME 115 ab.?The course focuses on current topics in robotics research in the area of autonomous navigation and vision. Topics will include mobile robots, multilegged walking machines, use of vision in navigation systems. The lectures will be divided between a review of the appropriate analytical techniques and a survey of the current research literature. Course work will focus on an independent research project chosen by the student.          ","AR
IAS
NC
SDF
SP"
"CS/EE/ME 134. Autonomy.	 	","third term. This course covers the basics of autonomy at the intersection of computer vision, machine learning and robotics.  It includes selected topics from each of these domains, and their integration points.  The lectures will be accompanied by a project that will integrate these ideas on hardware and result in a final demonstration of the concepts studied in the course.          ","IS
AR"
"EE/CS/EST 135. Power System Analysis.	 	","second term. Prerequisites: EE 44, Ma 2, or equivalent.?Phasor representation, 3-phase transmission system, per-phase analysis  power system modeling, transmission line, transformer, generator  network matrix, power flow solution, optimal power flow  Swing equation, stability, protection  demand response, power markets.      ",PD
"CS 138 Computer Algorithms.	 	","third term. Prerequisites: CS 21 and CS 38, or instructor’s permission.?Design and analysis of algorithms. Techniques for problems concerning graphs, flows, number theory, string matching, data compression, geometry, linear algebra and coding theory. Optimization, including linear programming. Randomization. Basic complexity theory and cryptography.          ","AL
AR
DS
GV
HCI
IAS
IS
PL
SDF
SP"
"CMS/CS 139. Analysis and Design of Algorithms.r areas of current research interest in algorithms.											","?  second term. Prerequisites: Ma 2, Ma 3, Ma/CS 6a, CS 21, CS 38/138, CMS/ACM/EE 116, or instructor’s permission.?This course covers advanced topics in the design and analysis of algorithms. Topics are drawn from approximation algorithms, randomized algorithms, online algorithms, streaming algorithms, and othe","AL
AR
IAS
NC
SDF
SP"
"CS 141. Hack Society: Projects from the Public Sector.		"," second and third terms. Enrollment cap to 20 students. Prerequisites: Extensive programming experience  completion of a medium sized project through either summer experience or other upper level courses. There is a large gap between the public and private sectors’ effective use of technology. This gap presents an opportunity for the development of innovative solutions to problems faced by society. Students will develop technology based projects that address this gap. Course material will offer an introduction to the design, development, and analysis of digital technology with examples derived from services typically found in the public sector.         ","PBD
SF
SP"
"CS 142. Distributed Computing.		"," third term. Prerequisites: CS 24, CS 38.?Programming distributed systems. Mechanics for cooperation among concurrent agents. Programming sensor networks and cloud computing applications. Applications of machine learning and statistics by using parallel computers to aggregate and analyze data streams from sensors.          ","DS
GV
HCI
NC
OS
PL
SDF
SP"
"CMS/CS/EE 144. Networks: Structure 	 Economics	",". 12 units (3-3-6)  second term. Prerequisites: Ma 2, Ma 3, Ma/CS 6a, and CS 38, or instructor permission.?Social networks, the web, and the internet are essential parts of our lives and we all depend on them every day, but do you really know what makes them work?This course studies the “big” ideas behind our networked lives. Things like, what do networks actually look like (and why do they all look the same)? How do search engines work? Why do memes spread the way they do? How does web advertising work? For all these questions and more, the course will provide a mixture of both mathematical analysis and hands-on labs. The course assumes students are comfortable with graph theory, probability, and basic programming.        ","NC
AR
SP"
"CS/EE 145. Projects in Networking.		"," third term. Prerequisites: Either CMS/CS/EE 144 or CS 142 in the preceding term, or instructor permission. Students are expected to execute a substantial project in networking, write up a report describing their work, and make a presentation.          ","NC
AR"
"CS/EE 146. Advanced Networking	",".?  third term. Prerequisites: CS/EE 143 or instructor’s permission.?This is a research-oriented course meant for undergraduates and beginning graduate students who want to learn about current research topics in networks such as the Internet, power networks, social networks, etc. The topics covered in the course will vary, but will be pulled from current research topics in the design, analysis, control, and optimization of networks, protocols, and Internet applications. Usually offered in alternate years.          ","NC
SP"
"EE/CNS/CS 148. Selected Topics in Computational Vision.		"," third term. Prerequisites: undergraduate calculus, linear algebra, geometry, statistics, computer programming .?The class will focus on an advanced topic in computational vision: recognition, vision-based navigation, 3-D reconstruction. The class will include a tutorial introduction to the topic, an exploration of relevant recent literature, and a project involving the design, implementation, and testing of a vision system.          ",CN
"CS/SS/Ec 149. Algorithmic Economics.		"," second term. This course will equip students to engage with active research at the intersection of social and information sciences, including: algorithmic game theory and mechanism design  auctions  matching markets  and learning in games.       ","AL
AR
CN
IAS
IS"
"CS 150. Probability and Algorithms.	 	","second term. Prerequisites: CS 38 a and Ma 5 abc.?Elementary randomized algorithms and algebraic bounds in communication, hashing, and identity testing. Game tree evaluation. Topics may include randomized parallel computation  independence, k-wise independence and derandomization  rapidly mixing Markov chains  expander graphs and their applications  clustering algorithms.      ","AL
AR
DS"
"CS 151. Complexity Theory.	","?  third term. Prerequisites: CS 21 and CS 38, or instructor’s permission.?This course describes a diverse array of complexity classes that are used to classify problems according to the computational resources (such as time, space, randomness, or parallelism) required for their solution. The course examines problems whose fundamental nature is exposed by this framework, the known relationships between complexity classes, and the numerous open problems in the area.          ","AL
DS
PL"
"CS 153. Current Topics in Theoretical Computer Science.		"," second term. Prerequisites: CS 21 and CS 38, or instructor’s permission.?May be repeated for credit, with permission of the instructor. Students in this course will study an area of current interest in theoretical computer science. The lectures will cover relevant background material at an advanced level and present results from selected recent papers within that year’s chosen theme. Students will be expected to read and present a research paper.          ","AL
AR
IAS
PL
SDF
SP"
"CMS/CS/CNS/EE 155. Machine Learning 	 Data Mining.	"," 12 units (3-3-6)  second term. Prerequisites: background in algorithms and statistics (CS/CNS/EE/NB 154 or CS/CNS/EE 156 a or instructor’s permission).?This course will cover popular methods in machine learning and data mining, with an emphasis on developing a working understanding of how to apply these methods in practice. This course will also cover core foundational concepts underpinning and motivating modern machine learning and data mining approaches. This course will be research-oriented, and will cover recent research developments.        ","IS
SP"
"CS/CNS/EE 156 ab. Learning Systems.	","?  first, third terms. Prerequisites: Ma 2 and CS 2, or equivalent.Introduction to the theory, algorithms, and applications of automated learning. How much information is needed to learn a task, how much computation is involved, and how it can be accomplished. Special emphasis will be given to unifying the different approaches to the subject coming from statistics, function approximation, optimization, pattern recognition, and neural networks.          ","IS
AL"
"ACM/CS 157. Statistical Inference.		"," third term. Prerequisites: ACM/EE 116, Ma 3. Statistical Inference is a branch of mathematical engineering that studies ways of extracting reliable information from limited data for learning, prediction, and decision making in the presence of uncertainty. This is an introductory course on statistical inference. The main goals are: develop statistical thinking and intuitive feel for the subject  introduce the most fundamental ideas, concepts, and methods of statistical inference  and explain how and why they work, and when they don’t. Topics covered include summarizing data, fundamentals of survey sampling, statistical functionals, jackknife, bootstrap, methods of moments and maximum likelihood, hypothesis testing, p-values, the Wald, t-, permutation, likelihood ratio tests, multiple testing, scatterplots, simple linear regression, ordinary least squares, interval estimation, prediction, graphical residual analysis.        ",IS
"ACM/CS/EE 158. Mathematical Statistics.		"," third term. Prerequisites: CMS/ACM 113, ACM/EE 116 and ACM/CS 157. Fundamentals of estimation theory and hypothesis testing  minimax analysis, Cramer-Rao bounds, Rao-Blackwell theory, shrinkage in high dimensions  Neyman-Pearson theory, multiple testing, false discovery rate  exponential families  maximum entropy modeling  other advanced topics may include graphical models, statistical model selection, etc. Throughout the course, a computational viewpoint will be emphasized.     ",SP
"CS/CNS/EE 159. Advanced Topics in Machine Learning.		"," third term. Prerequisites: CS 155  strong background in statistics, probability theory, algorithms, and linear algebra  background in optimization is a plus as well.?This course focuses on current topics in machine learning research. This is a paper reading course, and students are expected to understand material directly from research articles. Students are also expected to present in class, and to do a final project.        ",IS
"CS/CNS 171. Computer Graphics Laboratory.		"," first term. Prerequisites: extensive programming experience and proficiency in linear algebra, starting with CS2 and Ma1b.  This is a challenging course that introduces the basic ideas behind computer graphics and some of its fundamental algorithms. Topics include graphics input and output, the graphics pipeline, sampling and image manipulation, three-dimensional transformations and interactive modeling, basics of physically based modeling and animation, simple shading models and their hardware implementation, and some of the fundamental algorithms of scientific visualization. Students will be required to perform significant implementations.          ",GV
"CS/CNS 174. Computer Graphics Projects.		"," third term. Prerequisites: Extensive programming experience, CS/CNS 171 or instructor’s permission. This laboratory class offers students an opportunity for independent work including recent computer graphics research. In coordination with the instructor, students select a computer graphics modeling, rendering, interaction, or related algorithm and implement it. Students are required to present their work in class and discuss the results of their implementation and possible improvements to the basic methods. May be repeated for credit with instructor’s permission.          ","AR
GV
HCI"
"CS 176. Computer Graphics Research.		"," second term. Prerequisite: CS/CNS 171, or 173, or 174.The course will go over recent research results in computer graphics, covering subjects from mesh processing (acquisition, compression, smoothing, parameterization, adaptive meshing), simulation for purposes of animation, rendering (both photo- and nonphotorealistic), geometric modeling primitives (image based, point based), and motion capture and editing. Other subjects may be treated as they appear in the recent literature. The goal of the course is to bring students up to the frontiers of computer graphics research and prepare them for their own research.          ",AR
"CS 178. Numerical Algorithms and their Implementation.	 	","third term. Prerequisite CS 2. This course gives students the understanding necessary to choose and implement basic numerical algorithms as needed in everyday programming practice. Concepts include: sources of numerical error, stability, convergence, ill-conditioning, and efficiency. Algorithms covered include solution of linear systems (direct and iterative methods), orthogonalization, SVD, interpolation and approximation, numerical integration, solution of ODEs and PDEs, transform methods (Fourier, Wavelet), and low rank approximation such as multipole expansions.          ","AL
AR
IAS
NC
PD
SDF
SP"
"CS 179. GPU Programming.?		"," third term. Prerequisites: Good working knowledge of C/C++. Some experience with computer graphics algorithms preferred. The use of Graphics Processing Units for computer graphics rendering is well known, but their power for general parallel computation is only recently being explored. Parallel algorithms running on GPUs can often achieve up to 100x speedup over similar CPU algorithms. This course covers programming techniques for the Graphics processing unit, focusing on visualization and simulation of various systems. Labs will cover specific applications in graphics, mechanics, and signal processing. The course will use nVidia’s parallel computing architecture, CUDA. Labwork requires extensive programming.          ",AR
"CNS/Bi/EE/CS/NB 186. Vision: From Computational Theory to Neuronal Mechanisms.	","?  second term.Lecture, laboratory, and project course aimed at understanding visual information processing, in both machines and the mammalian visual system. The course will emphasize an interdisciplinary approach aimed at understanding vision at several levels: computational theory, algorithms, psychophysics, and hardware (i.e., neuroanatomy and neurophysiology of the mammalian visual system). The course will focus on early vision processes, in particular motion analysis, binocular stereo, brightness, color and texture analysis, visual attention and boundary detection. Students will be required to hand in approximately three homework assignments as well as complete one project integrating aspects of mathematical analysis, modeling, physiology, psychophysics, and engineering.          ","CN
HCI
IAS
NC
GV"
"CNS/Bi/Ph/CS/NB 187. Neural Computation.	 	","first term. Prerequisites: familiarity with digital circuits, probability theory, linear algebra, and differential equations. Programming will be required.?This course investigates computation by neurons. Of primary concern are models of neural computation and their neurological substrate, as well as the physics of collective computation. Thus, neurobiology is used as a motivating factor to introduce the relevant algorithms. Topics include rate-code neural networks, their differential equations, and equivalent circuits  stochastic models and their energy functions  associative memory  supervised and unsupervised learning  development  spike-based computing  single-cell computation  error and noise tolerance.   ",NC
"BE/CS/CNS/Bi 191 ab. Biomolecular Computation	",".?  (2-4-3) third term. Prerequisite: none. Recommended: ChE/BE 163, CS 21, CS 129 ab, or equivalent.?This course investigates computation by molecular systems, emphasizing models of computation based on the underlying physics, chemistry, and organization of biological cells. We will explore programmability, complexity, simulation of and reasoning about abstract models of chemical reaction networks, molecular folding, molecular self-assembly, and molecular motors, with an emphasis on universal architectures for computation, control, and construction within molecular systems. If time permits, we will also discuss biological example systems such as signal transduction, genetic regulatory networks, and the cytoskeleton  physical limits of computation, reversibility, reliability, and the role of noise, DNA-based computers and DNA nanotechnology. Part a develops fundamental results  part b is a reading and research course: classic and current papers will be discussed, and students will do projects on current research topics.        ","AL
PL
SP
SDF
IS
PL
SE
SP
CN"
"BE/CS 196 ab. Design and Construction of Programmable Molecular Systems.	","?  b = 12 units (2-8-2) third term. Prerequisites: ChE/BE 163 or BE/CS/CNS/Bi 191a, or instructor’s permission.?This course will introduce students to the conceptual frameworks and tools of computer science as applied to molecular engineering, as well as to the practical realities of synthesizing and testing their designs in the laboratory. In part a, students will design and construct DNA logic circuits, biomolecular neural networks, and complex two-dimensional and three-dimensional nanostructures, as well as quantitatively analyze the designs and the experimental data. Students will learn laboratory techniques including gel electrophoresis, fluorescence spectroscopy, and atomic force microscopy, and will use software tools and program in Mathematica or Mat lab. Part b is an open-ended, design-and-build project requiring instructor’s permission for enrollment. Enrollment in both parts a and b is limited to 12 students.          ",PD
"Ph/CS 219 abc. Quantum Computation.	","  first, second, third terms. Prerequisite: Ph 129 abc or equivalent.?The theory of quantum information and quantum computation. Overview of classical information theory, compression of quantum information, transmission of quantum information through noisy channels, quantum error-correcting codes, quantum cryptography and teleportation. Overview of classical complexity theory, quantum complexity, efficient quantum algorithms, fault-tolerant quantum computation, physical implementations of quantum computation.          ",IS
"CS 274 abc. Topics in Computer Graphics	",".?  first, second, third terms. Prerequisite: instructor’s permission.?Each term will focus on some topic in computer graphics, such as geometric modeling, rendering, animation, human-computer interaction, or mathematical foundations. The topics will vary from year to year. May be repeated for credit with instructor’s permission.          ",HCI
"CMS/ACM 107. Linear Analysis with Applications.		"," first term. Prerequisites: ACM 104 or equivalent, Ma 1b or equivalent. Covers the basic algebraic, geometric, and topological properties of normed linear spaces, inner-product spaces, and linear maps. Emphasis is placed both on rigorous mathematical development and on applications to control theory, data analysis and partial differential equations.          ","NC
AR"
"CMS/ACM 113. Mathematical Optimization.	","?  first term. Prerequisites: ACM 95/100 ab, ACM 11, or instructor’s permission.?Corequisite: It is suggested that students take CMS/ACM 104 concurrently. This class studies mathematical optimization from the viewpoint of convexity. Topics covered include duality and representation of convex sets  linear and semidefinite programming  connections to discrete, network, and robust optimization  relaxation methods for intractable problems  as well as applications to problems arising in graphs and networks, information theory, control, signal processing, and other engineering disciplines.      ","AL
DS
NC
SDF"
"CMS/CS 139. Analysis and Design of Algorithms.	","?  second term. Prerequisites: Ma 2, Ma 3, Ma/CS 6a, CS 21, CS 38/138, CMS/ACM/EE 116, or instructor’s permission.?This course covers advanced topics in the design and analysis of algorithms. Topics are drawn from approximation algorithms, randomized algorithms, online algorithms, streaming algorithms, and other areas of current research interest in algorithms.          ","AL
AR
CN
DS
IAS
OS
PL
SDF
SP"
"CMS/CS/EE 144. Networks: Structure Economics.	","  second term. Prerequisites: Ma 2, Ma 3, Ma/CS 6a, and CS 38, or instructor permission.?Social networks, the web, and the internet are essential parts of our lives and we all depend on them every day, but do you really know what makes them work? This course studies the “big” ideas behind our networked lives. Things like, what do networks actually look like (and why do they all look the same)? How do search engines work? Why do memes spread the way they do? How does web advertising work? For all these questions and more, the course will provide a mixture of both mathematical analysis and hands-on labs. The course assumes students are comfortable with graph theory, probability, and basic programming.          ",NC
"CMS/CS/CNS/EE 155. Machine Learning Data Mining.	","?  second term. Prerequisites: background in algorithms and statistics (CS/CNS/EE/NB 154 or CS/CNS/EE 156 a or instructor’s permission).?This course will cover popular methods in machine learning and data mining, with an emphasis on developing a working understanding of how to apply these methods in practice. This course will also cover core foundational concepts underpinning and motivating modern machine learning and data mining approaches. This course will be research-oriented, and will cover recent research developments.          ",IS
"CMS 290. Computing and Mathematical Sciences Colloquium.	 	","first, second, third terms.  Registration is limited to graduate students in the CMS department only.  This course is a research seminar course covering topics at the intersection of mathematics, computation, and their applications. Students are asked to attend one seminar per week (from any seminar series on campus) on topics related to computing and mathematical sciences. This course is a requirement for first-year PhD students in the CMS department.          ",IS
"CDS 90 abc. Senior Thesis in Control and Dynamical Systems.	 	","first, second, third terms. Prerequisite: CDS 110, CDS 112 or CDS 140 (may be taken concurrently).?Research in control and dynamical systems, supervised by a Caltech faculty member. The topic selection is determined by the adviser and the student and is subject to approval by the CDS faculty. First and second terms: midterm progress report and oral presentation during finals week. Third term: completion of thesis and final presentation.Not offered on a pass/fail basis.          ",SP
"CDS 112. Control System Design.	","?  second term. Prerequisites: CDS 110.?Optimization-based design of control systems, including optimal control and receding horizon control. Robustness and uncertainty management in feedback systems through stochastic and deterministic methods. Introductory random processes, Kalman filtering, and norms of signals and systems.          ","SDF
AL"
"CDS 190. Independent Work in Control and Dynamical Systems.	","?  first, second, third terms  maximum two terms. Prerequisite: CDS 110 or CDS 140.?Research project in control and dynamical systems, supervised by a CDS faculty member.         ","AL
AR
IAS
DS
PD
SP"
"CDS 231. Linear Systems Theory.	","  first term. Prerequisites: CMS/ACM 107 and CMS/ACM 113 or equivalent (may be taken concurrently). Linear input/output models (multi-state difference and differential equations). Stability, input/output norms. Uncertainty, including noise, disturbances, parametric uncertainty, unmodeled dynamics, and structured uncertainty (LTI/LTV). Tradeoffs, robustness versus efficiency, conservation laws and hard limits in time and frequency domain. Synthesis of robust control systems. Motivating case studies from tech, neuro, bio, and socioeconomic networks. Additional topics (as time permits): polytime scalability, sparsity, structure  layering and architecture  delay versus warning  communication and computing limits, quantization  actuator saturation, nonlinear dynamics, sum of squares, global stability, regions of attraction.      ","AR
IAS
NC
DS
GV
SP"
"CDS 232. Nonlinear Dynamics.		"," second term. Prerequisites: CMS/ACM 107 and CDS 231. This course studies nonlinear dynamical systems beginning from first principles. Topics include: existence and uniqueness properties of solutions to nonlinear ODEs, stability of nonlinear systems from the perspective of Lyapunov, and behavior unique to nonlinear systems  for example: stability of periodic orbits, Poincaré maps and stability/invariance of sets. The dynamics of robotic systems will be used as a motivating example.         ",DS
"CDS 233. Nonlinear Control.	 	","third term. Prerequisites: CDS 231 AND CDS 232. This course studies nonlinear control systems from Lyapunov perspective. Beginning with feedback linearization and the stabilization of feedback linearizable system, these concepts are related to control Lyapunov functions, and corresponding stabilization results in the context of optimization based controllers. Advanced topics that build upon these core results will be discussed including: stability of periodic orbits, controller synthesis through virtual constraints, safety-critical controllers, and the role of physical constraints and actuator limits. The control of robotic systems will be used as a motivating example.          ",AR
"CDS 241. Network Control Systems.	 											","third term. Prerequisites: CDS 231 or instructor’s permission. Emphasis on case studies from complex tech, bio, neuro, eco, and socieconomic networks, particularly energy, internet, sensorimotor control, cell biology, medical physiology, and human and animal social organization. Layered architectures and distributed control. Tradeoffs, synthesis, and co-design due to parse and limited sensing, communications, computing, and actuation.  Interplay between automation, optimization, control, modeling and system identification, and machine learning.","NC
AR"
"CDS 243. Adaptive Control.	 	","third term. Prerequisites:  CDS 231 and CDS 232.  Specification and design of control systems that operate in the presence of uncertainties and unforeseen events.  Robust and optimal linear control methods, including LQR, LQG and LTR control.  Design and analysis of model reference adaptive control (MRAC) for nonlinear uncertain dynamical systems with extensions to output feedback. Offered in alternate years.          ","AR
SDF
DS"
"CDS 244. System Identification.		"," third term. Prerequisites:  CDS 231 and CDS 232.  Mathematical treatment of system identification methods for dynamical systems, with applications. Nonlinear dynamics and models for parameter identification. Gradient and least-squares estimators and variants.  System identification with adaptive predictors and state observers.  Parameter estimation in the presence of non-parametric uncertainties.  Introduction to adaptive control. Offered in alternate years.          ","AR
IAS"
"Ae/CDS/ME 251 ab. Closed Loop Flow Control.	 	","(3-0-6 a, 1-6-1- b)  second, third term. Prerequisites: ACM 100abc, Ae/APh/CE/ME 101abc or equivalent.?This course seeks to introduce students to recent developments in theoretical and practical aspects of applying control to flow phenomena and fluid systems. Lecture topics in the second term drawn from: the objectives of flow control  a review of relevant concepts from classical and modern control theory  high-fidelity and reduced-order modeling  principles and design of actuators and sensors. Third term: laboratory work in open- and closed-loop control of boundary layers, turbulence, aerodynamic forces, bluff body drag, combustion oscillations and flow-acoustic oscillations.      ",AR
31. Introduction to Computer Science I,"Lecture, four hours; discussion, two hours; outside study, six hours. Introduction to computer science via theory, applications, and programming. Basic data types, operators and control structures. Input/output. Procedural and data abstraction. Introduction to object-oriented software development. Functions, recursion. Arrays, strings, pointers. Abstract data types, object-oriented programming. Examples and exercises from computer science theory and applications. Letter grading.","AR
IAS
NC
PL
SDF
SP"
32. Introduction to Computer Science II,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 31. Object-oriented software development. Abstract data type definition and use. Overloading, inheritance, polymorphism. Object-oriented view of data structures: stacks, queues, lists. Algorithm analysis. Trees, graphs, and associated algorithms. Searching and sorting. Case studies and exercises from computer science applications. Letter grading.","AL
AR
DS
PD
PL
SDF
SE"
33. Introduction to Computer Organization,"Lecture, four hours; discussion, two hours; outside study, nine hours. Enforced requisite: course 32. Introductory course on computer architecture, assembly language, and operating systems fundamentals. Number systems, machine language, and assembly language. Procedure calls, stacks, interrupts, and traps. Assemblers, linkers, and loaders. Operating systems concepts: processes and process management, input/output (I/O) programming, memory management, file systems. Letter grading.","AR
IAS
OS
SDF"
35L. Software Construction Laboratory,"Laboratory, four hours; outside study, two hours. Enforced requisite: course 31. Fundamentals of commonly used software tools and environments, particularly open-source tools to be used in upper division computer science courses. Letter grading.","AR
IAS
SE"
35L. Software Construction Laboratory (Effective Winter 2018 ),"Laboratory, four hours; outside study, five hours. Requisite: course 31. Fundamentals of commonly used software tools and environments, particularly open-source tools to be used in upper-division computer science courses. Letter grading.","SDF
PL
AL
NC
CN
OS
SE"
M51A. Logic Design of Digital Systems,"(Same as Electrical Engineering M16.) Lecture, four hours; discussion, two hours; outside study, six hours. Introduction to digital systems. Specification and implementation of combinational and sequential systems. Standard logic modules and programmable logic arrays. Specification and implementation of algorithmic systems: data and control sections. Number systems and arithmetic algorithms. Error control codes for digital information. Letter grading.","AR
DS
IAS
GV
PD
SDF
SP"
M51A. Logic Design of Digital Systems (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M16.) Lecture, four hours; discussion, two hours; outside study, six hours. Introduction to digital systems. Specification and implementation of combinational and sequential systems. Standard logic modules and programmable logic arrays. Specification and implementation of algorithmic systems: data and control sections. Number systems and arithmetic algorithms. Error control codes for digital information. Letter grading.","AR
IAS
DS
GV
PL
SDF
SP"
97. Variable Topics in Computer Science,"Lecture, one to four hours; discussion, zero to two hours. Designed for freshmen/sophomores. Variable topics in computer science not covered in regular computer science courses. May be repeated once for credit with topic or instructor change. Letter grading.","NC
PL
SDF"
111. Operating Systems Principles,"Lecture, four hours; laboratory, two hours; outside study, nine hours. Enforced requisites: courses 32, 33, 35L. Introduction to operating systems design and evaluation. Computer software systems performance, robustness, and functionality. Kernel structure, bootstrapping, input/output (I/O) devices and interrupts. Processes and threads; address spaces, memory management, and virtual memory. Scheduling, synchronization. File systems: layout, performance, robustness. Distributed systems: networking, remote procedure call (RPC), asynchronous RPC, distributed file systems, transactions. Protection and security. Exercises involving applications using, and internals of, real-world operating systems. Letter grading.",OS
112. Modeling Uncertainty in Information Systems,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisites: course 111 and one course from Civil Engineering 110, Electrical Engineering 131A, Mathematics 170A, or Statistics 100A. Designed for juniors/seniors. Probability and stochastic process models as applied in computer science. Basic methodological tools include random variables, conditional probability, expectation and higher moments, Bayes theorem, Markov chains. Applications include probabilistic algorithms, evidential reasoning, analysis of algorithms and data structures, reliability, communication protocol and queueing models. Letter grading.",NC
114. Peer-to-Peer Systems,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 118. Optional: course 218. Fundamental concepts on peer-to-peer networks, such as distributed hash-tables, routing, searching, and related network management protocols (Join, Leave, death management, routing, table repair). Video streaming and Internet Protocol Television (IPTV) applications, with emphasis on thin clients such as PDAs and smart phones. Introduction to mesh-based and tree-based topologies for live streaming, with emphasis on key aspects of peer selection metrics and illustration of common optimization techniques (peer capacity, network delay). Hands-on approach to guide students to development and testing of actual experimental system on PlanetLab. Letter grading.","NC
DS"
M117. Computer Networks: Physical Layer,"(Same as Electrical Engineering M117.) Lecture, two hours; discussion, two hours; laboratory, two hours; outside study, six hours. Not open to students with credit for course M171L. Introduction to fundamental computer communication concepts underlying and supporting modern networks, with focus on wireless communications and media access layers of network protocol stack. Systems include wireless LANs (IEEE802.11) and ad hoc wireless and personal area networks (e.g., Bluetooth, ZigBee). Experimental project based on mobile radio-equipped devices (smart phones, tablets, etc.) as sensor platforms for personal applications such as wireless health, positioning, and environment awareness, and experimental laboratory sessions included. Letter grading.",NC
M117. Computer Networks: Physical Layer (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M117.) Lecture, two hours; discussion, two hours; laboratory, two hours; outside study, six hours. Not open to students with credit for course M171L. Introduction to fundamental computer communication concepts underlying and supporting modern networks, with focus on wireless communications and media access layers of network protocol stack. Systems include wireless LANs (IEEE802.11) and ad hoc wireless and personal area networks (e.g., Bluetooth, ZigBee). Experimental project based on mobile radio-equipped devices (smart phones, tablets, etc.) as sensor platforms for personal applications such as wireless health, positioning, and environment awareness, and experimental laboratory sessions included. Letter grading.","NC
SDF
GV"
118. Computer Network Fundamentals,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 111. Designed for juniors/seniors. Introduction to design and performance evaluation of computer networks, including such topics as what protocols are, layered network architecture, Internet protocol architecture, network applications, transport protocols, routing algorithms and protocols, internetworking, congestion control, and link layer protocols including Ethernet and wireless channels. Letter grading.","NC
AR
SP"
M119. Fundamentals of Embedded Networked Systems,"(Same as Electrical Engineering M119.) Lecture, four hours; discussion, one hour; outside study, seven hours. Requisites: Civil and Environmental Engineering 110 or Electrical Engineering 131A or Mathematics 170A or Statistics 100A, course 118 or Electrical Engineering 132B, course 33. Design trade-offs and principles of operation of cyber physical systems such as devices and systems constituting Internet of Things. Topics include signal propagation and modeling, sensing, node architecture and operation, and applications. Letter grading.",SP
M119. Fundamentals of Embedded Networked Systems (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M119.) Lecture, four hours; discussion, one hour; outside study, seven hours. Requisites: Civil and Environmental Engineering 110 or Electrical and Computer Engineering 131A or Mathematics 170A or Statistics 100A, course 118 or Electrical and Computer Engineering 132B, course 33. Design trade-offs and principles of operation of cyber physical systems such as devices and systems constituting Internet of Things. Topics include signal propagation and modeling, sensing, node architecture and operation, and applications. Letter grading.","NC
IAS
PL
SDF"
CM121. Introduction to Bioinformatics,"(Same as Chemistry CM160A.) Lecture, four hours; discussion, two hours. Requisites: course 32 or Program in Computing 10C with grade of C- or better, and one course from Biostatistics 100A, Civil Engineering 110, Electrical Engineering 131A, Mathematics 170A, or Statistics 100A. Prior knowledge of biology not required. Designed for engineering students as well as students from biological sciences and medical school. Introduction to bioinformatics and methodologies, with emphasis on concepts and inventing new computational and statistical techniques to analyze biological data. Focus on sequence analysis and alignment algorithms. Concurrently scheduled with course CM221. P/NP or letter grading.",IS
CM122. Algorithms in Bioinformatics,"(Same as Chemistry CM160B.) Lecture, four hours; discussion, two hours. Requisites: course 32 or Program in Computing 10C with grade of C- or better, and one course from Biostatistics 100A, Civil Engineering 110, Electrical Engineering 131A, Mathematics 170A, or Statistics 100A. Course CM121 is not requisite to CM122. Designed for engineering students as well as students from biological sciences and medical school. Development and application of computational approaches to biological questions, with focus on formulating interdisciplinary problems as computational problems and then solving these problems using algorithmic techniques. Computational techniques include those from statistics and computer science. Concurrently scheduled with course CM222. Letter grading.","AR
NC
SDF"
130. Software Engineering,"Lecture, four hours; laboratory, two hours; outside study, six hours. Enforced requisite: course 111. Recommended: Engineering 183EW or 185EW. Structured programming, program specification, program proving, modularity, abstract data types, composite design, software tools, software control systems, program testing, team programming. Letter grading.","AL
AR
CN
DS
HCI
IM
NC
PL
SE
SP"
131. Programming Languages,"Lecture, four hours; laboratory, two hours; outside study, six hours. Enforced requisites: courses 33, 35L. Basic concepts in design and use of programming languages, including abstraction, modularity, control mechanisms, types, declarations, syntax, and semantics. Study of several different language paradigms, including functional, object-oriented, and logic programming. Letter grading.","PL
PD"
132. Compiler Construction,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisites: courses 131, 181. Compiler structure; lexical and syntactic analysis; semantic analysis and code generation; theory of parsing. Letter grading.","PL
SDF
AL
GV
SP"
132. Compiler Construction (Effective Winter 2018 ),"Lecture, four hours; discussion, two hours; outside study, six hours. Requisite: course 131. Compiler structure; lexical and syntactic analysis; semantic analysis and code generation; theory of parsing. Letter grading.","PL
AL
SDF
SE"
133. Parallel and Distributed Computing,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisites: courses 111 (may be taken concurrently), 131. Distributed memory and shared memory parallel architectures; asynchronous parallel languages: MPI, Maisie; primitives for parallel computation: specification of parallelism, interprocess communication and synchronization; design of parallel programs for scientific computation and distributed systems. Letter grading.","PD
PL
SDF
SP"
136. Introduction to Computer Security,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 118. Introduction to basic concepts of information security necessary for students to understand risks and mitigations associated with protection of systems and data. Topics include security models and architectures, security threats and risk analysis, access control and authentication/authorization, cryptography, network security, secure application design, and ethics and law. Letter grading.",SP
C137A. Prototyping Programming Languages,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 131. How different programming language paradigms provide dramatically different ways of thinking about computation and offer trade-offs on many dimensions, such as modularity, extensibility, expressiveness, and safety. Concrete exploration of three major programming paradigms -- functional, object-oriented, and logic programming -- by prototyping implementations of languages in each. Analysis of prototypes to shed light on design and structural properties of each language and paradigm and to allow easy comparison against one another. Hands-on experience implementing new abstractions, both as stand-alone languages and as libraries in existing languages. Concurrently scheduled with course C237A. Letter grading.",PL
C137B. Programming Language Design,"Seminar, four hours; outside study, eight hours. Enforced requisite: course C137A. Study of various programming language designs, from computing history and research literature, that attempt to address problems of software systems that are bloated, buggy, and difficult to maintain and extend despite trend in computing toward ever higher levels of abstraction for programming. Hands-on experience designing, prototyping, and evaluating new languages, language abstractions, and/or programming environments. Concurrently scheduled with course C237B. Letter grading.","PL
PD
SE"
143. Database Systems,"Lecture, four hours; laboratory, two hours; outside study, six hours. Enforced requisite: course 111. Information systems and database systems in enterprises. File organization and secondary storage structures. Relational model and relational database systems. Network, hierarchical, and other models. Query languages. Database design principles. Transactions, concurrency, and recovery. Integrity and authorization. Letter grading.",IS
144. Web Applications,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 143. Important concepts and theory for building effective and safe Web applications and first-hand experience with basic tools. Topics include basic Web architecture and protocol, XML and XML query language, mapping between XML and relational models, information retrieval model and theory, security and user model, Web services and distributed transactions. Letter grading.",IS
145. Introduction to Data Mining,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 180. Introductory survey of data mining (process of automatic discovery of patterns, changes, associations, and anomalies in massive databases), knowledge engineering, and wide spectrum of data mining application areas such as bioinformatics, e-commerce, environmental studies, financial markets, multimedia data processing, network monitoring, and social service analysis. Letter grading.",IS
M146. Introduction to Machine Learning,"(Same as Electrical Engineering M146.) Lecture, four hours; discussion, one hour; outside study, seven hours. Requisites: Civil and Environmental Engineering 110 or Electrical Engineering 131A or Mathematics 170A or Statistics 100A, course 33. Introduction to breadth of data science. Foundations for modeling data sources, principles of operation of common tools for data analysis, and application of tools and models to data gathering and analysis. Topics include statistical foundations, regression, classification, kernel methods, clustering, expectation maximization, principal component analysis, decision theory, reinforcement learning and deep learning. Letter grading.",IS
M146. Introduction to Machine Learning (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M146.) Lecture, four hours; discussion, one hour; outside study, seven hours. Requisites: Civil and Environmental Engineering 110 or Electrical and Computer Engineering 131A or Mathematics 170A or Statistics 100A, course 33. Introduction to breadth of data science. Foundations for modeling data sources, principles of operation of common tools for data analysis, and application of tools and models to data gathering and analysis. Topics include statistical foundations, regression, classification, kernel methods, clustering, expectation maximization, principal component analysis, decision theory, reinforcement learning and deep learning. Letter grading.",IS
M151B. Computer Systems Architecture,"(Same as Electrical Engineering M116C.) Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisites: courses 33, and M51A or Electrical Engineering M16. Recommended: courses 111, and M152A or Electrical Engineering M116L. Computer system organization and design, implementation of CPU datapath and control, instruction set design, memory hierarchy (caches, main memory, virtual memory) organization and management, input/output subsystems (bus structures, interrupts, DMA), performance evaluation, pipelined processors. Letter grading.","AR
IAS
IM
NC
PL
SDF
SP"
M151B. Computer Systems Architecture (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M116C.) Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisites: courses 33, and M51A or Electrical and Computer Engineering M16. Recommended: courses 111, and M152A or Electrical and Computer Engineering M116L. Computer system organization and design, implementation of CPU datapath and control, instruction set design, memory hierarchy (caches, main memory, virtual memory) organization and management, input/output subsystems (bus structures, interrupts, DMA), performance evaluation, pipelined processors. Letter grading.","AR
IAS
IAS
PD
SDF
SE"
151C. Design of Digital Systems,"Lecture, four hours; discussion, two hours; outside study, six hours. Requisites: courses M151B, M152A. Design of complex digital systems using hierarchal approaches and regular structures. Combinational, sequential, and algorithmic systems. Microprogramming and firmware engineering. Cost/performance measures and technology constraints. Use of design tools. Design project. Letter grading.","AR
IAS
DS
IM
SDF
SP"
M152A. Introductory Digital Design Laboratory,"(Same as Electrical Engineering M116L.) Laboratory, four hours; outside study, two hours. Enforced requisite: course M51A or Electrical Engineering M16. Hands-on design, implementation, and debugging of digital logic circuits, use of computer-aided design tools for schematic capture and simulation, implementation of complex circuits using programmed array logic, design projects. Letter grading.",SP
M152A. Introductory Digital Design Laboratory (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M116L.) Laboratory, four hours; outside study, two hours. Enforced requisite: course M51A or Electrical and Computer Engineering M16. Hands-on design, implementation, and debugging of digital logic circuits, use of computer-aided design tools for schematic capture and simulation, implementation of complex circuits using programmed array logic, design projects. Letter grading.","AR
CN
HCI
IM
OS
PL
SDF
SE"
152B. Digital Design Project Laboratory,"Laboratory, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course M151B or Electrical Engineering M116C. Recommended: Engineering 183EW or 185EW. Limited to seniors. Design and implementation of complex digital subsystems using field-programmable gate arrays (e.g., processors, special-purpose processors, device controllers, and input/output interfaces). Students work in teams to develop and implement designs and to document and give oral presentations of their work. Letter grading.","AR
IAS
IM"
161. Fundamentals of Artificial Intelligence,"Lecture, four hours; laboratory, two hours; outside study, six hours. Enforced requisite: course 180. Introduction to fundamental problem solving and knowledge representation paradigms of artificial intelligence. Introduction to Lisp with regular programming assignments. State-space and problem reduction methods, brute-force and heuristic search, planning techniques, two-player games. Knowledge structures including predicate logic, production systems, semantic nets and primitives, frames, scripts. Special topics in natural language processing, expert systems, vision, and parallel architectures. Letter grading.",IS
170A. Mathematical Modeling and Methods for Computer Science,"Lecture, four hours; laboratory, two hours; outside study, six hours. Enforced requisites: course 180, Mathematics 33B. Introduction to methods for modeling and simulation using interactive computing environments. Extensive coverage of methods for numeric and symbolic computation, matrix algebra, statistics, floating point, optimization, and spectral analysis. Emphasis on applications in simulation of physical systems. Letter grading.","AL
DS
IM
NC
OS
SDF"
M171L. Data Communication Systems Laboratory,"(Same as Electrical Engineering M171L.) Laboratory, four to eight hours; outside study, two to four hours. Recommended preparation: course M152A. Limited to seniors. Not open to students with credit for course M117. Interpretation of analog-signaling aspects of digital systems and data communications through experience in using contemporary test instruments to generate and display signals in relevant laboratory setups. Use of oscilloscopes, pulse and function generators, baseband spectrum analyzers, desktop computers, terminals, modems, PCs, and workstations in experiments on pulse transmission impairments, waveforms and their spectra, modem and terminal characteristics, and interfaces. Letter grading.",SP
M171L. Data Communication Systems Laboratory (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M171L.) Laboratory, four to eight hours; outside study, two to four hours. Recommended preparation: course M152A. Limited to seniors. Not open to students with credit for course M117. Interpretation of analog-signaling aspects of digital systems and data communications through experience in using contemporary test instruments to generate and display signals in relevant laboratory setups. Use of oscilloscopes, pulse and function generators, baseband spectrum analyzers, desktop computers, terminals, modems, PCs, and workstations in experiments on pulse transmission impairments, waveforms and their spectra, modem and terminal characteristics, and interfaces. Letter grading.",SP
172. Real-Time Three-Dimensional Animation,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 32. Introduction to handling of geometry, appearance, and motion specifically for real-time virtual environments, both on theoretical and practical levels. Completion of one quality real-time three-dimensional animation by following through from preproduction to postproduction. End products expected to be game demonstrations, storytelling games, or machinima (use of real-time graphics engines to create cinematic productions). Focus on achieving highest quality productions to qualify and submit products to Student Academy Awards competition. Use of Unity Game Engine to make technical decisions to adapt stories to games. Introduction to interaction concepts, enabling students to create low-fidelity real-time three-dimensional animation and to concepts in artificial intelligence, enabling them to refine their interactions to create high-fidelity real-time three-dimensional animation. Letter grading.","GV
HCI"
174A. Introduction to Computer Graphics,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 32. Basic principles behind modern two- and three-dimensional computer graphics systems, including complete set of steps that modern graphics pipelines use to create realistic images in real time. How to position and manipulate objects in scene using geometric and camera transformations. How to create final image using perspective and orthographic transformations. Basics of modeling primitives such as polygonal models and implicit and parametric surfaces. Basic ideas behind color spaces, illumination models, shading, and texture mapping. Letter grading.","GV
HCI"
174B. Introduction to Computer Graphics: Three-Dimensional Photography and Rendering,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 174A. State of art in three-dimensional photography and image-based rendering. How to use cameras and light to capture shape and appearance of real objects and scenes. Process provides simple way to acquire three-dimensional models of unparalleled detail and realism. Applications of techniques from entertainment (reverse engineering and postprocessing of movies, generation of realistic synthetic objects and characters) to medicine (modeling of biological structures from imaging data), mixed reality (augmentation of video), and security (visual surveillance). Fundamental analytical tools for modeling and inferring geometric (shape) and photometric (reflectance, illumination) properties of objects and scenes, and for rendering and manipulating novel views. Letter grading.",CN
C174C. Computer Animation,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 174A. Designed for juniors/seniors. Introduction to computer animation, including basic principles of character modeling, forward and inverse kinematics, forward and inverse dynamics, motion capture animation techniques, physics-based animation of particles and systems, and motor control. Concurrently scheduled with course C274C. Letter grading.","GV
HCI"
180. Introduction to Algorithms and Complexity,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisites: course 32, Mathematics 61. Designed for junior/senior Computer Science majors. Introduction to design and analysis of algorithms. Design techniques: divide-and-conquer, greedy method, dynamic programming; selection of prototypical algorithms; choice of data structures and representations; complexity measures: time, space, upper, lower bounds, asymptotic complexity; NP-completeness. Letter grading.","AL
AR
DS
PD
PL
SDF"
181. Introduction to Formal Languages and Automata Theory,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 180. Designed for junior/senior Computer Science majors. Grammars, automata, and languages. Finite-state languages and finite-state automata. Context-free languages and pushdown story automata. Unrestricted rewriting systems, recursively enumerable and recursive languages, and Turing machines. Closure properties, pumping lemmas, and decision algorithms. Introduction to computability. Letter grading.","AL
DS
PL
SDF"
183. Introduction to Cryptography,"Lecture, four hours; discussion, two hours; outside study, six hours. Preparation: knowledge of basic probability theory. Enforced requisite: course 180. Introduction to cryptography, computer security, and basic concepts and techniques. Topics include notions of hardness, one-way functions, hard-core bits, pseudorandom generators, pseudorandom functions and pseudorandom permutations, semantic security, public-key and private-key encryption, key-agreement, homomorphic encryption, private information retrieval and voting protocols, message authentication, digital signatures, interactive proofs, zero-knowledge proofs, collision-resistant hash functions, commitment protocols, and two-party secure computation with static security. Letter grading.",SP
188. Special Courses in Computer Science,"Lecture, four hours; discussion, two hours; outside study, six hours. Special topics in computer science for undergraduate students taught on experimental or temporary basis, such as those taught by resident and visiting faculty members. May be repeated for credit with topic or instructor change. Letter grading.","SDF
IAS"
194. Research Group Seminars: Computer Science,"Seminar, four hours; outside study, eight hours. Designed for undergraduate students who are part of research group. Discussion of research methods and current literature in field or of research of faculty members or students. May be repeated for credit. Letter grading.",IAS
199. Directed Research in Computer Science,"Tutorial, to be arranged. Limited to juniors/seniors. Supervised individual research or investigation under guidance of faculty mentor. Culminating paper or project required. May be repeated for credit with school approval. Individual contract required; enrollment petitions available in Office of Academic and Student Affairs. Letter grading.",PD
201. Computer Science Seminar,"Seminar, four hours; outside study, two hours. Designed for graduate computer science students. Seminars on current research topics in computer science. May be repeated for credit. S/U grading.","AL
IAS
NC
PD
PL
SDF
SP"
202. Advanced Computer Science Seminar,"Seminar, four hours; outside study, eight hours. Preparation: completion of major field examination in computer science. Current computer science research into theory of, analysis and synthesis of, and applications of information processing systems. Each member completes one tutorial and one or more original pieces of work in one specialized area. May be repeated for credit. Letter grading.",IS
205. Health Analytics,"Lecture, four hours; outside study, eight hours. Enforced requisites: courses 31, 180. Recommended: statistics and probability, numerical methods, knowledge in programming languages. Applied data analytics course, with focus on healthcare applications. How to properly generate and analyze health data. Project-based course to learn about best practices in health data collection and validation. Exploration of various machine learning and data analytic tools to learn underlying structure of datasets to solve healthcare problems. Different machine learning concepts and algorithms, statistical models, and building of data-driven models. Big data analytics and tools for handling structured, unstructured, and semistructured datasets. Letter grading.",IS
211. Network Protocol and Systems Software Design for Wireless and Mobile,"Lecture, four hours; outside study, eight hours. Requisite: course 118. Designed for graduate students. In-depth study of network protocol and systems software design in area of wireless and mobile Internet. Topics include (1) networking fundamentals: design philosophy of TCP/IP, end-to-end arguments, and protocol design principles, (2) networking protocols: 802.11 MAC standard, packet scheduling, mobile IP, ad hoc routing, and wireless TCP, (3) mobile computing systems software: middleware, file system, services, and applications, and (4) topical studies: energy-efficient design, security, location management, and quality of service. Letter grading.","NC
SE
SF"
M213A. Embedded Systems,"(Same as Electrical Engineering M202A.) Lecture, four hours; outside study, eight hours. Requisite: course 111. Designed for graduate computer science and electrical engineering students. Methodologies and technologies for design of embedded systems. Topics include hardware and software platforms for embedded systems, techniques for modeling and specification of system behavior, software organization, real-time operating system scheduling, real-time communication and packet scheduling, low-power battery and energy-aware system design, timing synchronization, fault tolerance and debugging, and techniques for hardware and software architecture optimization. Theoretical foundations as well as practical design methods. Letter grading.","SF
AR
IAS
IM
OS
PD
PL
SDF
SP"
M213A. Embedded Systems (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M202A.) Lecture, four hours; outside study, eight hours. Requisite: course 111. Designed for graduate computer science and electrical engineering students. Methodologies and technologies for design of embedded systems. Topics include hardware and software platforms for embedded systems, techniques for modeling and specification of system behavior, software organization, real-time operating system scheduling, real-time communication and packet scheduling, low-power battery and energy-aware system design, timing synchronization, fault tolerance and debugging, and techniques for hardware and software architecture optimization. Theoretical foundations as well as practical design methods. Letter grading.","AR
IAS
OS
PL
SDF
SP"
M213B. Energy-Aware Computing and Cyber-Physical Systems,"(Same as Electrical Engineering M202B.) Lecture, four hours; outside study, eight hours. Requisite: course M51A or Electrical Engineering M16. Recommended: courses 111, and M151B or Electrical Engineering M116C. System-level management and cross-layer methods for power and energy consumption in computing and communication at various scales ranging across embedded, mobile, personal, enterprise, and data-center scale. Computing, networking, sensing, and control technologies and algorithms for improving energy sustainability in human-cyber-physical systems. Topics include modeling of energy consumption, energy sources, and energy storage; dynamic power management; power-performance scaling and energy proportionality; duty-cycling; power-aware scheduling; low-power protocols; battery modeling and management; thermal management; sensing of power consumption. Letter grading.",PD
M213B. Energy-Aware Computing and Cyber-Physical Systems (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M202B.) Lecture, four hours; outside study, eight hours. Requisite: course M51A or Electrical and Computer Engineering M16. Recommended: courses 111, and M151B or Electrical and Computer Engineering M116C. System-level management and cross-layer methods for power and energy consumption in computing and communication at various scales ranging across embedded, mobile, personal, enterprise, and data-center scale. Computing, networking, sensing, and control technologies and algorithms for improving energy sustainability in human-cyber-physical systems. Topics include modeling of energy consumption, energy sources, and energy storage; dynamic power management; power-performance scaling and energy proportionality; duty-cycling; power-aware scheduling; low-power protocols; battery modeling and management; thermal management; sensing of power consumption. Letter grading.",PD
216. Network Algorithmics,"Lecture, four hours; outside study, eight hours. Recommended preparation: one course on networks. Requisite: course 211. Introduction to algorithms for routers and servers. Models of network devices and hardware design. Principles for efficient implementation. Lookup algorithms (exact match, prefix lookups, advanced cardiac life support), fair queuing implementations, crossbar and scalable switches, with examples from well-known networking devices. Advanced topics include traffic measurement and network security. Letter grading. Letter grading.","NC
OS
SP
SF"
217A. Internet Architecture and Protocols,"Lecture, four hours; outside study, eight hours. Enforced requisite: course 118. Focus on mastering existing core set of Internet protocols, including IP, core transport protocols, routing protocols, DNS, NTP, and security protocols such as DNSSEC, to understand principles behind design of these protocols, appreciate their design tradeoffs, and learn lessons from their operations. Letter grading.","NC
SP"
217B. Advanced Topics in Internet Research,"Lecture, four hours; outside study, eight hours. Enforced requisite: course 217A. Designed for graduate students. Overview of Internet development history and fundamental principles underlying TCP/IP protocol design. Discussion of current Internet research topics, including latest research results in routing protocols, transport protocols, network measurements, network security protocols, and clean-slate approach to network architecture design. Fundamental issues in network protocol design and implementations. Letter grading.","NC
AR
SP"
218. Advanced Computer Networks,"Lecture, four hours; discussion, two hours; outside study, six hours. Requisites: courses 112, 118. Review of seven-layer ISO-OSI model. High-speed networks: LANs, MANs, ATM. Flow and congestion control; bandwidth allocation. Internetting. Letter grading.","NC
PD
SF"
219. Current Topics in Computer System Modeling Analysis,"Lecture, eight hours; outside study, four hours. Review of current literature in area of computer system modeling analysis in which instructor has developed special proficiency as consequence of research interests. Students report on selected topics. May be repeated for credit with consent of instructor. Letter grading.","AR
IAS
IM
IS
PL
SDF
SE
SP"
CM222. Algorithms in Bioinformatics,"(Same as Bioinformatics M222 and Chemistry CM260B.) Lecture, four hours; discussion, two hours. Requisites: course 32 or Program in Computing 10C with grade of C- or better, and one course from Biostatistics 100A, Civil Engineering 110, Electrical Engineering 131A, Mathematics 170A, or Statistics 100A. Course CM221 is not requisite to CM222. Designed for engineering students as well as students from biological sciences and medical school. Development and application of computational approaches to biological questions, with focus on formulating interdisciplinary problems as computational problems and then solving these problems using algorithmic techniques. Computational techniques include those from statistics and computer science. Concurrently scheduled with course CM122. Letter grading.","DS
IAS
NC
PL
SDF
SF
SF"
M226. Machine Learning in Bioinformatics,"(Same as Bioinformatics M226 and Human Genetics M226.) Lecture, four hours; outside study, eight hours. Enforced requisite: course 32 or Program in Computing 10C with grade of C- or better. Recommended: one course from Biostatistics 100A, 110A, Civil Engineering 110, Electrical Engineering 131A, Mathematics 170A, or Statistics 100A. Familiarity with probability, statistics, linear algebra, and algorithms expected. Designed for engineering students as well as students from biological sciences and medical school. Biology has become data-intensive science. Bottleneck in being able to make sense of biological processes has shifted from data generation to statistical models and inference algorithms that can analyze these datasets. Statistical machine learning provides important toolkit in this endeavor. Biological datasets offer new challenges to field of machine learning. Examination of statistical and computational aspects of machine learning techniques and their application to key biological questions. Letter grading.",IS
230. Software Engineering,"Lecture, four hours; discussion, two hours. Recommended preparation for undergraduate students: prior software engineering course. Required preparation for graduate students: undergraduate-level knowledge of data structures and object-oriented program languages. As software systems become increasingly large and complex, automated software engineering analysis and development tools play important role in various software engineering tasks, such as design, construction, evolution, and testing and debugging of software systems. Introduction to foundations, techniques, tools, and applications of automated software engineering technology. Development, extension, and evaluation of mini automated software engineering analysis tool and assessment of how tool fits into software development process. Introduction to current research topics in automated software engineering. S/U or letter grading.",SE
231. Types and Programming Languages,"Lecture, four hours; outside study, eight hours. Requisite: course 131. Introduction to static type systems and their usage in programming language design and software reliability. Operational semantics, simply-typed lambda calculus, type soundness proofs, types for mutable references, types for exceptions. Parametric polymorphism, let-bound polymorphism, polymorphic type inference. Types for objects, subtyping, combining parametric polymorphism and subtyping. Types for modules, parameterized modules. Formal specification and implementation of variety of type systems, as well as readings from recent research literature on modern applications of type systems. Letter grading.",PL
233A. Parallel Programming,"Lecture, four hours; outside study, eight hours. Requisites: courses 111, 131. Mutual exclusion and resource allocation in distributed systems; primitives for parallel computation: specification of parallelism, interprocess communication and synchronization, atomic actions, binary and multiway rendezvous; synchronous and asynchronous languages: CSP, Ada, Linda, Maisie, UC, and others; introduction to parallel program verification. Letter grading.","DS
AR"
233B. Verification of Concurrent Programs,"Lecture, four hours; outside study, eight hours. Requisite: course 233A. Formal techniques for verification of concurrent programs. Topics include safety, liveness, program and state assertion-based techniques, weakest precondition semantics, Hoare logic, temporal logic, UNITY, and axiomatic semantics for selected parallel languages. Letter grading.","SF
IM
PL
SDF
SP"
234. Computer-Aided Verification,"Lecture, four hours; outside study, eight hours. Requisite: course 181. Introduction to theory and practice of formal methods for design and analysis of concurrent and embedded systems, with focus on algorithmic techniques for checking logical properties of hardware and software systems. Topics include semantics of reactive systems, invariant verification, temporal logic model checking, theory of omega automata, state-space reduction techniques, compositional and hierarchical reasoning. Letter grading.","SF
PL"
235. Advanced Operating Systems,"Lecture, four hours. Preparation: C or C++ programming experience. Requisite: course 111. In-depth investigation of operating systems issues through guided construction of research operating system for PC machines and consideration of recent literature. Memory management and protection, interrupts and traps, processes, interprocess communication, preemptive multitasking, file systems. Virtualization, networking, profiling, research operating systems. Series of laboratory projects, including extra challenge work. Letter grading.",OS
236. Computer Security,"Lecture, four hours; outside study, eight hours. Requisites: courses 111, 118. Basic and research material on computer security. Topics include basic principles and goals of computer security, common security tools, use of cryptographic protocols for security, security tools (firewalls, virtual private networks, honeypots), virus and worm protection, security assurance and testing, design of secure programs, privacy, applying security principles to realistic problems, and new and emerging threats and security tools. Letter grading.",SP
C237A. Prototyping Programming Languages,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 131. How different programming language paradigms provide dramatically different ways of thinking about computation and offer trade-offs on many dimensions, such as modularity, extensibility, expressiveness, and safety. Concrete exploration of three major programming paradigms -- functional, object-oriented, and logic programming -- by prototyping implementations of languages in each. Analysis of prototypes to shed light on design and structural properties of each language and paradigm and to allow easy comparison against one another. Hands-on experience implementing new abstractions, both as stand-alone languages and as libraries in existing languages. Concurrently scheduled with course C137A. Letter grading.",PL
C237B. Programming Language Design,"Seminar, four hours; outside study, eight hours. Enforced requisite: course C237A. Study of various programming language designs, from computing history and research literature, that attempt to address problems of software systems that are bloated, buggy, and difficult to maintain and extend despite trend in computing toward ever higher levels of abstraction for programming. Hands-on experience designing, prototyping, and evaluating new languages, language abstractions, and/or programming environments. Concurrently scheduled with course C137B. Letter grading.","PL
SDF
SF"
239. Current Topics in Computer Science: Programming Languages and Systems,"Lecture, four hours; outside study, eight hours. Review of current literature in area of computer science programming languages and systems in which instructor has developed special proficiency as consequence of research interests. May be repeated for credit with topic change. Letter grading.",PL
240A. Databases and Knowledge Bases,"Lecture, four hours; outside study, eight hours. Requisite: course 143. Theoretical and technological foundation of Intelligent Database Systems, that merge database technology, knowledge-based systems, and advanced programming environments. Rule-based knowledge representation, spatio-temporal reasoning, and logic-based declarative querying/programming are salient features of this technology. Other topics include object-relational systems and data mining techniques. Letter grading.",IS
240B. Advanced Data and Knowledge Bases,"Lecture, four hours; outside study, eight hours. Requisites: courses 143, 240A. Logical models for data and knowledge representations. Rule-based languages and nonmonotonic reasoning. Temporal queries, spatial queries, and uncertainty in deductive databases and object relational databases (ORDBs). Abstract data types and user-defined column functions in ORDBs. Data mining algorithms. Semistructured information. Letter grading.",IM
241B. Pictorial and Multimedia Database Management,"Lecture, three and one half hours; discussion, 30 minutes; laboratory, one hour; outside study, seven hours. Requisite: course 143. Multimedia data: alphanumeric, long text, images/pictures, video, and voice. Multimedia information systems requirements. Data models. Searching and accessing databases and across Internet by alphanumeric, image, video, and audio content. Querying, visual languages, and communication. Database design and organization, logical and physical. Indexing methods. Internet multimedia streaming. Other topics at discretion of instructor. Letter grading.","AL
AR
HCI
IS
SDF"
244A. Distributed Database Systems,"Lecture, four hours; outside study, eight hours. File allocation, intelligent directory design, transaction management, deadlock, strong and weak concurrency control, commit protocols, semantic query answering, multidatabase systems, fault recovery techniques, network partitioning, examples, trade-offs, and design experiences. Letter grading.",IAS
246. Web Information Management,"Lecture, four hours; outside study, eight hours. Requisites: courses 112, 143, 180, 181. Designed for graduate students. Scale of Web data requires novel algorithms and principles for their management and retrieval. Study of Web characteristics and new management techniques needed to build computer systems suitable for Web environment. Topics include Web measuring techniques, large-scale data mining algorithms, efficient page refresh techniques, Web-search ranking algorithms, and query processing techniques on independent data sources. Letter grading.",IS
249. Current Topics in Data Structures,"Lecture, four hours; outside study, eight hours. Review of current literature in area of data structures in which instructor has developed special proficiency as consequence of research interests. Students report on selected topics. May be repeated for credit with consent of instructor. Letter grading.","AL
DS
NC
PL
SDF"
251A. Advanced Computer Architecture,"Lecture, four hours; outside study, eight hours. Requisite: course M151B. Recommended: course 111. Design and implementation of high-performance systems, advanced memory hierarchy techniques, static and dynamic pipelining, superscalar and VLIW processors, branch prediction, speculative execution, software support for instruction-level parallelism, simulation-based performance analysis and evaluation, state-of-art design examples, introduction to parallel architectures. Letter grading.","AR
DS
IAS
PD
SDF
SP"
251B. Parallel Computer Architectures,"Lecture, four hours; outside study, eight hours. Requisite: course M151B. Recommended: course 251A. SIMD and MIMD systems, symmetric multiprocessors, distributed-shared-memory systems, messages-passing systems, multicore chips, clusters, interconnection networks, host-network interfaces, switching element design, communication primitives, cache coherency, memory consistency models, synchronization primitives, state-of-art design examples. Letter grading.","AR
DS
NC
PD
PL
SE"
252A. Arithmetic Algorithms and Processors,"Lecture, four hours; outside study, eight hours. Requisite: course 251A. Number systems: conventional, redundant, signed-digit, and residue. Types of algorithms and implementations. Complexity measures. Fast algorithms and implementations for two-operand addition, multioperand addition, multiplication, division, and square root. Online arithmetic. Evaluation of transcendental functions. Floating-point arithmetic and numerical error control. Arithmetic error codes. Residue arithmetic. Examples of contemporary arithmetic ICs and processors. Letter grading.","AR
IAS
SDF
AL"
256A. Advanced Scalable Architectures,"Lecture, four hours; outside study, eight hours. Requisite: course M151B. Recommended: course 251A. State-of-art scalable multiprocessors. Interdependency among implementation technology, chip microarchitecture, and system architecture. High-performance building blocks, such as chip multiprocessors (CMPs). On-chip and off-chip communication. Mechanisms for exploiting parallelism at multiple levels. Current research areas. Examples of chips and systems. Letter grading.","AR
IAS
DS
NC
PL
SDF
SP"
M258A. Design of VLSI Circuits and Systems,"(Same as Electrical Engineering M216A.) Lecture, four hours; discussion, two hours; laboratory, four hours; outside study, two hours. Requisites: course M51A or Electrical Engineering M16, and Electrical Engineering 115A. Recommended: Electrical Engineering 115C. LSI/VLSI design and application in computer systems. Fundamental design techniques that can be used to implement complex integrated systems on chips. Letter grading.","AR
IAS
SDF"
M258A. Design of VLSI Circuits and Systems (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M216A.) Lecture, four hours; discussion, two hours; laboratory, four hours; outside study, two hours. Requisites: course M51A or Electrical and Computer Engineering M16, and Electrical and Computer Engineering 115A. Recommended: Electrical and Computer Engineering 115C. LSI/VLSI design and application in computer systems. Fundamental design techniques that can be used to implement complex integrated systems on chips. Letter grading.","SP
AL
AR
CN"
M258C. LSI in Computer System Design,"(Same as Electrical Engineering M216C.) Lecture, four hours; laboratory, four hours; outside study, four hours. Requisite: course M258A. LSI/VLSI design and application in computer systems. In-depth studies of VLSI architectures and VLSI design tools. Letter grading.","AR
DS
GV
IAS"
M258C. LSI in Computer System Design (Effective Winter 2018 ),"(Same as Electrical and Computer Engineering M216C.) Lecture, four hours; laboratory, four hours; outside study, four hours. Requisite: course M258A. LSI/VLSI design and application in computer systems. In-depth studies of VLSI architectures and VLSI design tools. Letter grading.","AR
SDF"
258F. Physical Design Automation of VLSI Systems,"Lecture, four hours; outside study, eight hours. Detailed study of various physical design automation problems of VLSI circuits, including logic partitioning, floorplanning, placement, global routing, channel and switchbox routing, planar routing and via minimization, compaction and performance-driven layout. Discussion of applications of number of important optimization techniques, such as network flows, Steiner trees, simulated annealing, and generic algorithms. Letter grading.",PD
258G. Logic Synthesis of Digital Systems,"Lecture, four hours; outside study, eight hours. Requisites: courses M51A, 180. Detailed study of various problems in logic-level synthesis of VLSI digital systems, including two-level Boolean network optimization; multilevel Boolean network optimization; technology mapping for standard cell designs and field-programmable gate-array (FPGA) designs; retiming for sequential circuits; and applications of binary decision diagrams (BDDS). Letter grading.","AR
PD"
258H. Analysis and Design of High-Speed VLSI Interconnects,"Lecture, four hours; outside study, eight hours. Requisites: courses M258A, 258F. Detailed study of various problems in analysis and design of high-speed VLSI interconnects at both integrated circuit (IC) and packing levels, including interconnect capacitance and resistance, lossless and lossy transmission lines, cross-talk and power distribution noise, delay models and power dissipation models, interconnect topology and geometry optimization, and clocking for high-speed systems. Letter grading.",AR
259. Current Topics in Computer Science: System Design/Architecture,"Lecture, four hours; outside study, eight hours. Review of current literature in area of computer science system design in which instructor has developed special proficiency as consequence of research interests. Students report on selected topics. May be repeated for credit with topic change. Letter grading.",SP
260. Machine Learning Algorithms,"Lecture, four hours; discussion, two hours; outside study, six hours. Recommended requisite: course 180. Problems of identifying patterns in data. Machine learning allows computers to learn potentially complex patterns from data and to make decisions based on these patterns. Introduction to fundamentals of this discipline to provide both conceptual grounding and practical experience with several learning algorithms. Techniques and examples used in areas such as healthcare, financial systems, commerce, and social networking. Letter grading.",IS
262A. Learning and Reasoning with Bayesian Networks,"Lecture, four hours; outside study, eight hours. Requisite: course 112 or Electrical Engineering 131A. Review of several formalisms for representing and managing uncertainty in reasoning systems; presentation of comprehensive description of Bayesian inference using belief networks representation. Letter grading.","IS
AL"
"M262C. Current Topics in Causal Modeling, Inference, and Reasoning","(Same as Statistics M241.) Lecture, four hours; outside study, eight hours. Requisite: one graduate probability or statistics course such as course 262A, Statistics 200B, or 202B. Review of Bayesian networks, causal Bayesian networks, and structural equations. Learning causal structures from data. Identifying causal effects. Covariate selection and instrumental variables in linear and nonparametric models. Simpson paradox and confounding control. Logic and algorithmization of counterfactuals. Probabilities of counterfactuals. Direct and indirect effects. Probabilities of causation. Identifying causes of events. Letter grading.","NC
PL"
262Z. Current Topics in Cognitive Systems,"Lecture, four hours; outside study, eight hours. Requisite: course 262A. Additional requisites for each offering announced in advance by department. Theory and implementation of systems that emulate or support human reasoning. Current literature and individual studies in artificial intelligence, knowledge-based systems, decision support systems, computational psychology, and heuristic programming theory. May be repeated for credit with topic change. Letter grading.",IS
263A. Language and Thought,"Lecture, four hours; outside study, eight hours. Requisite: course 130 or 131 or 161. Introduction to natural language processing (NLP), with emphasis on semantics. Presentation of process models for variety of tasks, including question answering, paraphrasing, machine translation, word-sense disambiguation, narrative and editorial comprehension. Examination of both symbolic and statistical approaches to language processing and acquisition. Letter grading.","CN
SDF
PL"
263C. Animats-Based Modeling,"Lecture, four hours; outside study, eight hours. Requisite: course 130 or 131 or 161. Animats are mobile/sensing animal-like software agents embedded in simulated dynamic environments. Emphasis on modeling: goal-oriented behavior via neurocontrollers, adaptation via reinforcement learning, evolutionary programming. Animat-based tasks include foraging, mate finding, predation, navigation, predator avoidance, cooperative nest construction, communication, and parenting. Letter grading.",IS
264A. Automated Reasoning: Theory and Applications,"Lecture, four hours; laboratory, four hours; outside study, four hours. Requisite: course 161. Introduction to theory and practice of automated reasoning using propositional and first-order logic. Topics include syntax and semantics of formal logic; algorithms for logical reasoning, including satisfiability and entailment; syntactic and semantic restrictions on knowledge bases; effect of these restrictions on expressiveness, compactness, and computational tractability; applications of automated reasoning to diagnosis, planning, design, formal verification, and reliability analysis. Letter grading.",IS
265A. Machine Learning,"Lecture, four hours; outside study, eight hours. Requisites: courses 263A, 264A. Introduction to machine learning. Learning by analogy, inductive learning, modeling creativity, learning by experience, role of episodic memory organization in learning. Examination of BACON, AM, Eurisko, HACKER, teachable production systems. Failure-driven learning. Letter grading.",IS
M266A. Statistical Modeling and Learning in Vision and Cognition,"(Same as Statistics M232A.) Lecture, three hours. Preparation: basic statistics, linear algebra (matrix analysis), computer vision. Computer vision and pattern recognition. Study of four types of statistical models for modeling visual patterns: descriptive, causal Markov, generative (hidden Markov), and discriminative. Comparison of principles and algorithms for these models; presentation of unifying picture. Introduction of minimax entropy and EM-type and stochastic algorithms for learning. S/U or letter grading.",SP
M266B. Statistical Computing and Inference in Vision and Cognition,"(Same as Statistics M232B.) Lecture, three hours. Preparation: basic statistics, linear algebra (matrix analysis), computer vision. Introduction to broad range of algorithms for statistical inference and learning that could be used in vision, pattern recognition, speech, bioinformatics, data mining. Topics include Markov chain Monte Carlo computing, sequential Monte Carlo methods, belief propagation, partial differential equations. S/U or letter grading.",IS
M268. Machine Perception,"(Formerly numbered 268.) (Same as Electrical Engineering M206.) Lecture, four hours; discussion, two hours; outside study, six hours. Designed for graduate students. Computational aspects of processing visual and other sensory information. Unified treatment of early vision in man and machine. Integration of symbolic and iconic representations in process of image segmentation. Computing multimodal sensory information by neural-net architectures. Letter grading.",SP
M268. Machine Perception (Effective Winter 2018 ),"(Formerly numbered 268.) (Same as Electrical and Computer Engineering M206.) Lecture, four hours; discussion, two hours; outside study, six hours. Designed for graduate students. Computational aspects of processing visual and other sensory information. Unified treatment of early vision in man and machine. Integration of symbolic and iconic representations in process of image segmentation. Computing multimodal sensory information by neural-net architectures. Letter grading.","CN
IAS
NC
SP"
268S. Seminar: Computational Neuroscience,"Seminar, two hours; outside study, four hours. Designed for students undertaking thesis research. Discussion of advanced topics and current research in computational neuroscience. Neural networks and connectionism as paradigm for parallel and concurrent computation in application to problems of perception, vision, multimodal sensory integration, and robotics. May be repeated for credit. S/U grading.",NC
269. Seminar: Current Topics in Artificial Intelligence,"Seminar, to be arranged. Review of current literature and research practicum in area of artificial intelligence in which instructor has developed special proficiency as consequence of research interests. Students report on selected topics. May be repeated for credit with topic change. Letter grading.",IS
C274C. Computer Animation,"Lecture, four hours; discussion, two hours; outside study, six hours. Enforced requisite: course 174A. Introduction to computer animation, including basic principles of character modeling, forward and inverse kinematics, forward and inverse dynamics, motion capture animation techniques, physics-based animation of particles and systems, and motor control. Concurrently scheduled with course C174C. Letter grading.","AL
AR
IAS
HCI"
275. Artificial Life for Computer Graphics and Vision,"Lecture, four hours; outside study, eight hours. Enforced requisite: course 174A. Recommended: course 161. Investigation of important role that concepts from artificial life, emerging discipline that spans computational and biological sciences, can play in construction of advanced computer graphics and vision models for virtual reality, animation, interactive games, active vision, visual sensor networks, medical image analysis, etc. Focus on comprehensive models that can realistically emulate variety of living things (plants and animals) from lower animals to humans. Exposure to effective computational modeling of natural phenomena of life and their incorporation into sophisticated, self-animating graphical entities. Specific topics include modeling plants using L-systems, biomechanical simulation and control, behavioral animation, reinforcement and neural-network learning of locomotion, cognitive modeling, artificial animals and humans, human facial animation, and artificial evolution. Letter grading.","GV
AR"
280A. Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Additional requisites for each offering announced in advance by department. Selections from design, analysis, optimization, and implementation of algorithms; computational complexity and general theory of algorithms; algorithms for particular application areas. Subtitles of some current sections: Principles of Design and Analysis (280A); Distributed Algorithms (280D); Graphs and Networks (280G). May be repeated for credit with consent of instructor and topic change. Letter grading.","AL
DS"
280AP. Algorithms: Approximation Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Background in discrete mathematics helpful. Theoretically sound techniques for dealing with NP-Hard problems. Inability to solve these problems efficiently means algorithmic techniques are based on approximation -- finding solution that is near to best possible in efficient running time. Coverage of approximation techniques for number of different problems, with algorithm design techniques that include primal-dual method, linear program rounding, greedy algorithms, and local search. Letter grading.","AL
DS
PL
SDF"
280CO. Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Additional requisites for each offering announced in advance by department. Selections from design, analysis, optimization, and implementation of algorithms; computational complexity and general theory of algorithms; algorithms for particular application areas. Subtitles of some current sections: Principles of Design and Analysis (280A); Distributed Algorithms (280D); Graphs and Networks (280G). May be repeated for credit with consent of instructor and topic change. Letter grading.","AL
DS"
280D. Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Additional requisites for each offering announced in advance by department. Selections from design, analysis, optimization, and implementation of algorithms; computational complexity and general theory of algorithms; algorithms for particular application areas. Subtitles of some current sections: Principles of Design and Analysis (280A); Distributed Algorithms (280D); Graphs and Networks (280G). May be repeated for credit with consent of instructor and topic change. Letter grading.","AL
DS"
280DA. Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Additional requisites for each offering announced in advance by department. Selections from design, analysis, optimization, and implementation of algorithms; computational complexity and general theory of algorithms; algorithms for particular application areas. Subtitles of some current sections: Principles of Design and Analysis (280A); Distributed Algorithms (280D); Graphs and Networks (280G). May be repeated for credit with consent of instructor and topic change. Letter grading.","AL
AR
CN
DS
GV
HCI
IAS
IM
IS
NC
OS
PBD
PD
PL
SDF
SE
SP"
280DP. Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Additional requisites for each offering announced in advance by department. Selections from design, analysis, optimization, and implementation of algorithms; computational complexity and general theory of algorithms; algorithms for particular application areas. Subtitles of some current sections: Principles of Design and Analysis (280A); Distributed Algorithms (280D); Graphs and Networks (280G). May be repeated for credit with consent of instructor and topic change. Letter grading.","AL
DS
GV"
280G. Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Additional requisites for each offering announced in advance by department. Selections from design, analysis, optimization, and implementation of algorithms; computational complexity and general theory of algorithms; algorithms for particular application areas. Subtitles of some current sections: Principles of Design and Analysis (280A); Distributed Algorithms (280D); Graphs and Networks (280G). May be repeated for credit with consent of instructor and topic change. Letter grading.","AL
AR
CN
DS
IAS
IM
PL
SDF
SP"
280P. Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Additional requisites for each offering announced in advance by department. Selections from design, analysis, optimization, and implementation of algorithms; computational complexity and general theory of algorithms; algorithms for particular application areas. Subtitles of some current sections: Principles of Design and Analysis (280A); Distributed Algorithms (280D); Graphs and Networks (280G). May be repeated for credit with consent of instructor and topic change. Letter grading.","AL
DS
IAS
NC"
281A. Computability and Complexity,"Lecture, four hours; outside study, eight hours. Requisite: course 181 or compatible background. Concepts fundamental to study of discrete information systems and theory of computing, with emphasis on regular sets of strings, Turing-recognizable (recursively enumerable) sets, closure properties, machine characterizations, nondeterminisms, decidability, unsolvable problems, ""easy"" and ""hard"" problems, PTIME/NPTIME. Letter grading.","DS
AL
SE"
M282A. Cryptography,"(Same as Mathematics M209A.) Lecture, four hours; outside study, eight hours. Introduction to theory of cryptography, stressing rigorous definitions and proofs of security. Topics include notions of hardness, one-way functions, hard-core bits, pseudorandom generators, pseudorandom functions and pseudorandom permutations, semantic security, public-key and private-key encryption, secret-sharing, message authentication, digital signatures, interactive proofs, zero-knowledge proofs, collision-resistant hash functions, commitment protocols, key-agreement, contract signing, and two-party secure computation with static security. Letter grading.",SP
M282B. Cryptographic Protocols,"(Same as Mathematics M209B.) Lecture, four hours; outside study, eight hours. Requisite: course M282A. Consideration of advanced cryptographic protocol design and analysis. Topics include noninteractive zero-knowledge proofs; zero-knowledge arguments; concurrent and non-black-box zero-knowledge; IP=PSPACE proof, stronger notions of security for public-key encryption, including chosen-ciphertext security; secure multiparty computation; dealing with dynamic adversary; nonmalleability and composability of secure protocols; software protection; threshold cryptography; identity-based cryptography; private information retrieval; protection against man-in-middle attacks; voting protocols; identification protocols; digital cash schemes; lower bounds on use of cryptographic primitives, software obfuscation. May be repeated for credit with topic change. Letter grading.",IS
M283A. Topics in Applied Number Theory,"(Same as Mathematics M208A.) Lecture, three hours. Basic number theory, including congruences and prime numbers. Cryptography: public-key and discrete log cryptosystems. Attacks on cryptosystems. Primality testing and factorization methods. Elliptic curve methods. Topics from coding theory: Hamming codes, cyclic codes, Gilbert/Varshamov bounds, Shannon theorem. S/U or letter grading.",SP
M283B. Topics in Applied Number Theory,"(Same as Mathematics M208B.) Lecture, three hours. Basic number theory, including congruences and prime numbers. Cryptography: public-key and discrete log cryptosystems. Attacks on cryptosystems. Primality testing and factorization methods. Elliptic curve methods. Topics from coding theory: Hamming codes, cyclic codes, Gilbert/Varshamov bounds, Shannon theorem. S/U or letter grading.","AR
IAS
GV
IAS
SDF
SP"
284A. Topics in Automata and Languages,"Lecture, four hours; outside study, eight hours. Requisite: course 181. Additional requisites for each offering announced in advance by department. Selections from families of formal languages, grammars, machines, operators; pushdown automata, context-free languages and their generalizations, parsing; multidimensional grammars, developmental systems; machine-based complexity. Subtitles of some current and planned sections: Context-Free Languages (284A), Parsing Algorithms (284P). May be repeated for credit with consent of instructor and topic change. Letter grading.","PL
SDF"
284C. Topics in Automata and Languages,"Lecture, four hours; outside study, eight hours. Requisite: course 181. Additional requisites for each offering announced in advance by department. Selections from families of formal languages, grammars, machines, operators; pushdown automata, context-free languages and their generalizations, parsing; multidimensional grammars, developmental systems; machine-based complexity. Subtitles of some current and planned sections: Context-Free Languages (284A), Parsing Algorithms (284P). May be repeated for credit with consent of instructor and topic change. Letter grading.","PL
AL
SF"
284P. Topics in Automata and Languages,"Lecture, four hours; outside study, eight hours. Requisite: course 181. Additional requisites for each offering announced in advance by department. Selections from families of formal languages, grammars, machines, operators; pushdown automata, context-free languages and their generalizations, parsing; multidimensional grammars, developmental systems; machine-based complexity. Subtitles of some current and planned sections: Context-Free Languages (284A), Parsing Algorithms (284P). May be repeated for credit with consent of instructor and topic change. Letter grading.","PL
SDF"
288S. Seminar: Theoretical Computer Science,"Seminar, two hours; outside study, six hours. Requisites: courses 280A, 281A. Intended for students undertaking thesis research. Discussion of advanced topics and current research in such areas as algorithms and complexity models for parallel and concurrent computation, and formal language and automata theory. May be repeated for credit. S/U grading.","AL
AR
IAS
PL
SDF
SP"
289A. Current Topics in Computer Theory,"Lecture, four hours; outside study, eight hours. Review of current literature in area of computer theory in which instructor has developed special proficiency as consequence of research interests. Students report on selected topics. Letter grading.","AL
AR
IAS
IS
SF
CN"
289CO. Current Topics in Computer Theory: Complexity Theory,"Lecture, four hours; outside study, eight hours. Diagonalization, polynomial-time hierarchy, PCP theorem, randomness and de-randomization, circuit complexity, attempts and limitations to proving P does not equal NP, average-case complexity, one-way functions, hardness amplification. Problem sets and presentation of previous and original research related to course topics. Letter grading.","AL
AR
CN
DS
GV
HCI
IAS
IM
IS
OS
PL
SDF
SF
SP"
289L. Current Topics in Computer Theory,"Lecture, four hours; outside study, eight hours. Review of current literature in area of computer theory in which instructor has developed special proficiency as consequence of research interests. Students report on selected topics. Letter grading.","AL
AR
CN
GV
HCI
PL
SE"
289OA. Current Topics in Computer Theory: Online Algorithms,"Lecture, four hours; outside study, eight hours. Requisite: course 180. Introduction to decision making under uncertainty and competitive analysis. Review of current research in online algorithms for problems arising in many areas, such as data and memory management, searching and navigating in unknown terrains, and server systems. Letter grading.","AL
AR
IAS
DS"
289P. Current Topics in Computer Theory,"Lecture, four hours; outside study, eight hours. Review of current literature in area of computer theory in which instructor has developed special proficiency as consequence of research interests. Students report on selected topics. Letter grading.",IS
289RA. Current Topics in Computer Theory: Randomized Algorithms,"Lecture, four hours; outside study, eight hours. Basic concepts and design techniques for randomized algorithms, such as probability theory, Markov chains, random walks, and probabilistic method. Applications to randomized algorithms in data structures, graph theory, computational geometry, number theory, and parallel and distributed systems. Letter grading.","AL
DS
GV
PD
PL
SDF
SP"
289SG. Current Topics in Computer Theory,"Lecture, four hours; outside study, eight hours. Review of current literature in area of computer theory in which instructor has developed special proficiency as consequence of research interests. Students report on selected topics. Letter grading.",SP
298. Research Seminar: Computer Science,"Lecture, two to four hours; outside study, four to eight hours. Designed for graduate computer science students. Discussion of advanced topics and current research in algorithmic processes that describe and transform information: theory, analysis, design, efficiency, implementation, and application. May be repeated for credit. S/U grading.","AL
AR
CN
DS
HCI
IM
NC
PL
SE"
497D. Field Projects in Computer Science,"Fieldwork, to be arranged. Students are divided into teams led by instructor; each team is assigned one external company or organization that they investigate as candidate for possible computerization, submitting team report of their findings and recommendations. In Progress grading (credit to be given only on completion of course 497E).",IS
497E. Field Projects in Computer Science,"Fieldwork, to be arranged. Students are divided into teams led by instructor; each team is assigned one external company or organization that they investigate as candidate for possible computerization, submitting team report of their findings and recommendations. S/U or letter grading.",IS
Introduction to Computer  Science: Principles of Information and Computation, Co-requisite: Math 104 or 150   This course  is an introduction to the basic principles and great ideas of computer science  intended for non-engineering students. It covers some of the essential topics  of contemporary computer science from a mathematical perspective. No  programming experience necessary. Open to all non-SEAS students. SEAS students  my not take for credit toward engineering degree. Semesters Offered:  TBA | May not be counted in the Engineering category.,"PL
SDF
SP"
 Computational Data Exploration," The primary goal of this course is to introduce computational methods of interacting with data. In this course, students will be introduced to the IPython programming environment. They will learn how to gather data and store it in appropriate data structures. They will then write their own programs, building on existing libraries to analyze the data and display the salient information it contains.Data will be drawn from a variety of domains, including but not limited to travel, entertainment, politics, economics, biology etc.This course cannot count for engineering credit. Engineering school students can use it as a free elective. Students who have already taken CIS110 or 120 should not take this course. Offered Fall 2017 Course Website","AL
AR
CN
IAS
NC
PL
SDF
SP"
" Introduction to Computer Programming (with Java, for  Beginners)","Introduction  to Computer Programming is the first course in our series introducing students  to computer science. In this class you will learn the fundamentals of computer  programming in Java, with emphasis on applications in science and engineering.  You will also learn about the broader field of computer science and algorithmic  thinking, the fundamental approach that computer scientists take to solving  problems.","AL
AR
SF
SP"
Programming Languages and  Techniques I ,"Prerequisite(s): Some previous programming  experience    A fast-paced  introduction to the fundamental concepts of programming and software  design.&nbsp; This course assumes some  previous programming experience, at the level of a high school computer science  class or CIS110. &nbsp;(If you got at least 4  in the AP Computer Science A or AB exam, you will do great.)&nbsp; No specific programming language background  is assumed: basic experience with any language (for instance Java, C, C++, VB,  Python, Perl, or Scheme) is fine.&nbsp; If you  have never programmed before, you should take CIS 110 first.","AL
AR
HCI
PL
SDF
SE"
Programming Languages and Techniques II," Prerequisite(s):  CIS 120, CIS 160          This is a  course about Algorithms and Data Structures using the JAVA programming  language. We introduce the basic concepts about complexity of an algorithm and  methods on how to compute the running time of algorithms. Then, we describe  data structures like stacks, queues, maps, trees, and graphs, and we construct  efficient algorithms based on these representations. The course builds upon  existing implementations of basic data structures in JAVA and extends them for  the structures like trees, studying the performance of operations on such  structures, and their efficiency when used in real-world applications. A large  project introducing students to the challenges of software engineering  concludes the course.","SDF
PL
AL
DS
SE"
Technology and Policy,Have you  ever wondered why sharing music and video generates such political and legal  controversies?&nbsp; Is information on your PC  safe and should law enforcement be able to access information you enter on the  Web?&nbsp; Will new devices allow tracking of  your every move and every purchase?,"IAS
SP"
Mathematical Foundations of Computer Science,"What are the  basic mathematical concepts and techniques needed in computer science? This  course provides an introduction to proof principles and logics, functions and  relations, induction principles, combinatorics and graph theory, as well as a  rigorous grounding in writing and reading mathematical proofs.","DS
AL
SDF
CN"
C++ Programming  ," Prerequisite(s):  CIS 240     This course  will provide an introduction to programming in C++ and is intended for students  who already have some exposure to programming in another language such as Java.  C++ provides the programmer with a greater level of control over machine  resources and are commonly used in situations where low level access or  performance are important. This course will illuminate the issues associated  with programming at this level and will cover issues such as explicit memory  management, pointers, the compilation process and debugging. The course will  involve several programming projects which will provide students with the  experience they need to program effectively in these languages. This course  assumes programming experience equivalent to CIS 110, CIS 120 or ESE 112 as a  prerequisite.","AL
AR
DS
PL
SDF
SP"
 - Using and Understanding Unix and Linux ,"Prerequisite(s):  CIS 110 or equivalent      Unix, in its  many forms, runs much of the world's computer infrastructure, from cable modems  and cell phones to the giant clusters that power Google and Amazon. This  half-credit course provides a thorough introduction to Unix and Linux. Topics  will range from critical basic skills such as examining and editing files,  compiling programs and writing shell scripts, to higher level topics such as  the architecture of Unix and its programming model.&nbsp; The material learned is applicable to many  classes, including CIS 240, CIS 331, CIS 341, CIS 371/372, and CIS 380.","AL
AR
GV
IAS
IM
SDF
SP"
Python Programming ," Prerequisite(s):  CIS 120 or ESE 112     Python is an  elegant, concise, and powerful language that is useful for tasks large and  small. Python has quickly become a popular language for getting things done  efficiently in many in all domains: scripting, systems programming, research  tools, and web development. This course will provide an introduction to this  modern high-level language using hands-on experience through programming  assignments and a collaborative final application development project. ","PL
SP"
C#Programming  ,"Prerequisite(s): CIS 110        C# is the  premier programming language for the .NET framework.&nbsp; Over the last decade, the language has  evolved to meet the needs of a variety of programming styles while supporting  the ever-growing capabilities of the .NET runtime and libraries.&nbsp; This course provides a thorough introduction  to the C# language and the .NET framework, building on the skills gained in the  introductory programming courses (CIS 110, CIS 120, or ESE 112).&nbsp; In addition to providing the student with a  solid background in C#, this course also explores topics that the .NET platform  exposes such as object-oriented design, .NET runtime internals, and others  based on class interest.&nbsp; A series of  short, weekly homework assignments reinforces the concepts introduced in class  and a group-based final project of the students' design allows them to apply  their C# knowledge toward a substantial problem. ",PL
 Haskell Programming ," Haskell is a  high-level, purely functional programming language with a strong static type  system and elegant mathematical underpinnings. It is being increasingly used in  industry by organizations such as Facebook, AT&amp;T, and NASA, along with  several financial firms. We will explore the joys of functional programming,  using Haskell as a vehicle. The aim of the course will be to allow you to use  Haskell to easily and conveniently write practical programs. All are welcome,  including those with no programming experience. Evaluation will be based on  regular homework assignments and class participation.","PL
DS"
Mobile App Development," Prerequisite(s): CIS 120 or a similar level of programming     This project-oriented course is centered around application development on current mobile platforms like iOS and Android. Section 201 (iOS) will be taught in Swift, and cover iOS fundamentals such as app lifecycles, storyboarding, delegation, networking and usage of both native and external libraries. Section 202 (Android) will be taught in Java with XML and will cover Android fundamentals such as layout, app lifecycles and different APIs.   ","AR
PL
SDF
SE"
 Ruby on Rails Web Development,"Prerequisite(s): CIS 120   This course  will teach the fundamentals of developing web applications using Ruby on Rails,  a rapid-development web framework developed by 37signals. The topics covered  will start with Ruby, the language that powers Rails, and include all topics  required to develop and deploy production-ready web applications with Rails.  During the entire course, students will be working on a project of their own  choosing which will develop as they learn additional concepts. Upon completion  of the course this application will be deployed and accessible to the public.  Students will be encouraged to continue building their applications even after  the course given support from the Philadelphia Ruby community.",SP
 JavaScript,"  This course  provides an introduction to modern web development frameworks, techniques, and  practices used to deliver robust client side applications on the web. The  emphasis will be on developing JavaScript programs that run in the browser.  Topics covered include the JavaScript language, web browser internals, the  Document Object Model (DOM), HTML5, client-side app architecture and  compile-to-JS languages like (Coffeescript, TypeScript, etc.). This course is  most useful for students who have some programming and web development  experience and want to develop moderate JavaScript skills to be able to build  complex, interactive applications in the browser.",HCI
Introduction to Computer Architecture,"Prerequisite(s): CIS 110 or equivalent  experience   You know how  to program, but do you know how computers really work? How do millions of  transistors come together to form a complete computing system? This bottom-up  course begins with transistors and simple computer hardware structures,  continues with low-level programming using primitive machine instructions, and  finishes with an introduction to the C programming language. This course is a  broad introduction to all aspects of computer systems architecture and serves  as the foundation for subsequent computer systems courses, such as Digital  Systems Organization and Design (CIS 371), Computer Operating Systems (CIS 380),  and Compilers and Interpreters (CIS 341).",AR
"Discrete Probability, Stochastic Processes, and Statistical  Inference  ","Prerequisite(s): CIS 160    The purpose  of this course is to provide a 1 CU educational experience which tightly  integrates the theory and applications of discrete probability, discrete  stochastic processes, and discrete statistical inference in the study of  computer science. The intended  audience for this class is both those students who are CS majors as well as  those intending to be CS majors. Specifically, it will be assumed that the  students will know: Set Theory, Mathematical Induction, Number Theory,  Functions, Equivalence Relations, Partial-Order Relations, Combinatorics, and  Graph Theory at the level currently covered in CIS 160. This course could be  taken immediately following CIS 160. Computation and Programming will play an  essential role in this course. The students will be expected to use the Maple  programming environment in homework exercises which will include: numerical and  symbolic computations, simulations, and graphical displays.","DS
AL
AR"
"Automata, Computability, and  Complexity "," Prerequisite(s): CIS 160      This course  explores questions fundamental to computer science such as which problems  cannot be solved by computers, can we formalize computing as a mathematical  concept without relying upon the specifics of programming languages and  computing platforms, and which problems can be solved efficiently. The topics  include finite automata and regular languages, context-free grammars and  pushdown automata, Turing machines and undecidability, tractability and  NP-completeness. The course emphasizes rigorous mathematical reasoning as well  as connections to practical computing problems such as text processing,  parsing, XML query languages, and program verification.","AL
DS
NC
PL
SDF"
 Introduction to Algorithms ," Prerequisite(s): CIS 120,121,160,262    How do you optimally encode a text file? How do you find shortest paths in a map? How do you design a communication network? How do you route data in a network? What are the limits of efficient computation? This course gives a comprehensive introduction to design and analysis of algorithms, and answers along the way to these and many other interesting computational questions. You will learn about problem-solving; advanced data structures such as universal hashing and red-black trees; advanced design and analysis techniques such as dynamic programming and amortized analysis; graph algorithms such as minimum spanning trees and network flows; NP-completeness theory; and approximation algorithms.","AL
AR
DS
GV
PD
PL
SDF
SP"
Design Principles of Information Systems ," Prerequisite(s):CIS 121 and CIS 160     Introduction  to database management systems and principles of design. The  Entity-Relationship model as a modeling tool. The relational model: formal  languages, the industry standard SQL, relational design theory, query  optimization. Storing and querying XML data. Recursive queries. Views and data  integration. Overview of system level issues: physical data organization,  indexing techniques, and transactions. Connecting databases to the Web. Course  work requires programming in several different query languages, several written  homeworks and a team project.","AL
DS"
 Intro to Networks and Security,"Prerequisites: CIS 160, CIS 240   This course introduces principles and practices of computer and network security.  We will cover basic concepts, threat models, and the security mindset; an introduction to cryptography and cryptographic protocols including encryption, authentication, message authentication codes, hash functions, public-key cryptography, and secure channels; an introduction to networks and network security including IP, TCP, routing, network protocols, web architecture, attacks, firewalls, and intrusion detection systems; an introduction to software security including defensive programming, memory protection, buffer overflows, and malware; and discuss broader issues and case studies such as privacy, security and the law, digital rights management, denial of service, and ethics.",SF
Advanced Topics in Algorithms ," Prerequisite(s): CIS 320    Can you  check if two large documents are identical by examining a small number of bits?  Can you verify that a program has correctly computed a function without ever  computing the function? Can students compute the average score on an exam  without ever revealing their scores to each other? Can you be convinced of the  correctness of an assertion without ever seeing the proof? The answer to all  these questions is in the affirmative provided we allow the use of  randomization. Over the past few decades, randomization has emerged as a  powerful resource in algorithm design. This course would focus on powerful  general techniques for designing randomized algorithms as well as specific  representative applications in various domains, including approximation  algorithms,&nbsp; cryptography and number  theory, data structure design, online algorithms, and parallel and distributed  computation.","AL
PL
SDF"
 Compilers and Interpreters," Prerequisite(s): CIS121 and CIS240  You know how  to program, but do you know how to implement a programming language? In CIS341  you'll learn how to build a compiler. Topics covered include: lexical analysis,  grammars and parsing, intermediate representations, syntax-directed translation,  code generation, type checking, simple dataflow and control-flow analyses, and  optimizations. Along the way, we study objects and inheritance, first-class  functions (closures), data representation and runtime-support issues such as  garbage collection. This is a challenging, implementation-oriented course in  which students build a full compiler from a simple, typed object-oriented  language to fully operational x86 assembly. The course projects are implemented  using OCaml, but no knowledge of OCaml is assumed.",PL
Software Design/Engineering ,"Prerequisite(s): CIS 121   You know how  to write a &quot;program&quot;. But how do you create a software  &quot;product&quot; as part of a team, with customers that have expectations of  functionality and quality? This course introduces students to various tools  (source control, automated build systems, programming environments, test  automation, etc.) and processes (design, implementation, testing, and  maintenance) that are used by professionals in the field of software  engineering. Topics will include: software development lifecycle; agile and  test-driven development; source control and continuous integration;  requirements analysis; object-oriented design and testability; Android  application development; software testing; refactoring; and software quality  metrics.",SE
 User Interfaces and the Web  ," Prerequisite(s):  CIS 110, CIS 120, CIS 121, CIS 277   This course  will teach the fundamentals of Human-Computer Interaction (theory, design,  implementation, experimentation, evaluation) in the context of current web  interaction mechanisms, technologies, and applications. The course content will  emphasize and leverage open source technologies to design, prototype,  implement, and test user-interfaces and functionality in the context of today's  most intriguing web trend, social networking.",HCI
Computer Organization and Design,"Prerequisite(s): CIS 240   This is the  second computer organization course and focuses on computer hardware design.  Topics covered are: (1) basic digital system design including finite state  machines, (2) instruction set design and simple RISC assembly programming, (3)  quantitative evaluation of computer performance, (4) circuits for integer and floating-point  arithmetic, (5) datapath and control, (6) micro-programming, (7) pipelining,  (8) storage hierarchy and virtual memory, (9) input/output, (10) different  forms of parallelism including instruction level parallelism, data-level  parallelism using both vectors and message-passing multi-processors, and  thread-level parallelism using shared memory multiprocessors. Basic cache  coherence and synchronization.","AR
DS
GV
IAS
IM
PD
SDF
SE
SP"
Computer  Operating Systems ,Prerequisite(s): CIS 240 or EE 300  This course  surveys methods and algorithms used in modern operating systems. Concurrent  distributed operation is emphasized. The main topics covered are as follows:  process synchronization; interprocess communications; concurrent/distributed  programming languages; resource allocation and deadlock; virtual memory;  protection and security; distributed operation; distributed data; performance  evaluation.,"OS
NC"
Robotics: Planning and Perception,"CIS 121 and MATH 240  or equivalent  This  introductory course will present basic principles of robotics with  an emphasis&nbsp; to computer science aspects.  Algorithms for planning and  perception will be studied and implemented on actual robots. While planning  is a fundamental problem in artificial intelligence and decision  making, robot planning refers to finding a path from A to B in  the presence of obstacles and by complying with the kinematic constraints  of the robot. Perception involves the estimation of the robot&rsquo;s  motion and path as well as the shape of the environment from sensors.  In this course, algorithms will be implemented in Python on mobile  platforms on ground and in the air. No prior experience with Python  is needed but we require knowledge of data structures, linear algebra,  and basic probability.",SF
Quantum Computer and Information Science ,"Prerequisite(s): Physics 151, Math 240, Math 312/314, CIS 160, and CIS 262  The purpose  of this course is to introduce undergraduate students in computer science and  engineering to quantum computers (QC) and quantum information science (QIS).  This course is meant primarily for juniors and seniors in CIS. No prior  knowledge of quantum mechanics (QM) is assumed.","NC
IAS"
 Artificial Intelligence,"Prerequisite(s): CIS 121. ESE 301 or STAT 430 recommended. This course investigates algorithms to implement resource-limited knowledge-based agents which sense and act in the world. Topics include, search, machine learning, probabilistic reasoning, natural language processing, knowledge representation and logic. After a brief introduction to the language, programming assignments will be in Python.",IS
Intro to Human Language Technology ," Prerequisite(s):  CIS 121    This course  is an automatic summarization that can help alleviate the information overload  problem caused by the unprecedented amount of online textual information. The  building of a summarization system requires good understanding of the  properties of human language and the use of various natural language tools. In  this course we will build several summarization systems of increasing  complexity and sophistication. In the process we will learn about various  natural language processing tools and resources such as part of speech tagging,  chunking, parsing, Wordnet, and machine learning toolkits. We will also cover  probability and statistics concepts used in summarization, but also applicable  to a wide range of other language-related tasks.","AL
AR
IAS
PL
SDF"
 Embedded Software for Life-Critical Applications ," The goal of  this course is to give students greater design and implementation experience in  embedded software development and to teach them how to model, design, verify,  and validate safety critical systemsin a  principled manner. Students will learn the principles, methods, and techniques  for building life-critical embedded systems, ranging from requirements and  models to design, analysis, optimization, implementation, and validation.  Topics will include modeling and analysis methods and tools, real-time  programming paradigms and languages, distributed real-time systems, global  time, time-triggered communications, assurance case, software architecture,  evidence-based certification, testing, verification, and validation. The course  will include a series of projects that implements life-critical embedded  systems (e.g., pacemaker, infusion pumps, closed-loop medical devices).","SDF
SP
AR"
 Database and Information Systems ,"  Prerequisite:  The course assumes mathematical and programming experience equivalent to CIS160 and CIS121. This course provides an introduction to the broad field of database and information systems, covering a variety of topicsrelating to structured data, ranging from data modeling to logical foundationsand popular languages, to system implementations. Wewill study the theory ofrelational and XML data design; the basics of query languages; efficientstorage of data, execution of queries and query optimization; transactions andupdates; web-database development; and &quot;big data&quot; and NoSQL systems.","IM
DS
SDF"
Internet and Web Systems ,"Prerequisite(s):  Familiarity with threads and concurrency; strong Java programming skills. This course  focuses on the challenges encountered in building Internet and web systems:  scalability, interoperability (of data and code), security and fault tolerance,  consistency models, and location of resources, services, and data. We will  examine how XML standards enable information exchange; how web services support  cross-platform interoperability (and what their limitations are); how to build  high-performance application servers; how &quot;cloud computing&quot; services  work; how to perform Akamai-like content distribution; and how to provide  transaction support in distributed environments. We will study techniques for  locating machines, resources, and data (including directory systems, information  retrieval indexing, ranking, and web search); and we will investigate how  different architectures support scalability (and the issues they face). We will  also examine ideas that have been proposed for tomorrow's Web, and we will see  some of the challenges, research directions, and potential pitfalls. An  important goal of the course is not simply to discuss issues and solutions, but  to provide hands-on experience with a substantial implementation project. This  semester's project will be a peer-to-peer implementation of a Google-style  search engine, including distributed, scalable crawling; indexing with ranking;  and even PageRank. As a side-effect of the material of this course, you will  learn about some aspects of large-scale software development: assimilating  large APIs, thinking about modularity, reading other people's code, managing  versions, debugging, etc.","DS
IS
NC
PL
SE
SP"
Interactive Computer Graphics ,"  Prerequisites: CIS 120. CIS 120 and CIS 240 are useful pre- or co-requisitesThis course focuses on programming the essential mathematical and geometric concepts underlying modern computer graphics. Using 3D interactive implementations, it covers fundamental topics such as mesh data structures, transformation sequences, rendering algorithms, and curve interpolation for animation. Students are also introduced to two programming languages widely used in the computer graphics industry: C++ and GLSL. The curriculum is heavily project-based, and culminates in a group project focused on building an interactive first-person world exploration application using the various real-time interaction and rendering algorithms learned throughout the semester. ",GV
Advanced Computer Graphics," Prerequisites:  A working knowledge of C++ programming is&nbsp; required (one year programming experience in general). Knowledge of vector geometry is useful.This course is designed to provide a comprehensive&nbsp; overview to computer graphics techniques in 3D modeling, image synthesis, and rendering. Topics&nbsp;&nbsp; cover: geometric transformations, geometric algorithms, software systems, 3D object models (surface, volume and implicit), visible surface algorithms, image synthesis, shading, mapping, ray tracing, radiosity, global illumination, sampling, anti-aliasing, Monte Carlo path tracing, and photonmapping. Prerequisites: A working knowledge of C++ programming isrequired (one year programming experience in general). Knowledge of vector geometry is useful.",AR
 Mathematical Methods/Techniques for Linguistics and Natural  Language Processing ," Prerequisite(s): Phil  006 or instructor's permission. Cross-listed with Ling 477.  Basic  concepts of set theory, relations and functions, properties of relations. Basic  concepts of algebra. Grammars, languages, and automata, finite state grammars,  regular expressions, context-free and context-sensitive grammars, mildly  context-sensitive grammars, unrestricted grammars, finite automata, pushdown  automata and other related automata, Turing machines. Syntax and semantics of  grammar formalisms. Strong generative capacity of grammars, Grammars as  deductive systems, parsing as deduction. Relevance of formal grammars to  modeling biological sequences. The course will deal with these topics in a very  basic and introductory manner--ideas of proofs and not detailed proofs, and  more importantly with plenty of linguistic examples to bring out the linguistic  relevance of these topics.","PL
AL
AR
SDF
NC
PD"
 Real-Time and Embedded Systems," Prerequisite(s): CIS 380, some network  programming experience is desirable           The course  will cover a variety of existing systems and technologies, e.g., real-time  kernels, virtual machines, architectural description language, formal method  tools, synchronous and logical-time programming paradigms, and certification  methods.&nbsp; The course requires active  student participation in-group projects.&nbsp;  Each group will be responsible for the design and implementation of a  life-critical embedded system such as a pacemaker. The group projects are  intended to complement the learning of principles and concepts through the  application of theory in practice and the development of experimental skills in  building embedded applications. The course  will cover a variety of existing systems and technologies, e.g., real-time  kernels, virtual machines, architectural description language, formal method  tools, synchronous and logical-time programming paradigms, and certification  methods.&nbsp; The course requires active  student participation in-group projects.&nbsp;  Each group will be responsible for the design and implementation of a  life-critical embedded system such as a pacemaker. The group projects are  intended to complement the learning of principles and concepts through the  application of theory in practice and the development of experimental skills in  building embedded applications.",IM
Logic In  Computer Science ," Pre-requisite(s): CIS  160 .Logic has  been called the calculus of computer science as it plays a fundamental role in  computer science, similar to that played by calculus in the physical sciences  and traditional engineering disciplines. Indeed, logic is useful in areas of  computer science as disparate as architecture (logic gates), software  engineering (specification and verification), programming languages (semantics,  logic programming), databases (relational algebra and SQL), artificial  intelligence (automatic theorem proving), algorithms (complexity and  expressiveness), and theory of computation (general notions of computability).  CIS 482 provides the students with a thorough introduction to mathematical  logic, covering in depth the topics of syntax, semantics, decision procedures,  formal proof systems, and soundness and completeness for both propositional and  first-order logic. The material is taught from a computer science perspective,  with an emphasis on algorithms, computational complexity, and tools. Projects  will focus on problems in circuit design, specification and analysis of  protocols, and query evaluation in databases.","AL
DS
GV
IAS
PL
SDF
SP"
 Networked Life,"Networked  Life looks at how our world is connected -- socially, economically,  strategically and technologically -- and why it matters.","NC
AR"
Algorithms in Nature ,"Computer systems and biological processes often rely on networks of interacting entities to reach joint decisions, coordinate and respond to inputs. There are many similarities in the goals and strategies of biological and computational systems which suggest that each can learn from the other. These include the distributed nature of the networks (in biology molecules, cells, or organisms often operate without central control), the ability to successfully handle failures and attacks on a subset of the nodes, modularity and the ability to reuse certain components or sub-networks in multiple applications and the use of stochasticity in biology and randomized algorithms in computer science. In this course we will start by discussing classic biologically motivated algorithms including neural networks (inspired by the brain), genetic algorithms (sequence evolution), non-negative matrix factorization (signal processing in the brain), and search optimization (ant colony formation). We will then continue to discuss more recent bi-directional studies that have relied on biological processes to solve routing and synchronization problems, discover Maximal Independent Sets (MIS), and design robust and fault tolerant networks. In the second part of the class students will read and present new research in this area. Students will also work in groups on a final project in which they develop and test a new biologically inspired algorithm.  No prior biological knowledge required.","AL
DS"
Algorithms for Computational Structural Biology ,"Some of the most interesting and difficult challenges in computational biology and bioinformatics arise from the determination, manipulation, or exploitation of molecular structures. This course will survey these challenges and present a variety of computational methods for addressing them. Topics will include:  molecular dynamics simulations, computer-aided drug design, and computer-aided protein design. The course is appropriate for both students with backgrounds in computer science and those in the life sciences.","AL
DS
IS"
Automation of Biological Research: Robotics and Machine Learning ,"Biology is increasingly becoming a 'big data' science, as biomedical research has been revolutionized by automated methods for generating large amounts of data on diverse biological processes. Integration of data from many types of experiments is required to construct detailed, predictive models of cell, tissue or organism behaviors, and the complexity of the systems suggests that these models need to be constructed automatically. This requires iterative cycles of acquisition, analysis, modeling, and experimental design, since it is not feasible to do all possible biological experiments. This course will cover a range of automated biological research methods and a range of computational methods for automating the acquisition and interpretation of the data (especially active learning, proactive learning, compressed sensing and model structure learning). Grading will be based on class participation, homeworks, and a final project. The course is designed for graduate and upper-level undergraduate students with a wide variety of backgrounds. The course is intended to be self-contained but students may need to do some additional work to gain fluency in core concepts. Students should have a basic knowledge of biology, statistics, and programming. Experience with Machine Learning is useful but not mandatory.","AL
IAS
IS
NC
SDF"
String Algorithms ,"Provides an in-depth look at modern algorithms used to process string data, particularly those relevant to genomics. The course will cover the design and analysis of efficient algorithms for processing enormous collections of strings. Topics will include string search; inexact matching; string compression; string data structures such as suffix trees, suffix arrays, and searchable compressed indices; and the Burrows-Wheeler transform. Applications of these techniques in biology will be presented, including genome assembly, transcript assembly, whole-genome alignment, gene expression quantification, read mapping, and search of large sequence databases. No knowledge of biology is assumed, and the topics covered will be of use in other fields involving large collections of strings. Programming proficiency is required.",SDF
Algorithms and Advanced Data Structures ,"The objective of this course is to study algorithms for general computational problems, with a focus on the principles used to design those algorithms. Efficient data structures will be discussed to support these algorithmic concepts. Topics include: Run time analysis, divide-and-conquer algorithms, dynamic programming algorithms, network flow algorithms, linear and integer programming, large-scale search algorithms and heuristics, efficient data storage and query, and NP-completeness. Although this course may have a few programming assignments, it is primarily not a programming course. Instead, it will focus on the design and analysis of algorithms for general classes of problems. This course is not open to CS graduate students who should consider taking 15-651 instead.  02-250 is a suggested prerequisite for undergraduates.","AL
AR
GV
NC
PL
SDF
SP"
String Algorithms ,"Provides an in-depth look at modern algorithms used to process string data, particularly those relevant to genomics. The course will cover the design and analysis of efficient algorithms for processing enormous collections of strings. Topics will include string search; inexact matching; string compression; string data structures such as suffix trees, suffix arrays, and searchable compressed indices; and the Borrows-Wheeler transform. Applications of these techniques in biology will be presented, including genome assembly, transcript assembly, whole-genome alignment, gene expression quantification, read mapping, and search of large sequence databases. No knowledge of biology is assumed, and the topics covered will be of use in other fields involving large collections of strings. Programming proficiency is required.","AL
DS
PL
SDF"
Algorithms in Nature ,"Computer systems and biological processes often rely on networks of interacting entities to reach joint decisions, coordinate and respond to inputs. There are many similarities in the goals and strategies of biological and computational systems which suggest that each can learn from the other. These include the distributed nature of the networks (in biology molecules, cells, or organisms often operate without central control), the ability to successfully handle failures and attacks on a subset of the nodes, modularity and the ability to reuse certain components or sub-networks in multiple applications and the use of stochasticity in biology and randomized algorithms in computer science. In this course we will start by discussing classic biologically motivated algorithms including neural networks (inspired by the brain), genetic algorithms (sequence evolution), non-negative matrix factorization (signal processing in the brain), and search optimization (ant colony formation). We will then continue to discuss more recent bi-directional studies that have relied on biological processes to solve routing and synchronization problems, discover Maximal Independent Sets (MIS), and design robust and fault tolerant networks. In the second part of the class students will read and present new research in this area. Students will also work in groups on a final project in which they develop and test a new biologically inspired algorithm.  See also: www.algorithmsinnature.org no prior biological knowledge required.","AL
DS
NC
SDF"
Bioimage Informatics ,"The goals of this course are to provide students with the following: the ability to use mathematical techniques such as linear algebra. Fourier theory and sampling in more advanced signal processing settings; fundamentals of multiresolution and wavelet techniques; and in-depth coverage of some bioimaging applications such as compression and denoising. Upon successful completion of this course, the student will be able to: explain the importance and use of signal representations in building more sophisticated signal processing tools, such as wavelets; think in basic time-frequency terms; describe how Fourier theory fits in a bigger picture of signal representations; use basic multirate building blocks, such as a two-channel filter bank; characterize the discrete wavelet transform and its variations; construct a time-frequency decomposition to fit a given signal; explain how these tools are used in various applications; and apply these concepts to solve a practical bioimaging problem through an independent project. Pre-requisite: 18-791, or permission of instructor. (Also known as 18-799) 02-250 is a suggested pre-requisite.",SDF
Automation of Biological Research: Robotics and Machine Learning ,"Biology is increasingly becoming a 'big data' science, as biomedical research has been revolutionized by automated methods for generating large amounts of data on diverse biological processes. Integration of data from many types of experiments is required to construct detailed, predictive models of cell, tissue or organism behaviors, and the complexity of the systems suggests that these models need to be constructed automatically. This requires iterative cycles of acquisition, analysis, modeling, and experimental design, since it is not feasible to do all possible biological experiments. This course will cover a range of automated biological research methods and a range of computational methods for automating the acquisition and interpretation of the data (especially active learning, proactive learning, compressed sensing and model structure learning). Grading will be based on class participation, homeworks, and a final project. The course is designed for graduate and upper-level undergraduate students with a wide variety of backgrounds. The course is intended to be self-contained but students may need to do some additional work to gain fluency in core concepts. Students should have a basic knowledge of biology, statistics, and programming.",NC
Computer Science Co-Op ,"This course is meant for CS undergraduate students with a full-time internship that encompasses a summer and a contiguous semester, either Spring-Summer or Summer-Fall who wish to have this recorded on their academic transcript. Units posted for this course do not count toward any requirement for the CS undergraduate degree including free elective units. This course is not available to international students; consult with the Office for International Education for more information.",IS
Computer Science Practicum ,"This course is for Computer Science students who wish to have an  internship experience as part of their curriculum. Students are required  to write a one-page summary statement prior to registration that  explains how their internship connects with their CS curriculum,  specifically on how it uses material they have learned as well as  prepares them for future courses. Near the end of the internship,  students will be required to submit a reflection paper that describes  the work they did in more detail, including lessons learned about the  work experience and how they utilized their CS education to work  effectively. International students should consult with the Office of  International Education for appropriate paperwork and additional  requirements before registration. Units earned count toward the total  required units necessary for degree completion; students should speak  with an academic advisor for details. This course may be taken at most 3  times for a total of 9 units maximum. Students normally register for  this course for use during the summer semester.",SP
Introduction to Computing for Creative Practice ,"[IDeATe portal course] An introduction to fundamental computing principles and programming techniques for creative cultural practices, with special consideration to applications in music, design and the visual arts. Intended for students with little to no prior programming experience, the course develops skills and understanding of text-based programming in a procedural style, including idioms of sequencing, selection, iteration, and recursion. Topics include data organization (arrays, files, trees), interfaces and abstraction (modular software design, using sensor data and software libraries), basic algorithms (searching and sorting), and computational principles (randomness, concurrency, complexity). Intended for students following an IDEATE concentration or minor who have not taken 15-112.","AR
GV
IAS
HCI
IM
SDF
SP"
Principles of Computing ,"A course in fundamental computing principles for students with minimal or no  computing background. Programming constructs: sequencing, selection,  iteration, and recursion. Data organization: arrays and lists. Use of  abstraction in computing: data representation, computer organization,  computer networks, functional decomposition, and application programming  interfaces. Use of computational principles in problem-solving: divide and conquer, randomness, and concurrency. Classification of computational problems  based on complexity, non-computable functions, and using heuristics to  find reasonable solutions to complex problems. Social, ethical and legal  issues associated with the development of new computational artifacts will  also be discussed.",PL
Fundamentals of Programming and Computer Science ,"A technical introduction to the fundamentals of programming with an emphasis  on producing clear, robust, and reasonably efficient code using top-down  design, informal analysis, and effective testing and debugging. Starting  from first principles, we will cover a large subset of the Python  programming language, including its standard libraries and programming  paradigms.  We will also target numerous deployment scenarios, including  standalone programs, shell scripts, and web-based applications.  This course assumes no prior programming experience. Even so, it is a  fast-paced and rigorous preparation for 15-122.  Students seeking a more  gentle introduction to computer science should consider first taking 15-110.    NOTE: students must achieve a C or better in order to use   this course to satisfy the pre-requisite for any subsequent Computer   Science course.","PL
AR
SE"
Introduction to Data Structures ,"A continuation of the process of program design and analysis for  students with some prior programming experience (functions, loops, and  arrays, not necessarily in Java). The course reinforces object-oriented  programming techniques in Java and covers data aggregates, data  structures (e.g., linked lists, stacks, queues, trees, and graphs), and  an introduction to the analysis of algorithms that operate on those data  structures.","AL
AR
IAS
PL
SE"
Principles of Imperative Computation ,"For students with a basic understanding of programming (variables, expressions, loops, arrays, functions). Teaches imperative programming and methods for ensuring the correctness of programs.  Students will learn the process and concepts needed to go from high-level descriptions of algorithms to correct imperative implementations, with specific application to basic data structures and algorithms.  Much of the course will be conducted in a subset of C amenable to verification, with a transition to full C near the end. This course prepares students for 15-213 and 15-210.  NOTE: students must achieve a C or better in order to use  this course to satisfy the pre-requisite for any subsequent Computer  Science course.","SDF
PL
AL
DS
OS
SP
SF"
Great Practical Ideas for Computer Scientists ,"THIS COURSE IS OPEN TO CS FRESHMAN ONLY. Throughout your education as a Computer Scientist at Carnegie Mellon, you will take courses on programming, theoretical ideas, logic, systems, etc. As you progress, you will be expected to pick up the so-called 'tools of the trade.' This course is intended to help you learn what you need to know in a friendly, low-stress, high-support way. We will discuss UNIX, LaTeX, debugging and many other essential tools. Laptop required. (Laptops will be available for those without their own laptops.)","SDF
PL
SP"
Principles of Functional Programming ,"An introduction to programming based on a 'functional' model of computation.  The functional model is a natural generalization of algebra in which programs are formulas that describe the output of a computation in terms of its inputs&#8212;-that is, as a function.  But instead of being confined to real- or complex-valued functions, the functional model extends the algebraic view to a very rich class of data types, including not only aggregates built up from other types, but also functions themselves as values.  This course is an introduction to programming that is focused on the central concepts of function and type.  One major theme is the interplay between inductive types, which are built up incrementally; recursive functions, which compute over inductive types by decomposition; and proof by structural induction, which is used to prove the correctness and time complexity of a recursive function.  Another major theme is the role of types in structuring large programs into separate modules, and the integration of imperative programming through the introduction of data types whose values may be altered during computation.    NOTE: students must achieve a C or better in order to use   this course to satisfy the pre-requisite for any subsequent Computer   Science course.",PL
Mathematical Foundations for Computer Science ,"*CS majors only* This course is offered to incoming Computer Science freshmen and focuses on the fundamental concepts in Mathematics that are of particular interest to Computer Science such as logic, sets,induction, functions, and combinatorics. These topics are used as a context in which students learn to formalize arguments using the methods of mathematical proof.  This course uses experimentation and collaboration as ways to gain better understanding of the material.  Open to CS freshmen only. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.","AL
AR
DS"
Special Topics: Discovering Logic ,"This course is ONLY offered at Carnegie Mellon in Qatar.  This course has the purpose of introducing first-year Computer Science students to elements of formal logic as well as to the historical context in which this discipline developed. As all subsequent courses in the CS curriculum rely on students having mastered basic logical notions and skills, it will test and enhance your preparation, thereby putting you in a better position to succeed in the program. It will also help you understand and appreciate how CS came about since Computer Science grew out of logic. The specific knowledge and skills you will learn in is course include: an enhanced ability to research topics, give presentations and write technical prose, some elementary logic, some historical depth into Computer Science, mathematics and logic itself. This course is open to Computer Science freshmen only.","AL
PL"
Parallel and Sequential Data Structures and Algorithms ,"Teaches students about how to design, analyze, and program algorithms and data structures.  The course emphasizes parallel algorithms and analysis, and how sequential algorithms can be considered a special case.  The course goes into more theoretical content on algorithm analysis than 15-122 and 15-150 while still including a significant programming component and covering a variety of practical applications such as problems in data analysis, graphics, text processing, and the computational sciences.  NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer  Science course.","SDF
SF
AL
DS
SE
GV
IAS
IS
PL
SDF
SE
SP"
Introduction to Computer Systems ,"This course provides a programmer's view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation. NOTE FOR GRADUATE STUDENTS: This course is not open to graduate students beginning Spring 2015. Graduate students must register for 15-513 instead.","PD
PL
AR
OS"
"Principles of Software Construction: Objects, Design, and Concurrency ","Software engineers today are less likely to design data structures and algorithms from scratch and more likely to build systems from library and framework components. In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, program structures, and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object oriented programming, (3) static and dynamic analysis for programs, and (4) concurrent and distributed software. Student assignments involve engagement with complex software such as distributed massively multi-player game systems and frameworks for graphical user interaction.",IM
Special Topic: Cross-Platform Mobile Web Apps ,"An introduction to writing cross-platform mobile web apps.  Using a tool chain based on HTML5, CSS3, JavaScript, and a variety of supporting frameworks, we will write apps that are effectively designed both for desktop and mobile browsers, and which can be converted into native apps for Android, iOS, and Windows Phone 7 devices.  Additional topics will include designing user interfaces for mobile devices, accessing mobile device API's (such as accelerometer, GPS, compass, or camera), and power management issues.  While this course focuses on browser-side technologies, we will briefly explore JavaScript-based server-side technologies (though students should consider 15-437 for extensive treatment of server-side topics).  Note that we will not be writing native apps in Objective-C for iOS nor in Java for Android, though we may include some brief exposure to these technologies near the end of the course.",SF
Great Ideas in Theoretical Computer Science ,"This course is about how to use theoretical ideas to formulate and solve problems in computer science. It integrates mathematical material with general problem solving techniques and computer science applications. Examples are drawn from algorithms, complexity theory, game theory, probability theory, graph theory, automata theory, algebra, cryptography, and combinatorics. Assignments involve both mathematical proofs and programming.  NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.","AL
AR
DS
PL
SDF"
Research and Innovation in Computer Science ,"This Fall course is the first part of a two-course sequence that is designed to help prepare students to invent the future state-of-the-art in the field of computer science. Course topics will include the following: an overview of important things to know about how research and innovation works in the field of computer science; a survey of the current cutting- edge of computer science research, both here at Carnegie Mellon and elsewhere; critical thinking skills when reading research publications that disagree with each other; strategies for coping with open-ended problems; and technical communication skills for computer scientists. Students will also match up with a faculty mentor for a potential Technology Innovation Project (to be performed in the Spring), put together a detailed plan of attack for that project, and start to get up to speed (including background reading, etc.). This course can be used to satisfy the Technical Communications requirement for the CS major.",IAS
Foundations of Programming Languages ,"This course discusses in depth many of the concepts underlying the design, definition, implementation, and use of modern programming languages. Formal approaches to defining the syntax and semantics are used to describe the fundamental concepts underlying programming languages. A variety of programming paradigms are covered such as imperative, functional, logic, and concurrent programming. In addition to the formal studies, experience with programming in the languages is used to illustrate how different design goals can lead to radically different languages and models of computation.",PL
Foundations of Software Engineering ,"Students gain exposure to the fundamentals of modern software  engineering.  This includes both core CS technical knowledge and  the means by which this knowledge can be applied in the practical  engineering of complex software.  Topics related to software  artifacts include design models, patterns, coding, static and  dynamic analysis, testing and inspection, measurement, and  software architecture and frameworks.  Topics related to software  process include modeling, requirements engineering, process models  and evaluation, team development, and supply chain issues  including outsourcing and open source.  This course has a strong  technical focus, and will include both written and programming  assignments.  Students will get experience with modern software  engineering tools.",SE
Programming Language Semantics ,"This course is designed for advanced undergraduates with interests in  the mathematical and logical foundations of programming languages. The  course introduces the foundational concepts and fundamental techniques  of the most prominent and successful approaches to programming language  semantics that have been developed. Broadly speaking, semantics is  concerned with the provision of mathematical meanings to programs, at an  appropriate level of abstraction, to allow formalization of program  behavior and facilitate proofs of correctness. Our aim is to demonstrate  the utility of a scientific approach to programming and languages. We  focus on the most important and most general frameworks for semantic  description: denotational and operational semantics. These frameworks  are widely applicable and offer complementary approaches to language  definition, with various advantages. We also discuss formal  specifications, and logics of program correctness. We make extensive use  of mathematical and structural induction, and computational induction.  We use semantics to describe program behavior, guide the development of  correct programs, specify and prove the correctness of a compiler,  validate program logics, and derive laws of program equivalence. We  discuss imperative and functional languages, sequential and parallel,  high-level and low-level, as time permits.",PL
Software Foundations of Security and Privacy ,"Security and privacy issues in computer systems continue to be a pervasive issue in technology and society. Understanding the security and privacy needs of software, and being able to rigorously demonstrate that those needs are met, is key to eliminating vulnerabilities that cause these issues. Students who take this course will learn the principles needed to make these assurances about software, and some of the key strategies used to make sure that they are correctly implemented in practice. Topics include: policy models and mechanisms for confidentiality, integrity, and availability, language-based techniques for detecting and preventing security threats, mechanisms for enforcing privacy guarantees, and the interaction between software and underlying systems that can give rise to practical security threats. Students will also gain experience applying many of these techniques to write code that is secure by construction.",SF
Constructive Logic ,"This multidisciplinary junior-level course is designed to provide a thorough introduction to modern constructive logic, its roots in philosophy, its numerous applications in computer science, and its mathematical properties. Some of the topics to be covered are intuitionistic logic, inductive definitions, functional programming, type theory, realizability, connections between classical and constructive logic, decidable classes.","PL
SDF"
Cloud Computing ,"This course gives students an overview of Cloud Computing, which is the delivery of computing as a service over a network, whereby distributed resources are rented, rather than owned, by an end user as a utility. Students will study its enabling technologies, building blocks, and gain hands-on experience through projects utilizing public cloud infrastructures.  Cloud computing services are widely adopted by many organizations across domains.  The course will introduce the cloud and cover the topics of data centers, software stack, virtualization, software defined networks and storage, cloud storage, and programming models. We will start by discussing the clouds motivating factors, benefits, challenges, service models, SLAs and security. We will describe several concepts behind data center design and management, which enable the economic and technological benefits of the cloud paradigm. Next, we will study how CPU, memory and I/O resources, network (SDN) and storage (SDS) are virtualized, and the key role of virtualization to enable the cloud. Subsequently, students will study cloud storage concepts like data distribution, durability, consistency and redundancy. We will discuss distributed file systems, NoSQL databases and object storage using HDFS, CephFS, HBASE, MongoDB, Cassandra, DynamoDB, S3, and Swift as case studies. Finally, students will study the MapReduce, Spark and GraphLab programming models. Students will work with Amazon Web Services and Microsoft Azure, to rent and provision compute resources and then program and deploy applications using these resources. Students will develop and evaluate scaling and load balancing solutions, work with cloud storage systems, and develop applications in several programming paradigms. 15619 students must complete an extra team project which entails designing and implementing a cost- and performance-sensitive web-service for querying big data.",SP
Introduction to Computer Music ,"Computers are used to synthesize sound, process signals, and  compose music. Personal computers have replaced studios full of sound  recording and processing equipment, completing a revolution that began with  recording and electronics. In this course, students will learn the  fundamentals of digital audio, basic sound synthesis algorithms, and  techniques for digital audio effects and processing. Students will apply  their knowledge in programming assignments using a very high-level  programming language for sound synthesis and composition. In a final  project, students will demonstrate their mastery of tools and techniques  through music composition or by the implementation of a significant  sound-processing technique.",SP
Computer Music Systems and Information Processing ,"This course presents concepts and techniques for representing and manipulating discrete music information, both in real time and off line. Representations of music as explicitly timed event sequences will be introduced, and students will learn how to build efficient run-time systems for event scheduling, tempo control, and interactive processing. The MIDI protocol is used to capture real-time performance information and to generate sound. The course will also cover non-real-time processing of music data, including Markov models, style recognition, computer accompaniment, query-by-humming, and algorithmic composition. This course is independent of, and complementary to 15-322, Introduction to Computer Music, which focuses on sound synthesis and signal processing.","AL
AR
CN
HCI
IAS
IM
PL
SDF"
Special Topic: Perspectives in Computer Architecture ,"This course is ONLY offered at Carnegie Mellon in Qatar.  This course will provide various perspectives in the field of computer architecture by world renowned scientists. The course will bring together basic architecture principles and designs of uniprocessor and multicore computers. First, we introduce the Von-Neuman architecture and the major hardware components of a modern computer. Students will learn how to describe an architecture design using a Hardware Description Language such as Verilog. Second, we will learn basic architectural techniques including instruction level parallelism, pipelining and cache memory. An overview of multicore architectures, specifically on how they differ from uniprocessor ones, the promises they offer, and the serious challenges they bring, will be provided. We will also discuss cache organization techniques in multicores. Students will gain insight into the designing principles that dominated past processor architectures and how they will continue to change for future processor design targeting emerging technologies such as mobile and wearable computing. The concepts delivered in the lectures will be reinforced and extended through student presentations on multiple directions in computer architecture.",AR
Embedded Systems ,"This course is offered only at Carnegie Mellon's campus in Qatar.  This course covers the broad range of foundational skills that apply across all embedded computer system application areas, from thermostats to self-driving vehicles. The emphasis is at the layer where hardware meets software. Topics include microcontroller hardware, assembly language, embedded C programming, analog I/O, timers, code optimization, interrupts, and concurrency. Real world engineering practices, constraints, and example applications are integrated throughout the course. Weekly hands-on hardware and software experiences with an industry-strength automotive embedded controller are coordinated with the lecture content to reinforce core skills.","CN
PD
SE"
Introduction to Computer and Network Security ,"This course is ONLY offered at Carnegie Mellon in Qatar.    This course is meant to offer Computer Science undergraduate students in  their junior or senior year a broad overview of the field of computer  security. Students will learn the basic concepts in computer security  including software vulnerability analysis and defense, networking and  wireless security, applied cryptography, as well as ethical, legal,  social and economic facets of security. Students will also learn the  fundamental methodology for how to design and analyze security critical  systems.",SP
Algorithms and Advanced Data Structures ,"The objective of this course is to study algorithms for general computational problems, with a focus on the principles used to design those algorithms. Efficient data structures will be discussed to support these algorithmic concepts. Topics include: Run time analysis, divide-and-conquer algorithms, dynamic programming algorithms, network flow algorithms, linear and integer programming, large-scale search algorithms and heuristics, efficient data storage and query, and NP-completeness. Although this course may have a few programming assignments, it is primarily not a programming course. Instead, it will focus on the design and analysis of algorithms for general classes of problems. This course is not open to CS graduate students who should consider taking 15-651 instead. THIS COURSE IS NOT OPEN TO COMPUTER SCIENCE MAJORS OR MINORS.","AL
AR
DS
NC
PL
SDF
SE"
Computational Discrete Mathematics ,"This course is about the computational aspects of some of the standard  concepts of discrete mathematics (relations, functions, logic, graphs,  algebra, automata), with emphasis on efficient algorithms.  We begin  with a brief introduction to computability and computational complexity. Other topics include: iteration, orbits and fixed points, order and equivalence relations, propositional logic and satisfiability testing, finite fields and shift register sequences, finite state machines, and cellular automata.    Computational support for some of the material is available in the form of a Mathematica package.","DS
PL"
Modern Computer Algebra ,"The goal of this course is to investigate the relationship between algebra  and computation. The course is designed to expose students to algorithms  used for symbolic computation, as well as to the concepts from modern  algebra which are applied to the development of these algorithms. This  course provides a hands-on introduction to many of the most important ideas  used in symbolic mathematical computation, which involves solving system of  polynomial equations (via Groebner bases), analytic integration, and solving  linear difference equations. Throughout the course the computer algebra system Mathematica will be used for computation.","AR
DS"
Probability and Computing ,"Probability theory has become indispensable in computer science.  In  areas such as artificial intelligence and computer science theory,  probabilistic methods and ideas based on randomization are central.  In other areas such as networks and systems, probability is becoming  an increasingly useful framework for handling uncertainty and modeling  the patterns of data that occur in complex systems.  This course gives  an introduction to probability as it is used in computer science  theory and practice, drawing on applications and current research  developments as motivation and context. Topics include combinatorial  probability and random graphs, heavy tail distributions, concentration  inequalities, various randomized algorithms, sampling random variables  and computer simulation, and Markov chains and their many  applications, from Web search engines to models of network protocols.  The course will assume familiarity with 3-D calculus and linear  algebra.","AL
AR
IAS
PL
SDF"
Experimental Animation ,"[IDeATe course] This class will explore animation from the student's perspective with a sense of investigation toward both form and content. Topics in the class will include non-linear narrative, visual music, puppet and non-traditional materials, manipulation of motion and performance capture data, immersive environments.","AL
DS
IAS
HCI
SP"
Special Topics: Perceptual Computing ,"This course is ONLY offered at Carnegie Mellon in Qatar.  What can today's computers see, hear, and feel?  This project-based course is designed to provide students exposure to the state-of-the-art in machine perception and the algorithms behind them.  Student groups will design a perceptual computing project around Intel's Creative Camera or Microsoft's Kinect. Students will learn to use tools in face detection and recognition, hand and finger tracking, and speech recognition, along with algorithms to make decisions based on these input modalities.",HCI
Artificial Intelligence: Representation and Problem Solving ,"This course is about the theory and practice of Artificial Intelligence. We will study modern techniques for computers to represent task-relevant information and make intelligent (i.e. satisficing or optimal) decisions towards the achievement of goals. The search and problem solving methods are applicable throughout a large range of industrial, civil, medical, financial, robotic, and information systems.  We will investigate questions about AI systems such as: how to represent knowledge, how to effectively generate appropriate sequences of actions and how to search among alternatives to find optimal or near-optimal solutions.  We will also explore how to deal with uncertainty in the world, how to learn from experience, and how to learn decision rules from data.  We expect that by the end of the course students will have a thorough understanding of the algorithmic foundations of AI, how probability and AI are closely interrelated, and how automated agents learn.  We also expect students to acquire a strong appreciation of the big-picture aspects of developing fully autonomous intelligent agents.  Other lectures will introduce additional aspects of AI, including natural language processing, web-based search engines, industrial applications, autonomous robotics, and economic/game-theoretic decision making.",IS
Introduction to Text Processing ,"Text processing is a mini-course about text basic techniques of processing human language in text format.  The course has theoretical and hands-on components. In the theoretical component, the course will discuss challenges in processing human languages, and review the  basics of statistics and probability theory and their application to language problems.  In the hands-on part, students will learn about Python programming and use it to process large volumes of text using various  techniques. The processing will range from simple steps such as tokenization and part-of-speech tagging to full-fledged  applications such as  statistical machine translation,  search and document/topic classification.  The course is suited for junior and senior students in CS and IS.","AL
DS
IAS
IM
IS"
Introduction to Computer Vision ,"An introduction to the science and engineering of computer vision,  i.e.  the analysis of the patterns in visual images with the view to  understanding the objects and processes in the world that generate  them.  Major topics include image formation and sensing, fourier  analysis, edge and contour detection, inference of depth, shape and  motion, classification, recognition, tracking, and active vision. The  emphasis is on the learning of fundamental mathematical concepts and  techniques and applying them to solve real vision problems. The  discussion will also include comparison with human and animal vision  from psychological and biological perspectives. Students will learn to  think mathematically and develop skills in translating ideas and  mathematical thoughts into programs to solve real vision problems.",CN
Neural Computation ,"Computational neuroscience is an interdisciplinary science that seeks to understand how the brain computes  to achieve  natural intelligence.  It seeks to understand the computational principles and mechanisms of intelligent behaviors and mental abilities &#8212; such as perception, language, motor control, and learning &#8212; by building artificial systems and computational models with the same capabilities. This course explores how neurons encode and process information, adapt and learn, communicate, cooperate, compete and compute at the individual level as well as at the levels of networks and systems. It will introduce basic concepts in computational modeling, information theory, signal processing, system analysis, statistical and probabilistic inference. Concrete examples will be drawn from the visual system and the motor systems,  and studied from computational, psychological and biological perspectives. Students will learn to perform computational experiments using Matlab and quantitative studies of neurons and neuronal networks.","NC
GV
PL
SDF"
Practical Data Science ,"Data science is the study and practice of how we can extract insight and knowledge from large amounts of data. This course provides a practical introduction to the 'full stack' of data science analysis, including data collection and processing, data visualization and presentation, statistical model building using machine learning, and big data techniques for scaling these methods. Topics covered include: collecting and processing data using relational methods, time series approaches, graph and network models, free text analysis, and spatial geographic methods; analyzing the data using a variety of statistical and machine learning methods include linear and non-linear regression and classification, unsupervised learning and anomaly detection, plus advanced machine learning methods like kernel approaches, boosting, or deep learning; visualizing and presenting data, particularly focusing the case of high-dimensional data; and applying these methods to big data settings, where multiple machines and distributed computation are needed to fully leverage the data.Students will complete weekly programming homework that emphasize practical understanding of the methods described in the course. In addition, students will develop a tutorial on an advanced topic, and will complete a group project that applies these data science techniques to a practical application chosen by the team; these two longer assignments will be done in lieu of a midterm or final.",DS
Entrepreneurship for Computer Science ,"This course is designed to develop skills related to entrepreneurship and innovation for non-business undergraduate and graduate students in the School of Computer Science.  The course assumes no background courses in business and is appropriate for those who are interested in bringing innovations to market either through new companies or existing companies.   The course provides an overview of entrepreneurship and innovation, develops an entrepreneurial frame of mind, and provides a framework for learning the rudiments of how to generate ideas.  Students come up with or are presented with potential ideas and learn how to develop these ideas into opportunities, and to explore their potential for becoming viable businesses.  They learn how to do market research, to develop go-to-market strategies, value propositions and to differentiate their products or services from potential competitors.  The focus is on understanding and developing strategies for approaching the key elements of the entrepreneurial process...opportunity, resources and team. The course consists of a balance of lectures, case studies and encounters with entrepreneurs, investors and business professionals.  The students are exposed to financial and intellectual property issues, and encounter a real world perspective on entrepreneurship, innovation and leadership.  The output of the course is a mini-business plan or venture opportunity screening document that can be developed into a business plan in a subsequent course entitled New Venture Creation or through independent study.",SP
Special Topic: Secure Programming ,"This course provides a detailed explanation of common programming errors  in C and C++ and describes how these errors can lead to software systems  that are vulnerable to exploitation. The course concentrates on security  issues intrinsic to the C and C++ programming languages and associated  libraries. It does not emphasize security issues involving interactions  with external systems such as databases and web servers, as these are  rich topics on their own. Topics to be covered include the secure and  insecure use of integers, arrays, strings, dynamic memory, formatted  input/output functions, and file I/O.",SP
Research Practicum in Computer Science ,"This Spring course is the second part of a two-course sequence that is designed to help prepare students to invent the future state-of-the-art in the field of computer science.  Building directly upon 15-300 (the prerequisite for this course), students will conduct a semester-long independent research project, under the guidance of both the course staff and a faculty project mentor.  The course does not meet for lecture or recitations.  Instead, the students will spend their time working on their research projects, and will also meet with course staff on a bi-weekly basis to discuss their progress.  Students will prepare a written report and a poster presentation at the end of the semester to describe what they have accomplished.",SP
Engineering Distributed Systems ,"This is a course for students with strong design and implementation skills who are likely to pursue careers as software architects and lead engineers.  It may be taken by well-prepared undergraduates with excellent design and implementation skills in low-level systems programing.  The course assumes a high level of proficiency in all aspects of operating system design and implementation.  This course will help students prepare for leadership roles in creating and evolving the complex, large-scale computer systems that society will increasingly depend on in the future.  The course will teach the organizing principles of such systems, identifying a core set of versatile techniques that are applicable across many system layers. Students will acquire the knowledge base, intellectual tools, hands-on skills and modes of thought needed to build well-engineered computer systems that withstand the test of time, growth in scale, and stresses of live use.   Topics covered include: caching, prefetching, damage containment, scale reduction, hints, replication, hash-based techniques, and fragmentation reduction.  A substantial project component is an integral part of the course.  A high level of proficiency in systems programming is expected. If you do not have the 15-410 prerequisite you will need to get approval from the faculty.",SP
Operating System Design and Implementation ,"Operating System Design and Implementation is a rigorous hands-on introduction to the principles and practice of operating systems. The core experience is writing a small Unix-inspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware simulator (and on actual PC hardware if you wish).  Work is done in two-person teams, and 'team programming' skills (source control, modularity, documentation) are emphasized.  The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock; the course also surveys higher-level OS topics including file systems, interprocess communication, networking, and security.  Students, especially graduate students, who have not satisfied the prerequisite at Carnegie Mellon are strongly cautioned - to enter the class you must be able to write a storage allocator in C, use a debugger, understand 2's-complement arithmetic, and translate between C and x86 assembly language.  The instructor may require you to complete a skills assessment exercise before the first week of the semester in order to remain registered in the class.  Auditing:  this course is usually full, and we generally receive many more requests to audit than we can accept.  If you wish to audit, please have your advisor contact us before the semester begins to discuss your educational goals.",OS
Compiler Design ,"This course covers the design and implementation of compiler and run-time systems for high-level languages, and examines the interaction between language design, compiler design, and run-time organization. Topics covered include syntactic and lexical analysis, handling of user-defined types and type-checking, context analysis, code generation and optimization, and memory management and run-time organization.","PL
AR
SP
SDF
AL"
Operating System Practicum ,"The goal of this class is for students to acquire hands-on experience with operating-system code as it is developed and deployed in the real world.  Groups of two to four students will select, build, install, and become familiar with an open-source operating system project; propose a significant extension or upgrade to that project; and develop a production-quality implementation meeting the coding standards of that project.  Unless infeasible, the results will be submitted to the project for inclusion in the code base.  Variations on this theme are possible at the discretion of the instructor.  For example, it may be possible to work within the context of a non-operating-system software infrastructure project (window system, web server, or embedded network device kernel) or to extend a 15-410 student kernel.  In some situations students may work alone.  Group membership and unit count (9 units versus 12) will be decided by the third week of the semester.  Contributing to a real-world project will involve engaging in some mixture of messy, potentially open-ended activities such as: learning a revision control system, writing a short design document, creating and updating a simple project plan, participating in an informal code review, synthesizing scattered information about hardware and software, classifying and/or reading large amounts of code written by various people over a long period of time, etc.",OS
Software Engineering Practicum ,"This course is a project-based course in which students conduct a semester-long project for a real client in small teams. The project defines real world needs for the client in their company. This is not a lecture-based course; after the first few weeks the course consists primarily of weekly team meetings with the course instructors, with teams making regular presentations on their software development process. Teams will give presentations and deliver documents on topics such as:          risk management          project planning          requirements          architecture          detailed design          quality assurance          final product presentations          reflections on the experience  Evaluation will be based on the in-class presentations, process and project documentation, how well the teams follow software engineering (SE) practices, and the client's satisfaction with the product. Individual grades will be influenced by peer reviews, individual reflection documents, mentor impressions, and presentation performance. Students will leave the course with a firsthand understanding of the software engineering realities that drive SE practices, will have concrete experience with these practices, and will have engaged in active reflection on this experience. They will have teamwork, process, and product skills to support immediate competency in a software engineering organization, along with a deeper understanding that prepares them to evaluate the new processes and techniques they will encounter in the workplace.",SE
Database Applications ,"This course covers the fundamental topics for Database Management  Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data  independence; data definition and data manipulation languages), Data  models (entity-relationship and relational data models; data  structures, integrity constraints, and operations for each data  model; relational query languages: SQL, algebra, calculus), Theory of  database design (functional dependencies; normal forms; dependency  preservation; information loss), Query Optimization (equivalence of  expressions, algebraic manipulation; optimization of selections and  joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control).",IAS
HOT Compilation ,"The course covers the implementation of compilers for higher-order, typed languages such as ML and Haskell, and gives an introduction to type-preserving compilation.  Topics covered include type inference, elaboration, CPS conversion, closure conversion, garbage collection, phase splitting, and typed assembly language.","PL
AL"
Parallel Computer Architecture and Programming ,"The fundamental principles and engineering tradeoffs involved in designing modern parallel computers, as well as the programming techniques to effectively utilize these machines. Topics include naming shared data, synchronizing threads, and the latency and bandwidth associated with communication. Case studies on shared-memory, message-passing, data-parallel and dataflow machines will be used to illustrate these techniques and tradeoffs. Programming assignments will be performed on one or more commercial multiprocessors, and there will be a significant course project.","PD
PL
DS"
Information Security and Privacy ,"As layers upon layers of technology mediate our activities, issues of information security and privacy are becoming increasingly pervasive and complex. This course takes a multi-disciplinary perspective of information security and privacy, looking at technologies as well as business, legal, policy and usability issues. The objective is to prepare students to identify and address critical security and privacy issues involved in the design, development and deployment of robust computer and information systems. Examples used to introduce concepts covered in the class range from enterprise systems to mobile computing, the Internet of Things, social networking and digital currencies. Topics Covered: Information Security and Privacy: the big picture; A gentle introduction to cryptography; Certificates, PKI, Decentralized Trust Management;  Authentication; Internet Security protocols; Risk management; Trusted Computing; Systems security; Web attacks; Cybercrime; Understanding the cyber security legal landscape; Information Privacy: Fundamental concepts &amp; legal landscape; Privacy and Big Data; Privacy Enhancing Technologies; Privacy Engineering; Usable Security and Privacy; Electronic payments and digital currencies; Emerging Security and Privacy challenges (e.g. Cloud Security and Privacy, Mobile and IoT Security and Privacy, Social Networking Security and Privacy)",SP
Special Topic: Digital Signal Processing for Computer Science ,"Digital signals comprise a large fraction of the data analyzed by computer scientists. Sound, e.g. speech and music, images, radar and many other signal types that were conventionally considered to be the domain of the Electrical engineer are now also in the domain of computer scientists, who must analyze them, make inferences, and develop machine learning techinques to analyze, classify and reconstruct such data. In this course we will cover the basics of Digital Signal Processing. We will concentrate on the basic mathematical formulations, rather than in-depth implementation details. We will cover the breadth of topics, beginning with the basics of signals and their representations, the theory of sampling, important transform representations, key processing techniques, and spectral estimation.",SP
Foundations of Cyber-Physical Systems ,"Cyber-physical systems (CPSs) combine cyber effects (computation and/or communication) with physical effects (motion or other physical processes). Designing algorithms to control CPSs, such as those in cars, aircraft and robots, is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding.  Students in this course will understand the core principles behind CPSs, develop models and controls, identify safety specifications and critical properties of CPSs, understand abstraction and system architectures, learn how to design by invariant, reason rigorously about CPS models, verify CPS models of appropriate scale, understand the semantics of a CPS model and develop an intuition for operational effects. Students will write hybrid programs (HPs), which capture relevant dynamical aspects of CPSs in a simple programming language with a simple semantics, allowing the programmer to refer to real-valued variables representing real quantities and specify their dynamics as part of the HP.",AR
Web Application Development ,"This course will introduce concepts in programming web application servers. We will study the fundamental architectural elements of programming web sites that produce content dynamically. The primary technology introduced will be the Django framework for Python, but we will cover related topics as necessary so that students can build significant applications. Such topics include: HTTP, HTML, CSS, Javascript, XML, Design Patterns, Relational and Non-relational Databases, Object-Relation Mapping tools, Security, Web Services, Cloud Deployment, Internationalization, and Scalability and Performance Issues.  Students must have programming and software design experience equivalent to about a typical Junior CS major&#8212;-a sequence of three college CS courses or more.  Python-specific experience is not necessary. Students must provide their own computer hardware for this course. Please see the Related URL above for more information.",SP
Distributed Systems ,"The goals of this course are twofold: First, for students to gain an understanding of the principles and techniques behind the design of distributed systems, such as locking, concurrency, scheduling, and communication across the network. Second, for students to gain practical experience designing, implementing, and debugging real distributed systems.  The major themes this course will teach include scarcity, scheduling, concurrency and concurrent programming, naming, abstraction and modularity, imperfect communication and other types of failure, protection from accidental and malicious harm, optimism, and the use of instrumentation and monitoring and debugging tools in problem solving. As the creation and management of software systems is a fundamental goal of any undergraduate systems course, students will design, implement, and debug large programming projects.   As a consequence, competency in both the C and Java programming languages is required.",DS
Computer Networks ,"The emphasis in this course will be on the basic performance and engineering trade-offs in the design and implementation of computer networks. To make the issues more concrete, the class includes several multi-week projects requiring significant design and implementation.    The goal is for students to learn not only what computer networks are and how they work today, but also why they are designed the way they are and how they are likely to evolve in the future. We will draw examples primarily from the Internet. Topics to be covered include: network architecture, routing, congestion/flow/error control, naming and addressing,  peer-to-peer and the web, internetworking, and network security.","NC
SP
SF"
Database Systems ,"This course is on the design and implementation of database management systems. Topics include data models (relational, document, key/value), storage models (n-ary, decomposition), query languages (SQL, stored procedures), storage architectures (heaps, log-structured), indexing (order preserving trees, hash tables), transaction processing (ACID, concurrency control), recovery (logging, checkpoints), query processing (joins, sorting, aggregation, optimization), and parallel architectures (multi-core, distributed). Case studies on open-source and commercial database systems will be used to illustrate these techniques and trade-offs. The course is appropriate for students with strong systems programming skills.",IS
Algorithm Design and Analysis ,"This course is about the design and analysis of algorithms. We study specific algorithms for a variety of problems, as well as general design and analysis techniques. Specific topics include searching, sorting, algorithms for graph problems, efficient data structures, lower bounds and NP-completeness. A variety of other topics may be covered at the discretion of the instructor. These include parallel algorithms, randomized algorithms, geometric algorithms, low level techniques for efficient programming, cryptography, and cryptographic protocols.","AL
DS
PL
SDF"
"Formal Languages, Automata, and Computability ","An introduction to the fundamental ideas and models underlying computing: finite automata, regular sets, pushdown automata, context-free grammars, Turing machines, undecidability, and complexity theory.","AL
DS
IAS
NC
PL
SDF
SP"
Computational Geometry ,"How do you sort points in space?  What does it even mean?  This course takes the ideas of a traditional algorithms course, sorting, searching, selecting, graphs, and optimization, and extends them to problems on geometric inputs.  We will cover many classical geometric constructions and novel algorithmic methods.  Some of the topics to be covered are convex hulls, Delaunay triangulations, graph drawing, point location, geometric medians, polytopes, configuration spaces, linear programming, and others.  This course is a natural extension to 15-451, for those who want to learn about algorithmic problems in higher dimensions.",SP
Special Topics in Theory: Advanced Algorithms ,Selected advanced topics in algorithms and computational  theory. Topics vary from semester to semester.,"AL
AR
IAS
DS
GV
PD
PL
SDF"
Discrete Differential Geometry ,"Geometry plays a vital role in both engineering and scientific discovery, as well as in our everyday lives via emerging technologies like depth cameras and 3D printing.  This course teaches students how to think about three-dimensional shape, both mathematically and computationally.  Students will get a crash course in differential geometry, and will apply this knowledge to design and implement practical algorithms for 3D geometry processing.  Basic geometric concepts (like curvature) are examined via complementary computational and mathematical points of view, with an emphasis on visual intution and real-world applications.  In homework, students will derive and implement core geometry processing algorithms; they will also explore a topic of their choice in a final class project.  MS and PhD students will complete additional written and coding exercises, and will perform a more comprehensive literature review for their final project.  Topics include curves and surfaces, curvature, connections and parallel transport, exterior calculus, simplicial homology, conformal mapping, finite element methods, and numerical linear algebra; applications include approximation of curvature, curve and surface smoothing, surface parameterization, vector field design, and computation of geodesic distance.",AR
Computer Graphics ,"This course provides a comprehensive introduction to computer graphics modeling, animation, and rendering. Topics covered include basic image processing, geometric transformations, geometric modeling of curves and surfaces, animation, 3-D viewing, visibility algorithms, shading, and ray tracing.",GV
Technical Animation ,"This course introduces techniques for computer animation such as keyframing, procedural methods, motion capture, and simulation. The course also includes a brief overview of story-boarding, scene composition, lighting and sound track generation. The second half of the course will explore current research topics in computer animation such as dynamic simulation of flexible and rigid objects,automatically generated control systems, and evolution of behaviors. The course should be appropriate for graduate students in all areas and for advanced undergraduates.",GV
Animation Art and Technology ,"Animation Art and Technology is an interdisciplinary course cross-listed between Art and Computer Science. Faculty and teaching assistants from computer science and art teach the class as a team. It is a project-based course in which four to five interdisciplinary teams of students produce animations. Most of the animations have a substantive technical component and the students are challenged to consider innovation with content to be equal with the technical. The class includes basic tutorials for work in Maya leading toward more advanced applications and extensions of the software such as motion capture and algorithms for animating cloth, hair, particles, and grouping behaviors. The first class will meet in CFA room 303.","AL
AR
HCI"
Introduction to Computer Security ,"This course will introduce students to the fundamentals of computer security and applied cryptography. Topics include software security, networking and wireless security, and applied cryptography. Students will also learn the fundamental methodology for how to design and analyze security critical systems.",SP
Special Topic: CMRoboBits: AI and Robots for Daily-Life Problems ,"This course will be a project-based course in which we will look at AI and robotics artifacts and techniques to automate solutions to real-world problems, in particular related to life in cities. The course will start by collecting and brainstorming about real problems biased to ones that involve the physical space in addition to the cyber information space, such as traffic rush hour, noise in cities, 3D building inspection, service and data gathering. We will then formalize the chosen problems and analyze existing real data. The course will proceed by possibly enabling the students to prototype their projects beyond simulation, and using the CORAL lab robots, e.g., the CoBot or NAO robots or drones. The course work will be a single large project, performed by groups of up to 3 students. The projects will be divided in three phases, due at the end of February, March, and the end of the course. Students are expected to have programming experience in C++ or python.",IAS
Special Topic: Speech Processing ,"Speech Processing offers a practical and theoretical understanding of how human speech can be processed by computers. It covers speech recognition, speech synthesis and spoken dialog systems. The course involves practicals where the student will build working speech recognition systems, build their own synthetic voice and build a complete telephone spoken dialog system. This work will be based on existing toolkits. Details of algorithms, techniques and limitations of state of the art speech systems will also be presented. This course is designed for students wishing understand how to process real data for real applications, applying statistical and machine learning techniques as well as working with limitations in the technology.",SP
Cognitive Robotics: The Future of Robot Toys ,"This course will explore the future of robot toys by analyzing and programming Anki Cozmo, a new robot with built-in artificial intelligence algorithms. Como is distinguished from earlier consumer robots by its reliance on vision as the primary sensing mode and its sophisticated use of A.I. Its capabilities include face and object recognition, map building, path planning, and object pushing and stacking. Although marketed as a pre-programmed children's toy, Cozmo's open source Python SDK allows anyone to develop new software for it, which means it can also be used for robotics education and research. The course will cover robot software architecture, human-robot interaction, perception, and planning algorithms for navigation and manipulation. Prior robotics experience is not required, just strong programming skills.",IS
Independent Study in Computer Science ,"The School of Computer Science offers Independent Study courses, which allow motivated students to work on projects under the supervision of a faculty advisor while receiving academic credit. Independent studies are usually one semester in duration and require prior approval from the faculty member and the School of Computer Science.",IAS
Engineering Distributed Systems ,"This is a master's level course for students with strong design and  implementation skills who are likely to pursue careers as software  architects and lead engineers.  It may be taken by well-prepared  undergraduates with excellent design and implementation skills in  low-level systems programing.  The course assumes a high level of  proficiency in all aspects of operating system design and implementation.    This course will help students prepare for leadership roles in creating  and evolving the complex, large-scale computer systems that society will  increasingly depend on in the future.  The course will teach the  organizing principles of such systems, identifying a core set of  versatile techniques that are applicable across many system layers.  Students will acquire the knowledge base, intellectual tools, hands-on  skills and modes of thought needed to build well-engineered computer  systems that withstand the test of time, growth in scale, and stresses of  live use.     Topics covered include: caching, prefetching, damage containment,  scale reduction, hints, replication, hash-based techniques, and  fragmentation reduction.  A substantial project component is an  integral part of the course.    A high level of proficiency in systems programming is expected.",DS
Compiler Design ,"This course covers the design and implementation of compiler and run-time systems for high-level languages, and examines the interaction between language design, compiler design, and run-time organization. Topics covered include syntactic and lexical analysis, handling of user-defined types and type-checking, context analysis, code generation and optimization, and memory management and run-time organization.      Prerequisites:  15213 or 15312","PL
OS
PD"
Engineering Distributed Systems ,"This course is for students with strong design and implementation skills who are likely to pursue careers as software architects and lead engineers. It may be taken by well-prepared undergraduates with excellent design and implementation skills in low-level systems programing. The course assumes a high level of proficiency in all aspects of operating system design and implementation. This course will help students prepare for leadership roles in creating and evolving the complex, large-scale computer systems that society will increasingly depend on in the future. The course will teach the organizing principles of such systems, identifying a core set of versatile techniques that are applicable across many system layers. Students will acquire the knowledge base, intellectual tools, hands-on skills and modes of thought needed to build well-engineered computer systems that withstand the test of time, growth in scale, and stresses of live use. Topics covered include: caching, prefetching, damage containment, scale reduction, hints, replication, hash-based techniques, and fragmentation reduction. A substantial project component is an integral part of the course. A high level of proficiency in systems programming is expected.  Please refer to http://www.cs.cmu.edu/~csd-grad/courseschedules14.html this link for the most recent schedule updates.",SF
Advanced Cloud Computing ,"Computing in the cloud has emerged as a leading paradigm for cost-effective, scalable, well-managed computing. 脗 Users pay for services provided in a broadly shared, power efficient datacenter, enabling dynamic computing needs to be met without paying for more than is needed. 脗 Actual machines may be virtualized into machine-like services, or more abstract programming platforms, or application-specific services, with the cloud computing infrastructure managing sharing, scheduling, reliability, availability, elasticity, privacy, provisioning and geographic replication.  Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules17.html for the most recent schedule updates.",PD
Engineering Distributed Systems ,"Computing has changed beyond recognition in half a century, from the room-filling mainframes of the 1960s to today's smartphones and wearable devices.  Networks have also changed dramatically: from the 300-baud dialup modems of the early networking era to gigabit LANs, Wi-Fi and 4G today.    Who knows what changes are in store for us over the next half century?  Astonishingly, in spite of this tremendous change in hardware technology over time,  a small core set of techniques for building distributed systems has emerged and remained surprisingly stable and applicable across many system layers.    Many flavors of these  techniques exist, and they continously evolve over time to reflect changing trade-offs in the design space.  What are these core techniques, and how can we leverage them in creating distributed systems today and in the future?     That is the central question addressed by this course.  Students will acquire the knowledge base, intellectual tools, hands-on skills and modes of thought needed to build well-engineered distributed systems that withstand the test of time, growth in scale, and stresses of live use. Strong design and implementation skills are expected of all students.  The course assumes a high level of proficiency in all aspects of operating system design and implementation.  A substantial project component is an integral part of the course.  Please refer to http://www.cs.cmu.edu/~csd-grad/courseschedules14.html this link for the most recent schedule updates.","NC
DS
PL
SE"
Special Topics in Graphics: ,Please refer to http://www.cs.cmu.edu/~csd-grad/courseschedulef17.html for the most recent schedule updates.  Class will not begin until the week of September 4th.,"AL
AR
IAS
PL
SDF
SF
SP"
Advanced Topics in Parallel Computing: ,"Section A: In this special topics course on parallel computing, the students will   learn about the foundations of parallel computing and complete a  research project.   The course will cover both theory and  practice. The topics covered will include  basic parallel algorithms  for sequences (e.g., mapping, reductions), trees  (e.g., tree  contraction), and graphs (graph search, connectivity, graph  contraction)  as well as scheduling algorithms (e.g., work stealing)   for mapping parallel computation to hardware for optimal efficiency  and performance.   There will be one midterm, several assignments  (involving programming),  and one project; the project will account for  50% of the grade.      ** Project Ideas **     The project can be theoretical or practical.  The ideal project would  be one that  adds parallelism to the students' current research. For  example, if the student  does research in a field such as  algorithms/graphics/robotics and he or she can   design/analyze/implement a parallel algorithm (possibly for an open  problem);  if the student does research on a field such as programming  languages or databases,  she or he can design/implement language/query  support for parallelism; if the  student does research on machine  learning, he or she can develop a framework  for performing approximate  inference in parallel.   Projects can be done individually or in groups   and will lead to a small paper. We envision the students in the class   to review other project papers (as in a program committee) and provide   feedback to the authors. Please refer to https://www.cs.cmu.edu/~csd-grad/courseschedules17.html for the most recent schedule updates.",PD
Learning Media Design ,"[IDeATe collaborative course] Learning is a complex human phenomenon with cognitive, social and personal dimensions that need to be accounted for in the design of technology enhanced learning experiences. In this studio course students will apply learning science concepts to critique existing forms of learning media, establish a set of design precedents to guide project work and produce a series of design concepts that support learning interactions in a real-world context. Collaborating in small interdisciplinary teams, students will partner with a local informal learning organization (e.g. museum, after school program provider, maker space) to conduct learning design research studies, synthesize findings, establish learning goals and iteratively prototype and assess design concepts. As final deliverables, students will present their design research findings, design concepts, and prototypes to stakeholders, and draft a media-rich proposal for their learning media concept to pitch to a local funder.  Please note that there may be usage/materials fees associated with this course. Please note that there may be usage/materials fees associated with this course.",HCI
Learning Media Methods ,"[IDeATe course] Learning Media Methods brings together students from across the disciplines to consider the design of mediated learning experiences though a project-based inquiry course. Students will be introduced to a range of design research methods and associated frameworks that explore the cognitive, social and affective dimensions of learning in everyday contexts through readings, invited lectures, in-class activities and assignments. Students will conduct a series of short design research studies to define learning goals and develop supporting design concepts that improve learning outcomes for diverse participants in informal learning settings (e.g. museums, after school programs, maker spaces or online). In concept development, we will look at how to position technology and question its role in the setting to engage and foster positive learning interactions. The course will culminate in a media-rich presentation of design concepts to a stakeholder audience, and include an evaluation plan describing how learning outcomes for the project would be assessed.",HCI
Social Web ,"With the growth of online environments like MySpace, Second Life, World of Warcraft, Wikipedia, blogs, online support groups, and open source development communities, the web is no longer just about information. This course, jointly taught by a computer scientist and a behavioral scientist, will examine a sampling of the social, technical and business challenges social web sites must solve to be successful, teach students how to use high-level tools to analyze, design or build online communities, and help them understand the social impact of spending at least part of their lives online.    This class is open to advanced undergraduates and graduate students with either technical or non-technical backgrounds. Course work will include lectures and class discussion, homework, class presentations, and a group research or design project.",HCI
Designing Human Centered Software ,"Why are things so hard to use these days? Why doesn't this thing I just bought work? Why is this web site so hard to use? These are frustrations that we have all faced from systems not designed with people in mind. The question this course will focus on is: how can we design human-centered systems that people find useful and usable? This course is an introduction to designing, prototyping, and evaluating user interfaces. If you take only one course in Human-Computer Interaction, this is the course for you. This class is open to all undergrads and grad students, with either technical or non-technical backgrounds. We will cover theory as well as practical application of ideas from Human-Computer Interaction. Course work includes lectures, class discussion, homework, class presentations, and group project.",HCI
Applications of Cognitive Science ,"The goal of this course is to examine cases where basic research on cognitive science, including cognitive neuroscience, has made its way into application, in order to understand how science gets applied more generally.  The course focuses on applications that are sufficiently advanced as to have made an impact outside of the research field per se; for example, as a product,  a change in practice, or a legal statute.  Examples are virtual reality (in vision, hearing, and touch), cognitive tutors, phonologically based reading programs, latent semantic analysis applications to writing assessment, and measures of consumers' implicit attitudes.     The course will use a case-study approach that considers a set of applications in detail, while building a general understanding of what it means to move research into the applied setting.  The questions to be considered include:  What makes a body of theoretically based research applicable?  What is the pathway from laboratory to practice?  What are the barriers - economic, legal, entrenched belief or practice?     The format will emphasize analysis and discussion by students.  They should bring to the course an interest in application; extensive prior experience in cognitive science is not necessary.  The course will include tutorials on basic topics in cognitive science such as perception, memory, and spatial cognition.  These should provide sufficient grounding to discuss the applications.",HCI
Computer-mediated Communication ,"This course examines fundamental aspects of interpersonal communication and considers how different types of computer-mediated communications (CMC) technologies affect communication processes. Among the topics we will consider are: conversational structure and CMC, tools to support nonverbal and paralinguistic aspects of communication such as gesture and eye gaze, and social and cultural dimensions of CMC.  Students will be expected to post to weekly discussion lists, to write a paper on a specific aspect of CMC, and to present a talk on their final project to the class. The course should be appropriate for graduate students in all areas and for advanced undergraduates.",HCI
Design Educational Games ,"The potential of digital games to improve education is enormous. However, it is a significant challenge to create a game that is both fun and educational. In this course, students will learn to meet this challenge by combining processes and principles from game design and instructional design. Students will also learn to evaluate their games for fun, learning, and the integration of the two. They will be guided by the EDGE framework for the analysis and design educational games. The course will involve a significant hands-on portion, in which students learn a design process to create educational games ? digital or non-digital. They will also read about existing educational games and discuss game design, instructional design, learning and transfer, and the educational effectiveness of digital games. They will analyze an educational game and present their analysis to the class.",HCI
Programming Usable Interfaces ,"This course is combines lecture, and an intensive programming lab and design studio. It is for those who want to express their interactive ideas in working prototypes. It will cover the importance of human-computer interaction/interface design, iterative design, input/output techniques, how to design and evaluate interfaces, and research topics that will impact user interfaces in the future. In lab, you will learn how to design and program effective graphical user interfaces, and how to perform user tests. We will cover a number of prototyping tools and require prototypes to be constructed in each, ranging from animated mock-ups to fully functional programs. Assignments will require implementing UIs, testing that interface with users, and then modifying the interface based on findings. Some class sessions will feature design reviews of student work. This course is for HCII Masters students and HCI dual majors with a minimal programming background. Students will often not be professional programmers, but will need to interact with programmers.   RECITATION SELECTION: Students taking this course can sign up for either Prototyping Lab recitation.  PREREQUISITES:  Proficiency in a programming language, program structure, algorithm analysis, and data abstraction. Normally met through an introductory programming course using C, C++, Pascal or Java, such as 15100, 15112, 15127 or equivalent. Students entering this course should be able to independently write a 300-line program in 48 hours.",HCI
Software Structures for User Interfaces ,"SSUI (15-credit, combined lecture and lab) This course considers the basic and detailed concepts that go into building software to implement user interfaces. It considers factors of input, output, application interface, and related infrastructure as well as the typical patterns used to implement them. It will also consider how these components are organized and managed within a well-structured object oriented system. After considering these fundamental concepts in the first portion of the class, the later part will consider advanced topics related to emerging future concepts in user interface design. The course includes an intensive programming lab, either on the topic of mobile or web interfaces. This course is intended for HCII Master, BHCI dual majors and others who wish to understand the structures needed for professional development of interactive systems, and has a strong programming background.   PREREQUISITES: Comfort in programming and related concepts equivalent to an undergraduate CS degree. Should be proficient in programming, and comfortable with abstract concepts relating to program structure, algorithm analysis, and data abstraction.  WAITLIST LOGISTICS: Note that ALL students who register for this class will initially be placed on a waitlist. Your position on the waitlist is not an indication of whether you will be accepted into the class. Contacting the instructor will not move you off the waitlist. Priority for getting off the waitlist are MHCI students, BHCI students (more senior students first), and then others.",HCI
Personalized Online Learning ,"Online learning has become widespread (e.g., MOOCs, online and blended courses, and Khan Academy) and many claim it will revolutionize higher education and K-12. How can we make sure online learning is maximally effective? Learners differ along many dimensions and they change over time. Therefore, advanced learning technologies must adapt to learners to provide individualized learning experiences.  This course covers a number of proven personalization techniques used in advanced learning technologies. One of the techniques is the use of cognitive modeling to personalize practice of complex cognitive skills in intelligent tutoring systems. This approach, developed at CMU, may well be the most significant application of cognitive science in education and is commercially successful. We will also survey newer techniques, such as personalizing based on student meta-cognition, affect, and motivation. Finally, we will look at personalization approaches that are widely believed to be effective but have not proven to be so.  The course involves readings and discussion of different ways of personalizing instruction, with an emphasis on cognitive modeling approaches. Students will learn to use the Cognitive Tutor Authoring Tools (CTAT, http://ctat.pact.cs.cmu.edu) to implement tutor prototypes that rely on computer-executable models of human problem solving to personalize instruction.  The course is meant for graduate or advanced undergraduate students in Human-Computer Interaction, Psychology, Computer Science, Design, or related fields, who are interested in educational applications. Students should either have some  programming skills or experience in the cognitive psychology of human problem solving, or experience with instructional design.",HCI
Programming Usable Interfaces OR Software Structures for Usable Interfaces ,"Section A: Programming Usable Interfaces Section B: Software Structures for Usable Interfaces  This is a lecture-only course (see 05-430/05-630 or 05-431/631 for the lecture + lab version of these courses) that is intended for those who want to learn how to design and evaluate user interfaces. We will cover the importance of human-computer interaction and interface design, the iterative design cycle used in HCI, an overview of input and output techniques, how to design and evaluate interaction techniques, and end with a discussion of hot topics in research that will impact user interfaces in the coming years.   This course is only intended for HCII Masters students or HCI undergraduate majors who have already taken an associated User Interface lab, or non-MHCI/BHCI students interested in the design of user interfaces.   PREREQUISITES:  There are no prerequisites for this lecture-only course.  WAITLIST LOGISTICS: Note that ALL students who register for this class will initially be placed on a waitlist. Your position on the waitlist is not an indication of whether you will be accepted into the class. Contacting the instructor will not move you off the waitlist. Priority for getting off the waitlist are MHCI students, BHCI students (more senior students first), and then others.",HCI
Machine Learning in Practice ,"Machine Learning is concerned with computer programs that enable the behavior of a computer to be learned from examples or experience rather than dictated through rules written by hand. It has practical value in many application areas of computer science such as on-line communities and digital libraries. This class is meant to teach the practical side of machine learning for applications, such as mining newsgroup data or building adaptive user interfaces. The emphasis will be on learning the process of applying machine learning effectively to a variety of problems rather than emphasizing an understanding of the theory behind what makes machine learning work. This course does not assume any prior exposure to machine learning theory or practice. In the first 2/3 of the course, we will cover a wide range of learning algorithms that can be applied to a variety of problems. In particular, we will cover topics such as decision trees, rule based classification, support vector machines, Bayesian networks, and clustering. In the final third of the class, we will go into more depth on one application area, namely the application of machine learning to problems involving text processing, such as information retrieval or text categorization.  05-834 is the HCII graduate section. If you are an LTI student, please sign up for the LTI graduate course number (11-663) ONLY to count properly towards your degree requirements.   05-434  is the HCII undergraduate section. If you are an LTI student, please sign up for the LTI undergraduate course number (11-344) ONLY to count properly towards your degree requirements.",IS
Advanced Fabrication Techniques for HCI ,"This course will consider how new fabrication techniques such as 3D printing, laser cutting, CNC machining and related computer controlled technologies can be applied to problems in Human-Computer Interaction.  Each offering will concentrate on a particular application domain for its projects. This year the course will consider assistive technology. This course will be very hands-on and skills-oriented, with the goal of teaching students the skills necessary to apply these technologies to HCI problems such as rapid prototyping of new device concepts. To this end?   Every student in this course will build and take home a 3D printer.  (There will be $400-$500 cost associated with this course to make that possible. Details on this are still to be determined.)",HCI
The Big Data Pipeline: Collecting and Using Big Data for Interactive Systems ,This course covers techniques and technologies for creating data driven interfaces. You will learn about the entire data pipeline from sensing to cleaning data to different forms of analysis and computation.,HCI
Interaction Techniques ,"This course will provide a comprehensive study of the many ways to interact with computers and computerized devices. An 'interaction technique' starts when the user does something that causes an electronic device to respond, and includes the direct feedback from the device to the user. Examples include physical buttons and switches, on-screen menus and scroll bars operated by a mouse, touch screen widgets and gestures such as flick-to-scroll, text entry on computers or touch screens, consumer electronic controls such as remote controls, game controllers, and adaptations of all of these for people with disabilities. We will start with a history of the invention and development of these techniques, discuss the various options used today, and continue on to the future with the latest research on interaction techniques presented at conferences such as ACM CHI and UIST. Guest lectures from inventors of interaction techniques are planned. Students will have a choice for final projects that can focus on historical or novel interaction techniques. For example, one option will be to create a novel technique, perform a user study of it, and write a paper about the result, which may be suitable for conference submission. Another option will be to investigate and write a paper or make a video about the history and various previous designs for widely used interaction techniques, possibly including an interview with the inventor(s).",HCI
Special Topics in HCI ,"Special Topics in HCI is an opportunity for students interested in HCI to gain a deeper understanding of a specific area in this field. Each class is designed to cover an emerging research area within HCI, from designing large-scale peer learning systems to designing games around audience agency. All sections will help students: (1) build a more comprehensive understanding of an area of study within HCI, (2) work closely with faculty and peers to create mini-projects or team assignments that help students master the course material, (3) explore evidence-based research methods and techniques in HCI.    Sections will vary in topic and often change from semester to semester. Because of this, students can take multiple sections, as they are individual classes. Undergraduate sections are listed as 499 and graduate sections are listed as 899.   For descriptions of specific sections for this academic year, visit the 'Courses' section on the Human-Computer Interaction Institute website: http://hcii.cmu.edu/academics/courses",HCI
Rapid Prototyping of Computer Systems ,"This is a project-oriented course, which will deal with all four aspects of project development: the application, the artifact, the computer-aided design environment, and the physical prototyping facilities. The class consists of students from different disciplines who must synthesize and implement a system in a short period of time. Upon completion of this course the student will be able to: generate systems specifications from a perceived need; partition functionality between hardware and software; produce interface specifications for a system composed of numerous subsystems; use computer-aided development tools; fabricate, integrate, and debug a hardware/software system; and evaluate the system in the context of an end user application.  The class consists of students from different disciplines who must synthesize and implement a system in a short period of time.","AR
IAS"
Undergraduate Project in HCI ,"Experiential learning is a key component of the MHCI program. Through a substantial team project, students apply classroom knowledge in analysis and evaluation, implementation and design, and develop skills working in multidisciplinary teams.  Student teams work with Carnegie Mellon University-based clients or external clients to iteratively design, build and test a software application which people directly use.",HCI
Independent Study in HCI-UG ,"In collaboration with and with the permission of the professor, undergraduate students may engage in independent project work on any number of research projects sponsored by faculty. Students must complete an Independent Study Proposal, negotiate the number of units to be earned, complete a contract, and present a tangible deliverable.  The Undergraduate Program Advisor's signature is required for HCI undergraduate-level Independent Study courses.",IAS
HCI Pro Seminar ,"Students will attend weekly HCII Seminar Series of talks given by national leaders in the field of Human-Conmputer Interaction, attend communication workshops and conflict management workshops.",HCI
Interaction Design Studio II ,"This course follows Interaction Design Fundamentals (05-651). Students are expected to apply what they have learned about design thinking and methodologies as a starting point for all assignments. Students will work in teams to perform guerrilla research, synthesize data, and consider the needs of multiple stakeholders in their design of mobile services and other intelligent systems. Design concepts go beyond user interfaces to include sensors, controls, and ubiquitous computing. Emphasis is placed on the quality of the students ideas and their ability to give form to their design concepts. By completing and presenting their work, students will gain skills related to professional UX design practice.",HCI
Interaction Design Studio 1 ,"This studio course introduces students to design thinking and the basic practices of interaction design. We follow a human-centered design process that includes research, concept generation, prototyping, and refinement. Students must work effectively as individuals and in small teams to design mobile information systems and other interactive experiences. Assignments approach design on three levels: specific user interactions, contexts of use, and larger systems. Students will become familiar with design methodologies such as sketching, storyboarding, wire framing, prototyping, etc. No coding is required. This course serves as a prerequisite for Interaction Design Studio (05-650).",HCI
E-Learning Design Principles and Methods ,"This course is about e-learning design principles, the evidence and theory behind them, and how to apply these principles to develop effective educational technologies. It is organized around the book 'e-Learning and the Science of Instruction: Proven Guidelines for Consumers and Designers of Multimedia Learning' by Clark &amp; Mayer with further readings drawn from cognitive science, educational psychology, and human-computer interaction. You will learn design principles 1) for combining words, audio, and graphics in multimedia instruction, 2) for combining examples, explanations, practice and feedback in online support for learning by doing, and 3) for balancing learner versus system control and supporting student metacognition. You will read about the experiments that support these design principles, see examples of how to design such experiments, and practice applying the principles in educational technology development.",HCI
Ethics and Policy Issues in Computing ,"Should autonomous robots make life and death decisions on their own?  Should we allow them to select a target and launch weapons? To diagnose injuries and perform surgery when human doctors are not around?  Who should be permitted to observe you, find out who your friends are, what you do and say with them, what you buy, and where you go?  Do social media and personalized search restrict our intellectual horizons?  Do we live in polarizing information bubbles, just hearing echoes of what we already know and believe?  As computing technology becomes ever more pervasive and sophisticated, we are presented with an escalating barrage of decisions about who, how, when, and for what purposes technology should be used.  This course will provide an intellectual framework for discussing these pressing issues of our time, as we shape the technologies that in turn shape us.  We will seek insight through reading, discussion, guest lectures, and debates.  Students will also undertake an analysis of a relevant issue of their choice, developing their own position, and acquiring the research skills needed to lend depth to their thinking.  The course will enhance students' ability to think clearly about contentious technology choices, formulate smart positions, and support their views with winning arguments.",SP
Introduction to Network Science ,"Everything is connected - from your friends, to everyone at CMU, to economic markets, disease outbreaks, and global societies. Relationships and flows of information among people and organizations form complex systems that are the fundamental structures governing our world, yet defy easy understanding. To analyze these interconnected systems we must turn to network science. This course covers the mathematical and graph theoretical foundations of network science, as well as theories and algorithms for analyzing and visualizing structures and dynamics of networked systems. Topics covered in this class include: centrality metrics, community detection, diffusion processes, scale-free and small-world networks, social media analytics, and network visualization. A special emphasis is on algorithmic challenges and solutions in the context of big data networks. Students will engage in hands-on projects learning network science, solidifying their mathematical and graph theory knowledge and learning how to apply it to a range of real world problems. This course is open to students in all majors who have earned a C or better in 15-151 or 21-127.","NC
SDF"
"Special Topic: Cryptocurrencies, Blockchains and Applications ","Cryptocurrencies such as Bitcoin have gained large popularity in recent years, in no small part due to the fantastic potential applications they could facilitate. This course will first provide an overview of the technological mechanisms behind cryptocurrencies and distributed consensus and distributed ledgers ('blockchains'), introducing along the way the necessary cryptographic tools. It will then focus on more advanced blockchain applications, such as 'smart contracts,' that is, contracts written as code. Finally, the course will also introduce some of the legal and policy questions surrounding cryptocurrencies.  Prerequisites:  15-213 or equivalent strongly recommended","AR
IAS
PL
CN"
Green Computing ,"Energy is a key societal resource. However, our energy usage is rising at an alarming rate and therefore it has become critical to manage its consumption more efficiently for long term sustainability. This course introduces students to the exciting area of 'Green Computing', and is organizationally divided into two tracks. The first track is 'Energy-Efficient Computing', which considers the state of the art techniques for improving the energy efficiency of mobile devices, to laptop and desktop class computers and finally to data centers. We will cover energy efficiency across the hardware/software stack, starting from the individual components like processors and radio interfaces to system level architectures and optimizations. The second track is 'Applying Computing towards Sustainability', covering topics that leverage computing to reduce the energy footprint of our society. In particular, we will focus on Smart Buildings and the Smart Grid, covering topics such as sensing, modeling and controlling the energy usage of buildings, new operating systems or software stacks for the smart infrastructure, as well as the privacy and security issues with the new 'internet of things'. The goal of this course is to help students acquire some of the knowledge and the skills needed to do research in this space of 'Green Computing'.  Although the course is listed within SCS, it should be of interest to students in several departments, including ECE, MechE, CEE, EPP and Architecture.",SP
Building user-focused sensing systems ,"These days we are surrounded by sensing and computation. Smart devices, such as smartphones, smartwatches, are packed with sensors. While they are already very useful devices, we have only started to scratch the surface here. The aim of this class will be to introduce the students to building and understanding smart sensing devices. The course will include discussion into contribution of various fields, including human-computer interaction, embedded computing, computer vision, distributed systems, machine learning, signal processing, security, and privacy. We will discuss how these various disciplines are coming together to form an end-to-end system that generates useful and user-actionable data. We will take a hands-on approach towards building and evaluating these systems. The students will gain practical experience in developing sensing systems in different application domains, such as activity recognition, health sensing, gestural interaction, etc. You will learn about embedded systems and understand the advantages and limitations of different platforms. You will learn about sensors and how to interface them with the real world to be able to get useful and actionable data. You will learn how to build a network of sensors that can communicate with each other. You will also learn about storing the sensor data for visualization, analysis and presentation both locally and to the cloud.   The course will be a combination of lectures, tutorials, class discussions, and demonstrations. Students will be evaluated based on 5 mini-projects/assignments, class participation, weekly reading summaries, and a final project. All hardware resources will be provided to the students and they will be given an option to take their final prototypes with them for the cost of the hardware components. The only requirement for the class is that the students should have reasonable programming experience and an interest in tinkering.",HCI
Pervasive and Ubiquitous Computing ,"The aim of the class will be to explore the area of Ubiquitous Computing (ubicomp) and allow students to work on a variety of small technology projects.  Students will be exposed to the basics of building ubicomp systems, emerging new research topics, and advanced prototyping techniques.  This course will focus more on class discussions and hands on demonstrations, while formal lectures will be conducted only as needed.  Students will be evaluated on their class participation, reading summaries, and mini projects.",HCI
Law of Computer Technology ,"The Law of Computer Technology  A survey of how legislatures and courts cope with rapidly advancing computer technologies and how scientific information is presented to, and evaluated by, civil authorities.  The course is also an introduction to the legal process generally and the interaction between the legal system and technology organizations.  Topics include: patents, copyrights in a networked world, law of the Internet, free speech, data security, technology regulation, international law, and transborder crime.  Open to juniors, seniors and graduate students in any school.  Open to sophomores by permission of the instructor.  Prerequisites: none.","IS
IAS
SP"
"Privacy Policy, Technology and Law ","This course focuses on policy issues related to privacy from the perspectives of governments, organizations, and individuals. We will begin with a historical and philosophical study of privacy and then explore recent public policy issues. We will examine the privacy protections provided by laws and regulations, as well as the way technology can be used to protect privacy. We will emphasize technology-related privacy concerns and mitigation, for example: social networks, smartphones, behavioral advertising (and tools to prevent targeted advertising and tracking), anonymous communication systems, big data, and drones.  This is part of a series of courses offered as part of the MSIT-Privacy Engineering masters program. These courses may be taken in any order or simultaneously. Foundations of Privacy (Fall semester) offers more in-depth coverage of technologies and algorithms used to reason about and protect privacy. Engineering Privacy in Software (Spring semester) focuses on the methods and tools needed to design systems for privacy.  This course is intended primarily for graduate students and advanced undergraduate students with some technical background. Programming skills are not required. 8-733, 19-608, and 95-818 are 12-unit courses for PhD students. Students enrolled under these course numbers will have extra assignments and will be expected to do a project suitable for publication. 8-533 is a 9-unit course for undergraduate students. Masters students may register for any of the course numbers permitted by their program. This course will include a lot of reading, writing, and class discussion. Students will be able to tailor their assignments to their skills and interests. However, all students will be expected to do some writing and some technical work.",SP
Hardware and Software Systems for Smart Homes and Buildings ,"Smart automation in the home and buildings hold tremendous promise to enhance the quality of our lives and improving energy efficiency. In this course we will take a hand on approach towards building hardware and software systems within the context of these emerging smart homes and smart building domains. You will learn about embedded systems and how to choose the appropriate one for different smart home projects, including understanding the advantages and limitations of such platforms. You will learn about sensors and how to interface them with the real world to be able to get useful and actionable data. You will learn about designing systems from ground up, including schematic and PCB layouts. You will learn about different radio technologies, so that you can build a network of sensors that can communicate with each other. You will also learn about storing the sensor data for visualization, analysis and presentation both locally and to the cloud. The course will comprise of hands on exercises, which build upon each other as the course progresses through the semester. We will likely use an embedded platform such as the Rasberry PI or the BeagleBone Black (cost between $75 and $100) and each student will be expected to buy one of these platforms to use throughout the semester. From time to time we will also discuss latest research papers and case studies on topics related to smart home and buildings, with the focus towards deployed systems. The course grade will be computed based on the homework and mini-project assignments, class presentations and a semester long course project. It is expected that students will have some programming background, are excited to take on hands on projects, and want to learn how to build end to end systems for smart homes. As a side effect, perhaps some of your ideas will lead to the next NEST (sold for $3.2B in 2014!).",SP
Java for Application Programmers ,"This course provides an intensive exploration of computer programming in the Java Language for Masters students who have had some prior, but perhaps limited, programming experience in Java or in some other programming language. The course starts with a review of the fundamental topics of programming in Java (data types, operators, control structures) along with discussions of object oriented programming (classes, instances, and class hierarchies). After covering the basics we move on using Java to cover simple graphical user interfaces (using Swing), file I/O, concurrency (i.e., threads), network I/O (HTTP), simple data structures (lists and maps).  Students are required to have a reasonably modern laptop computer on which they will need to install the Java software used for this course.","PL
SDF
SE"
J2EE Web Application Development ,"This course will introduce concepts in programming web application servers. We will study of the fundamental architectural elements of programming web sites that produce content dynamically. We will be demonstrating the course using Java Servlets and Java Server Pages.  We will also cover the related topics as necessary so that students may build significant applications. Such topics are expected to include: HTML, CSS, HTTP, Relational and Non-Relational Databases, Object-Relation Mapping Tools, Security Issues, AJAX, and Cloud Deployment.  Students are required to be familiar with Java Programming before taking this course.  Those who are not are encouraged to take 08-671 in mini 1 before taking this course.  Students are required to have a reasonably modern laptop computer on which they need to install the Java software used for this course.","SDF
HCI"
Social Software Engineering ,"Today, socialness appears to be of great significance and under constant scrutiny in the domain of software, where it is both fostered and leveraged. As it relates to various aspects of software and how software is build - from people, products and processes, to technologies, tools and trade and even more - understanding social and human aspects of software engineering is essential.  This course will pull together relevant literature from multiple domains to better understand the various social and human aspects of software engineering. To that end, we will explore both: the social aspects of software engineering and the engineering aspects of social software.  The course will work from an initial set of topics and readings, but it is expected that both will evolve as the course progresses.  The topics could span several dimensions of software engineering such as(but not limited to) the following:  * Social software and social-ness of software * SDLC phases (requirements, design, development, testing &amp; further) * Processes (personal, team, management etc) * Methods &amp; models (development and use of software) * Measurement (frameworks, models and metrics) * Environment (development and operation/use, tools / technologies / contexts) * Creation and dissemination of knowledge * Innovation * Role of users (involvement and evolving expertise) * Standards, regulation and governance * Case studies",SE
"Privacy Policy,Technology and Law ","This course focuses on policy issues related to privacy from the perspectives of governments, organizations, and individuals. We will begin with a historical and philosophical study of privacy and then explore recent public policy issues. We will examine the privacy protections provided by laws and regulations, as well as the way technology can be used to protect privacy. We will emphasize technology-related privacy concerns and mitigation, for example: social networks, smartphones, behavioral advertising (and tools to prevent targeted advertising and tracking), anonymous communication systems, big data, and drones.  This is part of a series of courses offered as part of the MSIT-Privacy Engineering masters program. These courses may be taken in any order or simultaneously. Foundations of Privacy (Fall semester) offers more in-depth coverage of technologies and algorithms used to reason about and protect privacy. Engineering Privacy in Software (Spring semester) focuses on the methods and tools needed to design systems for privacy.  This course is intended primarily for graduate students and advanced undergraduate students with some technical background. Programming skills are not required. 8-733, 19-608, and 95-818 are 12-unit courses for PhD students. Students enrolled under these course numbers will have extra assignments and will be expected to do a project suitable for publication. 8-533 is a 9-unit course for undergraduate students. Masters students may register for any of the course numbers permitted by their program. This course will include a lot of reading, writing, and class discussion. Students will be able to tailor their assignments to their skills and interests. However, all students will be expected to do some writing and some technical work.",SP
Mobile and IoT Computing Services ,"With over 6 billion mobile phone users worldwide, including well over a billion smart phone users, new wireless and pervasive computing applications and services are changing the way enterprises interact with customers and employees. The explosion in smart phone ownership along with the deployment of 4G networks is leading to a slew of new mobile apps and services. They range from mobile commerce services to wireless enterprise apps and mobile social networking apps, all the way to more futuristic pervasive computing scenarios where phones interact with a number of other everyday objects (e.g. smart homes, smart cars, smart glasses, health/fitness sensors).  These apps and services are emerging as part of an increasingly rich ecosystem where context awareness and intelligent predictive technologies are used to offer increasingly personalized experiences to users. This same ecosystem has emerged as the engine behind increasingly targeted marketing and advertising scenarios that also raise challenging privacy issues.  The course objective is to introduce participants to the technologies, services and business models associated with Mobile and Pervasive Commerce. It also provides an overview of future trends and ongoing research.  You will learn to evaluate critical design tradeoffs associated with different mobile technologies, architectures, interfaces and business models and how they impact the usability, security, privacy and commercial viability of mobile and pervasive computing services and apps. Topics include Mobile Communications, Mobile OS, Mobile Web technologies 颅 including app development, Mobile Security, Mobile Payments, Mobile Web Apps and Services (e.g. Mobile Entertainment, Mobile Banking, Mobile, Mobile Social Networking, Mobile Health, etc.), Location-Based Services, RFID, Mobile Enterprise Apps, Pervasive Computing Applications, Context awareness, intelligent assistant technologies, and privacy.",HCI
Dynamic Network Analysis ,"Who knows who?  Who knows what?  Who communicates with whom? Who is influential?  How do ideas, diseases, and technologies propagate through groups?  How do social media, social, knowledge, and technology networks differ? How do these networks evolve?  How do network constrain and enable behavior? How can a network be compromised or made resilient? Such questions can be addressed using Network Science.  Network Science, a.k.a. social network analysis and link analysis, is a fast-growing interdisciplinary field aimed at understanding simple &amp; high dimensional networks, from both a static and a dynamic perspective.  Across an unlimited application space, graph theoretic, statistical, &amp; simulation methodologies are used.  An interdisciplinary perspective on network science is provided, with an emphasis on high-dimensional dynamic data. The fundamentals of network science, methods, theories, metrics &amp; confidence estimation, constraints on data collection &amp; bias, and key research findings &amp; challenges are examined.  Illustrative networks discussed include social media based (e.g., twitter), disaster response, organizational, semantic, political elite, crises, terror, &amp; P2P networks.  Critical procedures covered include: basic centralities and metrics, group and community detection, link inference, network change detection, comparative analytics, and big data techniques.  Applications from business, science, art, medicine, forensics, social media &amp; numerous other areas are explored. Key issues addressed: Conceptualization, measurement, comparison &amp; evaluation of networks.  Identification of influential nodes and hidden groups. Network emergence, evolution, change &amp; destabilization.    Graduate course taught every other year.    Prerequisite: Undergraduate-level statistics course or instructor permission. Linear algebra is recommended. Students are encouraged to bring &amp; use their own data, or to use provided data.",NC
Engineering Privacy in Software ,"This section is for Ph.D. students; all other students should enroll in 08-605. Privacy harms that involve personal data can often be traced back to software design failures, which can be prevented through sound engineering practices. In this course, students will learn how to identify privacy threats due to surveillance activities that enhance modern information systems, including location tracking, behavioral profiling, recommender systems, and social networking. Students will learn to analyze systems to identify the core operating principles and technical means that introduce privacy threats, and they will learn to evaluate and mitigate privacy risks to individuals by investigating system design alternatives. Strategies to mitigating privacy risk will be based on emerging standards and reliable privacy preference data. Students will have the opportunity to study web-, mobile- and cyber-physical systems across a range of domains, including advertising, healthcare, law enforcement and social networking. In addition, students will know how, and when, to interface with relevant stakeholders, including legal, marketing and other developers in order to align software design with privacy policy and law.",SP
Machine Learning in Practice ,"Machine Learning is concerned with computer programs that enable the behavior of a computer to be learned from examples or experience rather than dictated through rules written by hand.  It has practical value in many application areas of computer science such as on-line communities and digital libraries.  This class is meant to teach the practical side of machine learning for applications, such as mining newsgroup data or building adaptive user interfaces.  The emphasis will be on learning the process of applying machine learning effectively to a variety of problems rather than emphasizing an understanding of the theory behind what makes machine learning work.  This course does not assume any prior exposure to machine learning theory or practice. In the first 2/3 of the course, we will cover a wide range of learning algorithms that can be applied to a variety of problems.  In particular, we will cover topics such as decision trees, rule based classification, support vector machines, Bayesian networks, and clustering. In the final third of the class, we will go into more depth on one application area, namely the application of machine learning to problems involving text processing, such as information retrieval or text categorization.",IS
An Introduction to Knowledge-Based Deep Learning and Socratic Coaches ,"The subject of this course will be deep learning, one of the most dynamic and exciting emerging areas of computer science.  Deep learning deals with and is conquering the problems resulting from the enormous quantity of data that now surrounds us.  Furthermore, the course will explore knowledge-based deep learning, a new methodology invented by the instructor that offers many potential advantages over conventional deep learning. This is a learn-by-doing, team-project based course, which will be divided into four phases.  In phase one, each student will read and present a number of papers describing state-of-the-art deep learning systems and successful applications.  In phase two, each team will implement the system described in one of the papers.  In phase three, each team will scale that implementation to one of the large benchmark datasets.  In phase four, each team will do a special research project implementing a knowledge-based deep learning system based on pending patent applications of Professor Baker. As a potential follow-on for successful projects, students may participate in a summer course on entrepreneurial applications of deep learning or work as interns in a bootstrap startup based on the knowledge-based deep learning projects. Prerequisite: Strong quantitative aptitude, programming skill, ability to quickly absorb new ideas, teamwork skills.",IS
Natural Language Processing ,"This course is about a variety of ways to represent human languages (like English and Chinese) as computational systems, and how to exploit those representations to write programs that do neat stuff with text and speech data, like translation, summarization, extracting information, question answering, natural interfaces to databases, and conversational agents. This field is called Natural Language Processing or Computational Linguistics, and it is extremely multidisciplinary. This course will therefore include some ideas central to Machine Learning and to Linguistics.  We'll cover computational treatments of words, sounds, sentences, meanings, and conversations. We'll see how probabilities and real-world text data can help. We'll see how different levels interact in state-of-the-art approaches to applications like translation and information extraction.  From a software engineering perspective, there will be an emphasis on rapid prototyping, a useful skill in many other areas of Computer Science.","AL
IAS
NC
PL
SE"
Machine Learning for Text Mining ,"This course provides a comprehensive introduction to the theory and implementation of algorithms for organizing and searching large text collections. The first half of the course studies text search engines for enterprise and Web environments; the open-source Indri search engine is used as a working example. The second half studies text mining techniques such as clustering, categorization, and information extraction. Programming assignments give hands-on experience with document ranking algorithms, categorizing documents into browsing hierarchies, and related topics.","DS
PL
SDF"
Speech Processing ,"Speech Processing offers a practical and theoretical understanding of how human speech can be processed by computers. It covers speech recognition, speech synthesis and spoken dialog systems. The course involves practicals where the student will build working speech recognition systems, build their own synthetic voice and build a complete telephone spoken dialog system. This work will be based on existing toolkits. Details of algorithms, techniques and limitations of state of the art speech systems will also be presented. This course is designed for students wishing understand how to process real data for real applications, applying statistical and machine learning techniques as well as working with limitations in the technology.",SP
Language and Statistics ,"Language technologies (search, text mining, information retrieval, speech recognition, machine translation, question answering, biological sequence analysis...) are at the forefront of this century's information revolution.  In addition to their use of machine learning, these technologies rely centrally on classic statistical estimation techniques.   Yet most CS and engineering undergraduate programs do not prepare students in this area beyond an introductory prob&amp;stats course.  This course is designed to plug this hole.  The goal of 'Language and Statistics' is to ground the data-driven techniques used in language technologies in sound statistical methodology.   We start by formulating various language technology problems in both an information theoretic framework (the source-channel paradigm) and a Bayesian framework (the Bayes classifier).  We then discuss the statistical properties of words, sentences, documents and whole languages, and the computational formalisms used to represent language.  These discussions naturally lead to specific concepts in statistical estimation.  Topics include: Zipf's distribution and type-token curves; point estimators, Maximum Likelihood estimation, bias and variance, sparseness, smoothing and clustering; interpolation, shrinkage, and backoff; entropy, cross entropy and mutual information;  decision tree models applied to language; latent variable models and the EM algorithm; hidden Markov models; exponential models and maximum entropy; semantic modeling and dimensionality reduction; probabilistic context-free grammars and syntactic language models.  The course is designed for LTI &amp; SCS graduate students, but others are welcome.  CS UG upperclassmen who've taken it have done well, though they found it challenging.  The 11-661 version does not require the course project.  Prerequisites: Strong quantitative aptitude.  Comfort with basic UG-level probability.  Some programming skill.",IS
Algorithms for NLP ,"Algorithms for NLP is an introductory graduate-level course on the computational properties of natural languages and the fundamental algorithms for processing natural languages. The course will provide an in-depth presentation of the major algorithms used in NLP, including Lexical, Morphological, Syntactic and Semantic analysis, with the primary focus on parsing algorithms and their analysis.","PL
SDF
AL
IS"
Graduate Seminar on Dialog Processing ,"Dialog systems and processes are becoming an increasingly vital area of interest both in research and in practical applications. The purpose of this course will be to examine, in a structured way, the literature in this area as well as learn about ongoing work.  The course will cover traditional approaches to the problem, as exemplified by the work of Grosz and Sidner, as well as more recent work in dialog, discourse and evaluation, including statistical approaches to problems in the field. We will select several papers on a particular topic to read each week. While everyone will do all readings, a presenter will be assigned to overview the paper and lead the discussion. On occasion, a researcher may be invited to present their own work in detail and discuss it with the group. A student or researcher taking part in the seminar will come away with a solid knowledge of classic work on dialog, as well as familiarity with ongoing trends.",DS
Grammar Formalisms ,"The goal of this course is to familiarize students with grammar formalisms that are commonly used for research in computational lingusitics, language technologies, and lingusitics. We hope to have students from a variety disciplines (linguistics, computer science, psychology, modern languages, philosophy) in order to cover a broad perspective in class discussions. Comparison of formalisms will lead to a deeper understanding of human language and natural language processing algorithms. The formalisms will include: Head Driven Phrase Structure Grammar, Lexical Functional Grammar, Tree Adjoining Grammar and Categorial Grammar. If time permits, we will cover Penn Treebank, dependency grammar, and Construction Grammar. We will cover the treatment of basic syntactic and semantic phenomena in each formalism, and will also discuss algorithms for parsing and generating sentences for each formalism. If time permits, we may discuss formal language theory and generative capacity.     The course is taught jointly by the following faculty of the Language Technologies Institute:     Alan Black  Alon Lavie  Lori Levin (main coordinator)",CN
Machine Translation and Sequence-to-Sequence Models ,"Instructors: Graham Neubig.  Prerequisites: This course has no official pre-requisites, although 11-711 'Algorithms for NLP' or 10-701 'Machine Learning' would be helpful. Course Description:  Machine Translation and Sequence-to-Sequence Models is an introductory graduate-level course surveying the primary approaches and methods for developing systems to translate between human languages, or other sequential data.  The main objective of the course is to obtain basic understanding and implementation skills for modern methods for MT and sequence transduction, including how to design models, how to learn the model parameters, how to search for the best output, and how to create training data. The course will focus on machine translation, but also briefly cover tasks such as dialog response generation, image caption generation, and others.",AR
Machine Learning for Text Mining ,"This course studies the theory, design, and implementation of text-based information systems. The Information Retrieval core components of the course include statistical characteristics of text, representation of information needs and documents, several important retrieval models (Boolean, vector space, probabilistic, inference net, language modeling), clustering algorithms, automatic text categorization, and experimental evaluation. The software architecture components include design and implementation of high-capacity text retrieval and text filtering systems. A variety of current research topics are also covered, including cross-lingual retrieval, document summarization, machine learning, topic detection and tracking, and multi-media retrieval.      Prerequisites:      Programming and data-structures at the level of 15-212 or higher.  Algorithms comparable to the undergraduate CS algorithms course (15-451) or higher.  Basic linear algebra (21-241 or 21-341).   Basic statistics (36-202) or higher.",AL
Speech Recognition and Understanding ,"The technology to allow humans to communicate by speech with machines or by which machines can understand when humans communicate with each other is rapidly maturing. This course provides an introduction to the theoretical tools as well as the experimental practice that has made the field what it is today. We will cover theoretical foundations, essential algorithms, major approaches, experimental strategies and current state-of-the-art systems and will introduce the participants to ongoing work in representation, algorithms and interface design. This course is suitable for graduate students with some background in computer science and electrical engineering, as well as for advanced undergraduates. Prerequisites: Sound mathematical background, knowledge of basic statistics, good computing skills. No prior experience with speech recognition is necessary. This course is primarily for graduate students in LTI, CS, Robotics, ECE, Psychology, or Computational Linguistics. Others by prior permission of instructor.",SP
Language and Statistics II ,"This course will cover modern empirical methods in natural language processing. It is designed for language technologies  students who want to understand statistical methodology in the language domain, and for machine learning students who want to know about current problems and solutions in text processing. Students will, upon completion, understand how statistical modeling and learning can be applied to text, be able to develop and apply new statistical models for problems in their own research, and be able to critically read papers from the major related conferences (EMNLP and ACL). A recurring theme will be the tradeoffs between computational cost, mathematical elegance, and applicability to real problems. The course will be organized around methods, with concrete tasks introduced throughout.    The course is designed for SCS graduate students. Prerequisite: Language and Statistics (11-761) or permission of the instructor. Recommended: Algorithms for Natural Language Processing (11-711), Machine Learning (15-681, 15-781, or 11-746).",SP
Intelligent Information Systems Project ,"The Software Engineering for IS sequence combines classroom material and assignments in the fundamentals of software engineering (11-791) with a self-paced, faculty-supervised directed project (11-792). The two courses cover all elements of project design, implementation, evaluation, and  documentation. Students may elect to take only 11-791; however, if both parts are taken, they should be taken in proper sequence. Prerequisite: 11-791. The course is required for VLIS students.",SE
Introduction to Machine Learning (Undergrad) ,"Machine learning is subfield of computer science with the goal of exploring, studying, and developing learning systems, methods, and algorithms that can improve their performance with learning from data. This course is designed to give undergraduate students a one-semester-long introduction to the main principles, algorithms, and applications of machine learning.   Topics. The topics of this course will be in part parallel with those covered in the graduate machine learning courses (10-715, 10-701, 10-601), but with a greater emphasis on applications and case studies in machine learning.  After completing the course, students will be able to:  *select and apply an appropriate supervised learning algorithm for classification problems (e.g., naive Bayes, perceptron, support vector machine, logistic regression).   *select and apply an appropriate supervised learning algorithm for regression problems (e.g., linear regression, ridge regression).  *recognize different types of unsupervised learning problems, and select and apply appropriate algorithms (e.g., clustering, linear and nonlinear dimensionality reduction).   *work with probabilities (Bayes rule, conditioning, expectations, independence), linear algebra (vector and matrix operations, eigenvectors, SVD), and calculus (gradients, Jacobians) to derive machine learning methods such as linear regression, naive Bayes, and principal components analysis.   *understand machine learning principles such as model selection, overfitting, and underfitting, and techniques such as cross-validation and regularization.   *implement machine learning algorithms such as logistic regression via stochastic gradient descent, linear regression (using a linear algebra toolbox), perceptron, or k-means clustering.   *run appropriate supervised and unsupervised learning algorithms on real and synthetic data sets and interpret the results.",AL
Introduction to Machine Learning (Master's) ,"Machine Learning (ML) develops computer programs that automatically  improve their performance through experience.   This includes learning  many types of tasks based on many types of experience, e.g. spotting  high-risk medical patients, recognizing speech, classifying text  documents, detecting credit card fraud, or driving autonomous vehicles.   10601 covers all or most of: concept learning, decision  trees, neural networks, linear learning, active learning,  estimation &amp; the bias-variance tradeoff, hypothesis testing, Bayesian  learning, the MDL principle, the Gibbs classifier, Naive Bayes, Bayes  Nets &amp; Graphical Models, the EM algorithm, Hidden Markov Models,  K-Nearest-Neighbors and nonparametric learning, reinforcement learning,  bagging, boosting and discriminative training.   Grading will be based on weekly or biweekly assignments (written and/or  programming), a midterm, a final exam, and possibly a project (details  may vary depending on the section).  10601 is recommended for CS Seniors  &amp; Juniors, quantitative Masters students, &amp; non-MLD PhD students.     Prerequisites (strictly enforced): strong quantitative aptitude, college  prob&amp;stats course, and programming proficiency.  For learning to apply  ML practically &amp; effectively, without the above prerequisites, consider  11344/05834 instead. If you are unsure whether you have sufficient mathematical background to do well in this course, you should consider taking the minis 10-606/10-607 Mathematical Background for Machine Learning.   You can evaluate your ability to take the course  via a self-assessment exam at:  https://qna-app.appspot.com/view.html?aglzfnFuYS1hcHByGQsSDFF1ZXN0aW9uTGlzdBiAgICgpO-KCgw ML course comparison: https://goo.gl/mmR2eL",IS
Machine Learning with Large Datasets ,"Large datasets are difficult to work with for several reasons. They are difficult to visualize, and it is difficult to understand what sort of errors and biases are present in them. They are computationally expensive to process, and often the cost of learning is hard to predict - for instance, and algorithm that runs quickly in a dataset that fits in memory may be exorbitantly expensive when the dataset is too large for memory. Large datasets may also display qualitatively different behavior in terms of which learning methods produce the most accurate predictions.  This course is intended to provide a student practical knowledge of, and experience with, the issues involving large datasets. Among the issues considered are: scalable learning techniques, such as streaming machine learning techniques; parallel infrastructures such as map-reduce; practical techniques for reducing the memory requirements for learning methods, such as feature hashing and Bloom filters; and techniques for analysis of programs in terms of memory, disk usage, and (for parallel methods) communication complexity.  The class will include programming assignments, and a one-month short project chosen by the student. The project will be designed to compare the scalability of variant learning algorithms on datasets.  An introductory course in machine learning, like 10-601 or 10-701, is a prerequisite or a co-requisite. If you plan to take this course and 10-601 concurrently please tell the instructor.  The course will include several substantial programming assignments, so an additional prerequisite is 15-211, or 15-214, or comparable familiarity with Java and good programming skills.","AL
IS"
Mathematical Background for Machine Learning I ,"This course provides a place for students to practice the necessary mathematical background for further study in machine learning &#8212; particularly for taking 10-601 and 10-701. Topics covered include probability, linear algebra (inner product spaces, linear operators), multivariate differential calculus, optimization, and likelihood functions. The course assumes some background in each of the above, but will review and give practice in each. (It does not provide from-scratch coverage of all of the above, which would be impossible in a course of this length.) Some coding will be required: the course will provide practice with translating the above mathematical concepts into concrete programs. The Mathematical Background for Machine Learning sequence is split into two minis, with 10-606 being a prerequisite for 10-607.",IS
Mathematical Background for Machine Learning II ,"This course provides a place for students to practice the necessary mathematical background for further study in machine learning &#8212; particularly for taking 10-601 and 10-701. Topics covered include probability, linear algebra (inner product spaces, linear operators), multivariate differential calculus, optimization, and likelihood functions. The course assumes some background in each of the above, but will review and give practice in each. (It does not provide from-scratch coverage of all of the above, which would be impossible in a course of this length.) Some coding will be required: the course will provide practice with translating the above mathematical concepts into concrete programs. The Mathematical Background for Machine Learning sequence is split into two minis, with 10-606 being a prerequisite for 10-607.",IS
Introduction to Machine Learning (PhD) ,"Machine learning studies the question 'How can we build computer programs that automatically improve their performance through experience?'   This includes learning to perform many types of tasks based on many types of experience.  For example, it includes robots learning to better navigate based on experience gained by roaming their environments, medical decision aids that learn to predict which therapies work best for which diseases based on data mining of historical health records, and speech recognition systems that learn to better understand your speech based on experience listening to you.  This course is designed to give PhD students a thorough grounding in the methods, mathematics and algorithms needed to do research and applications in machine learning. Students entering the class with a pre-existing working knowledge of probability, statistics and algorithms will be at an advantage, but the class has been designed so that anyone with a strong numerate background can catch up and fully participate. You can evaluate your ability to take the course via a self-assessment exam that will be made available to you  after you register.  If you are interested in this topic, but are not a PhD student, or are a PhD student not specializing in machine learning, you might consider the master's level course on Machine Learning, 10-601.'  This class may be appropriate for MS and undergrad students who are interested in the theory and algorithms behind ML. If you are unsure whether you have sufficient mathematical background to do well in this course, you should consider taking the minis 10-606/10-607 Mathematical Background for Machine Learning.   You can evaluate your ability to take the course via a self-assessment exam at: https://goo.gl/mmR2eL",IS
Deep Reinforcement Learning &amp; Control ,"This course will cover latest advances in Reinforcement Learning and Control, such as, deep Q learning, actor-critic methods, learning and planning, concurrent trajectory optimization and policy learning, inverse reinforcement learning, hierarchical reinforcement learning methods, forward predictive models, deep model predictive control, exploration strategies, adaptive control, applications to deep robotic learning. By the end of the course you should be able to: 1) code up a suitable reinforcement learning method in simulation or on robotic platform for a task 2) identify what are easy and hard problems in RL and learning for robotics  The course will have a final project which will involve design of a reinforcement learning method in simulation or robotic platform. The homeworks will be in OpenAI gym. Pre-requisites: Students should have a basic background in algorithms, linear algebra, machine Learning, deep learning.",IS
Topics in Deep Learning ,"Building intelligent machines that are capable of extracting meaningful representations from high-dimensional data lies at the core of solving many AI related tasks. In the past few years, researchers across many different communities, from applied statistics to engineering, computer science and neuroscience, have developed deep (hierarchical) models &#8212; models that are composed of several layers of nonlinear processing. An important property of these models is that they can learn useful representations by re-using and combining intermediate concepts, allowing these models to be successfully applied in a wide variety of domains, including visual object recognition, information retrieval, natural language processing, and speech perception.  This is an advanced graduate course, designed for Master's and Ph.D. level students, and will assume a reasonable degree of mathematical maturity. The goal of this course is to introduce students to the recent and exciting developments of various deep learning methods. Some topics to be covered include: restricted Boltzmann machines (RBMs) and their multi-layer extensions Deep Belief Networks and Deep Boltzmann machines; sparse coding, autoencoders, variational autoencoders, convolutional neural networks, recurrent neural networks, generative adversarial networks, and attention-based models with applications in vision, NLP, and multimodal learning. We will also address mathematical issues, focusing on efficient large-scale optimization methods for inference and learning, as well as training density models with intractable partition functions.  Prerequisite: ML: 10-701 or 10-715, and strong programming skills.",IS
Advanced Introduction to Machine Learning ,"The rapid improvement of sensory techniques and processor speed, and the availability of inexpensive massive digital storage, have led to a growing demand for systems that can automatically comprehend and mine massive and complex data from diverse sources.  Machine Learning is becoming the primary mechanism by which information is extracted from Big Data, and a primary pillar that Artificial Intelligence is built upon.  This course is designed for Ph.D. students whose primary field of study is machine learning, or who intend to make machine learning methodological research a main focus of their thesis.  It will give students a thorough grounding in the algorithms, mathematics, theories, and insights needed to do in-depth research and applications in machine learning. The topics of this course will in part parallel those covered in the general graduate machine learning course (10-701), but with a greater emphasis on depth in theory and algorithms.   The course will also include additional advanced topics such as privacy in machine learning, interactive learning, reinforcement learning, online learning,  Bayesian nonparametrics, and additional material on graphical models.  Students entering the class are expected to have a pre-existing strong working knowledge of algorithms, linear algebra, probability, and statistics.  If you are interested in this topic, but do not have the required background or are not planning to work on a PhD thesis with machine learning as the main focus, you might consider the general graduate Machine Learning course (10-701) or the Masters-level Machine Learning course (10-601). ML course comparison: https://goo.gl/mmR2eL",IS
Foundations of Machine Learning and Data Science ,"This course will cover fundamental topics in Machine Learning and Data Science, including powerful algorithms with provable guarantees for making sense of and generalizing from large amounts of data.  The course will start by providing a basic arsenal of useful statistical and computational tools, including generalization guarantees, core algorithmic methods, and fundamental analysis models.  We will examine questions such as: Under what conditions can we hope to meaningfully generalize from limited data?  How can we best combine different kinds of information such as labeled and unlabeled data, leverage multiple related learning tasks, or leverage multiple types of features?  What can we prove about methods for summarizing and making sense of massive datasets, especially under limited memory?  We will also examine other important constraints and resources in data science including privacy, communication, and taking advantage of limited interaction.  In addressing these and related questions we will make connections to statistics, algorithms, linear algebra, complexity theory, information theory, optimization, game theory, and empirical machine learning research.  Topics to be covered will include: - Fundamental measures of complexity for generalization, including   VC-dimension and Rademacher complexity. - Core algorithmic tools including boosting, regularization, and   online optimization with connections to game theory. - Spectral methods, streaming algorithms and other approaches for   handling massive data. - Foundations and algorithms for addressing important constraints or   externalities such as privacy, limited memory, and communication   constraints. - Foundations for modern learning paradigms including semi-supervised   learning, never-ending learning, interactive learning, and deep   learning.",IS
ROB Freshman Seminar: Artificial Intelligence and Humanity ,"In 1965 British mathematician I.J. Good wrote, An ultraintelligent machine could design even better machines; there would then unquestionably be an intelligence explosion, and the intelligence of man would be left far behind.  As we enter an age where companies like Uber are testing driverless cars in Pittsburgh and innovative interfaces like IBMs Watson can play jeopardy and learn techniques for medical diagnoses, how are we to negotiate an intelligence explosion that for many individuals might threaten the very notions of what it means to be human?  The future of human-to-machine relationships will likely define our historical epoch and yet, many young technologists and humanists underestimate the downstream impact of technological innovations on human society.  Presently, we have little choice but to attend to this rapidly anxiety-ridden question.  This seminar will attend to the challenge of present existential questions on what it means to be human (read not machine) in the context of a rapidly advancing technological age.  We will consider human narratives throughout history that exam how governments and individual citizens defined humanity in the context of slavery and colonialism as a framework for exploring and projecting what it means to be human in the age of rapidly advancing intelligent machines.  We will trace the technological advancements of the recent five decades and identify historical precedents and speculative narratives that help us to consider issues like labor, economic disparity, negotiations of power, human dignity and ethical responsibility within the context of human relations with advancing technological tools that are now coined, artificial intelligence.",IS
Introduction to Physical Computing ,"Physical computing refers to the design and construction of physical systems that use a mix of software and hardware to sense and respond to the surrounding world.  Such systems blend digital and physical processes into toys and gadgets, kinetic sculpture, functional sensing and assessment tools, mobile instruments, interactive wearables, and more.  This is a project-based course that deals with all aspects of conceiving, designing and developing projects with physical computing: the application, the artifact, the computer-aided design environment, and the physical prototyping facilities.  The course is organized around a series of practical hands-on exercises which introduce the fundamentals of circuits, embedded programming, sensor signal processing, simple mechanisms, actuation, and time-based behavior.  The key objective is gaining an intuitive understanding of how information and energy move between the physical, electronic, and computational domains to create a desired behavior.  The exercises provide building blocks for collaborative projects which utilize the essential skills and challenge students to not only consider how to make things, but also for whom we design, and why the making is worthwhile.  This course is an IDeATe Portal Course for entry into either of the IDeATe Intelligent Environments or Physical Computing programs.  CFA/DC/TPR students can enroll under 16-223; CIT/MCS/SCS students can enroll in the 60-223 version of the course.  Please note that there will be lab usage and materials fees associated with this course.",SP
Introduction to Feedback Control Systems ,"This course is designed as a first course in feedback control systems  for computer science majors. Course topics include classical linear  control theory (differential equations, Laplace transforms, feedback  control), linear state-space methods (controllability/observability,  pole placement, LQR), nonlinear systems theory, and an introduction  to control using computer learning techniques. Priorities  will be given to computer science majors with robotics minor.","AR
IAS
DS"
Introduction to Robotics ,"This course presents an overview of robotics in practice and research with topics including vision, motion planning, mobile mechanisms, kinematics, inverse kinematics, and sensors. In course projects, students construct robots which are driven by a microcontroller, with each project reinforcing the basic principles developed in lectures. Students nominally work in teams of three: an electrical engineer, a mechanical engineer, and a computer scientist. This course will also expose students to some of the contemporary happenings in robotics, which includes current robot lab research, applications, robot contests and robots in the news.",IS
Planning Techniques for Robotics ,"Planning is one of the core components that enable robots to be autonomous. Robot planning is responsible for deciding in real-time what should the robot do next, how to do it, where should the robot move next and how to move there. This class does an in-depth study of popular planning techniques in robotics and examines their use in ground and aerial robots, humanoids, mobile manipulation platforms and multi-robot systems. The students learn the theory of these methods and also implement them in a series of programming-based projects.   To take the class students should have taken an Intro to Robotics class and have a good knowledge of programming and data structures.",AR
IDeATe: Art of Robotic Special Effects ,"Inspired by the early 'trick' films of George Melies, this project-oriented course brings together robotics and film production technique to infuse cinema with the wonder of live magic.  Students will learn the basics of film production using animatronics, camera motion control, and compositing.  The projects apply these techniques to create innovative physical effects for short films, all the way from concept to post-production.  The course emphasizes real-time practical effects to explore the immediacy and interactivity of improvisation and rehearsal.  The robotics topics include animatronic rapid prototyping and programming human-robot collaborative performance.  The course includes  a brief overview of the history of special effects and robotics to set the work in context.","GV
DS
AR"
Robotics for Creative Practice ,"[IDeATe collaborative course]. This project-oriented course brings art and engineering together into making machines which are surprisingly animate. Students will iterate their concepts through several small projects focused on using embodied behavior as a creative medium for storytelling, performance, and human interaction. Students will learn skills for designing, constructing and programming simple robot systems, then exploring their results through exhibition and performance. Technical topics include systems thinking, dynamic physical and computational behavior, autonomy, embedded programming, and fabrication and deployment. Discussion topics include both contemporary kinetic sculpture and robotics research. Please note that there may be usage/materials fees associated with this course.","IS
IAS
GV
AR
DS"
Robot Kinematics and Dynamics ,"Foundations and principles of robotic kinematics. Topics include transformations, forward kinematics, inverse kinematics, differential kinematics (Jacobians),  manipulability, and basic equations of motion. Course also include programming on robot arms.",IAS
Computer Vision ,"Basic concepts in machine vision, including sensing and perception, 2D image analysis, pattern classification, physics-based vision, stereo and motion, and object recognition.","CN
AR"
Vision Sensors ,"This course covers the fundamentals of vision cameras and other sensors - how they function, how they are built, and how to use them effectively. The course presents a journey through the fascinating five hundered year history of 'camera-making' from the early 1500's 'camera obscura' through the advent of film and lenses, to today's mirror-based and solid state devices (CCD, CMOS). The course includes a significant hands-on component where students learn how to use the sensors and understand, model and deal with the uncertainty (noise) in their measurements. While the first half of the course deals with conventional 'single viewpoint' or 'perspective' cameras, the second half of the course covers much more recent 'multi-viewpoint' or 'multi-perspective' cameras that includes a host of lenses and mirrors.",AR
Designing Computer Vision Apps ,"Computer vision is a discipline that attempts to extract information from images and videos. Nearly every smart device on the planet has a camera, and people are increasingly interested in how to develop apps that use computer vision to perform an ever expanding list of things including: 3D mapping, photo/image search, people/object tracking, augmented reality etc. This course is intended for students who are not familiar with computer vision, but want to come up to speed rapidly with the latest in environments, software tools and best practices for developing computer vision apps. No prior knowledge of computer vision or machine learning is required although a strong programming background is a must (at a minimum good knowledge of C/C++). Topics will include using conventional computer vision software tools (OpenCV, MATLAB toolboxes, VLFeat, CAFFE), and development on iOS devices using mobile vision libraries such as GPUImage and fast math libraries like Armadillo and Eigen. For consistency, all app development will be in iOS and it is expected that all students participating in the class have access to an Intel-based MAC running OS X Mavericks or later. Although the coursework will be focussed on a single operating system, the knowledge gained from this class is intended to generalize to other mobile platforms such as Android etc.",IS
Robotics Systems Engineering ,"Systems engineering examines methods of specifying, designing, analyzing and testing complex systems.  In this course, principles and processes of systems engineering are introduced and applied to the development of robotic devices.  The focus is on robotic system engineered to perform complex behavior. Such systems embed computing elements, integrate sensors and actuators, operate in a reliable and robust fashion, and demand rigorous engineering from conception through production. The course is organized as a progression through the systems engineering process of conceptualization, specification, design, and prototyping with consideration of verification and validation.  Students completing this course will engineer a robotic system through its compete design and initial prototype.  The project concept and teams can continue into the Spring-semester (16-474 Robotics Capstone) for system refinement, testing and demonstration.",SP
Reality Computing Studio ,"[IDeATe collaborative course] Reality computing encompasses a constellation of technologies focused around capturing reality (laser scanning, photogrammetry), working with spatial data (CAD, physical modeling, simulation), and using data to interact with and influence the physical world (augmented / virtual reality, projector systems, 3d printing, robotics). Taught in collaboration with the school of architecture, this studio asks students to apply these technologies to real world problems such as residential design, sustainability, and infrastructure monitoring.","AR
HCI"
Reality Computing II ,"[IDeATe collaborative course] Reality computing encompasses a constellation of technologies focused around capturing reality (laser scanning, photogrammetry), working with spatial data (CAD, physical modeling, simulation), and using data to interact with and influence the physical world (augmented / virtual reality, projector systems, 3d printing, robotics). This iteration of the reality computing course will focus on 'design realization': the translation from digital design to fully realized tangible artifact. Collaborating with the UDBS design studio, and within the context of a full-scale residential prototype, students will investigate how reality computing technologies can be used to accelerate and advance the process of design realization by using reality computing to understand existing homes, map design data into the real world, and highlight conflicts between design and reality. Topics of special focus within the course are residential design (John Folan) and augmented reality and robotics (Pyry Matikainen).","AR
IAS
PL
SDF
SP"
Human Robot Interaction ,"The field of human-robot interaction (HRI) is fast becoming a significant area of research in robotics. The basic objective is to create and investigate interfaces that enable natural and effective modes of interaction with robotic technologies. HRI is highly interdisciplinary, bringing together methodologies and techniques from robotics, artificial intelligence, human-computer interaction, human factors, interaction design, psychology, anthropology, education, drama, and other fields.    This course is primarily lecture-based, with in-class participatory mini-projects, group homework assignments, and a group term project that will enable students to put theory to practice using state-of-the-art interactive robots. The topics covered will include man-machine coupling, underlying robotic technologies, as they relate to human-robot interaction, interaction methodologies and techniques, the singularity, and will include significant discussion of application domains that feature HRI.    This course has no prerequisites, but some basic familiarity with robots is recommended (programming knowledge is not necessary, but is useful for the term project).",HCI
Robotics Capstone ,"In this course students refine the design, build, integrate, test, and demonstrate the performance of the robot they designed in the pre-requisite Systems Engineering Course (16-450). The students are expected to continue to apply the process and methods of Systems Engineering to track requirements, evaluate alternatives, refine the cyberphysical architectures, plan and devise tests, verify the design, and validate system performance. In addition, the students learn and apply Project Management techniques to manage the technical scope, schedule, budget, and risks of their project. The course consists of lectures, class meetings, reviews, and a final demonstration. Lectures cover core topics in Project Management and special topics in Systems Engineering. During class meetings the students and instructor review progress on the project and discuss technical and project-execution challenges. There are three major reviews approximately at the end of each of the first three months of the semester.  For each review, the students give a presentation and submit an updated version of the System Design and Development Document. The course culminates in a System Performance Validation Demonstration at the end of the semester. In addition to that the students hold a special demonstration of their robotic system for the broader Robotics community.",SP
Advanced Computer Vision Apps. ,"Computer vision is a discipline that attempts to extract information from images and videos. Nearly every smart device on the planet has a camera, and people are increasingly interested in how to develop apps that use computer vision to perform an ever expanding list of things including: 3D mapping, photo/image search, people/object tracking, augmented reality etc. This course is intended for graduate students who are familiar with computer vision, and are keen to learn more about the applying state of the art vision methods on smart devices and embedded systems. A strong programming background is a must (at a minimum good knowledge of C/C++), topics will include using conventional computer vision software tools (OpenCV, MATLAB toolboxes, VLFeat, CAFFE, Torch 7), and development on iOS devices using mobile vision libraries such as GPUImage, Metal and fast math libraries like Armadillo and Eigen. For consistency, all app development will be in iOS and it is expected that all students participating in the class have access to an Intel-based MAC running OS X Mavericks or later. Although the coursework will be focused on a single operating system, the knowledge gained from this class will easily generalize to other mobile platforms such as Android etc.",AR
Computer Vision ,"This course introduces the fundamental techniques used in computer vision, that is, the analysis of patterns in visual images to reconstruct and understand the objects and scenes that generated them. Topics covered include image formation and representation, camera geometry, and calibration, computational imaging, multi-view geometry, stereo, 3D reconstruction from images, motion analysis, physics-based vision, image segmentation and object recognition. The material is based on graduate-level texts augmented with research papers, as appropriate. Evaluation is based on homeworks and a final project. The homeworks involve considerable Matlab programming exercises.  Texts recommended but not required:  Title: 'Computer Vision Algorithms and Applications' Author: Richard Szeliski Series: Texts in Computer Science Publisher: Springer ISBN: 978-1-84882-934-3  Title: 'Computer Vision: A Modern Approach' Authors: David Forsyth and Jean Ponce Publisher: Prentice Hall ISBN: 0-13-085198-1",AR
Robotic Motion Planning ,"The robot motion field and its applications have become incredibly broad  and theoretically deep at the same time.  The goal of the course is to  provide an up-to-date foundation in the motion planning field, make the  fundamentals of motion planning accessible to the novice and relate  low-level implementation to high-level algorithmic concepts. We cover basic  path planning algorithms using potential functions, roadmaps and cellular  decompositions. We also look at the recent advances in sensor-based  implementation and probabalistic techniques, including sample-based  roadmaps, rapidly exploring random trees, Kalman filtering, and Bayesian  estimation.",SP
Geometry of Locomotion ,"This course introduces geometric methods for the analysis of locomoting systems. Focusing on the kinematics of locomoting systems, the course covers topics from differential geometry, geometric mechanics, and motion planning . Specific topics include  configuration spaces, manifolds, groups, Lie groups,   representations of velocity,   holonomic and nonholonomic constraints,   constraint curvature, response to cyclic inputs and  distance metrics. The primary goal of this class is to develop an intuitive understanding of these concepts and how they are used in locomoting systems, rather than working through a set of formal proofs and derivations. We do, however, incorporate enough mathematical formalism for this class to serve as a starting point for further investigation into this topic area. We also call upon biological data, when available, and relate to the mathematical formalisms in the class.",IAS
Mobile Robots ,"This course covers all aspects of mobile robot systems design and programming from both a theoretical and a practical perspective. The basic subsystems of control, localization, mapping, perception, and planning are presented. For each, the discussion will include  relevant methods from applied mathematics. aspects of physics necessary in the construction of  models of system and environmental behavior, and core algorithms which have proven to be valuable in a wide range of circumstances.","AL
IAS
IS
NC
SE
SDF
SP"
Planning and Decision-making in Robotics ,"Planning and Decision-making are critical components of autonomy in robotic systems. These components are responsible for making decisions that range from path planning and motion planning to coverage and task planning to taking actions that help robots understand the world around them better. This course studies underlying algorithmic techniques used for planning and decision-making in robotics and examines case studies in ground and aerial robots, humanoids, mobile manipulation platforms and multi-robot systems. The students will learn the algorithms and implement them in a series of programming-based projects.",SP
Robot Localization and Mapping ,"Robot localization and mapping are fundamental capabilities for mobile robots operating in the real world. Even more challenging than these individual problems is their combination: simultaneous localization and mapping (SLAM). Robust solutions are needed that can handle the uncertainty inherent in sensor measurements, while providing localization and map estimates in real-time. We will explore suitable efficient probabilistic inference algorithms at the intersection of linear algebra and probabilistic graphical models. We will also explore state-of-the-art systems.",IAS
Program Analysis ,"This course covers both foundations and practical aspects of the automated analysis of programs, which is becoming increasingly critical to find software errors and assure program correctness.  The theory of abstract interpretation captures the essence of a broad range of program analyses and supports reasoning about their correctness.  Building on this foundation, the course will describe program representations, data flow analysis, alias analysis, interprocedural analysis, dynamic analysis, and symbolic execution.  Through assignments and projects, students will design and implement practical analysis tools that find bugs and verify properties of software.  Prerequisites: 15-251 and (15-150 or 15-214)","PL
SP"
Software Engineering Reflection ,"This course is an opportunity to reflect on a software engineering experience you have had in industry.  It is structured as a writers workshop, in which you will work with the instructor and other students to identify and flesh out a software engineering theme that is illustrated by your industry experience.  You will prepare a 10-page report on this theme, comparable to a practitioner's report at a conference like ICSE or OOPSLA, and a 30-minute presentation to match.  This course fulfills a requirement of the Software Engineering Minor program, but students in other programs may take the course if they meet the prerequisite industry experience and if space is available.",SE
Global Software Development ,"Software development is increasingly a globally-distributed undertaking. The search for talent across national boundaries and the integration of groups thrown together by mergers and acquisitions are but two of the many forces conspiring to fundamentally change the organizational context of software development.  The skills that allow developers and managers to thrive in this milieu are among the most important in today's development organizations.  Distributed software development organizations are also receiving attention from researchers interested in communication, collaboration, and coordination over distances.  Creating trust, awareness, shared understanding, and many other essentials of teamwork typically relies on face to face interaction.  Creating effective technology-mediated mechanisms to support distributed teams requires a deep understanding of how individuals come together to form teams and organizations.  This course covers a set of topics that are essential to both professionals who will become participants and leaders in globally-distributed projects, as well as researchers interested in studying virtual teams, distributed organizations, and global software development.  Topics covered in this course will include:  * Virtual teams, distributed organizations * Architectures and coordination * Distributed development environments * Lessons from open source * Open source ecologies * Challenges of culture * The outsourcing relationship * Facilitating trust, cooperation, social capital * Social networks and knowledge networks * Communication and awareness * Assessing coordination risk",SDF
Software Process Definition ,"A software process definition is the cornerstone of implementing and improving a software process.  The objective of this course is to prepare students to understand how processes work within the context of an operational, day-to-day engineering company, and most importantly how they can, as an individual within an engineering environment, change a process for the betterment of all. Although the focus is on software process, this course will be useful to all students who will be executing, improving, or defining most any type of process.  An incremental methodology and modular approach to software process definition is used and covers:                                     * guidelines for early success and building a sound foundation * organizing the process definition as it develops * approaches to avoid unnecessarily elaborate or formal notations * developing the process using organizational goals and constraints  * using the environmental context that the process resides within and builds upon  Although the focus is on software process, this course will be useful to all students who will be executing, improving, or defining most any type of process.  Requirement: This course is intended for individuals who have operational software engineering experience or a comprehensive undergraduate coursework in software engineering.",SE
Introduction to Real-Time Software and Systems ,"Introduction to Real-Time Software and Systems presents an overview of time as it relates engineering complex systems. Any system that responds at the pace of relevant events has real-time constraints whether the timescale is short, like the flight controls for an aircraft, or longer, like the flight reservation system for an airline.  Fundamental concepts, terminology, and issues of real-time systems are introduced in this course. The focus is on software solutions to real-time problems-solutions that must be both correct and timely. Software development is examined with emphasis on real-time issues during each phase of the software lifecycle. Real-time requirements analysis, architecting real-time systems, designing and modeling system timing, and implementation and testing strategies are studied. Modeling techniques using UML 2.0 are applied. Particular emphasis is placed on real-time scheduling to achieve desired timing, reliability, and robustness. Languages and operating systems for real-time computing, and real-time problems in concurrent and distributed systems are explored.  This course provides a comprehensive view of real-time systems with theory, techniques and methods for the practitioner. After successfully completing this course, the student will be able to identify constraints and understand real-time issues in system development, and propose approaches to typical real-time problems. The aim of this course is to motivate and prepare students to pursue more in-depth study of specific problems in real-time computing and systems development.  REQUIREMENT: Proficiency with a high-level programming language such as C or Ada and basic concepts of computing systems. Familiarity with software engineering concepts and system development lifecycle.",SF
Software Measurement ,"Sections D and PP are NOT available for on-campus students.    The purpose of this course is to introduce students to software measurement &#8212; from need identification through analysis and feedback and into the process. Much of the course material demonstrates concepts of software measurement that are used by managers and practitioners in industry today. The course is taught within the framework of the software engineering process.     Required text: Selected Readings handed out in class    Requirement: This course is intended for individuals who have industrial software engineering experience with a large project, or a comprehensive undergraduate course in software engineering.",SE
Hardware for Software Engineers ,"The goal of this course is to provide an understanding of electronics beyond the average computer organization course.  Its purpose is to enable software engineers to be more effective in domains where software and hardware are closely coupled. Examples of such domains include robotics, avionics, automotive, process control, and many others. Students successfully completing this course will be better prepared to communicate with hardware-oriented engineers, understand the hardware environment, and the subtle regions where software and hardware meet.   Requirement: Students need not have a hardware background, but they should have a solid computer science background including languages, data structures, discrete math, operating systems, and computer organization.  It is highly desirable that students have project experience, preferably real-world experience, although project course work and/or internships will suffice. Undergraduates need instructor approval (lattanze@cs.cmu.edu).",AR
Engineering Data Intensive Scalable Systems ,"Internet services companies such as Google, Yahoo!, Amazon, and Facebook have pioneered systems that have achieved unprecedented scale while still providing high level availability and a high cost-performance.  These systems differ from mainstream high performance systems in fundamental ways.  They are data intensive rather than compute intensive as we see with mainstream super computers spending the bulk of their time performing data I/O and manipulation rather than computation.  They need to inherently support scalability, typically having high reliability and availability demands as well.  Given that they often operate in the commercial space the cost-performance of these systems needs to be such that the organizations dependent on such systems can turn a profit. Designing and building these systems require a specialized set of skills. This course will cover the set of topics needed in order to design and build data intensive scalable systems.  In this domain engineers not only need to know how to architect systems that are inherently scalable, but to do so in a way that also supports high availability, reliability, and performance.   Given the large distributed nature of these systems basic distributed systems concepts such as consistency and time and synchronization are also important.  These systems largely operate around the clock, placing an emphasis on operational concerns.  This course will introduce students to these concerns with the intent that they understand the extent to which things like deploying, monitoring, and upgrading impact the design. The course will be a hands-on project oriented course.  The basic concepts will be given during the lectures and applied in the project.  The students will gain exposure to the core concepts needed to design and build such systems as well as current technologies in this space.  Class size will be limited.","DS
NC
PL
SE"
Models of Software Systems ,"Scientific foundations for software engineering depend on the use of precise, abstract models for describing and reasoning about properties of software systems. This course considers a variety of standard models for representing sequential and concurrent systems, such as state machines, algebras, and traces. It shows how different logics can be used to specify properties of systems, such as functional correctness, deadlock freedom, and internal consistency. Concepts such as compositionality, abstraction, invariants, non-determinism, and inductive definitions are recurrent themes throughout the course. After completing this course, students will:  1. Understand the strengths and weaknesses of certain models and logics including state machines, algebraic and process models, and temporal logic;  2. Be able to select and describe appropriate abstract formal models for certain classes of systems, describe abstraction relations between different levels of description, and reason about the correctness of refinements;  3. Be able to prove elementary properties about systems described by the models introduced in the course; and  4. Understand some of the strengths and weakness of formal automated reasoning tools.    Prerequisites: Undergraduate discrete math including first-order logic, sets, functions, relations, and simple proof techniques such as induction.   Sections D, PP and G are NOT available for on-campus students.   Admission to the class is by approval from the instructor: If you are not MSE/MSIT-SE/MITS, send email to garlan@cs.cmu.edu for permission to enroll. The email should briefly describe your background, whether you have taken an undergraduate discrete math course, and why you would like to take the course. The course must be taken for a letter grade (not pass/fail).   This is a graduate level course.","SF
PL"
Managing Software Development ,"Sections D, F, PP and G are NOT available for on-campus students.  Large scale software development requires the ability to manage resources - both human and computational - through control of the development process. This course provides the knowledge and skills necessary to lead a project team, understand the relationship of software development to overall product engineering, estimate time and costs, and understand the software process.  After completing this course, students will:   1. be able to write a software project management plan, addressing issues of risk analysis, schedule, costs, team organization, resources, and technical approach  2. be able to define the key process areas of the Capability Maturity Model and the technology and practices associated with each and a variety of software development life cycle models and explain the strengths, weaknesses, and applicability of each   3. understand the relationship between software products and overall products (if embedded), or the role of the product in the organizational product line  4. understand the legal issues involved in liability, warranty, patentability, and copyright  5. understand the purpose and limitations of software development standards and be able to apply sensible tailoring where needed  6. be able to use software development standards for documentation and implementation   7. be able to apply leadership principles  8. be able to perform requirements elicitation    REQUIREMENT:  Students must have had industrial software engineering experience with a large project, or a comprehensive undergraduate course in software engineering.    This course is for letter grade only. Contact the instructor (droot@cs.cmu.edu) for permission to join the class.  This is a course for graduate students.  Only undergrad SE minors may take this course.",SP
Analysis of Software Artifacts ,"Analysis is the systematic examination of an artifact to determine its properties. This course will focus on analysis of software artifacts&#8212;primarily code, but also including analysis of designs, architectures, and test suites. We will focus on functional properties, but also cover non-functional properties like performance and security. In order to illustrate core analysis concepts in some depth, the course will center on static program analysis; however, the course will also include a breadth of techniques such as testing, model checking, theorem proving, dynamic analysis, and type systems.  The course will balance theoretical discussions with lab exercises in which students will apply the ideas they are learning to real artifacts.    After completing this course, students will:     * know what kinds of analyses are available and how to use them     * understand their scope and power,when they can be applied and what       conclusions can be drawn from their results     * have a grasp of fundamental notions sufficient to evaluate new kinds of       analysis when they are developed     * have some experience selecting and writing analyses for a real piece of       software, applying them and interpreting the results    Ph.D. students taking the 17-754 version of the course will gain a broad overview of the analysis research literature and in-depth knowledge of a particular sub-area through a course project.    Requirement: A recent discrete math course and programming experience.  Strongly Recommended: Models of SW Development course (17-651) before taking this course.  This course is for letter grade only (no pass/fail grades).  This is a graduate course.  Only undergrad SE minors may take this course with the instructor's permission.","AL
PL
SE
SDF"
Architectures for Software Systems ,"Successful design of complex software systems requires the ability to describe, evaluate, and create systems at an architectural level of abstraction.  This course introduces architectural design of complex software systems.  The course considers commonly-used software system structures, techniques for designing and implementing these structures, models and formal notations for characterizing and reasoning about architectures, tools for generating specific instances of an architecture, and case studies of actual system architectures. It teaches the skills and background students need to evaluate the architectures of existing systems and to design new systems in principled ways using well-founded architectural paradigms. After completing this course, students will be able to: 1. describe an architecture accurately 2. recognize major architectural styles in existing software systems 3. generate architectural alternatives for a problem and choose among them 4. construct a medium-sized software system that satisfies an architectural specification 5. use existing definitions and development tools to expedite such tasks 6. understand the formal definition of a number of architectures and be able to reason about the properties of those architectures 7. use domain knowledge to specialize an architecture for a particular family of applications REQUIREMENT:  Experience with at least one large software system, either through industrial software development experience or an undergraduate course in software engineering, compilers, operating sys., or the like. This course is for letter grade only.  Instructor wants each student who wants to take his Architectures class to have worked on a significant software system in your courses or in industry. Write to (garlan@cs.cmu.edu) for admission into the course stating the experience you have had. This is a graduate course.  Only undergrad SE minors may take this course",SF
Seminar in Software Process ,"The Seminar in Software Process course is a self-study and discussion course. Discussions center on how to implement effective and efficient software processes.  The focus of the seminar is on systematic approaches to building software better, faster, and cheaper. A variety of process improvement and quality management strategies are discussed, including Total Quality Management, Baldrige Award, ISO 9001, ISO 15504 (SPICE), and others, but the course is primarily structured around the staged approach to improvement from the Capability Maturity Model (CMM). Specific topics that are covered included software project management, configuration management, quality assurance, organizational learning, process definition, training, peer reviews, team building, change management, measurement, and statistical process control. These topics are addressed from a process management perspective.      Required Textbook: M.B. Chrissis, M.D. Konrad, and S. Shrum, 'CMMI: Guidelines for Process Integration and Product Improvement, Second Edition,' Addison-Wesley, 2006, or you can use the online SEI technical reports, which are free. Note that the third edition of this book is planned for March 2011.  This is a graduate course.  Only undergrad SE minors may take this course.",SP
Fundamental Programming Concepts,CS 1109 - Fundamental Programming Concepts &#160;&#160;&#160;&#160;&#160;Summer. 2 credits. S/U grades only. Enrollment limited to: prefreshman standing or permission of instructor. Credit may not be applied toward engineering degree.Staff.Designed for students who intend to take CS 111x but are not adequately prepared for it. Basic programming concepts and problem analysis are studied. An appropriate highlevel programming language is used. Students with previous programming experience and students who do not intend to take CS 111x should not take this course.,"SDF
PL
SP"
Introduction to Computing Using Python,"CS 1110 - Introduction to Computing Using Python (MQR-AS) &#160;&#160;&#160;&#160;&#160;Fall, spring, summer. 4 credits. Student option grading.Forbidden overlap: due to a partial overlap in content, students will receive 6 credits instead of 8 if they take CS 1110 and one of the following: CS 1112&#160;, CS 1114&#160;, CS 1115&#160;,  INFO 1100&#160;, VISST 1100&#160;. Students may not enroll in CS 1110 if they have taken or are co-enrolled in CS 2110&#160;/ENGRD 2110&#160;, CS 2112&#160; , or have taken or are co-enrolled in a course offered or cross-listed with a CS number 3000 or above. (Students looking to learn Python rather than learn how to program should take CS 1133&#160; instead). Students who have affiliated with the computer-science major may not enroll. Assumes basic high school mathematics (no calculus) but no programming experience.Staff.Programming and problem solving using Python. Emphasizes principles of software development, style, and testing. Topics include procedures and functions, iteration, recusion, arrays and vectors, strings, an operational model of procedure and function calls, algorithms, exceptions, object-oriented programming, and GUIs (graphical user interfaces). Weekly labs provide guided practice on the computer, with staff present to help. Assignments use graphics and GUIs to help develop fluency and understanding. Outcome 1: Be fluent in the use of procedural statements -assignments, conditional statements, loops, method calls- and arrays. Be able to design, code, and test small Python programs that meet requirements expressed in English. This includes a basic understanding of top-down design.Outcome 2: Understand the concepts of object-oriented programming as used in Python: classes, subclasses, inheritance, and overriding.Outcome 3: Have knowledge of basic searching and sorting algorithms. Have knowledge of the basics of vector computation.","AL
PL
SDF"
Introduction to Computing Using MATLAB,"CS 1112 - Introduction to Computing Using MATLAB (MQR-AS) &#160;&#160;&#160;&#160;&#160;Fall, spring. 4 credits. Student option grading.Forbidden Overlap: due to a partial overlap in content, students will receive 6 credits instead of 8 if they take CS 1112 and CS 1110&#160;.  In addition, students will receive credit for only one course in the following group: CS 1112, CS 1114&#160;, CS 1115&#160;.Corequisite: MATH 1110&#160;, MATH 1910&#160;, or equivalent. Assumes student is comfortable with mathematics (at level of one semester of calculus) but has no prior programming experience. Co-meets with CS 1142&#160;. Staff.Programming and problem solving using MATLAB. Emphasizes the systematic development of algorithms and programs. Topics include iteration, functions, arrays, recursion, object-oriented programming, and MATLAB graphics. Assignments are designed to build an appreciation for complexity, dimension, fuzzy data, inexact arithmetic, randomness, simulation, and the role of approximation. Outcome 1: Be fluent in the use of procedural statements-assignments, conditional statements, loops, function calls-and arrays. Be able to design, code, and test small MATLAB programs that meet requirements expressed in English. This includes a basic understanding of top-down design.Outcome 2: Understand the concepts of object-oriented programming as used in MATLAB: classes, subclasses, inheritance, and overriding.Outcome 3: Have knowledge of basic sorting and searching algorithms.Outcome 4: Have a working familiarity with graphics tools in MATLAB.",SP
Introduction to Computing Using MATLAB and Robotics,"CS 1114 - [Introduction to Computing Using MATLAB and Robotics] (MQR-AS) &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Letter grades only.Forbidden Overlap: due to a partial overlap in content, students will receive 6 credits instead of 8 if they take CS 1114 and CS 1110&#160;. In addition, students will receive credit for only one course in the following group: CS 1114, CS 1112&#160;, CS 1115&#160;.Prerequisite: some programming experience. Staff.Honors-level introduction to computer science using camera-controlled robots using MATLAB. Emphasis is on modular design of programs and on fundamental algorithms. Extensive laboratory experiments with cameras and robots, including Sony Aibo. Example projects include controlling a robot by pointing a light stick and making a robot recognize simple colored objects. Outcome 1: Be able to design, code, and test MATLAB programs that meet requirements expressed in English and mathematics. This includes a basic understanding of top-down design.Outcome 2: Understand the concepts of object-oriented programming as used in MATLAB: classes, subclasses, inheritance, and overriding.Outcome 3: Have a fundamental understanding of how computer programs can manipulate robots through sight.Outcome 4: Knowledge of basic graph algorithms, geometric algorithms, and sorting.",AR
Short Course in MATLAB,"CS 1132 - Short Course in MATLAB &#160;&#160;&#160;&#160;&#160;Fall, spring. 2 credits. S/U grades only. Staff.Introduction to the MATLAB programming language. Covers the basic programming constructs of MATLAB, including assignment, conditionals, iteration, functions, arrays, vectorized computation, and scientific graphics. Designed for students who need MATLAB for research or other courses. Does not assume any previous programming experience. Outcome 1: Students who take this course will understand the basic MATLAB constructs and be able to write simple programs.",PL
Short Course in Python,"CS 1133 - Short Course in Python &#160;&#160;&#160;&#160;&#160;Fall, spring. 2 credits. S/U grades only. Staff.Introduction to the Python programming language. Covers the basic programming constructs of Python, including assignment, conditionals, iteration, functions, object-oriented design, arrays, and vectorized computation. Designed for students who need Python for research or other courses. Does not assume any previous programming experience. Outcome 1: Students who take this course will build an understanding the basic Python constructs and be able to write simple programs.","AL
AR
IAS
PL
SDF
SP"
Introduction to MATLAB,"CS 1142 - [Introduction to MATLAB] &#160;&#160;&#160;&#160;&#160;Fall, spring (weeks 1-7). Not offered 2017-2018. 2 credits. Student option grading.Corequisite: MATH 1110&#160;, MATH 1910&#160;, or equivalent.  No programming experience assumed. Co-meets with CS 1112&#160;. Staff.Introduction to elementary computer programming concepts using MATLAB. Topics include problem analysis, development of algorithms, selection, iteration, functions, and arrays. Examples and assignments are chosen to build an appreciation for computational science. The goal is for each student to develop a facility with MATLAB that will be useful in other courses whenever there is a need for computer problem solving or visualization. Outcome 1: Be fluent in the use of procedural statements—assignments, conditional statements, loops, function calls-and arrays. Be able to design, code, and test small MATLAB programs that meet requirements expressed in English.Outcome 2: Have a working familiarity with graphics tools in MATLAB.","AL
IS
SDF"
Introductory Design and Programming for the Web,"CS 1300 - Introductory Design and Programming for the Web (crosslisted) INFO 1300&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Student option grading. K. Harms.For description, see INFO 1300&#160;.",HCI
Computation and Culture in a Digital Age,"CS 1305 - Computation and Culture in a Digital Age (crosslisted) INFO 1305&#160;  &#160;&#160;&#160;&#160;&#160;Summer. 3 credits. Letter grades only. D. Fan.Through discussion, debate, and writing, this course explores the rewards, challenges, and opportunities presented by the rapid evolution of computing and information science in areas such as science, medicine, the arts, commerce, and entertainment. It explores ideas and technologies of the field and their role in society from legal, historical, and cultural perspectives. Students are introduced to the user-centered development life cycle for web site design with a focus on critique and usability testing. Students are exposed to some of the underpinnings of artificial intelligence and learn fundamental computer programming concepts through the manipulation of digital media.","IS
NC"
Data Science for All,"CS 1380 - Data Science for All (crosslisted) ORIE 1380&#160;  (MQR-AS) &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Letter grades only.Assumes basic high school mathematics. No calculus or programming experience required. M. Clarkson, M. Udell.This course provides an introduction to data science. Given data from economics, medicine, biology, or physics, collected from internet denizens, survey respondents, or wireless sensors, how can one understand the phenomenon generating the data, make predictions, and improve decisions? We focus on building skills in inferential thinking and computational thinking, guided by the practical questions we seek to answer. The course teaches critical concepts and skills in computer programming and statistical inference, in conjunction with hands-on analysis of real-world datasets including economic data, document collections, geographical data, and social networks. We will also consider social issues in data analysis such as privacy and design.",IS
Visual Imaging in the Electronic Age,"CS 1620 - Visual Imaging in the Electronic Age (crosslisted) ARCH 3702&#160;, ART 2907&#160;, ENGRI 1620&#160;  (MQR-AS) &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading. D. Greenberg.For description, see ART 2907&#160;.","GV
AR
HCI"
Topics in the Analysis and Transmission of Knowledge and Information,"CS 1810 - [Topics in the Analysis and Transmission of Knowledge and Information] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 2 credits. S/U grades only. Staff.The distinction between knowledge and information lies within the realm of philosophy, yet in the current highly networked computer mediated world, noisy data and noisy communication is ubiquitous. This course explores the issues relating to transmission of content and extraction of information in the three contexts of human-human, human-computer, and computer-computer. We also explore how the very nature of the problem changes as we move from one-to-one communication to many-to-many environments.",IS
C++ Programming,"CS 2024 - C++ Programming &#160;&#160;&#160;&#160;&#160;Fall. 2 credits. S/U grades only.Prerequisite: one programming course or equivalent programming experience. Staff.An intermediate introduction to the C++ programming language and the C/C++ standard libraries. Topics include basic statements, declarations, and types; stream I/O; user-defined classes and types; derived classes, inheritance, and object-oriented programming; exceptions and templates. Recommended for students who plan to take advanced courses in computer science that require familiarity with C++ or C.","AL
DS
OS
GV
HCI
PL
SDF
SE
SP"
UNIX Tools and Scripting,"CS 2043 - UNIX Tools and Scripting &#160;&#160;&#160;&#160;&#160;Spring (weeks 1-6). 2 credits. S/U grades only.Prerequisite: one programming course or equivalent programming experience. No previous knowledge of UNIX or expertise in any particular language is assumed. Staff.UNIX and UNIX-like systems are increasingly being used on personal computers, mobile phones, web servers, and many other systems. They represent a wonderful family of programming environments useful both to computer scientists and to people in many other fields, such as computational biology and computational linguistics, in which data is naturally represented by strings. This course takes students from shell basics and piping, to regular-expression processing tools, to shell scripting and Python. Other topics to be covered include handling concurrent and remote resources, manipulating streams and files, and managing software installations.","PD
PL
SDF"
Object-Oriented Programming and Data Structures,"CS 2110 - Object-Oriented Programming and Data Structures (crosslisted) ENGRD 2110&#160; (MQR-AS) &#160;&#160;&#160;&#160;&#160;Fall, spring, summer. 3 credits. Student option grading.Prerequisite: CS 1110&#160; or CS 1112&#160; or CS 1114&#160; or CS 1115&#160; or equivalent course on programming in a procedural language. Staff.Intermediate programming in a high-level language and introduction to computer science. Topics include program structure and organization, object-oriented programming (classes, objects, types, sub-typing), graphical user interfaces, algorithm analysis (asymptotic complexity, big &#8220;O&#8221; notation), recursion, data structures (lists, trees, stacks, queues, heaps, search trees, hash tables, graphs), graph algorithms. Java is the principal programming language. Outcome 1: Be fluent in the use of recursion and object-oriented programming concepts (e.g. classes, objects, inheritance, and interfaces).Outcome 2: Be able to design and implement nontrivial Java programs (roughly 1000 lines of code), starting from an English language specification.Outcome 3: Understand graphical user interfaces (GUIs), as expressed in Java.Outcome 4: Understand asymptotic complexity of algorithms and be able to analyze programs to determine their running times.Outcome 5: Understand basic data structures taught in the course and be able to implement them and use them in programs.","AL
DS
PL
SDF"
Object-Oriented Design and Data Structures - Honors,"CS 2112 - Object-Oriented Design and Data Structures - Honors (crosslisted) ENGRD 2112&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: very good performance in CS 1110&#160; or equivalent course in Java or C++, or permission of the instructor. Staff.Honors version of CS 2110&#160;/ENGRD 2110&#160;; credit is given for only one of CS 2110&#160; and 2112. Corrective transfer between CS 2110&#160; and 2112 (in either direction) is encouraged during first three weeks. Intermediate software design and introduction to key computer science ideas. Topics are similar to those in CS 2110&#160; but are covered in greater depth, with more challenging assignments. Topics include object-oriented programming, program structure and organization, program reasoning using specifications and invariants, recursion, design patterns, concurrent programming, graphical user interfaces, data structures as in CS 2110&#160;, sorting and graph algorithms, asymptotic complexity, and simple algorithm analysis. Java is the principal programming language.","AL
AR
DS
PL
SDF
SP"
Intermediate Design and Programming for the Web,"CS 2300 - Intermediate Design and Programming for the Web (crosslisted) INFO 2300&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 1300&#160; strongly recommended. Co-meets with NBA 5301&#160;. Must be taken before CS 3300&#160;.Staff.For description, see INFO 2300&#160;.",HCI
Excursions in Computational Sustainability,"CS 2770 - Excursions in Computational Sustainability (crosslisted) AEM 2770&#160;, INFO 2770&#160;  (CU-SBY)&#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: students are expected to have basic knowledge of probability theory and calculus. J. Conrad, C. Gomes, B. Selman.For description and learning outcomes, see AEM 2770&#160;.",IS
Discrete Structures,"CS 2800 - Discrete Structures (MQR-AS) &#160;&#160;&#160;&#160;&#160;Fall, spring. 3 credits. Student option grading.Prerequisite or corequisite: one programming course or permission of instructor. Staff.Covers the mathematics that underlies most of computer science. Topics include mathematical induction; logical proof; propositional and predicate calculus; combinatorics and discrete mathematics; some basic elements of basic probability theory; basic number theory; sets, functions, and relations; graphs; and finite-state machines. These topics are discussed in the context of applications to many areas of computer science, such as the RSA cryptosystem and web searching.",DS
Networks,"CS 2850 - Networks (crosslisted) ECON 2040&#160;, INFO 2040&#160;, SOC 2090&#160;  (SBA-AS) &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading. Staff.For description, see ECON 2040&#160;.","NC
SP"
Data Structures and Functional Programming,"CS 3110 - Data Structures and Functional Programming (MQR-AS) &#160;&#160;&#160;&#160;&#160;Fall, spring. 4 credits. Student option grading.Prerequisite: CS 2110&#160; or equivalent programming experience. Prerequisite or corequisite: CS 2800&#160;. Should not be taken concurrently with CS 3410&#160; or CS 3420&#160;. Staff.Advanced programming course that emphasizes functional programming techniques and data structures. Programming topics include recursive and higher-order procedures, models of programming language evaluation and compilation, type systems, and polymorphism. Data structures and algorithms covered include graph algorithms, balanced trees, memory heaps, and garbage collection. Also covers techniques for analyzing program performance and correctness.","AL
AR
CN
DS
PL
SDF
SP"
Introduction to Computer Game Architecture,"CS 3152 - Introduction to Computer Game Architecture &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite for programmers: CS 2110&#160; (or permission of the instructor). Prerequisite for designers: INFO 2450&#160; and/or submission of art/design samples to instructor. Satisfies track requirement for INFO majors and minors if taken under the INFO prefix. Corequisite: ENGRC 3152&#160;. Students must enroll in both INFO 3152&#160; and ENGRC 3152&#160;. Co-meets with INFO 3152&#160;. This course is for students who are interested in the programming aspects of game development.  Artists and designers should take INFO 3152&#160;, which co-meets with this course.W. White.A project-based course in which programmers and designers collaborate to make a computer game. This course investigates the theory and practice of developing computer games from a blend of technical, aesthetic, and cultural perspectives. Technical aspects of game architecture include software engineering, artificial intelligence, game physics, computer graphics, and networking. Aesthetic and cultural include art and modeling, sound and music, game balance, and player experience.","GV
SE
AR
HCI
PL
SDF"
Introduction to Scientific Computation,"CS 3220 - [Introduction to Scientific Computation] (crosslisted) ENGRD 3220&#160;  &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 3 credits. Student option grading.Prerequisite: CS 1112&#160; or CS 1132&#160; and MATH 2220&#160;, MATH 2230&#160;, or MATH 2940&#160;. Staff.Introduction to elementary numerical analysis and scientific computation. Topics include interpolation, quadrature, linear and nonlinear equation solving, least- quares fitting, and ordinary differential equations. The MATLAB computing environment is used. Vectorization, efficiency, reliability, and stability are stressed. Includes special lectures on computational statistics. Outcome 1: Be knowledgeable and able to choose among the options for fitting datapoints, including polynomial interpolation, piecewise polynomial interpolation and splines.Outcome 2: Know how to solve linear equations, and understand the circumstances under which the answer will be accurate or inaccurate.Outcome 3: Know how to solve nonlinear equations, optimization problems and initial value problems, and understand the limitations of the popular methods for these problems.","AL
AR
IAS
NC
SDF
SP"
Computer System Organization and Programming,"CS 3410 - Computer System Organization and Programming &#160;&#160;&#160;&#160;&#160;Fall, spring. 4 credits. Letter grades only.Prerequisite: CS 2110&#160; or equivalent programming experience is required. Recommended prerequisite: CS 2024&#160;. Should not take CS 3110&#160; concurrently. Staff.Introduction to computer organization, systems programming and the hardware/ software interface. Topics include instruction sets, computer arithmetic, datapath design, data formats, addressing modes, memory hierarchies including caches and virtual memory, I/O devices, bus-based I/O systems, and multicore architectures. Students learn assembly language programming and design a pipelined RISC processor.",AR
Embedded Systems,"CS 3420 - Embedded Systems (crosslisted) ECE 3140&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Letter grades only.Prerequisite: ENGRD 2300&#160;. E. Suh.For description, see ECE 3140&#160;.","NC
AR"
Programming Languages and Logics,"CS 4110 - [Programming Languages and Logics] &#160;&#160;&#160;&#160;&#160;Fall. Next offered 2018-2019. 4 credits. Student option grading.Prerequisite: CS 3110&#160; or permission of instructor. Co-meets with CS 5110&#160;. Staff.An introduction to the theory, design, and implementation of programming languages. Topics include operational semantics, type systems, higher-order functions, scope, lambda calculus, laziness, exceptions, side effects, continuations, objects, and modules. Also discussed are logic programming, concurrency, and distributed programming.",PL
Introduction to Compilers,"CS 4120 - Introduction to Compilers &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 3110&#160; or permission of instructor and CS 3420&#160; or CS 3410&#160;. Corequisite: CS 4121&#160;. Co-meets with CS 4121&#160;/CS 5120&#160;/CS 5121&#160;. Staff.An introduction to the specification and implementation of modern compilers. Topics covered include lexical scanning, parsing, type checking, code generation and translation, an introduction to program analysis and optimization, and compile-time and run-time support for modern programming languages. As part of the course, students will build a working compiler for an object-oriented language.","PL
PD
AR
SDF
SE"
Practicum in Compilers,CS 4121 - Practicum in Compilers &#160;&#160;&#160;&#160;&#160;Spring. 2 credits. Student option grading.Corequisite: CS 4120&#160;. Co-meets with CS 4120&#160;/CS 5120&#160;/CS 5121&#160;. Staff.Students will build a working compiler for an object-oriented language.,"PL
AL
SE"
Advanced Topics in Computer Game Architecture,"CS 4152 - Advanced Topics in Computer Game Architecture &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 3152&#160; and one of the following: CS 3300&#160;, CS 4620&#160;, CS 4700&#160;, CS 4758&#160;, CS 5414&#160;. Co-meets with INFO 4152&#160;. This course is for students who are interested in the programming aspects of game development.  Artists and designers should take INFO 4152&#160;.Staff.Project-based follow-up course to CS 3152&#160;. Students work in a multidisciplinary team to develop a game that incorporates innovative game technology. Advanced topics include 3D game development, mobile platforms, multiplayer gaming, and nontraditional input devices.  There is a special emphasis on developing games that can be submitted to festivals and competitions.",GV
Analytics-driven Game Design,"CS 4154 - Analytics-driven Game Design (crosslisted) INFO 4154&#160; &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Letter grades only.Prerequisite for programmers: CS 2110&#160; (or permission of the instructor). Prerequisite for designers: INFO 2450&#160; and/or submission of art/design portfolio to instructor. Permission of instructor required. Co-meets with INFO 4154&#160;. Staff.A project-based course in which programmers and designers collaborate to design, biuld, and release a video game online through popular game portals. Students instrument their games to gather anonymous usage statistics from players and analyze this data to improve their game over multiple iterations. Technical aspects of this course include game mechanics, telemetry, A/B testing, and statistical analysis.","GV
IAS
IS
SDF"
Numerical Analysis and Differential Equations,"CS 4210 - Numerical Analysis and Differential Equations (crosslisted) MATH 4250&#160;  (MQR-AS) &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: MATH 2210&#160; or MATH 2940&#160; or equivalent, one additional mathematics course numbered 3000 or above, and knowledge of programming. Students will be expected to be comfortable with proofs. Staff.For description, see MATH 4250&#160;.","AR
AL
NC
PD
PL
SDF
SP"
Numerical Analysis: Linear and Nonlinear Problems,"CS 4220 - Numerical Analysis: Linear and Nonlinear Problems (crosslisted) MATH 4260&#160;  (MQR-AS) &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: MATH 2210&#160; or MATH 2940&#160; or equivalent, one additional mathematics course numbered 3000 or above, and knowledge of programming. Students will be expected to be comfortable with proofs. Co-meets with CS 5223&#160;. Staff.Introduction to the fundamentals of numerical linear algebra: direct and iterative methods for linear systems, eigenvalue problems, singular value decomposition. In the second half of the course, the above are used to build iterative methods for nonlinear systems and for multivariate optimization. Strong emphasis is placed on understanding the advantages, disadvantages, and limits of applicability for all the covered techniques. Computer programming is required to test the theoretical concepts throughout the course.","AR
IAS
NC
SP
SDF
SE"
Language and Information,"CS 4300 - Language and Information (crosslisted) INFO 4300&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: linear algebra: strong performance in MATH 2940&#160; or equivalent; discrete math: strong performance in CS 2800&#160; or equivalent. The linear algebra and discrete math requirements can also be fulfilled with strong performance in INFO 2950&#160;. Programming proficiency: CS 2110&#160; or equivalent and strong Python skills and familiarity with IPython Notebooks. If you do not meet these prerequisites, enrollment requires instructor permission.  C. Danescu-Niculescu-Mizil.For description, see INFO 4300&#160;.",IM
Introduction to Database Systems,"CS 4320 - Introduction to Database Systems &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Student option grading.Prerequisite: CS 2110&#160; and CS 2800&#160;. Co-meets with CS 5320&#160;. Staff.Introduction to modern database and data storage systems. Concepts covered include data models, query languages, database designs, storage structures, access methods, query processing and optimization, transaction management, and recovery in both relational and nonrelation data storage systems.","AL
DS
SDF"
Practicum in Database Systems,CS 4321 - Practicum in Database Systems &#160;&#160;&#160;&#160;&#160;Fall. 2 credits. Student option grading.Prerequisite or corequisite: CS 4320&#160;. Co-meets with CS 5321&#160;. Staff.Students build part of a database system in Java.,"AR
PD
PL
SDF
SP"
Operating Systems,"CS 4410 - Operating Systems &#160;&#160;&#160;&#160;&#160;Fall, spring, summer. 3 credits. Letter grades only (no audit).Prerequisite: CS 3410&#160; or CS 3420&#160;. Staff.Introduction to the design of systems programs, with emphasis on multiprogrammed operating systems. Topics include concurrency, synchronization, deadlocks, memory management, protection, input-output methods, networking, file systems and security. The impact of network and distributed computing environments on operating systems is also discussed.","OS
NC
PD
GV"
Practicum in Operating Systems,"CS 4411 - Practicum in Operating Systems &#160;&#160;&#160;&#160;&#160;Fall, spring. 2 credits. Letter grades only.Corequisite: CS 4410&#160;. Staff.Studies the practical aspects of operating systems through the design and implementation of an operating system kernel that supports multiprogramming, virtual memory, and various input-output devices. All the programming for the project is in a high-level language.",OS
Computer Architecture,"CS 4420 - Computer Architecture (crosslisted) ECE 4750&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Letter grades only.Prerequisite: CS 3420&#160;/ECE 3140&#160; or CS 3410&#160;. C. Delimitrou.For description, see ECE 4750&#160;.",AR
Introduction to Computer Networks,"CS 4450 - Introduction to Computer Networks &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Letter grades only.Prerequisite: CS 4410&#160;. R. Agarwal.This course introduces the basic architectural and design principles of computer networking including the design of communication protocols, congestion control, routing and switching, Internet, data center networks and wireless networks.","NC
SP"
Introduction to Computer Graphics,"CS 4620 - Introduction to Computer Graphics &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 2110&#160;/ENGRD 2110&#160;. Co-meets with CS 5620&#160;. Staff.Introduction to the principles of computer graphics in two and three dimensions.  Topics include digital images, filtering and antialiasing, 2-D and 3-D affine geometry, ray tracing, perspective and 3-D viewing, the graphics pipeline, curves and surfaces, and human visual perception. This course emphasizes fundamental techniques in graphics, with both written and practical assignments.  May be taken with or without concurrent enrollment in CS 4621&#160;.",GV
Computer Graphics Practicum,CS 4621 - Computer Graphics Practicum &#160;&#160;&#160;&#160;&#160;Spring. 2 credits. Student option grading.Prerequisite or corequisite: CS 4620&#160;. Co-meets with CS 5621&#160;. Staff.Provides CS 4620&#160; students with hands-on experience in computer graphics programming on modern graphics hardware. This course emphansizes effective use of graphics APIs and the architecture of graphics applicaitons.  A final project involves building a substantial interactive graphics system.  The course uses Java and OpenGL for code development.,"AR
CN
IAS
PL
SDF
SP"
Virtual Reality Design,"CS 4654 - [Virtual Reality Design] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 6 credits. Letter grades only.Prerequisite: completion of or concurrent enrollment in MATH 2940&#160; or MATH 2210&#160; and CS 4620&#160; (or equivalent) required, ART 2907&#160; (or equivalent) preferred. Permission of instructor required. D. Greenberg.The course has been developed to experiment with VR/AR technology for design projects (devices, building spaces, entertainment). One major project using existing VR/AR technology will be due at the end of the semester. Students will work in groups of two or three. Readings/discussions on subjects influencing VR technology (rendering, display devices, tracking, color science, human perception, nanoscience, etc.) will supplement the projects.","GV
AR"
Introduction to Computer Vision,"CS 4670 - [Introduction to Computer Vision] &#160;&#160;&#160;&#160;&#160;Spring. Next offered 2018-2019. 4 credits. Student option grading.Prerequisite: CS 2110&#160;, CS 2800&#160;. Co-meets with CS 5670&#160;. Staff.An in-depth introduction to computer vision. The goal of computer vision is to compute properties of our world-the 3D shape of an environment, the motion of objects, the names of people or things-through analysis of digital images or videos.  The course covers a range of topics, including 3D reconstruction, image segmentaion, object recognition, and vision algorithms fro the Internet, as well as key algorithmic, optimization, and machine learning techniques, such as graph cuts, non-linear least squares, and deep learning.  This course emphasizes hands-on experience with computer vision, and several large programming projects.","GV
IS"
Foundations of Artificial Intelligence,"CS 4700 - Foundations of Artificial Intelligence &#160;&#160;&#160;&#160;&#160;Fall, spring. 3 credits. Student option grading.Prerequisite: CS 2110&#160;/ENGRD 2110&#160; and CS 2800&#160; or equivalent. Staff.Challenging introduction to the major subareas and current research directions in artificial intelligence. Topics include knowledge representation, heuristic search, problem solving, natural-language processing, game-playing, logic and deduction, planning, and machine learning.","IS
AL
DS"
Practicum in Artificial Intelligence,"CS 4701 - Practicum in Artificial Intelligence &#160;&#160;&#160;&#160;&#160;Fall, spring. 2 credits. Student option grading.Prerequisite or corequisite: CS 4700&#160;. Staff.Project portion of CS 4700&#160;. Topics include knowledge representation systems, search procedures, game-playing, automated reasoning, concept learning, reinforcement learning, neural nets, genetics algorithms, planning, and truth maintenance.",IS
Social and Ethical Issues in AI,"CS 4732 - [Social and Ethical Issues in AI] &#160;&#160;&#160;&#160;&#160;Spring. 2 credits. S/U grades only. Permission of instructor required. J. Halpern, B. Selman.We will consider social and ethical issues in AI, including some subset the following: potential job losses in AI; the ethics of computer making decisions on our behalf (perhaps using machine learning)&#8217; ethical issues involving robots, autonomous cars, and drones; and privacy and surveillance. The course will run for 7-8 weeks. Most weeks, there will be an initial one-hour lecture (typically offered by a specialist in some area), followed by a discussion session with the speaker.",SP
Natural Language Processing,"CS 4740 - Natural Language Processing (crosslisted) COGST 4740&#160;, LING 4474&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: CS 2110&#160;. Co-meets with CS 5740&#160;. Staff.Computationally oriented introduction to natural language processing, the goal of which is to enable computers to use human languages as input, output, or both. Possible topics include parsing, grammar induction, information retrieval, and machine translation.",IS
Computational Linguistics,"CS 4744 - Computational Linguistics (crosslisted) COGST 4240&#160;, LING 4424&#160; (MQR-AS) &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: LING 1101&#160; or equivalent background in linguistics and CS 2110&#160; or equivalent preparation in computer science. M. Rooth.For description, see LING 4424&#160;.","AR
PL
SE"
Robotic Manipulation,"CS 4752 - [Robotic Manipulation] (crosslisted) MAE 4750&#160;  &#160;&#160;&#160;&#160;&#160;Fall, spring. Not offered 2017-2018. 4 credits. Letter grades only.Prerequisite: CS 4750&#160;. Co-meets with CS 5752&#160;/MAE 5750&#160;. Staff.Robotic manipulation is the ability for a robot to interact physically and deliberately in the world. Although long used in factories, robot manipulators will soon appear in home environments as well, helping us with daily tasks.  This course covers the theory and concepts involved in programming a robot manipulator, including rigid body mechanics, kinematics, dynamics, path and trajectory planning, control, and stability.  At the end of this course, the student is able to program a real manipulator arm to perform autonomous tasks.",SP
Human Robot Interaction - Research and Design,"CS 4754 - [Human Robot Interaction - Research and Design] (crosslisted) INFO 4410&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Letter grades only.Prerequisite or corequisite: INFO 4320&#160; or instructor consent. Co-meets with INFO 6420&#160;. M. Jung.For description, see INFO 4410&#160;.",HCI
Robot Learning,"CS 4758 - [Robot Learning] (crosslisted) ECE 4758&#160;, MAE 4758&#160;  &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: knowledge of basic computer science principles and skills at a level sufficient to write a reasonably non-trivial computer program (e.g., CS 1114&#160; or CS 2110&#160; or CS 3110&#160; or equivalent). Any one of the following courses in probability/statistics or signal processing: CS 2800&#160; or ECE 2200&#160; or ECE 3100&#160; or ENGRD 2700&#160; (or equivalent). Co-meets with CS 6758&#160;. Staff.Studies the problem of how an agent can learn to perceive its world well enough to act in it, to make reliable plans, and to learn from its own experience. The focus is on algorithms and machine learning techniques for autonomous operation of robots. Topics include filtering and state estimation (Kalman filters, particle filters); Markov decision process; learning (reinforcement and supervised learning); planning and control; perception (vision, sensing). The course has a term project involving physical robots; no final exam.",IS
Machine Learning for Intelligent Systems,"CS 4780 - Machine Learning for Intelligent Systems &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: Probability theory (BTRY 3080&#160;, ECON 3130&#160;, MATH 4710&#160;, or strong performance in ENGRD 2700&#160; or equivalent); linear algebra (MATH 1920&#160; or equivalent); CS 2110&#160; or equivalent programming proficiency. Co-meets with CS 5780&#160;. This course can be taken independently or in any order with CS 4786&#160;/CS 5786&#160;.Staff.An introduction to machine learning for intelligent systems (e.g. search engines, recommender systems, ad placement). Topics include supervised learning, statistical learning theory, and online learning.",IS
Machine Learning for Data Science,"CS 4786 - Machine Learning for Data Science &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: probability theory (BTRY 3080&#160;, ECON 3130&#160;, MATH 4710&#160;, or strong performance in ENGRD 2700&#160; or equivalent); linear algebra (strong performance in MATH 2940&#160; or equivalent); CS 2110&#160; or equivalent programming proficiency. Co-meets with CS 5786&#160;. Staff.An introduction to machine learning for data-science applications. Topics include dimensionality-reduction (such as principal components analysis, canonical correlation analysis, and random projection); clustering (such as k-means and single-link); probabilistic modeling (such as mixture models and the EM algorithm). This course can be taken independently or in any order with CS 4780&#160;/CS 5780&#160;.",IS
Introduction to Theory of Computing,"CS 4810 - Introduction to Theory of Computing &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Student option grading.Prerequisite: CS 2800&#160; or permission of instructor. Staff.Introduction to the modern theory of computing: automata theory, formal languages, and effective computability.","AL
AR
GV
IAS
IM
NC
OS
PL
SDF
SP"
Quantum Information Processing,"CS 4812 - [Quantum Information Processing] (crosslisted) PHYS 4481&#160;  (PBS-AS) &#160;&#160;&#160;&#160;&#160;Fall. Next offered 2018-2019. 3 credits. Student option grading.Prerequisite: linear algebra at the level of MATH 2940&#160; or MATH 2210&#160;. Substantial familiarity with complex numbers (either through physics or mathematics courses). Prior exposure to quantum mechanics (such as PHYS 3316&#160;) and group theory is very helpful, but not essential. Co-meets with PHYS 7681&#160;. P. Ginsparg.For description, see PHYS 4481&#160;.","AL
IAS
IS"
Introduction to Computational Complexity,"CS 4814 - [Introduction to Computational Complexity] &#160;&#160;&#160;&#160;&#160;Fall. Not offered 2017-2018. 3 credits. Student option grading.Prerequisite: CS 4820&#160;. D. Steurer.Explores the power and limitations of efficient algorithms. Compares basic models of computations such as finite automata, Boolean circuits, and Turing machines. Illustrates the notion of computational intractability through the concept NP-completeness and the computational foundations of modern cryptography. Investigates the role of randomness and approximation in the modern theory of computing.","AL
AR
DS"
Introduction to Analysis of Algorithms,"CS 4820 - Introduction to Analysis of Algorithms &#160;&#160;&#160;&#160;&#160;Fall, spring, summer. 4 credits. Student option grading.Prerequisite: CS 2800&#160; and CS 3110&#160;. Students who got an A- or better in both CS 2800&#160; and CS 2110&#160; are welcome to take CS 4820 without CS 3110&#160;. Staff.Develops techniques used in the design and analysis of algorithms, with an emphasis on problems arising in computing applications. Example applications are drawn from systems and networks, artificial intelligence, computer vision, data mining, and computational biology. This course covers four major algorithm design techniques (greedy algorithms, divide-and-conquer, dynamic programming, and network flow), undecidability and NP-completeness, and algorithmic techniques for intractable problems (including identification of structured special cases , approximation algorithms, local search heuristics, and online algorithms).","AL
DS"
Introduction to Cryptography,"CS 4830 - Introduction to Cryptography &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: CS 2800&#160; (or equivalent) or permission of instructor. Co-meets with CS 5830&#160;. Staff.Introductory course in cryptography. Topics include one-way functions, encryption, digital signatures, pseudo-random number generation, zero-knowledge and basic protocols. Emphasizes fundamental notions and constructions with proofs or security based on precise definitions and assumptions.",SP
Networks II: Market Design,"CS 4852 - Networks II: Market Design (crosslisted) ECON 3825&#160;, INFO 4220&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Letter grades only.Prerequisite: INFO 2040&#160; (Networks) and familiarity with logical reasoning (at the level of CS 2800&#160; or equivalent), and basic probability and statistics. Please visit the course website https://courses.cit.cornell.edu/INFO 4220&#160;/ and see the FAQ if you do not satisfy these prerequisites (especially INFO 2040&#160;), for further detail. Co-meets with INFO 6220&#160;. A. Ghosh.For description, see INFO 4220&#160;.",NC
Applied Logic,"CS 4860 - Applied Logic (crosslisted) MATH 4860&#160;  (MQR-AS) &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Forbidden Overlap: due to an overlap in content, students will receive credit for only one course in the following group: CS 4860, MATH 4810&#160;, MATH 4860&#160;, PHIL 4310&#160;.Prerequisite: MATH 2210&#160;-MATH 2220&#160;, MATH 2230&#160;-MATH 2240&#160;, or MATH 1920&#160; and MATH 2940&#160;; CS 2800&#160; (or MATH 3320&#160;, MATH 3340 (formerly 4320)&#160;, MATH 3360&#160;, or MATH 4340&#160;); and some additional course in mathematics or theoretical computer science. R. Constable.Propositional and predicate logic, compactness and completeness using tableaux, natural deduction, and/or resolution. Other topics chosen from the following: Equational logic. Herbrand Universes and unification. Rewrite rules and equational logic, Knuth-Bendix method, and the congruence-closure algorithm and lambda-calculus reduction strategies. Modal logics, intuitionistic logic, Prolog, LISP, ML, or Nuprl. Applications to expert systems and program verification. Noncomputability (Turing) and incompleteness (Gödel).","PL
AL"
"Introduction to Blockchains, Cryptocurrencies, and Smart Contracts","CS 5094 - Introduction to Blockchains, Cryptocurrencies, and Smart Contracts &#160;&#160;&#160;&#160;&#160;Spring. 1 credit. S/U grades only.Prerequisite: basic programming experience Enrollment limited to: Cornell Tech students. Offered at Cornell Tech in New York City. Staff.Viewed variously as a niche currency for online criminals and a technological threat to the financial industry, Bitcoin has fueled mythmaking, financial speculation, and real technological innovation. We will study both Bitcoin and the technological landscape it has inspired and catalyzed. Topics will include: The mechanics of consensus algorithms, such as Proof of Work and Byzantine Consensus, and their role in blockchains and cryptocurrencies; cryptographic tools employed in cryptocurrencies, including digital signatures algorithm and zero-knowledge proofs; the evolution and mechanics of Bitcoin and its ecosystem; smart contracts; and special topics, such as trusted hardware in blockchain-based systems, smart contracts and real-world contract law, and cryptocurrencies and crime.",IS
Programming Languages and Logics,"CS 5110 - [Programming Languages and Logics] &#160;&#160;&#160;&#160;&#160;Fall. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: CS 3110&#160; or permission of instructor. Co-meets with CS 4110&#160;. Staff.An introduction to the theory, design, and implementation of programming languages. Topics include operational semantics, type systems, higher-order functions, scope, lambda calculus, laziness, exceptions, side effects, continuations, objects, and modules. Also discussed are logic programming, concurrency, and distributed programming.",PL
Network Programming Languages,"CS 5114 - Network Programming Languages &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: CS 4110&#160;, CS 6110&#160;, CS 6410&#160;. Staff.This course provides an introduction to novel programming languages for controlling computer networks. It will examine recent proposals based on logic, functional, and streaming languages, as well as tools for establishing the correctness of programs written in such languages using SAT/SMT solvers, model checkers, and proof assistants. Evaluation will be based on class participation and projects.",NC
Introduction to Compilers,"CS 5120 - Introduction to Compilers &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 3110&#160; or permission of instructor and CS 3420&#160; or CS 3410&#160;. Corequisite: CS 5121&#160;. Co-meets with CS 4120&#160;/CS 4121&#160;/CS 5121&#160;. Staff.An introduction to the specification and implementation of modern compilers. Topics covered include lexical scanning, parsing, type checking, code generation and translation, an introduction to program analysis and optimization, and compile-time and run-time support for modern programming languages. As part of the course, students will build a working compiler for an object-oriented language.","PL
AL
PD
SE"
Practicum in Compilers,CS 5121 - Practicum in Compilers &#160;&#160;&#160;&#160;&#160;Fall. 2 credits. Student option grading.Corequisite: CS 5120&#160;. Co-meets with CS 4120&#160;/CS 4121&#160;/CS 5120&#160;. Staff.Students will build a working compiler for an object-oriented language.,"PL
AL
AR
SE"
Software Engineering,"CS 5150 - Software Engineering &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: CS 2110&#160; or equivalent experience programming in Java or C++. Staff.Introduction to the practical problems of specifying, designing, and building large, reliable software systems. Students work in teams on projects for real clients. This work includes a feasibility study, requirements analysis, object-oriented design, implementation, testing, and delivery to the client. Additional topics covered in lectures include professionalism, project management, and the legal framework for software development.",SE
Open-Source Software Engineering,"CS 5152 - [Open-Source Software Engineering] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading. Staff.Students will collaborate with mentors from industry to learn how to become a part of the open-source community and contribute to open-source projects, with students actively committing to open-source projects throughout the semester. Lectures, in addition to discussing open-source processes and tools, will teach students how to be proactive members of larger systems, such as teams, projects, companies, and society at large, by delving into topics from psychology, sociology, business, economics, gender studies, ethnic studies, writing, speaking, and ethics.","SP
SE"
Games for Impact,"CS 5153 - Games for Impact (crosslisted) INFO 5335&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading. Enrollment limited to: students at Cornell Tech. Offered at Cornell Tech in New York City. Staff.For description, see INFO 5335&#160;.","AR
PL"
Applications of Parallel Computers,"CS 5220 - Applications of Parallel Computers &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: course in numerical methods. Staff.Models for parallel programming and survey of parallel machines. Existing parallel programming languages, vectorizing compilers, and parallel libraries and toolboxes.","PD
PL
SDF
AL
AR
IAS
NC
OS
SP
SF"
Numerical Analysis: Linear and Nonlinear Problems,"CS 5223 - [Numerical Analysis: Linear and Nonlinear Problems] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: MATH 2210&#160; or MATH 2940&#160; or equivalent, one additional mathematics course numbered 3000 or above, and knowledge of programming. Students will be expected to be comfortable with proofs. Co-meets with CS 4220&#160;. Staff.Introduction to the fundamentals of numerical linear algebra: direct and iterative methods for linear systems, eigenvalue problems, singular value decomposition. In the second half of the course, the above are used to build iterative methods for nonlinear systems and for multivariate optimization. Strong emphasis is placed on understanding the advantages, disadvantages, and limits of applicability for all the covered techniques. Computer programming is required to test the theoretical concepts throughout the course.",AR
Data Science in the Wild,"CS 5304 - Data Science in the Wild (crosslisted) INFO 5304&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Letter grades only. Enrollment limited to: Cornell Tech students. Offered at Cornell Tech in New York City. Staff.Massive amounts of data are collected by many companies and organizations and the task of a data scientist is to extract actionable knowledge from the data – for scientific needs, to improve public health, to promote businesses, for social studies and for various other purposes. This course will focus on the practical aspects of the field and will attempt to provide a comprehensive set of tools for extracting knowledge from data.The course will cover the topics needed to solve data-science problems, which include problem formulation (business understanding), data preparation (collection, sampling, integration, cleaning), data modeling (characterization, model selection, and analysis), implementation (large-scale data processing, feedback loops, QA) and communication (data presentation, visualization). Advanced topics such as causal inference and processing streaming data will be presented.Throughout the course, the students will perform a data-science mission with all the required steps, from problem formulation to result presentation.",IS
Introduction to Database Systems,"CS 5320 - Introduction to Database Systems &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Student option grading.Prerequisite: CS 2110&#160; or CS 2800&#160; and permission of instructor. Co-meets with CS 4320&#160;. Staff.Introduction to modern database and data storage systems. Concepts covered include data models, query languages, database design, storage structures, access methods, query processing and optimization, transaction management, and recovery in both relational and nonrelational data storage systems.","AL
AR
DS
IS
PD
SDF
SP"
Practicum in Database Systems,CS 5321 - Practicum in Database Systems &#160;&#160;&#160;&#160;&#160;Fall. 2 credits. Student option grading.Prerequisite or corequisite: CS 5320&#160;. Co-meets with CS 4321&#160;. Staff.Students build part of a real database system in C++.,"AL
AR
DS
OS
PL
SDF
SP"
Cloud Computing,"CS 5412 - Cloud Computing &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: CS 4410&#160; or permission of instructor. Staff.Focuses on cloud computing, large-scale Internet applications, and other practical issues in designing and implementing trustworthy, scalable distributed software.","AR
IAS
NC
PD
SE"
High Performance Systems and Networking,"CS 5413 - [High Performance Systems and Networking] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Letter grades only.Prerequisite: CS 4410&#160; and CS 4411&#160; or equivalent. Staff.This course broadly examines high performance systems and networks. It especially covers systems and networks built from low cost commodity components like modern datacenters that provide platforms for cloud and other online services. It teaches abstractions, design, and implementation techniques that allow students to build the kind of scalable high performance systems and networks that can deal with real-world cloud workloads. Students study high performance designs and implementations: They  create projects related to operating systems kernel and driver designs and implementations on the systems side and network medium, protocol, and topology designs on the networking side. The key is that students immerse themselves in state-of-the-art systems and networks, produce a few small course projects and a final project, and gain an understanding necessary to build highly available, reliable, and performant systems and networks while relying mainly on low cost, commodity components.",SF
Distributed Computing Principles,"CS 5414 - Distributed Computing Principles &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: CS 4410&#160; or permission of instructor. Staff.Studies the abstractions and algorithms that constitute the foundations for implementing concurrent and distributed computing, with emphasis on supporting fault-tolerance. Topics vary to reflect advances in the field but typically include global state snapshots, causality and clocks (logical and physical), agreement and consensus, primary-backup and state-machine replication, quorums, and gossip. Students undertake a substantial software project to put these ideas into practice. Many students obtain additional project credit by co-registering in CS 4999&#160; or CS 5999&#160;.",DS
Advanced Computer Architecture,"CS 5420 - [Advanced Computer Architecture] (crosslisted) ECE 5750&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Letter grades only.Prerequisite: ECE 4750&#160; or CS 4420&#160;. J. Martinez.For description, see ECE 5750&#160;.",AR
Physical Computing,"CS 5422 - Physical Computing &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Student option grading.Prerequisite: CS 3410&#160; or CS 3420&#160;/ECE 3140&#160; or permission of instructor. Enrollment limited to: students enrolled at Cornell Tech. Offered at Cornell Tech in New York City. R. Manohar.This course provides a hands-on introduction to the resources for designing and fabricating smart systems using hardware components, including sensors and sensor networks; analog instrumentation; embedded digital processing (microcontroller programming such as the Arduino system); graphics and I/O chips; flash memory; wired and wireless communications; PCB layout and fabrication; 3-D printing; laser cutting. The key characteristics of the components and their interfaces will be presented.","AR
DS
IM
IS
NC
SDF
SF
SP"
Developing and Designing Interactive Devices,"CS 5424 - Developing and Designing Interactive Devices (crosslisted) INFO 5345&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: basic programming experience. Course fee: $200. Offered at Cornell Tech in New York City. W. Ju.For description, see INFO 5345&#160;.",HCI
System Security,"CS 5430 - System Security &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: CS 4410&#160; and familiarity with Java, C, or C# programming languages. Staff.Discusses security and survivability for computers and communications networks. Includes discussions of policy issues (e.g., the national debates on cryptography policy) as well as discussions of the technical alternatives for implementing the properties that comprise &#8220;trustworthiness&#8221; in a computing system. Covers mechanisms for authorization and authentication as well as cryptographic protocols.",SP
Practicum in System Security,"CS 5431 - Practicum in System Security &#160;&#160;&#160;&#160;&#160;Spring. 2 credits. Student option grading.Corequisite: CS 5430&#160;. Staff.Explores the design and construction of secure computing systems, including secure coding and the use of software analysis tools. Course involves the construction of a significant project group project.",SP
"Blockchains, Cryptocurrencies, and Smart Contracts","CS 5433 - Blockchains, Cryptocurrencies, and Smart Contracts &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: minimum of two computer science courses or equivalent knowledge. Programming experience, familiarity with common algorithms and data structures, and an understanding of basic concepts in discrete mathematics. Offered at Cornell Tech in New Your City. Staff.Viewed variously as a niche currency for online criminals and a technological threat to the financial industry, Bitcoin has fueled mythmaking, financial speculation, and real technological innovation. We will study both Bitcoin and the technological landscape it has inspired and catalyzed. Topics will include: the mechanics of consensus algorithms, such as Proof of Work and Byzantine Consensus, and their role in blockchains and cryptocurrencies; cryptographic tools employed in cryptocurrencies, including digital signatures algorithm and zero-knowledge proofs; the evolution and mechanics of Bitcoin and its ecosystem; smart contracts; and special topics, such as trusted hardware in blockchain-based systems, smart contracts and real-world contract law, and cryptocurrencies and crime. Grading will be based on homework assignments and a final project.",AR
Defending Computer Networks,"CS 5434 - [Defending Computer Networks] &#160;&#160;&#160;&#160;&#160;Fall or spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: CS 3410&#160; or equivalent, CS 4410&#160; or equivalent. Permission of instructor required. Enrollment limited to: CS MEng standing. S. Staniford.We discuss attacks on operational computer networks, with a focus on how to prevent them, or detect them if we fail to prevent them; we study the reasons why real-world software tends to be vulnerable and how attackers exploit those vulnerabilities; we talk about the lifecycle of network attacks - methods of reconnaissance, gaining control of bulk volumes of computers via scanning, by worms, or by client-side attacks such as drive-by downloads from malicious websites; discuss the control of the resulting botnets of computers and the motives of attackers such as criminal syndicates and intelligence agencies; cover network-level defenses such as firewalls, encryption and virtual private networks; cover technical approaches for detecting attacks both on the network and on the host; talk about legal and ethical issues for network defenders.",SP
Security and Privacy Concepts in the Wild,"CS 5435 - Security and Privacy Concepts in the Wild &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Letter grades only.Prerequisite: CS 2800&#160; or CS 4820&#160; or permission of instructor. Enrollment limited to: Cornell Tech Students. Offered at Cornell Tech in New York City. A. Juels.This course will impart a technical and social understanding of how and why security and privacy matter, how to think adversarially, how (and how not) to design systems and products. Less attention will be paid to specific skills such as hacking, writing secure code, and security administration. Topics will include user authentication, cryptography, malware, behavioral economics in security, human factors in security, privacy and anonymity, side channels, decoys and deception, and adversarial modeling. We will explore these concepts by studying real-world systems and attacks, including Bitcoin, Stuxnet, retailer breaches, implantable medical devices, and health apps, and considering issues to come in personal genomics, virtual worlds, and autonomous vehicles.",SP
Privacy in the Digital Age,"CS 5436 - Privacy in the Digital Age (crosslisted) INFO 5303&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Letter grades only. Enrollment limited to: students enrolled at Cornell Tech. Offered at Cornell Tech in New York City. V. Shmatikov.This course introduces students to privacy technologies and surveys the current state of digital privacy from multiple perspectives, including technology, law, policy, ethics, economics, and surveillance.","SP
PD
PL"
Principals and Practice of Cryptocurrencies,"CS 5437 - [Principals and Practice of Cryptocurrencies] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: CS 4410&#160; or permission of instructor. I. Eyal.This course will provide an introduction to the theoretical concepts and practical concerns of cybercurrencies. Topics include hashing, cryptographic signatures, peer to peer networks, distributed consensus with proof of work, and the security and privacy of cyber-currencies. Also discussed are Bitcoin&#8217;s use and ecosystem, its history, economy and legal aspects.",DS
Security and Privacy: Practice and Case Studies,"CS 5438 - Security and Privacy: Practice and Case Studies &#160;&#160;&#160;&#160;&#160;Spring. 1-3 credits, variable. Student option grading. Enrollment limited to: students enrolled at Cornell Tech. Offered at Cornell Tech in New York City. Staff.This course surveys computer security and privacy from a practical perspective and introduces students to current practices and policies in industry, law, and government.",SP
Networked and Distributed Systems,"CS 5450 - Networked and Distributed Systems &#160;&#160;&#160;&#160;&#160;Fall or spring. 3-4 credits, variable. Student option grading.Prerequisite: CS 4410&#160;. Offered at Cornell Tech in New York City. Staff.Appropriate for advanced students who have no or limited networking knowledge. Note that there is project work in C or C++, so students should either know it or be prepared to learn it. Focuses on architectural principles of computer networking, network design principles (simplicity, scalability, performance, end-to-end), and how the Internet works today.","NC
DS
SF"
Mobile and Ubiquitous Systems,"CS 5454 - Mobile and Ubiquitous Systems &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 4410&#160; or permission of instructor. Enrollment limited to: Cornell Tech students. Offered at Cornell Tech in New York City. D. Estrin.Mobile and ubiquitous systems are a component of almost every digital experience; from retail to health, games to social, music to money, etc. This course covers the basics of mobile technologies (communication, sensing, location, cloud interaction, wearables, UX) while engaging students in application-inspired, project based, learning around the key challenges of resource management, context-sensing, user experience design, cross-platform operation, and security and privacy. Through guided explorations of the literature, students learn to navigate trends likely to influence the future of mobile and ubiquitous systems, including underlying technologies and emerging applications.This course will introduce the basics of mobile, wireless, and wearable technologies (including communication, sensing, and location features), develop an understanding for the software structures and techniques used to create robust mobile applications that interface to cloud services, study challenges that arise in mobile and ubiquitous systems such as user experience design and resource management, and survey state of the art applications.",HCI
Parallel and Distributed Computing,"CS 5460 - Parallel and Distributed Computing &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 3110&#160; or equivalent. Enrollment limited to: students enrolled in the Cornell Tech. Offered at Cornell Tech in New York City. R. Manohar.An introduction to parallel and distributed computing systems. Topics that will be covered during the course include: platforms and models for parallel computing; message-passing parallelism; common structures and algorithms used in parallel systems including master/worker, task queues, global reductions, scans, map-reduce, stencils; hierarchical techniques; dynamic adaptation; shared memory parallelism.",PD
Computational Techniques for Analyzing Clinical Data,"CS 5540 - [Computational Techniques for Analyzing Clinical Data] &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: some programming experience, exposure to introductory statistics and algorithms; or permission of instructor. Staff.An overview of the construction and analysis of digital information generated in clinical medicine.",IS
Introduction to Computer Graphics,"CS 5620 - Introduction to Computer Graphics &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 2110&#160;. Co-meets with CS 4620&#160;. May be taken with or without concurrent enrollment in CS 4621&#160;.Staff.Introduction to the principles of computer graphics in two and three dimensions. Topics include digital images, filtering and antialiasing, 2-D and 3-D affine geometry, ray tracing, perspective and 3-D viewing, the graphics pipeline, curves and surfaces, and human visual perception. Homework assignments require some Java programming.","AR
IAS
GV"
Computer Graphics Practicum,CS 5621 - Computer Graphics Practicum &#160;&#160;&#160;&#160;&#160;Spring. 2 credits. Student option grading.Prerequisite or corequisite: CS 5620&#160;. Co-meets with CS 4621&#160;. Staff.Provides CS 4620&#160; students with hands-on experience in computer graphics programming on modern graphics hardware. A semester-long project involves building a substantial interactive 3D system. The course uses Java and OpenGL for code development.,"AR
CN
GV
HCI"
Interactive Computer Graphics,"CS 5625 - [Interactive Computer Graphics] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: CS 4620&#160;/CS 5620&#160;. Staff.Methods for interactive computer graphics, targeting applications including games, visualization, design, and immersive environments. Introduces students to state-of-the-art interactive techniques and programmable shading. Students develop a game engine for their final project using Java and GLSL.","GV
HCI"
Physically Based Animation for Computer Graphics,"CS 5643 - [Physically Based Animation for Computer Graphics] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: CS 4620&#160;/CS 5620&#160; or permission of instructor. Staff.Introduces students to common physically based modeling techniques for animation of virtual characters, fluids and gases, rigid and deformable solids, and other systems.","AR
IAS
AL
PD
PL
SDF"
Signal Processing,"CS 5660 - Signal Processing &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Student option grading.Prerequisite: Some familiarity with linear algebra and statistics (at the level taught in a freshman course), or permission of instructor. Enrollment limited to: students enrolled at Cornell Tech. Offered at Cornell Tech in New York City. C. R. Johnson.Correlation, convolution, Fourier transform, and moving-average and autoregressive frequency-selective filtering for one-dimensional and two-dimensional discrete-time signals. One-dimensional time signal processing applications include system identification, interference cancellation, channel equalization, and prediction. Two-dimensional signal (image) processing applications utilize histogram equalization, morphological filtering, and the Radon transform. Programming in Matlab.",SP
HCI and Design,"CS 5682 - HCI and Design (crosslisted) INFO 6410&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Letter grades only.Prerequisite: students are expected to have previously taken a course in programming, design, or psychology, or should have equivalent professional experience in one of these areas. Enrollment limited to: Cornell Tech students. Offered at Cornell Tech in New York City. N. Dell.For description, see INFO 6410&#160;.",HCI
Natural Language Processing,"CS 5740 - Natural Language Processing &#160;&#160;&#160;&#160;&#160;Fall. 3-4 credits, variable. Student option grading.Prerequisite: CS 2110&#160; or equivalent and CS 4780&#160;, CS 4786&#160;, or CS 5785&#160; or by permission of instructor. Co-meets with COGST 4740&#160;/CS 4740&#160;/LING 4474&#160;. Staff.This course constitutes an introduction to natural language processing (NLP), the goal of which is to enable computers to use human languages as input, output, or both. NLP is at the heart of many of today&#8217;s most exciting technological achievements, including machine translation, automatic conversational assistants and Internet search. Possible topics include summarization, machine translation, sentiment analysis and information extraction as well as methods for handling the underlying phenomena (e.g., syntactic analysis, word sense disambiguation, and discourse analysis).","AL
DS
IS"
Applied Machine Learning,"CS 5785 - Applied Machine Learning &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Letter grades only.Prerequisite: CS 2800&#160; or the equivalent plus basic familiarity with Matlab or Python, or permission of the instructor. Enrollment limited to: Cornell Tech students. Offered at Cornell Tech in New York City. Staff.Learn and apply key concepts of modeling, analysis and validation from machine learning, data mining and signal processing to analyze and extract meaning from data. Implement algorithms and perform experiments on images, text, audio and mobile sensor measurements. Gain working knowledge of supervised and unsupervised techniques including classification, regression, clustering, feature selection, and dimensionality reduction.","SDF
SP"
Machine Learning for Data Science,"CS 5786 - Machine Learning for Data Science &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: Probability theory (BTRY 3080&#160;, ECON 3130&#160;, MATH 4710&#160;, or strong performance in ENGRD 2700&#160; or equivalent); linear algebra (strong performance in MATH 2940&#160; or equivalent); CS 2110&#160; or equivalent programming proficiency. Co-meets with CS 4786&#160;. Staff.An introduction to machine learning for data-science applications. Topics include dimensionality-reduction (such as principal components analysis, canonical correlation analysis, and random projection); clustering (such as k-means and single-link); probabilistic modeling (such as mixture models and the EM algorithm). This course can be taken independently or in any order with CS 4780&#160;/CS 5780&#160;.",IS
Cryptography,"CS 5830 - Cryptography &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequisite: CS 2800&#160; (or equivalent), CS 4810&#160; (or mathematical maturity), or permission of instructor. Co-meets with CS 4830&#160; for a limited number of Ithaca undergraduates. Staff.Introductory course in Cryptography. Topics include one-way functions, encryption, digital signatures, pseudo-random number generation, zero-knowledge and basic protocols. The emphasis will be on fundamental notions and constructions with proofs of security based on precise definitions and assumptions.",IS
Security Protocols and Privacy,"CS 5831 - [Security Protocols and Privacy] &#160;&#160;&#160;&#160;&#160;Fall or spring. Not offered 2017-2018. 4 credits. Letter grades only.Prerequisite: CS 2800&#160; (or equivalent), CS 4810&#160; (or mathematical maturity), or permission of instructor. Enrollment limited to: Cornell Tech students. Offered at Cornell Tech in New York City. R. Pass.This course covers advanced security and privacy protocols. Topics include basic key-exchange protocols, Internet Security Protocols (e.g., SSL/TLS), Oblivious RAM, Secure Two-party Computation, Voting protocols, and methods for data sanitization (i.e., how to ensure that publicly released data does not violate individuals&#8217; privacy).",SP
Networks and Markets,"CS 5854 - Networks and Markets &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Letter grades only.Prerequisite: basic probability. Enrollment limited to: students at Cornell Tech. Offered at Cornell Tech in New York City. R. Pass.The course examines how the computing, economic and sociological worlds are connected and how these connections affects these worlds. Tools from computer science, game theory and mathematics are introduced and then used to analyze network structures present in everyday life. Topics covered include social networks, web search, auctions, markets, voting, and crypto-currencies (e.g. bitcoin).","NC
DS"
Foundations of Concurrency,"CS 6112 - [Foundations of Concurrency] &#160;&#160;&#160;&#160;&#160;Fall. Not offered 2017-2018. 4 credits. Student option grading. Enrollment limited to: graduate student standing or permission of the instructor. Staff.An introduction to the theoretical foundations of languages for concurrent and distributed programming. This advanced seminar presents general models (e.g., CSP, pi-calculus, join-calculus, ambients), their associated reasoning techniques, and topics such as coordination, fault-tolerance, mobility, security, and scalability. Evaluation is based on participation, short assignments, and student presentations of recent papers.","CN
DS
PL
SDF"
Certified Software Systems,"CS 6115 - Certified Software Systems &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Letter grades only.Prerequisite: CS 6110&#160; or permission of the instructor. Staff.In recent years, it has become practical to build large software systems using formal proof assistants. Examples of such certified systems include the seL4 microkernel, the CompCert C compiler, the Vellvm LLVM compiler, and the Bedrock library. This course provides a hands-on introduction to programming using the Coq proof assistant. Assessment is based on participation and a substantial course project.",SF
Programming Languages and Logics Laboratory,"CS 6116 - [Programming Languages and Logics Laboratory] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 2 credits. Student option grading.Prerequisite or corequisite: CS 6110&#160;. Staff.This course assumes material from CS 6110 - Advanced Programming Languages&#160;. The course examines applications of programming language concepts in other domains, including domain specific languages, programming logics, program verification systems, and logical programming environments. The course also presents applications of formal methods to the design of programming languages and to the formal verification of aspects of their implementation. We use the ML family of programming languages and, perhaps, the Scheme/Lisp family to illustrate the concepts and methods.",PL
Matrix Computations,"CS 6210 - [Matrix Computations] &#160;&#160;&#160;&#160;&#160;Fall. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: MATH 4310&#160; or permission of instructor. Staff.Stable and efficient algorithms for linear equations, least squares, and eigenvalue problems. Direct and iterative methods are considered. The MATLAB system is used extensively.","AL
AR
IAS
SDF
SP"
Data-Sparse Matrix Computations,"CS 6220 - Data-Sparse Matrix Computations &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: CS 4220&#160; or CS 6210&#160;. Staff.Matrices and linear systems can be data-sparse in a wide variety of ways, and we can often leverage such underlying structure to perform matrix computations efficiently. This course will discuss several varieties of structured problems and associated algorithms. Example topics include randomized algorithms for numerical linear algebra, Krylov subspace methods, sparse recovery, and assorted matrix factorizations.","AL
DS"
Numerical Methods for Data Science,"CS 6241 - Numerical Methods for Data Science &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Student option grading.Prerequiste: Strong background in linear algebra, prior exposure to numerical methods. D. Bindel.A discussion of numerical methods (particularly iterative methods for linear algebra and optimization) in the context of machine learning and data analysis problems.  The course will particularly focus on sparsity, rank structure, and spectral behavior of underlying linear algebra problems; convergence behavior and &#8220;regularization via iteration&#8221; effects for standard solvers; and comparisons between numerical methods for data analysis with large-scale numerical methods used in other areas of science and engineering.",IS
Advanced Database Systems,CS 6320 - Advanced Database Systems &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: CS 4320&#160; or permission of instructor. Staff.Covers a variety of advanced issues ranging from transaction management to query processing to data mining. Involves extensive paper reading and discussion.,"AL
AR
IAS
IM
PL"
Security and Privacy Technologies,"CS 6431 - Security and Privacy Technologies &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Letter grades only. Offered at Cornell Tech in New York City. Offered via distance learning for students in Ithaca.Staff.A survey of modern security and privacy technologies. Topics include exploitation techniques, Web and mobile security, uses and misuses of cryptography in secure systems, attacking and defending secure network protocols, data privacy and anonymity, censorship resistance, electronic payments.This course includes a major project component in the form of major programming assignments and/or other activities.",SP
Distributed Consensus and Blockchains,"CS 6432 - Distributed Consensus and Blockchains &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Letter grades only.Prerequisite: undergraduate discrete math, CS 2800&#160; or equivalent. E. Shi.Distributed consensus protocols have been widely adopted in replicated databases and decentralized cryptocurrencies. In this course, we will explore how to design formally secure protocols that allow nodes to reach consensus in a distributed system. Both classical consensus and modern blockchains will be discussed.","DS
PD
NC"
Datacenter Networks and Services,"CS 6452 - [Datacenter Networks and Services] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 3 credits. Student option grading.Prerequisite: CS 4410&#160; or equivalent. Staff.This course examines novel network architectures, networking protocols and software services to support high-performance datacenter applications. It covers physical network design, addressing and naming, transport protocols, consensus protocols, lock management, key-value stores, NoSQL, virtualization and green datacenters. Students are expected to undertake a significant class project.","NC
HCI"
Advanced Computer Networking,"CS 6455 - Advanced Computer Networking &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Letter grades only.Prerequisite: CS 4410&#160; or permission of instructor required. R. Agarwal.This course explores state-of-the-art network architectures and protocols through a review of recent research literature, discussions during lectures and class projects. Students will complete a semester-long research project based on one of the topics covered in the class. ","NC
SP"
Peer-to-Peer Systems,"CS 6460 - [Peer-to-Peer Systems] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: CS 6410&#160; recommended. Staff.Peer-to-peer (P2P) systems, in which clients not only consume resources but also provide their own resources for the use of other clients, have emerged as a new architectural paradigm in distributed computing. This course examines peer-to-peer systems and discusses existing and new applications. Students are expected to perform extensive reading on P2P and build a peer-to-peer system as part of this course.","NC
SDF
DS"
Emerging Cloud Technologies and Systems Challenges,"CS 6465 - Emerging Cloud Technologies and Systems Challenges &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Student option grading.Prerequisite: CS 6410&#160;. Enrollment limited to: Ph.D. students. K. Birman.Course explores new hardware and software technologies that are likely to have a major impact on large-scale computer systems, with a focus on understanding the research challenges that will arise as we start to integrate them into existing cloud infrastructures. The class will center on a mix of readings, discussion, and individualized research activities. The technologies to be discussed may include, for example, RDMA networking, network interfaces with novel capabilities, new memory options such as 3D-XPoint and high-density multi-layer NAND/SSD, battery-backed SSD, NetFPGA and GPU co-processors, and the new Intel SGX enclave security technology.","NC
DS
PD"
Cryptocurrencies and Smart Contracts,"CS 6466 - Cryptocurrencies and Smart Contracts &#160;&#160;&#160;&#160;&#160;Spring. 3 credits. Letter grades only.Prerequisite: CS 2110&#160;. E. G. Sirer.This paper-reading course will examine the design and implementation of cryptocurrencies, digital coin systems and smart tokens. Starting with the initial virtual currency proposals from the 90&#8217;s, we will cover the landmark papers that provide the foundation for today&#8217;s cryptocurrencies and smart contract platforms, with some emphasis on public key cryptography, consensus protocols, and other foundational building blocks. The course will also cover smart contract construction, including Digital Autonomous Organizations and other application areas.","SF
DS
AR"
Computational Motion,"CS 6650 - [Computational Motion] &#160;&#160;&#160;&#160;&#160;Fall. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: undergraduate-level understanding of algorithms, and some scientific computing. Staff.Covers computational aspects of motion, broadly construed. Topics include the computer representation, modeling, analysis, and simulation of motion. Students implement several of the algorithms covered in the course and complete a final project.","AR
IAS
DS
PL
SDF"
Advanced Artificial Intelligence,"CS 6700 - Advanced Artificial Intelligence &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: CS 4700&#160; or permission of instructor. Staff.Covers a variety of areas in AI, including knowledge representation, automated reasoning, learning, game-playing, and planning, with an emphasis on computational issues.",IS
Structured Prediction for Natural Language Processing,"CS 6741 - Structured Prediction for Natural Language Processing &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Letter grades only.Prerequisite: CS 2110&#160; or equivalent programming experience, a course in machine learning (CS 4780&#160;/CS 5780&#160;, CS 6780&#160; or equivalent). Enrollment limited to: Ph.D. students. Offered at Cornell Tech in New York City. Y. Artzi.Robust language understanding has the potential to transform how we interact with computers, extract information from text and study language on large scale. However, to accurately recover the meaning of language, automated systems must learn to reason about the meaning of words and the intricate structures they combine to. This research-oriented course examines machine learning and inference methods for recovering structured representations of language meaning. Possible topics include formalisms, inference and learning for: sequence models (tagging, named-entity recognition), tree models (constituency and dependency parsing), mapping sentences to logical form representations and alignment models (machine translation).","AL
IAS
DS"
Natural Language Processing and Social Interaction,"CS 6742 - Natural Language Processing and Social Interaction (crosslisted) INFO 6742&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Student option grading.Prerequisite: CS 2110&#160; or equivalent programming experience, a course in artificial intelligence or any relevant subfield (e.g., NLP, information retrieval, machine learning). Enrollment limited to: Ph.D./MS students. Staff.More and more of life is now manifested online, and many of the digital traces that are left by human activity are increasingly recorded in natural-language format. This research-oriented course examines the opportunities for natural language processing to contribute to the analysis and facilitation of socially embedded processes. Possible topics include sentiment analysis, learning social-network structure, analysis of text in political or legal domains, review aggregation systems, analysis of online conversations, and text categorization with respect to psychological categories.",SP
Language Processing for Computational Social Science,"CS 6746 - [Language Processing for Computational Social Science] (crosslisted) INFO 6030&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Letter grades only (no audit).Prerequisite: Machine Learning, Linear Algebra, Advanced Programming. Permission of instructor required. C. Danescu-Niculescu-Mizil.For description and learning outcomes, see INFO 6030&#160;.",SP
Advanced Machine Learning,"CS 6780 - [Advanced Machine Learning] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: programming skills (at the level of CS 2110&#160;) and basic knowledge of linear algebra (at the level of MATH 2940&#160;) and probability theory (at the level of MATH 4710&#160;) and multivariable calculus (at the level of MATH 1920&#160;). Enrollment limited to: Ph.D. students or permission of instructor. Students who have already taken CS 4780&#160;/CS 5780&#160; should not take this class.Staff.Gives a graduate-level introduction to machine learning and statistical pattern recognition and in-depth coverage of new and advanced methods in machine learning, as well as their underlying theory. Emphasizes approaches with practical relevance and discusses a number of recent applications of machine learning, such as data mining, computer vision, robotics, text and web data processing. An open research project is a major part of the course.",IS
Probabilistic Graphical Models,"CS 6782 - [Probabilistic Graphical Models] (crosslisted) BTRY 6790&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: probability theory (BTRY 3080&#160; or equivalent), programming and data structures (CS 2110&#160; or equivalent); a course in statistical methods is recommended but not required (BTRY 4090&#160; or equivalent). Staff.For description, see BTRY 6790&#160;.","AL
AR
GV
NC
PD
PL
SDF
SP"
Advanced Topics in Machine Learning,"CS 6784 - Advanced Topics in Machine Learning &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: CS 4780&#160; or equivalent, or CS 5780&#160; or equivalent, or permission of instructor. Staff.Extends and complements CS 4780&#160; and CS 5780&#160;, giving in-depth coverage of new and advanced methods in machine learning.",IM
Advanced Machine Learning Systems,"CS 6787 - Advanced Machine Learning Systems &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: CS 4780&#160; or CS 4786&#160;. C. De Sa.Graduate-level introduction to system-focused aspects of machine learning, covering guiding principles and commonly used techniques for scaling up to large data sets. Topics will include stochastic gradient descent, acceleration, variance reduction, methods for choosing metaparameters, parallelization within a chip and across a cluster, and innovations in hardware architectures. An open-ended project in which students apply these techniques is a major part of the course.","AL
SP
SF"
Advanced Topic Modeling,"CS 6788 - [Advanced Topic Modeling] (crosslisted) INFO 6150&#160;  &#160;&#160;&#160;&#160;&#160;Fall. 3 credits. Letter grades only.Prerequisite: familiarity with Bayesian statistics and probabilistic modeling. Permission of instructor required. Enrollment limited to: graduate students or seniors. D. Mimno.For description, see INFO 6150&#160;.","IS
AR
AL"
Theory of Computing,"CS 6810 - [Theory of Computing] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: CS 4810&#160; and CS 4820&#160; or CS 6820&#160; or permission of instructor. Staff.Advanced treatment of theory of computation, computational-complexity theory, and other topics in computing theory.","AL
AR
IAS
IM
PL
SDF"
Analysis of Algorithms,"CS 6820 - Analysis of Algorithms &#160;&#160;&#160;&#160;&#160;Fall. 4 credits. Student option grading.Prerequisite: CS 4820&#160; or graduate standing. Staff.Methodology for developing and analyzing efficient algorithms. Understanding the inherent complexity of natural problems via polynomial-time algorithms, advanced data structures, randomized algorithms, approximation algorithms, and NP-completeness. Additional topics may include algebraic and number theoretic algorithms, circuit lower bounds, online algorithms, or algorithmic game theory.","AL
AR
DS
PL
SDF"
Cryptography,"CS 6830 - [Cryptography] &#160;&#160;&#160;&#160;&#160;Spring. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: General ease with algorithms and elementary probability theory, maturity with mathematical proofs (ability to read and write mathematical proofs). Enrollment limited to: Cornell Tech students. Limited enrollment for Ithaca students. Offered at Cornell Tech in New York City. Distance learning for Ithaca students.Staff.Graduate introduction to cryptography. Topics include encryption, digital signatures, pseudo-random number generation, zeroknowledge, and basic protocols. Emphasizes fundamental concepts and proof techniques.",IS
Applied Cryptography,"CS 6832 - [Applied Cryptography] &#160;&#160;&#160;&#160;&#160;Fall. Not offered 2017-2018. 3 credits. Letter grades only.Prerequisite: undergraduate security and cryptography recommended but not required. E. Shi.We will explore how to program and adopt cryptography in secure systems design, including applications such as cloud computing and cryptocurrencies.  We will also explore interesting research questions and how to do research in applied cryptography. Background recommended but not required: undergraduate-level security or cryptography. We welcome students from non-cryptography areas such as programming languages and systems to participate and contribute to our discussions.",IS
The Structure of Information Networks,"CS 6850 - The Structure of Information Networks (crosslisted) INFO 6850&#160;  &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: CS 4820&#160;. J. Kleinberg.For description, see INFO 6850&#160;.","NC
AL
IAS"
Logics of Programs,"CS 6860 - [Logics of Programs] &#160;&#160;&#160;&#160;&#160;Fall. Not offered 2017-2018. 4 credits. Student option grading.Prerequisite: CS 6110&#160;, CS 4810&#160;, and MATH 4810. Staff.Topics in type theory as a foundation for programming languages and computing theory. The key prerequisites are CS 6110&#160; and CS 4810&#160;. Topics will include: semantics of programming languages and logics, constructive and intuitionistic logics, the propositions-as-types principle, extracting proofs from programs, Hoare logics and Kleene algebras for reasoning about programs, computational complexity in type theory, formal relationships among type theories and programming logics, inductive and co-inductive types.","PL
AL"
Introduction to Kleene Algebra,"CS 6861 - Introduction to Kleene Algebra &#160;&#160;&#160;&#160;&#160;Spring. 4 credits. Student option grading.Prerequisite: CS 6860&#160; or permission of instructor. D. Kozen.Kleene algebra is the algebra of regular expressions and finite automata, structures of fundamental importance in computer science. Kleene algebra is the algebraic theory of these objects, although it has many other natural and useful interpretations: relational algebra, programming language semantics, program logics, automata and formal languages, network programming, computational geometry, and the design and analysis of algorithms. In this course we will explore the theory and applications of this system, including models, deductive systems, completeness and complexity results, and applications in the areas mentioned above. A final paper or project will be due on which the course grade will be based. It will be either an independent study with final paper and presentation, or a software project and presentation, at the students&#8217; choice.",PL
Seminar in Programming Languages,"CS 7190 - Seminar in Programming Languages &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. S/U grades only.Prerequisite: CS 6110&#160; or permission of instructor. Staff.The Programming Languages Discussion Group meets weekly to discuss papers in the area of programming languages, program analysis, and compilers. The goal is to encourage interactions and discussions between students, researchers, and faculty with interests in this area. The seminar is open to everybody interested in languages and compilers. First-year and second-year students are especially encouraged to participate.",PL
Seminar in Programming Refinement Logics,"CS 7192 - [Seminar in Programming Refinement Logics] &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. Student option grading. Permission of instructor required. Staff.Topics in programming logics, possibly including type theory, constructive logic, decision procedures, heuristic methods, extraction of code from proofs, and the design of proof-development and problem-solving systems.",PL
Seminar on Scientific Computing and Numerics,"CS 7290 - Seminar on Scientific Computing and Numerics (crosslisted) MATH 7290&#160;  &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. Student option grading. Staff.Talks on various methods in scientific computing, the analysis of their convergence properties and computational efficiency, and their adaptation to specific applications.","AL
AR
IAS"
Computer Security Seminar,"CS 7493 - Computer Security Seminar &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. S/U grades only.Prerequisite: CS 4410&#160;. Permission of instructor required for non-PhD students. Enrollment limited to: Ph.D. standing. A. Myers.This is a graduate seminar primarily aimed at Ph.D. students. Students will read, present, and discuss recent and classic papers in the computer security area. Outside speakers will also be invited to present current research.",SP
Special Topics in Computer Vision,"CS 7670 - [Special Topics in Computer Vision] &#160;&#160;&#160;&#160;&#160;Fall, spring. Not offered 2017-2018. 1 credit. Student option grading. Staff.Informal weekly seminar in which current topics in computer vision are discussed.","AR
IAS"
Computer Graphics Seminar,CS 7690 - [Computer Graphics Seminar] &#160;&#160;&#160;&#160;&#160;Spring. 1 credit. Student option grading. Staff.The Graphics/Vision Research Seminar discusses recent research in the areas of computer graphics and computer vision. The goal is to foster technical discussions and collaboration among the Cornell graphics and vision research community.,"GV
AR"
Seminar in Artificial Intelligence,"CS 7790 - Seminar in Artificial Intelligence &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. S/U grades only. Permission of instructor required. Staff.The AI seminar will meet weekly for lectures by graduate students, faculty, and researchers emphasizing work-in-progress and recent results in AI research.",IS
Special Topics in Machine Learning,"CS 7792 - Special Topics in Machine Learning &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. S/U grades only. Permission of instructor required. Staff.Reading group on advanced topics in machine learning.",IS
Seminar in Natural Language Understanding,"CS 7794 - Seminar in Natural Language Understanding &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. Student option grading. Staff.This course, the NLP seminar, is a weekly meeting for people currently or soon to be actively doing research in NLP. (Students simply looking to learn more about NLP should not enroll, but should take one of our lecture courses instead.) One participant leads discussion each week, either of a recently published paper or of their own work in progress. Attendance at all sessions is mandatory.","NC
SP"
Robotics Seminar,"CS 7796 - Robotics Seminar &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. S/U grades only. Intended for: students and faculty actively involved in robotics research. R. Knepper.Informal seminar in which current topics in robotics are discussed.","AR
IAS
GV
IM
OS
PD
PL
SDF
SP"
Cryptography Seminar,"CS 7893 - Cryptography Seminar &#160;&#160;&#160;&#160;&#160;Fall, spring. 1 credit. Student option grading. Staff.Seminar for discussing recent or classical papers in cryptography.","IS
AR
NC"
CGS 2060. Computer Fluency (3).,"Not open to students with credit in CGS 2100. An introduction to information processing and computer applications. Hands-on experience with microcomputer applications such as word processors,spreadsheets, and database managers. See http://service.cs.fsu.edu for more information on this course. [Satisfies the FSU computer skills competency requirement.]",IS
CGS 2064. Computer Literacy II (3).,"Prerequisites: CGS2060 or permission of instructor. This course builds on skills and concepts learned in CGS 2060 Computer Literacy to show students how digital technologies are used in professional environments to assist in productivity. Topics include information systems, databases, e-commerce, systems and software development, multimedia, and information security. While developing a deeper understanding of information systems and digital technologies, students also acquire valuable hands-on skills that include digital graphics and photo editing, animation, database development, and Web development. Computer Literacy or equivalent computer experience is required for admission.","IS
CN
DS
IAS
IM
HCI
OS
PL
SDF
SE
SF
SP"
COP 2721. Introduction to Database Systems and Internet Services (3).,"This course is a hands-on introduction to the principles of computer hardware and software, database systems, and the Internet. It explores the concepts and techniques that support website development. Students learn to design and implement simple database systems and to create websites that interact with databases.",SP
CDA 3100 Computer Organization I (3).,"Corequisites: COP3330, MAD2104. This is a core course intended for computer science majors with previous C/C++ background. The course introduces fundamental concepts in computer organization and digital logic design, including numbering systems and number representation, logic gates and design, the Von-Neumann architecture principle, and the machine instruction cycle. Assembly language programming with C language interfacing is also presented, reinforcing basic computer structure and machine cycle operation principles.","AR
AL
DS"
CDA 3101 Computer Organization II (3).,"Prerequisite: CDA3100. Fundamental concepts in processor design, including datapath and control, pipelining, memory hierarchies, and I/O.","AR
IAS
IM
NC
PL
SDF
SE
SF
SP"
CGS 3066. Web Programming and Design (3).,"An overview of Internet communications and information services, as well as the technologies on which the Internet and Web are built. A strong emphasis on Web design, development, and scripting with participants learning the latest tools and techniques for building professional-grade, dynamic, and interactive Web pages and sites. No prerequisite, computer literacy assumed, CGS2064 helpful.","HCI
IM"
CGS 3406. Object-Oriented Programming in C++ (3).,"Prerequisite: MAC 1105. May not be applied towards a computer science major  Topics include a brief introduction to computers, C++ basics, procedural abstraction and functions, an introduction to the object-oriented paradigm, namespaces, arrays, strings and vectors, pointers, and recursion. Emphasis is on program problem-solving. [Satisfies the FSU computer skills competency requirement.]","AL
AR
CN
DS
GV
HCI
IAS
IM
IS
NC
OS
PL
SDF
SE
SP"
CGS 3223. Introduction to Programming with the C Language (3).,"Prerequisite: MAC 1140. This course is an introduction to C programming. Topics include types, operators, and expressions; control flow; IO; functions and program structure; and software design techniques. Eight to ten programming projects are required.","AR
IAS
PD
PL
SDF
SP"
CGS 3416. Java Programming for Nonspecialists (3).,"Prerequisite: MAC 1105 Topics include Java basics, a review of structured and object-oriented programming concepts, classes, constuctors, interfaces, exceptions, I/O, graphics concepts, jar files, compilation, virtual machines, applications, applets, APIs, HTML, XML, and XHTML.","AR
DS
IAS
IM
SDF
SE"
CIS 3931r. Intermediate Topics in Computer Science (2-3).,Prerequisite: COP 3502.  Topic and prerequisites will vary from term to term and section to section. Analyzes intermediate topics in the area of computer science. May be used as a self-contained study of a programming language in the context of applications for which the language is particularly suited. May be repeated to a maximum of nine (9) semester hours.,"PL
SF"
COP 3252. Internet Applications Programming with Java (3).,"Prerequisites: COP 3330 This course covers the applications of the Java language to education, electronic commerce, scientific research, and distributed systems in general. Topics include the following: the architecture of the Web, including software protocols for passing information in typical Web applications; introduction to the Java programming language; developing Graphical User Interfaces using Swing; an introduction to distributed objects using Java Remote Method Invocation (RMI); and server-side programming using Servlets and JDBC. Emphasis is placed on practical programming using these technologies.","AR
DS
GV
HCI
NC
OS
SE"
COP 3330. Object Oriented Programming (3).,"Prerequisite: COP 3014 or a comparable course in C or C++ programming. Pre- or Corequisite: COP 3353. Object-oriented programming in a modern programming language; classes, objects, inheritance, and polymorphism; introduction to data structures and container classes.","AR
DS
PL
SDF"
COP 3353 Introduction to UNIX (1).,"This is an introductory course in the use of the UNIX operating system designed for both majors and non-majors. Topics include: UNIX history, requesting UNIX accounts, logging in to a UNIX system, basic operating system concepts and file structure, basic commands, text editor(s)(to include emacs, vi, and pico), printing, mail, and online help. The goals of this course are to enable students to log in to their UNIX accounts from any type of computer and have a basic understanding of the commands and utilities.",OS
COP 3502. Introduction to Computer Science (3).,"Prerequisites: MAC 1105 and previous computer experience.  Course covers basic computer organization, computer languages and software, language translation and interpretation, object oriented design, object oriented programming, classes, objects, and inheritance, file systems and I/O.","AR
IAS
IM
SE
SF"
CAP 4601. Introduction to Artificial Intelligence (3).,"Corequisite: COP 4530.  This first course in Artificial Intelligence (AI) is designed to expose the student to both the breadth and depth of the subject. Topics include problem solving, knowledge and reasoning, acting logically, uncertain knowledge and reasoning, learning, and communicating, perceiving and acting.",IS
CAP 4730. Computer Graphics (3).,"Corequisite: COP 4530. Topics include: the fundamental hardware and software elements of computer graphics systems, including intelligent terminals, communication, and graphic languages; cost effective use of interactive graphics; CAD/CAM; office automation; and computer animation.","CN
AR
IAS"
CDA 4150. Computer Architecture (3).,"Prerequisites: CDA 3101. High performance architecture design and analysis, including memory-system design, pipelining, vector computers, and multiprocessors.","AR
IAS
NC
SP"
CEN 4020. Software Engineering I- Requirements Engineering (3).,"Corequisite: COP4530.  This course is the first semester of a two-semester software engineering sequence integrating theory and practice with project experience. Topics include theory, tools, requirements elicitation, software requirements specification, requirements review, software development, ethics,software development life cycle, teams and project management.",SE
CEN 4021. Software Engineering II- Design and Implementation (3).,"Prerequisites: CEN 4020 This course is the second semester of a two-semester software engineering sequence with focus on software project systems development. Topics include software design, software architectures, testing, deployment, software metrics, configuration management, reusability, portability and interoperability.",SE
CEN 4681. Expert Systems (3).,"Corequisite: COP 4530.  Topics include: definitions and historical development, methodology tools for analysis and design, survey of existing systems, inference engines, and theory and applications of fuzzy relational products to new developments in inference engines.",IS
CGS 4406. Object Oriented Programming in C++ (3).,Prerequisites: CGS 3406 or COP 3014. May not be applied toward a computer science major. Basics of the C++ language. Objects and classes. Programming with classes. Constructors and destructors. Function and operator overloading. Master classes. The class iostream. Base and derived classes. Templates.,"AL
AR
IAS
PL
SDF
SP"
CIS 4250. Ethics in Computer Science (3).,"Pre- or Corequisite: COP3014 or a prior course in programming. Introduces fundamental concepts in Ethics along with ethical, legal and social issues and questions in computer science that call for ethical analysis. The course also presents basic theories and skills in oral argument presentation and extemporaneous debate, including argument structure and debate practice. These skills are then used to support the explanation and argument of various ethical analyses of modern computer science problems. This course satisfies FSU&#8217;s Oral Communication Competency requirement. [Satisfies the FSU oral communication competency requirement.]",SP
CIS 4360. Introduction to Computer Security (3).,"Prerequisite: CGS 3406 or COP 3014. Course covers computer security threats and attacks, covert channels, trusted operation systems, access control, entity authentication, security policies, models of security, database security, administering security, physical security and TEMPEST, and brief introductions to network security and legal and ethical aspects of security.","SP
AR
CN
IAS
OS
SE"
CIS 4361 Applied Computer Security (3).,Prerequisite: CDA 3100. This course addresses threats and vulnerabilities to information systems and provides a hands-on opportunity for students to work with current technology used to counter such threats. Fundamental theories in computer security are also introduced.,SP
CIS 4385. Cybercrime Detection and Forensics (3).,"Prerequisites: CJE 3110, CDA 3100. Cybercrime activities leave a trail of incriminating evidence. In this course, students will focus on learning tools, techniques, and procedures for detecting cybercrime and analyzing collected data related to past and ongoing cyber offenses. The focus will be on forensic approaches that preserve the legal value of the collected evidence.","IAS
DS"
CIS 4930r. Special Topics in Computer Science (3).,Prerequisite: at least six (6) semester hours in computer science or software engineering at or above the 4000 level. May be repeated to a maximum of twelve (12) semester hours.,"IS
SDF
SE"
CNT 4406. Network Security and Cryptography (3).,"Corequisite: COP 4530 or permission of the instructor.  This course examines threats to computer networks, network vulnerabilities, techniques for strengthening passive defenses, tools for establishing an active network defense, and policies for enhancing forensic analysis of crimes and attacks on computer networks. Topics include private and public key cryptography, digital signatures, secret sharing, security protocols, formal methods for analyzing network security, electronic mail security, firewalls, intrusion detection, Internet privacy and public key infrastructures.","SF
IAS
CN
SP"
CNT 4504 Introduction to Computer Networks (3).,"Corequisite: COP 4530. Circuit switched and packet switched networks, protocols, protocol layering; application layer, socket programming; transport layer, multiplexing and demultiplexing, UDP, TCP, reliability, flow control, congestion control; network layer, routing protocols, switching technologies, multicast, mobility; link layer, local area networks, error detection and correction; wireless networks; multimedia networking; network security; network management.","NC
AR
SP"
CNT 4603. Computer and Network System Administration (3).,"Prerequisites: CGS 3406 or COP 3014.  This course offers a hands-on introduction to Unix and Microsoft Windows systems and network administration. Topics include the following: installation, maintenance, and extension of a multi-user computer system; development of administrative policies and procedures; user assistance and education; specifics of the Unix and Windows operating systems; and practical troubleshooting and problem solving.",OS
COP 4020. Programming Languages (3).,"Corequisite: COP 4530. A survey of programming languages and language features and an introduction to compilers. Languages to be discussed include Fortran, Pascal, Ada, PL/1, APL, and Lisp. Oral presentation required.",PL
COP 4342. Unix Tools (3).,"Prerequisites: COP 3330.  This course is an introduction to selected Unix tools and utilities that are useful for advanced users, programmers, and system administrators, such as shell scripts, the perl language, revision control systems, debuggers, editors, and the make, awk, sed, and expect utilities.","NC
OS
PL
SDF
SF
SP"
"COP 4530. Data Structures, Algorithms and Generic Programming (3).","Prerequisites: COP 3330; MAD 2104. Pre- or corequisite: CDA 3100.  Definition, use and implementation of generic data structures using a modern programming language; reusable program components.","SDF
PL
SE"
COP 4531. Complexity and Analysis of Data Structures and Algorithms (3).,"Prerequisite: COP 4530; MAD 3105 or 3107; Corequisite: STA 4442, STA 4321, or STA 3032.  Analysis of the complexity of algorithms, including sorting, searching, and graph algorithms; use and implementation of graphs.","AL
AR
GV
DS
SDF
SF
SE"
COP 4610. Operating Systems and Concurrent Programming (3).,"Prerequisite: COP 4530. Pre- or Corequisite: CDA 3101.  Design principles of batch, multiprogramming, and time-sharing operating systems; linking, loading, input-output systems, interacting processes, storage management, process and resource control, file systems.",OS
COP 4613. Real Time Systems (3).,"Prerequisites: COP 4610. Survey of the issues in the design and implementation of real time computer systems. Topics include: the use of computers for controlling real time processes, the use of Ada in embedded computer systems, and implementation of a real time computer system.",AR
COP 4710. Theory and Structure of Databases (3).,"Prerequisites: COP 3330, MAD 2104. Theory of relational and object-oriented databases; relational database management systems and SQL; design, developmental, and implementation issues in database systems; analysis of query languages and schema design in the relational model based on discrete math theories; development of a web-based database application using an OO programming language (i.e., Java and JSP).",PD
COP 4813 Web Applications Programming (3).,"Prerequisite: COP 3252. This course teaches programming of distributed web applications using Java Database connectivity, Servlets, Java Server Pages, Remove Method Invocation, and Enterprise Java Beans (both session and entry beans). Use of the Sun Microsystems Java 2 Enterprise Edition development platform either directly or indirectly through an IDE such as IBM&#8217;s WebSphere is also covered.","NC
AR
DS"
COT 4420. Theory of Computation (3).,"Prerequisites: MAD 3105.  Introduction to the theory of computation, including models of computation such as Turing machines; theory of programming languages, including grammars, parsing, syntax and semantics.","AL
AR
CN
IAS
IM
IS
NC
SDF
SP"
COT 4425. Formal Methods in Software Engineering (3).,"Prerequisites: COP 3331 and MAD 3105. Formal methods in software analysis and design, including formal specification and verification.","PL
AR"
Principles of Computing.,"This course is intended to help students learn to think in the manner necessary to fully grasp the nature and power of the digital world around us. The early era of the Internet and the personal computer led to the need for &quot;computer literacy.&quot; Now, the changing nature of our global society requires that students learn new ways to think about problems and how to solve them, regardless of students' specific fields of endeavor. Through this course, students will explore major issues related to the &quot;big ideas&quot; of computational thinking (namely, (i) Creativity, (ii) Abstraction, (iii) Data, (iv) Algorithms, (v) Programming, (vi) Internet, and (vii) Societal Impact), as well as how these issues will impact their future lives. Offered by Computer Science. Limited to two attempts.Mason Core: Information Technology: With EthicsRegistration Restrictions: Students with the terminated from VSE major attribute may not enroll.Schedule Type: Lecture",NC
Preview of Computer Science.,Offers a broad overview of computer science designed to provide students with an introduction to the field of computer science and an orientation to the Computer Science department and the computing environment at the university. Includes a project to introduce problem solving using computers. All computer science majors are required to take this course within their first year. Notes: All computer science majors are required to take this course within their first year. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisite: CS 112*C.,"AR
IAS
NC
PD
PL
SDF
SP"
Computer Ethics and Society.,"Intensive introduction to legal, social, and ethical issues surrounding software development and computer use. Stresses professional conduct, social responsibility, and rigorous standards for software testing and reliability. Examines issues such as liability, ownership of information, and computer crime. Note: Students who have received credit for CS 305 or 306 should not register for CS 105. No credit will be given for CS 105 if a student has already received credit for CS 305 or 306. Offered by Computer Science. Limited to two attempts.Mason Core: Information Technology: Ethics OnlyRegistration Restrictions: Students with the terminated from VSE major attribute may not enroll.Schedule Type: Lecture",SP
Essentials of Computer Science.,"Offers a broad overview of computer science designed to provide computer science majors with an introduction to their discipline. Fundamental computing concepts such as number representation, programming environments, communication tools, and basic network security measures are covered. Privacy and ethical use of computing are also discussed along with guest lectures to sample current computer science research. Note: All computer science majors are required to take this course within their first year as a computer science major. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Enrollment limited to students in the BS Applied Computer Science or BS Computer Science programs.Students with the terminated from VSE major attribute may not enroll.Schedule Type: Lecture",IS
Introduction to Computer Programming.,"Rigorous introduction to problem solving through development of computer programs. Focuses on identifying algorithmic patterns in problems, describing problem solutions in high-level pseudocode, then implementing in a procedural programming language. Basic programming concepts are covered in detail including expressions, control structures, simple data types, and input/output. Program testing and debugging are discussed to verify that problems are solved correctly. Note: The department will drop students who fail to meet the prerequisites. Lectures and Labs are offered in groups. Students MUST register for a lecture and a lab from the same group. Offered by Computer Science. Limited to two attempts.Mason Core: Information Technology: Without EthicsRegistration Restrictions: Required Prerequisites: (minimum score of 65 in 'Math Placement Transcendentals', minimum score of 07 in 'Math Placement Transcendentals', MATH 105C, 105T, 104C, 104T or 113C).","AL
PD
PL
SDF
SP"
Object-Oriented Programming.,"Thorough treatment of programming according to object-oriented principles. Introduces classes, interfaces, inheritance, polymorphism, and single dispatch as means to decompose problems. Covers intermediate programming techniques including error handling through exceptions, arrangement of source code into packages, and simple data structures. Intermediate debugging techniques and unit testing are covered. Note: Lectures and labs are offered in groups. Students MUST register for a lecture and a lab from the same group. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisite: (CS 112C).","IS
AR
PD
PL
SDF
SE"
Computer Programming for Engineers.,"Introduction to C as a second programming language with emphasis on problems and language features relevant to engineers. Topics include basic data types, pointers, elementary data structures, file/output, bitwise operations, and Unix commands for compilation and debugging. Intended as terminal course in computer programming. Notes: Intended as terminal course in computer programming. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisite: (CS 112C).","AL
AR
IAS
PL
SDF
SF
SP"
Introduction to Low-Level Programming.,"Introduction to the language C, as well as operating system concepts, in UNIX, to prepare students for topics in systems programming. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 110*C or 101*) and (CS 211C or 222C).","SF
OS
AR"
Synthesis of Ethics and Law for the Computing Professional.,"Practical course to become effective computer professional. Examines legal and ethical issues surrounding computer technology and its use, as well as the foundation building that is necessary to deal with those challenges. Applies philosophical bases for ethical decision making to modern concerns raised by computers and technology. Addresses topics covered by CS 105 in a more intensive manner and focuses on the emerging legal and ethical issues involved in e-commerce and widespread use of the Internet. Notes: Computer science majors may use this course to satisfy the Mason Core synthesis requirement, so long as they have not previously taken CS 305 for credit. Offered by Computer Science. Limited to two attempts. Equivalent to IT 304.Mason Core: SynthesisSpecialized Designation: Writing Intensive in the MajorRecommended Prerequisite: Junior standing (at least 60 credit hours).Recommended Corequisite: All required Mason Core courses.Registration Restrictions: Required Prerequisites: ((COMM 100C and ENGH 302C) or (HNRS 110C and 122C) or (HNRS 110C and 130C) or (HNRS 110C and 131C) or (HNRS 110C and 230C) or (HNRS 110C and 240C)) and (CS 105C).",SP
Data Structures.,Focuses on object-oriented programming with an emphasis on tools and techniques for developing moderate to large programs. Topics include use and implementation of linear and nonlinear data structures and the design and analysis of elementary algorithms. Offered by Computer Science. Limited to two attempts.Recommended Corequisite: CS 105.Registration Restrictions: Required Prerequisites: (CS 211C and MATH 113C).,"AL
AR
DS
PL
SDF
SE"
Software Engineering.,"An introduction to concepts, methods, and tools for the creation of large-scale software systems. Methods, tools, notations, and validation techniques to analyze, specify, prototype, and maintain software requirements. Introduction to object-oriented requirements modeling, including use of case modeling, static modeling, and dynamic modeling using the Unified Modeling Language (UML) notation. Concepts and methods for the design of large-scale software systems. Fundamental design concepts and design notations are introduced. A study of object-oriented analysis and design modeling using the UML notation. Students participate in a group project on software requirements, specification, and object-oriented software design. Offered by Computer Science. Limited to two attempts. Equivalent to SWE 321.Specialized Designation: Writing Intensive in the MajorRegistration Restrictions: Required Prerequisites: CS 310C and (ENGH 302C or (HNRS 110C and (HNRS 122C, 130C, 230C or 240C))).",SE
Introduction to Game Design.,"Game design, in various electronic entertainment technologies, involves a diverse set of skills and backgrounds from narrative and art to computer programming. Surveys the technical aspects of the field, with an emphasis on programming. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisite: (CS 211C).","GV
HCI"
Object-Oriented Software Design and Implementation.,"In-depth study of software design and implementation using a modern, object-oriented language with support for graphical user interfaces and complex data structures. Topics covered will be specifications; design patterns; and abstraction techniques; including typing, access control, inheritance, and polymorphism. Students will learn the proper engineering use of techniques such as information hiding, classes, objects, inheritance, exception handling, event-based systems, and concurrency. Offered by Computer Science. Limited to two attempts. Equivalent to SWE 332.Registration Restrictions: Required Prerequisite: (CS 310C).","SDF
PL
AR
IAS
HCI
SE"
Visual Computing.,"Focuses on programming essential mathematical and geometric concepts underlying computer graphics. Covers fundamental topics in computational geometry, 3D modeling, graphics algorithms, and graphical user interfaces using both 2D and 3D implementations. Reinforces object-oriented programming practices. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 262C and 310C).","GV
HCI"
Computer Systems and Programming.,"Introduces students to computer systems from a programmer's perspective. Topics include data representation, assembly and machine-level representation of high-level language programs, the memory hierarchy, linking, exceptions, interrupts, processes and signals, virtual memory, and system-level I/O. Foundation for courses on compilers; networks; operating systems; and computer architecture, where a deeper understanding of systems-level issues is required. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 262C or 222C) and MATH 125C.","AR
CN
DS
IAS
OS
SDF
SP"
Advanced Programming Lab.,"Programming-intensive lab course. Students refine problem-solving and programming skills while gaining experience in teamwork. Focuses on data structures, recursion, backtracking, dynamic programming, and debugging. Central focus is applying familiar and new algorithms and data structures to novel circumstances. Offered by Computer Science. May be repeated within the degree for a maximum 3 credits.Registration Restrictions: Required Prerequisite: CS 310C.","AL
AR
IAS
DS
PL
SDF
SE"
Game Programming I.,Introduction to technologies and techniques used in modern computer games. Teams will explore the various facets of a complete design using sophisticated tools. Includes a project in which a game is prototyped; this prototype and initial design will serve as the starting point for the project in CS 426. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C and 351C).,SP
Game Programming II.,Project-orientated continuation of CS 425 with an emphasis on the implementation of a complete game. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: CS 325C and 425C.,"AL
AR
IAS
HCI
IS
SDF
SE
SP"
Language Processors and Programming Environments.,"Survey of basic programming language processors and software development tools such as assemblers, interpreters, and compilers. Topics include design and construction of language processors, formal syntactic definition methods, parsing techniques, and code-generation techniques. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (CS 330C) and (CS 367C).","PL
PD
SDF
SE"
Database Concepts.,"Covers basics to intermediate knowledge for the design, implementation, and use of relational database systems. Topics include the Entity-Relationship (ER) and Entity-Enhanced Relationship (EER) models for database design, Relational Algebra (RA), Structured Query Language (SQL), SQL programming techniques, functional dependencies and normalization, object and object-relational databases, and security. Students will practice to design, develop, and implement a relational ORACLE database and use the database for queries, transaction processing, and report generation. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (CS 330C).",AR
Computer Graphics.,"Basic graphics principles and programming. Topics include scan conversion, transformation, viewing, lighting, blending, texture mapping, and some advanced graphics techniques. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (MATH 203C) and (CS 310C) and (CS 367C).","GV
AR
HCI"
Computer Communications and Networking.,"Data communications and networking protocols, with study organized to follow layers of Internet Protocol Suite (TCP/IP family of protocols). Topics include role of various media and software components, local and wide area network protocols, network performance, and emerging advanced commercial technologies. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (CS 367C) and (STAT 344C).","NC
AR
DS"
Comparative Programming Languages.,"Key programming mechanisms described independently of particular machines or languages, including control, binding, procedural abstraction, types, and concurrency. Includes basic programming competence in several different types of programming languages, including a language that provides concurrency. Notes: Students who have taken CS 363 may not receive credit for CS 463. Offered by Computer Science. Limited to two attempts. Equivalent to CS 363.Registration Restrictions: Required Prerequisites: (CS 330C and 367C).","PL
AL
GV
PD
SDF"
Computer Systems Architecture.,"Computer subsystems and instruction set architectures. Single-cycle, multiple-cycle, and pipeline architectures. Memory hierarchy, cache, and virtual memory input-output processing. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisite: (CS 367C).","AR
IAS
NC
OS
PD
SE"
Secure Programming and Systems.,"Fundamental principles and techniques for implementing secure computer systems. Topics include security and cryptography basics, vulnerability analysis, secure software development, and distributed system security. Projects involve designing and programming basic security tools, secure programs, and distributed systems. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (CS 367C).",SP
Security Engineering.,"Covers the software subsystems that are involved in defending computer systems. Studies threats and architecting solutions against them, including but not limited to access control and identity management, network and system security, intrusion detection and recovery systems, monitoring and forensic systems. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 330C) and (CS 367C) and (STAT 344C).",SP
Operating Systems.,"Issues in multiprogramming. Covers concurrent processes and synchronization mechanisms; processor scheduling; memory, file, I/O, and deadlock management; performance of operating systems; and projects dealing with synchronization in multiprogrammed OS and virtual memory management. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (CS 367C or ECE 445C).",SP
Concurrent and Distributed Systems.,"Practical issues in designing and implementing concurrent and distributed software. Topics include concurrent programming, synchronization, multithreading, local and wide-area network protocols, distributed computation, systems integration, and techniques for expressing coarsegrained parallelism at the application level. Projects involve network programming at application level. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (CS 367C).","NC
DS
PD
SE"
Mobile Application Development.,"This project based course will teach fundamental principles of software development for the mobile device environment, emphasizing the application of numerous academic concepts and the new design and programming paradigms that stem from the use of mobile devices. Topics include user interfaces, event-based programming, interprocess communications, networking, mobile-specific capabilities and performance in a resource restricted environment. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: CS 310C and 367C.","SP
PD
SE
GV"
Introduction to Artificial Intelligence.,"Principles and methods for knowledge representation, reasoning, learning, problem solving, planning, heuristic search, and natural language processing and their application to building intelligent systems in a variety of domains. Uses LISP, PROLOG, or expert system programming language. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (CS 330C).",IS
Analysis of Algorithms.,"Analyzes computational resources for important problem types by alternative algorithms and their associated data structures, using mathematically rigorous techniques. Specific algorithms analyzed and improved. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (CS 330C) and (MATH 125C).","AL
AR
IAS
DS
PL
SDF
SP"
Data Mining.,"Basic principles and methods for data analysis and knowledge discovery. Emphasizes developing basic skills for modeling and prediction and performance evaluation. Topics include system design; data quality, preprocessing, and association; event classification; clustering; biometrics; business intelligence; and mining complex types of data. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: (CS 310C) and (STAT 344C).",IS
Autonomous Robotics.,"Covers various basic topics in autonomous robotics, such as autonomous architectures and their interaction with physical hardware, elementary kinematics and robot control, motion and trajectory planning, localization, task planning, learning and adaptation, modeling, and sensor fusion. Includes projects involving physical robots. Offered by Computer Science. Limited to two attempts.Registration Restrictions: Required Prerequisites: CS 262C, 310C and MATH 203C.",AR
Independent Study in Computer Science.,"Research and analysis of selected problems or topics in computer science. Topic must be arranged with instructor and approved by department chair before registering. Notes: May be repeated  if topics substantially different. Offered by Computer Science. May be repeated within the term for a maximum 6 credits.Recommended Prerequisite: 60 credits, CS major, and Permission of Instructor.Registration Restrictions: Students with the terminated from VSE major attribute may not enroll.Schedule Type: Independent Study","AL
IAS
DS
NC
OS
SDF
SP"
Special Topics in Computer Science.,Topics of special interest to undergraduates. Notes: May be repeated if topics substantially different. Offered by Computer Science. May be repeated within the term for a maximum 6 credits.Recommended Prerequisite: 60 credits and permission of instructor; specific prereqs vary with nature of topic.Registration Restrictions: Students with the terminated from VSE major attribute may not enroll.Schedule Type: Lecture,"AL
AR
CN
DS
GV
HCI
IAS
IM
IS
NC
OS
PBD
PD
PL
SDF
SE
SF
SP"
Principles of Data Management and Mining.,"Techniques to store, manage, and use data including databases, relational model, schemas, queries and transactions. On Line Transaction Processing, Data Warehousing, star schema, On Line Analytical Processing. MOLAP, HOLAP, and hybrid systems. Overview of Data Mining principles, models, supervised and unsupervised learning, pattern finding. Massively parallel architectures and Hadoop. Notes: This course cannot be taken for credit by students of the MS CS, MS ISA, MS SWE, CS PhD or IT PhD programs. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture",IS
Mathematical Foundations of Computer Science.,"This course focuses on the topics of basic mathematical structures, mathematical logic and probability theory; and application of these concepts to problem solving and formal reasoning through hand-on practice with the use of computational tools.Notes: This course is restricted to provisional students. It must be taken in the first semester at GMU. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: MATH 125 and STAT 344.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture","AR
IAS
PL
SDF"
Fundamentals of Systems Programming.,"Introduces systems and network programming for UNIX and Windows using lectures and hands-on labs. Covers ANSI C programming, system libraries and APIs, forking and threads, interprocess communications, synchronization, Windows API, and code debugging Offered by Computer Science. May not be repeated for credit. Equivalent to ISA 563.Recommended Prerequisite: CS 310 or equivalent.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture",SE
Language Processors.,"Basic programming language processors such as assemblers, interpreters, and compilers. Topics include design and construction of language processors, formal syntactic definition methods, parsing techniques, and code generation techniques. Lab includes construction of language processors and experience with programming environments. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: MATH 125 and CS 310 and CS 330 and CS 465.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture","PL
DS"
Database Systems.,"An introduction to database management with focus on architecting databases and using them in applications. Topics to be covered include: data modeling with the Entity-Relationship model, the relational data model and its formal languages, SQL, the theory of database design, object databases, XML and Web data. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: (CS 310 and CS 330) or (INFS 501 and INFS 515 and INFS 519 and SWE 510).Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture",IS
Computer Graphics.,"Graphics principles and programming. Topics include graphics hardware, antialiasing, transformations, viewing, illumination, blending, texture mapping, color models, curves, surfaces, and animation. Offered by Computer Science. May not be repeated for credit. Equivalent to CS 652.Recommended Prerequisite: CS 310 and CS 367.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture","GV
AR"
Computer Communications and Networking.,"Techniques and systems for communication of data between computational devices and layers of Internet Protocol Suite. Topics include role of various media and software components, local and wide area network protocols, network design, performance and cost considerations, and emerging advanced commercial technologies. Emphasizes TCP/IP family of protocols. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: CS 310 and CS 367 and STAT 344.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture","CN
NC
SF"
Operating Systems.,"Models of operating systems. Major functions including processes, memory management, I/O, interprocess communication, files, directories, shells, distributed systems, performance, and user interface. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: CS 310 and CS 367 and CS 465.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture",OS
Introduction to Artificial Intelligence.,"Principles and methods for knowledge representation, reasoning, learning, problem solving, planning, heuristic search, and natural language processing and their application to building intelligent systems in a variety of domains. LISP, PROLOG, or expert system programming language. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: CS 310 and CS 330.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture",IS
Analysis of Algorithms.,"Topics include analyzing sequential and parallel algorithmic strategies such as greedy methods, divide and conquer strategies, dynamic programming, search and traversal techniques, and approximation algorithms; and analyzing specific algorithms falling into these classes, NP-Hard and NP-Complete problems. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: CS 310 and CS 330 and MATH 125.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture","AL
PD
PL
SDF
SF"
Theory and Applications of Data Mining.,"Concepts and techniques in data mining and multidisciplinary applications. Topics include databases; data cleaning and transformation; concept description; association and correlation rules; data classification and predictive modeling; performance analysis and scalability; data mining in advanced database systems, including text, audio, and images; and emerging themes and future challenges. Offered by Computer Science. May not be repeated for credit. Equivalent to CS 659, CS 750.Recommended Prerequisite: CS 310 and STAT 344.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture",IS
Theory of Computation.,"Introduction to logic and proof techniques, formal languages, automata theory, and computational complexity. Specific topics include regular and context-free languages, Turing machines, NP-completeness, and undecidability. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 583B-.","AL
IAS
CN
DS
IS
PL
SE"
Advanced Algorithms.,"Provides an overview of advanced algorithm design and analysis techniques. Topics include algorithms for hash tables, matrix operations, number theory, string matching, computational geometry, combinatorial optimization, and linear programming; also the areas of NP-completeness and approximation algorithms. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 583B-.","AL
AR
DS
IAS
NC
PL
SDF"
Foundations of Parallel Computation.,"Covers three major parallel computing paradigms: MIMD computation, SIMD computation, and data flow computation. Emphasizes interfaces between algorithm design and implementation, architecture, and software. Examines parallel algorithms and parallel programming languages relative to architecture of particular parallel computers. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: Proficiency in C programming language.Registration Restrictions: Required Prerequisites: (CS 583B- and 571B-).","PD
PL
SDF
AR"
Advanced Compilers.,"Examines advanced compiler techniques such as code optimizations for sequential and parallel machines; compilers for logical, functional, or object-oriented languages; and other topics in current literature. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 540B- and 583B-).","PL
SDF"
Advanced Database Management.,"Study of the internal architecture of database systems. Topics include: physical data organization and indexing, query processing and optimization, transaction processing, database system architectures, Web services and Web data security. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 550B- or INFS 614B-).","PD
SP
SF"
Mining Massive Datasets with MapReduce.,"Covers the techniques to mine large datasets, including Distributed File Systems and Map-Reduce, similarity search, and data stream processing. Covers classic problems in data mining, such as clustering, association rule mining, and others from the point of view of scalability. Includes a final project to exercise concepts covered in class. Offered by Computer Science. May not be repeated for credit. Equivalent to CS 757.Registration Restrictions: Required Prerequisite: CS 584B-.","PD
SDF
AL
AR
SP"
Networked Virtual Environments.,"Networked virtual environment overview, networking and multimedia concepts, virtual simulation concepts, efficiency/performance issues, and online conferencing/virtual classrooms. Course is based around a project with multiple segments, each covering one aspect of networked virtual environments, plus a final session where one- or two-person teams create a minimally functional networked virtual environment over the Internet using multicast network software. Lectures available online/recorded. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 555B-.","NC
DS
GV"
Computer Graphics Game Technologies.,"Addresses some graphics game techniques including collision detection, levels of detail, physics-based simulations, textures, maps, and shadows. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 551B-.","AR
GV
IM
SP"
Computer System Performance Evaluation.,"Theory and practice of analytical models of computer systems. Topics include open and closed multiclass queuing networks, single and multiple class Mean Value Analysis, Markov Chains, performance and availability models of Internet data centers, software performance engineering, and e-commerce performance. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 571B-.","PD
SDF
SE"
Multimedia Computing and Systems.,Focuses on technological and development environments in developing multimedia applications. Projects involve experience with multimedia authoring tools and simulations to assess performance. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 571B-.,HCI
Data Mining on Multimedia Data.,"Covers advanced techniques for managing, searching, and mining of various types of data such as text, web links, images, time series, video, and audio. Issues related to handling such data will be discussed, including feature selection, high dimensional indexing, interactive search and information retrieval, pattern discovery, and scalability. Offered by Computer Science. May not be repeated for credit. Equivalent to CS 780.Registration Restrictions: Required Prerequisite: CS 584B-.",IS
Distributed Systems.,"Issues in design and implementation of distributed systems and applications. Topics include distributed communication paradigms, middleware, coordination and synchronization, distributed transactions, consistency and replication, fault-tolerance and reliability, and peer-to-peer systems. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 571B-.","DS
OS
AR"
Knowledge Engineering.,"Design, construction, and evaluation of software systems that solve problems generally deemed to require human expertise. Topics include modeling expert's knowledge, reasoning based on knowledge and evidence, ontology design and development, rule learning, and knowledge-based maintenance. Programming projects include development of tools or small-scale systems. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 580B-.",IS
Computer Vision.,"Study of computational models of visual perception and their implementation in computer systems. Topics include early visual processing, edge detection, segmentation, intrinsic images, image modeling, representation of visual knowledge, and image understanding. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 580B- and 583B-).",CN
Graph Algorithms.,"Data structures and analytical techniques to study graph algorithms. Data structures include disjoint sets, heaps, and dynamic trees. Algorithms include minimum spanning trees, shortest path, maximum flow, and graph planarity. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 583B-.","AL
AR
DS
GV"
Image Processing and Applications.,"Concepts and techniques in image processing. Discusses methods for image capture, transformation, enhancement, restoration, and encoding. Students complete projects involving naturally occurring images. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 583B-.",IM
Advanced Artificial Intelligence.,"Explores foundational issues of artificial intelligence, such as roles of knowledge and search, formalization of knowledge and inference, and symbolic versus emergent approaches to intelligence. Studies advanced programming techniques for artificial intelligence, relationship to foundational issues, and important application areas for artificial intelligence. Notes: Major programming project required. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 580B-.",IS
Pattern Recognition.,"Explores statistical pattern recognition and neural networks. Pattern recognition topics include Bayesian classification and decision theory, density (parametric and nonparametric) estimation, linear and nonlinear discriminant analysis, dimensionality reduction, feature extraction and selection, mixture models and EM, and vector quantization and clustering. Neural networks topics include feed-forward networks and back-propagation, self-organization feature maps, and radial basis functions. Emphasizes experimental design, applications, and performance evaluation. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: CS 580B- or 584B-.",IS
Topics in Computer Science.,"Special topics in computer science not occurring in regular computer science sequence. Notes: May be repeated for credit when topics are distinctly different. Offered by Computer Science. May be repeated within the term.Recommended Prerequisite: Completion of at least two core courses and permission of the instructor.Registration Restrictions: Enrollment limited to students with a class of Advanced to Candidacy, Graduate, Non Degree or Senior Plus.Enrollment is limited to Graduate, Non-Degree or Undergraduate level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture",SP
Quantitative Methods and Experimental Design in Computer Science.,"Integrated treatment of models and practices in experimental computer science. Topics include scientific methods applied to computing, workload characterization, forecasting of performance and quality metrics of systems, uses of analytic and simulation models, design of experiments, interpretation and presentation of experimental results, hypothesis testing, and statistical analyses of data. Involves one or more large-scale projects. Offered by Computer Science. May not be repeated for credit.Recommended Prerequisite: Doctoral status and at least two 600-level courses offered by the Computer Science Department.Registration Restrictions: Enrollment is limited to Graduate or Non-Degree level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture",SP
Concurrent Software Systems.,"Topics include concurrent programming languages and constructs, and specification, design, verification, and validation of concurrent programs. Students required to solve concurrent programming problems and check solutions by using verification, testing, and debugging tools. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 571B-.","PD
PL
SE"
Scalable Internet Services.,"Discusses, from quantitative point of view, characteristics of most important technologies used to support implementation of e-business sites. Includes topics such as hardware and software architectures of e-business sites, authentication, payment services, understanding customer behavior, workload characterization, scalability analysis, and performance prediction. Notes: Term paper and project required. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 555B- and 571B-).","NC
AR
SF
SP
SE"
Interactive Graphics Software.,"Advanced graphics methods and tools. Topics include visualization, modeling, rendering, animation, simulation, virtual reality, graphics software tools, and current research topics. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 551B- and 583B-).",GV
Advanced Computer Networks.,"Current and emerging issues in advanced computer networks and applications. Topics include software systems associated with packet and cell-switched networking architectures and protocols, high-performance LANs, scheduling and congestion control, mobile networking, multimedia applications, and next generation of Internet. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 555B-.","NC
AR"
Real-Time Systems Design and Development.,"Real-time systems and principles supporting design and implementation. Emphasizes fundamental results from real-time scheduling theory and relevance to computer system design. Topics include system design issues for real-time applications involving operating systems, communication networks, databases, and multimedia Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 571B-.","SF
NC
GV
AR
SP
PD"
Advanced Pattern Recognition.,"Covers statistical pattern recognition, neural network, and statistical learning theory approaches. Topics include decision theory and Bayes' theorem, density (parametric and nonparametric) estimation, linear and nonlinear discriminant analysis, SVM and kernel methods, SRM and model selection, performance evaluation, mixture of experts (AdaBoost), dimensionality reduction, feature selection and extraction, and clustering. Emphasizes experimental design, applications, and performance evaluation. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisite: CS 688B-.",IS
Human-Computer Intelligent Interaction.,"Current and emerging issues in human-computer intelligent interaction, and human-centered systems and their applications. Topics include video processing, visualization, virtual environments, adaptation and tutoring, image and scene modeling, analysis and synthesis, face and gesture recognition, and speech and natural language processing. Notes: Term project and topical review required. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 580B- and 551B-) or (CS 682B-).",HCI
Topics in Resilient and Secure Computer Systems.,"Covers study of alternate computer security, including how these methods can be combined in a layered defense and factors that affect the selection of the architectures. Reviews recent papers and reports. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: CS 571B- or ISA 562B-.",SF
Machine Learning.,"Surveys machine learning concerning development of intelligent adaptive systems that are able to improve through learning from input data or from their own problem-solving experience. Topics provide broad coverage of developments in machine learning, including basic learning strategies and multistrategy learning. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 681B-, 687B- or 688B-).",IS
Decision Guidance Systems.,"Decision-guidance systems support an iterative process of giving actionable recommendations to and extracting feedbacks from human decision-makers, with the goal of arriving at the best possible course of action. Focuses on models, languages, algorithms and applications of Decision-Guidance Management Systems, used for fast development of decision-guidance applications. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (INFS 614B- or CS 550B-).",IS
Autonomic Computing.,"Studies self-managing, self-optimizing, self-configuring, self-tuning, self-healing, and self-protecting computing systems. This course analyzes many examples of autonomic systems as well as various techniques to design and build such systems. This is a doctoral seminar based on reading and analysis of current papers. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 555B-, 571B- or ISA 562B-).","DS
NC"
Advanced Topics in CS.,"Advanced topics not occurring in regular sequence. Notes: May be repeated for credit when subject differs. Satisfies MS breadth requirement only if explicitly stated in syllabus in given section. Only one such course should be used for breadth requirements. Offered by Computer Science. May be repeated within the term.Recommended Prerequisite: Admission into computer science PhD program.Registration Restrictions: Enrollment is limited to Graduate or Non-Degree level students.Students in a Non-Degree Undergraduate degree may not enroll.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture","AL
PL
SDF
SP"
Computer Science Colloquium.,"Students are required to attend colloquia including talks by distinguished speakers, faculty candidates, and Mason faculty. Notes: This course introduces PhD students to research topics in computer science. This course can be taken twice for credit. Offered by Computer Science. May be repeated within the degree for a maximum 2 credits.Registration Restrictions: Enrollment is limited to students with a major in Computer Science.Enrollment is limited to Graduate level students.Enrollment limited to students in a Doctor of Philosophy degree.Enrollment limited to students in the Volgenau School of Engineering college.Schedule Type: Seminar","AL
SP"
Research Topics in Machine Learning and Inference.,"Presents unifying principles that underlie diverse methods, paradigms, and approaches to machine earning and inference. Reviews most known learning and inference systems, discusses strengths and limitations, and suggests most appropriate areas of application. Hands-on experience by experimenting with state-of-the-art learning and inference systems and working on projects tailored to research interests. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Required Prerequisites: (CS 681B-, 687B- or 688B-).",IS
Topics in Computer Systems.,"Discussion of current research topics in computer systems. Topics vary according to faculty interest. Possible topics include peer-to-peer computing, high-performance distributed computing, sensor and ad hoc networks, autonomic computing, virtualization, and web services and middleware. Offered by Computer Science. May not be repeated for credit.Registration Restrictions: Enrollment is limited to Graduate level students.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture","DS
NC
OS
PD
SF"
Research Topics in Artificial Intelligence.,"Special topics in artificial intelligence not occurring in regular computer science sequence. Notes: Requires substantial student participation. Subject matter may include continuation of existing 600- or 700-level courses in artificial intelligence or other topics. May be repeated for credit when subject matter differs. Offered by Computer Science. May be repeated within the degree for a maximum 6 credits.Registration Restrictions: Enrollment is limited to Graduate level students.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Seminar",IS
Advanced Topics in Computer Vision and Robotics.,"Covers recent developments. Topics motivated by applications to autonomous robotic systems, mobile robot navigation, multirobot systems, human-computer-environment interaction, image/video search and analysis, content discovery, and visual surveillance. Topics include 3D structure and motion recovery, motion understanding, map building and localization, object detection and recognition, and target tracking. Projects and experimental evaluation emphasized. Notes: Course may be repeated with change of topic. Offered by Computer Science. May be repeated within the degree for a maximum 6 credits.Registration Restrictions: Required Prerequisites: (CS 682B- or 685B-).",SP
Research Topics in CS.,"Advanced topics not occurring in regular sequence. Notes: May be repeated for credit when subject differs. Only one such course should be used for breadth requirements. Offered by Computer Science. May be repeated within the term.Recommended Prerequisite: Doctoral status.Registration Restrictions: Enrollment is limited to Graduate level students.Enrollment limited to students in the College of Science, Schar School of Policy and Gov or Volgenau School of Engineering colleges.Schedule Type: Lecture","AL
IAS
AR
DS
HCI
IM
IS
NC
OS
PL
SDF
SE
SP"
Computer Science for Business Professionals,"This course is a variant of Harvard College's introduction to computer science, CS50, designed especially for business professionals. Whereas CS50 itself takes a bottom-up approach, emphasizing mastery of low-level concepts and implementation details thereof, this course takes a top-down approach, emphasizing mastery of high-level concepts and design decisions related thereto. Ultimately this course empowers students to make technological decisions even if not technologists themselves. Topics include cloud computing, networking, privacy, scalability, security, and more, with an emphasis on web and mobile technologies. Students emerge from this course with first-hand appreciation of how it all works and all the more confident in the factors that should guide their decision-making. This course is designed for managers, product managers, founders, and decision-makers more generally.",SP
Introduction to Web Programming Using JavaScript,"This course provides an introduction to web development by way of the essential language and runtime environment that powers modern web interfaces. Through a series of examples and projects, students learn basic programming concepts while building an understanding of the power and complexities of JavaScript, which can perplex even experienced web developers. The course provides a solid foundation in computer programming in JavaScript: syntax and data structures, conditionals, objects, scope and closures, Ajax, the DOM, and event handling. Students gain an understanding of the popular libraries that power rich web applications such as jQuery, Ext JS, and others. Upon completion, students are prepared to use JavaScript libraries in their projects, write their own or extend existing JavaScript libraries, and build rich web applications using these powerful tools. No computer programming experience is required, though exposure to basic HTML and CSS is helpful.",HCI
Introduction to Programming with Python,"Python is a language with a simple syntax, and a powerful set of libraries. It is an interpreted language, with a rich programming environment, including a robust debugger and profiler. While it is easy for beginners to learn, it is widely used in many scientific areas for data exploration. This course is an introduction to the Python programming language for students without prior programming experience. We cover data types and control flow, and introduce the analysis of program performance. The examples and problems used in this course are drawn from diverse areas such as text processing and simple graphics creation. Students implement a final project of their own design.","AL
PL
SDF
IS"
Introduction to Computer Science Using Java I,"Intended for students with no previous programming background, this course introduces problem-solving methods and algorithm development using Java, one of the most popular high-level programming languages in the world. Students learn how to design, code, debug, and document programs using modern engineering techniques in a cloud-based Linux environment. Related topics include programming using iterative constructs, the basic aspects of arrays and recursion, string manipulation, parameter passing, information hiding and encapsulation using classes, and the functional decomposition of methods to enable object-oriented design. Some applications are chosen for their relevance to more advanced coursework in computer science while others involve nonscientific and business-related areas. Students can count two of the following three courses—CSCI E-10a, CSCI E-10b, and CSCI E-50—toward a degree. They cannot count all three toward a degree.","AL
AR
IAS
PL
SDF
SP"
"Introduction to the Challenges and Opportunities of Big Data, the Internet of Things, and Cybersecurity","In this course, we review use cases and challenges of three interrelated areas in computer science: big data, the Internet of things, and cybersecurity. Students gain an overview of the possibilities and challenges of building complex information systems that take advantage of recent advances in these fields.","IAS
DS
SP"
Fundamentals of Website Development,"This course provides a comprehensive overview of website development. Students explore the prevailing vocabulary, tools, and standards used in the field and learn how the various facets—including HTML5, XHTML, CSS, JavaScript, Ajax, multimedia, scripting languages, HTTP, clients, servers, and databases—function together in today's web environment. The course provides a solid web development foundation, focusing on content and client-side (browser) components (HTML5, XHTML, CSS, JavaScript, multimedia), with an overview of the server-side technologies. In addition, software and services that are easily incorporated into a website (for example, maps, checkout, blogs, content management) are surveyed and discussed. Students produce an interactive website on the topic of their choice for the final project and leave the course prepared for more advanced and focused web development studies.",HCI
Dynamic Web Applications,"This course is the next step for programmers who are experienced with front-end website development using HTML/CSS and want to learn server-side web application development. At the start of the semester, we set up local and production server environments, managed with Git version control. Next, we explore web application programming using PHP, the dominant server-side language of the web. The syntax, mechanics, and documentation for PHP are covered, but it is expected that students are able to apply their programming experience in other languages in order to quickly start writing PHP-based programs. In the second half of the semester we progress into building more advanced applications using the popular PHP framework, Laravel. While working with this framework, we cover topics such as package management, routing, models, views, controllers, environment management, web interface security, databases, and other core web development concepts.",SF
Software Testing and Test-Driven Development,"In this course we review the traditional software testing techniques that are applicable to any software product, as well as learn techniques for testing object-oriented software and graphical user interface testing. The agile development paradigm of test-driven development is discussed. We also discover how innovative companies are able to build testing and quality into every stage of the development process and deliver a multitude of releases with a relatively small testing organization. We practice test creation and testing techniques through discussions and individual and group projects. Concepts covered include test cycles, testing objectives, testing in the software development process, types of software errors, reporting and analyzing software errors, problem tracking systems, test case design, testing tools, test planning, test documentation, and managing a test group.",SE
Data Structures,"This course is a survey of fundamental data structures for information processing, including lists, stacks, queues, trees, and graphs. It explores the implementation of these data structures (both array-based and linked representations) and examines classic algorithms that use these structures for tasks such as sorting, searching, and text compression. The Java programming language is used to demonstrate the topics discussed; and key notions of object-oriented programming, including encapsulation and abstract data types, are emphasized.","SDF
PL
SF"
"Introduction to C, Unix/Linux Programming, and Web Interfaces","Designed for students with some programming experience, this course provides a rigorous introduction to writing and using software tools in the Unix and GNU/Linux programming environments to build command-line and web-based programs. The course teaches students how to write C programs and Unix shell scripts, and how to create web interfaces to those programs. Topics include text processing, memory management, files and pipes, and processes and protocols. Students write programs to analyze data and generate reports, use shell scripts to combine tools into applications, and use HTML, CGI, and Ajax to provide web access to those applications and data.","AL
PL
SF
SP"
Introduction to C++ for Programmers,"An understanding of C++ helps to solidify programming concepts and skills, and also provides a strong foundation for learning other programming languages. This introductory course teaches practical programming skills while focusing on creating text-based games. The course examines how common programming constructs are implemented in C++, including elements of C++ 11. Emphasis is placed on the use of C++ for memory management, file I/O, pointers, references, exceptions, and object-oriented programming. Basic data structures such as linked lists, stacks, and queues are covered in terms of their use and implementation using C++. Each module in the course is accompanied by a mini game project to teach the associated programming concepts as well as to hone problem-solving skills and good coding practices.","AL
PL
PD
SE"
Communication Protocols and Internet Architectures,"Networks are now too large, complex, and diverse to be built on an ad hoc basis. This course provides a structured approach to the design, analysis, and implementation of networks and protocols. We study various protocols, including TCP/IP, WWW/HTTP, e-mail/SMTP, multimedia protocols for voice and video, and the IEEE 802 LAN protocol suite. In each case, the protocol's functions and the underlying reference model are discussed. LAN architecture and design, internetworking using switches and routers, and the design and analysis of both private networks and the Internet are presented. The course discusses new areas of work, including network quality of service, voice and video on the Internet, policy-based networks, and broadband/gigabit networks.",NC
"The Cyber World: Hardware, Software, Networks, Security, and Management","Today we all live and work in a participatory cyberspace. Computers, the data networks that interconnect them, and the services available over the networks make up this cyberspace. As cyberspace invades almost all areas of modern day living, playing, and working, it is becoming more important that people understand its technical and political underpinnings and operations, as well as its capabilities, threats, and weaknesses. This is a companion course to CSCI E-45b. The goal of this pair of courses is to give students the tools they need to understand, use, and manage the technologies involved, as well as the ability to appreciate the legal, social, and political dynamics of this ever expanding universe and the interplay between the cyber and physical worlds. The pair of courses covers the essential elements of computing and the history, structure, operation, and governance of the Internet. This course focuses on the fundamental workings of the digital world. From individual computing devices to the broader Internet, students learn how each piece in this gigantic puzzle comes together to create the digital infrastructure that is the cyberspace of today and tomorrow. In addition, we explore the fundamental concepts, technologies, and issues associated with managing and securing cyberspace.",SP
Secure Mobile Computing,"Modern technology is heavily dependent upon mobile computing technology. Mobile communication and devices have revolutionized industry and society. Secure mobile computing explores the threat landscape of mobile computing at the device, communication infrastructure, platform, and application levels. Students appraise secure mobile computing tools and techniques to implement confidentiality, integrity, and availability of mobile computing data. Students also review mobile computing communications security and infrastructure security to evaluate eavesdropping and surveillance avoidance techniques. Students explore the use of automated and manual security testing techniques to evaluate the security posture of a mobile computing device. Students specifically install, configure, and utilize a virtual lab environment using a mobile testing framework, a network protocol analyzer, a security/vulnerability scanner, and source code analysis tools.",SP
Intensive Introduction to Computer Science,"This course is an introduction to the intellectual enterprises of computer science and the art of programming. It teaches students how to think algorithmically and solve problems efficiently. Topics include abstraction, algorithms, data structures, encapsulation, resource management, security, software engineering, and web development. Languages include C, PHP, and JavaScript plus SQL, CSS, and HTML. Problem sets are inspired by real-world domains of biology, cryptography, finance, forensics, and gaming. Students can count two of the following three courses—CSCI E-10a, CSCI E-10b, and CSCI E-50—toward a degree. They cannot count all three toward a degree. The recorded lectures are from the Harvard John A. Paulson School of Engineering and Applied Sciences course Computer Science 50.","SDF
SE
SP"
"Java, Hadoop, Lambda Expressions, and Streams","The first two-thirds of this course is a rigorous study of Java 7 language features including classes, packages, enums, inheritance, abstract classes, interfaces, reflection, exceptions, threads, and annotation. The instruction assumes no prior knowledge of Java. Common Java development tools are discussed: JUnit, log4j, and Ant. The last third of the course builds on the foundation to explore the MapReduce programming model used in Hadoop and the Java 8 language features, Lambda Expressions and Streams.","AL
DS
SE"
Java Enterprise Development with the Spring Framework,"This course provides an in-depth, hands-on study of the technological, design, and development approaches for enterprise-level software systems using the Java-based Spring Framework. Spring Framework enables creation of web and enterprise Java applications with the focus on high performance, scalability, testability, and reusability. The course examines core Spring Framework and its integration with other leading Java technologies, such as Hibernate, Java Persistence API (JPA 2), and WebSocket. Concepts covered in the course include inversion of control/dependency injection, Spring aspect-oriented programming; data access with JDBC, Hibernate, and Java Persistence API; Spring transaction management; Spring model-view-controller framework; Spring security; Spring REST web services; Spring testing; and Spring WebSocket support.","SE
PL"
Designing and Developing a Relational Database,"This course provides the concepts and skills necessary to design and develop a relational database. After learning database design concepts through practical applications, students build a working database using Oracle to serve the information needs of an enterprise. Through hands-on projects, students design, build, populate, query, and write transactions and stored procedures for a relational database using SQL and PL/SQL. As a final project, students build a prototype database.",IM
Big Data Analytics,"The emphasis of the course is on mastering two of the most important big data technologies: Spark 2 and deep learning with TensorFlow. Spark is an evolution of Hadoop and Map/Reduce but with massive speedup and scalability improvements. TensorFlow is Google's open-source framework for distributed neural networks-based machine learning. The explosion of social media and the computerization of every aspect of social and economic activity results in the creation of large volumes of semi-structured data: web logs, videos, speech recordings, photographs, e-mails, Tweets, and similar data. In a parallel development, computers keep getting ever more powerful and storage ever cheaper. Today, we can reliably and cheaply store huge volumes of data, efficiently analyze them, and extract business and socially relevant information. This course familiarizes the students with the most important information technologies used in manipulating, storing, and analyzing big data. We examine the basic tools for statistical analysis, R and Python, and several machine learning algorithms. We examine Spark Core, Spark ML (machine learning) API, and Spark Streaming which allows analysis of data in flight, that is, in near real time. We learn to use TensorFlow for several standard practices including regression, clustering, and classification. We learn about so-called noSQL storage solutions exemplified by Cassandra for their critical features: speed of reads and writes, and the ability to scale to extreme volumes. We learn about memory-resident databases and graph databases (Spark GraphX and Ne4J). We acquire practical skills in scalable messaging systems like Kafka and Amazon Kinesis.  We conduct most of our exercises in Amazon Cloud, so students master the most important AWS services. By the end of the course, students are able to initiate and design highly scalable systems that can accept, store, and analyze large volumes of unstructured data in batch mode and/or real time. Most lectures are presented using Python examples. Some lectures use Java and R.",SP
Elements of Data Science and Statistical Learning with R,"One of the broad goals of data science is examining raw data with the purpose of identifying its structure and trends, and of deriving conclusions and hypotheses from it. In the modern world awash with data, data analytics is more important than ever to fields ranging from biomedical research, space and weather science, finance, business operations and production, to marketing and social media applications. This course introduces various statistical learning methods and their applications. The R programming language, a very popular and powerful platform for scientific and statistical analysis and visualization, is introduced and used throughout the course. We discuss the fundamentals of statistical testing and learning, and cover topics of linear and non-linear regression, clustering and classification, support vector machines, and decision trees. The datasets used in the examples are drawn from diverse domains such as finance, genomics, and customer sales and survey data.",IS
Introduction to Mobile Application Development Using Swift and iOS,"This course introduces the basics of contemporary mobile application development using Apple's iOS technology as the development platform. We begin by surveying the major features of the Swift programming language and system library, along with basic use of the Xcode IDE for development. Language features specifically focused on include closures, optionals, the Swift type system (tuple/enum/struct/class/func), and generics. Then we extend the programming model to incorporate the Cocoa Touch framework (for both the iPhone and iPad), making extensive use of Apple's interface builder technology. Specific interface builder techniques to be explored include autolayout, constraints, and size classes. Specific Cocoa Touch features include Apple's model/view/controller paradigm and supporting classes, event handling, core graphics, and the UIKit. Finally, Apple's runtime analysis tool, Instruments, is used to explore the details of the Apple memory model and performance debugging. Frequent small assignments progress from basic programming to realistic app development with a focus on responsive device graphics and algorithms. Code design and architecture are emphasized.",SP
Oracle Database Administration,"Students study the internal structure and organization of an Oracle database environment. The course presents a structured approach to planning, building, tuning, and monitoring an Oracle 12c database on an Amazon Web Services instance. Students create an Oracle database, tablespaces, user accounts, views, indices, and other objects necessary to support an application. We also examine some of the issues involved when running a large number of databases within an environment and with running large databases.","PD
SE"
Agile Software Development,"This course is an immersive experience in agile software development. We study both the technical and cultural/social aspects of agile, including pair and mob programming, high performance teams with the core protocols, TDD, behavior-driven development, continuous delivery, refactoring, extreme programming, scrum, kanban, and agile project management. Students must have and bring to the required weekend session a laptop computer suitable for software development.","SE
PD
SP"
Virtual and Augmented Reality for Simulation and Gaming,"Virtual and augmented reality are widely used today in areas such as CAD, video games, simulation, and data visualization. This survey course studies the internal architecture of today's real-time 3D graphic engines used in virtual reality. We use the cross-platform OpenGL APIs to explore how a graphic engine works. OpenGL is supported on all major operating systems and graphics platforms. The course covers texturing techniques, lighting and shading, particles effects, and animation and interaction.",AR
"Advanced Machine Learning, Data Mining, and Artificial Intelligence","The course is intended to combine the theory with the hands-on practice of solving modern industry problems with an emphasis on image processing and natural language processing. Topics include outlier detection, advanced clustering techniques, deep learning, dimensionality reduction methods, frequent item set mining, and recommender systems. Topics also considered include reinforcement learning, graph-based models, search optimization, and time series analysis. The course uses Python as the primary language, although later projects can include R and other languages. The course also introduces some industry standard tools to prepare students for artificial intelligence jobs. Students may not receive degree or certificate credit for both this course and CSCI E-81 or CSCI E-181, offered previously.",IS
Fundamentals of Data Science,"In today's digital world, the ability to derive insights and make predictions from data is an increasingly important skill. In this course, students learn the underlying concepts and practical skills required to start a career in data science. The course includes an introduction to the student's choice of R or Python, essential languages for data scientists. Students learn the principles of exploring and visualizing data and data cleansing and preparation with R or Python. Techniques and theory for predictive modeling and machine learning are introduced. The course culminates in an on-campus weekend where students participate in a competition to create the best machine learning model for a specific problem. The recorded lectures are from the Microsoft Professional Program for Data Science.",DS
Big Data in Healthcare Applications,"The course applies the tools of big data analytics to datasets and processes found in a modern hospital. While the data has been captured for decades, we are only starting to mine it for information, discovering the invaluable knowledge it was hiding. It has become imperative to use this data to drive health care improvements. Students learn to build models of complex health care practices, and apply big data techniques in clinical environments. The course is designed for people from a wide range of backgrounds.","IM
AL
PD
SDF"
Principles of Big Data Processing,"The goal of this course is to learn core principles of building highly distributed, highly available systems for processing large volumes of data with historical and near real-time querying capabilities. We cover the stages of data processing that are common to most real-world systems, including high-volume, high-speed data ingestion, historical and real-time metrics aggregation, unique counts, data de-duplication and reprocessing, storage options for different operations, and principles of distributed data indexing and search. We review approaches to solving common challenges of such systems and implement some of them. The focus of this course is on understanding the challenges and core principles of big data processing, not on specific frameworks or technologies used for implementation. We review a few notable technologies for each area with a deeper dive into a few select ones. The course is structured as a progression of topics covering the full, end-to-end data processing pipeline typical in real-world scenarios.","SDF
PD
DS
AL"
Computer Architecture,"This course is a study of the fundamental concepts in the design and organization of modern computer systems. Topics include computer organization, instruction-set design, processor design, memory system design, timing issues, interrupts, microcoding, and various performance-enhancing parallel techniques such as prefetching, pipelining, branch prediction, superscalar execution, and massive-parallel processing. We also study existing architectures using CISC, RISC, vector, data parallel, and VLIW designs. An extensive lab project encompassing the design and implementation of a new instruction set and CPU using an FPGA is required of all students.","AR
SP
PD
DS
IAS"
"Software Design: Principles, Models, and Patterns","This course approaches object-oriented software design from three perspectives: the software engineering principles that enable development of quality software, the modeling of software components using the Unified Modeling Language (UML), and the application of design patterns as a means of reusing design models that are accepted best practices. These patterns include both the original software patterns as well as more recent modularization patterns for software construction. There is at least one significant modeling exercise and a set of programming assignments that require the application of design principles and good programming technique. Students are expected to write a detailed description of the design for each of their programs, incorporating UML models as appropriate. Students implement their programs in the Java programming language. In addition, there is at least one significant assignment that requires designing and documenting a software subsystem without implementation.",SE
Introduction to Data Science,"This course focuses on the analysis of messy, real life data to perform predictions using statistical and machine learning methods. Material covered integrates the five key facets of an investigation using data: data collection—data wrangling, cleaning, and sampling to get a suitable data set; data management—accessing data quickly and reliably; exploratory data analysis—generating hypotheses and building intuition; prediction or statistical learning; and communication—summarizing results through visualization, stories, and interpretable summaries.",IS
Introduction to Theoretical Computer Science,"Computation occurs over a variety of substrates including silicon, neurons, DNA, the stock market, bee colonies, and many others. In this course we study the fundamental capabilities and limitations of computation, including the phenomenon of universality and the duality of code and data. We touch upon the following questions: Are there functions that cannot be computed","DS
NC"
Networks,"Networks—of social relationships, economic interdependencies, and digital interactions—are critical in shaping our lives. This course introduces models and algorithms that help us understand networks. Fundamental concepts from applied mathematics, microeconomics, and computer science are presented through the lens of network science in order to equip students to usefully analyze the big data generated by online networks. Applications discussed include the viral spread of ideas, maximizing influence, and the contagion of economic downturns. Concepts and tools covered include game theory, graph theory, data mining, and machine learning.","NC
AR"
Data Systems,"We are in the big data era and data systems sit in the critical path of everything we do. We are going through major transformations in businesses, sciences, as well as everyday life—collecting and analyzing data changes everything and data systems provide the means to store and analyze a massive amount of data. This course is a comprehensive introduction to modern data systems. The primary focus is on modern trends that are shaping the data management industry right now such as column-store and hybrid systems, shared nothing architectures, cache-conscious algorithms, hardware/software co-design, main memory systems, adaptive indexing, stream processing, scientific data management, and key-value stores. We also study the history of data systems, and traditional and seminal concepts and ideas such as the relational model, row-store database systems, optimization, indexing, concurrency control, recovery, and SQL. In this way, we discuss both how data systems evolved over the years and why, as well as how these concepts apply today and how data systems might evolve in the future. We focus on understanding concepts and trends rather than specific techniques that will soon be outdated.",IM
Crafting the Thesis Proposal in Software Engineering and Digital Media Design Tutorial,"The focus of this tutorial is to prepare a draft thesis proposal as the first stage of the thesis process. The tutorial guides students through every aspect of the thesis proposal process, working from a chosen topic area to selecting a research problem, followed by specifying a research question, creating a testable hypothesis, and determining an appropriate method for answering the question. To support this process students search and review related literature, reading and critiquing sample papers to identify key components of a successful academic paper. The tutorial continues the development of students' scholarly writing skills and research abilities, discussing writing techniques and appropriate sourcing and citation methods as they study each of the elements of a proposal and analyze proposal examples. Students are asked to write and revise each section of the proposal, culminating in a draft of a complete proposal by the end of the tutorial.",AR
Web GIS: Technologies and Applications,"Web GIS, as the combination of the web and GIS (Geographic Information Systems), is a new and promising field. It has unlocked the power of GIS, and put online maps and geospatial intelligence in the offices of millions and the hands of billions. This course aims to provide students with the essential web GIS knowledge needed for managing web GIS projects, teach students the latest web GIS technologies needed for building modern web GIS apps, and inspire students with real world application case studies. This course focuses on Esri's web GIS platform, the most widely used GIS technology in government and business information systems. Products taught in this course include ArcGIS Online, ArcGIS Enterprise, ArcGIS Pro, ArcGIS web, and mobile apps including Story Maps, Web AppBuilder, Collector, Survey123, AppStudio, Operations Dashboard, Insights, Drone2Map, ArcGIS Earth, and 3D web scenes. ArcGIS API for JavaScript, internet of things, GeoEvent Server, big data, and GeoAnalytics Server are also introduced. Access to Harvard ArcGIS Online, ArcGIS Enterprise, and other ArcGIS software is provided.",AR
Introduction to Computer Science Using Java II,"This course is a continuation of CSCI E-10a, with an emphasis on object-oriented programming using Java, one of the world's most popular programming languages. We begin with the implementation of abstract data types using classes, focusing on encapsulation of procedures and data, inheritance hierarchies, and polymorphism across different object types. Other topics include string processing, multidimensional arrays, ArrayLists, Vectors, and linked lists; streams and file I/O; recursion; exception handling; threads and event-driven programming; and graphical user interface design using the Swing classes. The course concludes with an introduction to RISC machine architecture and aspects of compilers and operating systems. Programming exercises are conducted in a cloud-based Linux environment. Students can count two of the following three courses—CSCI E-10a, CSCI E-10b, and CSCI E-50—toward a degree. They cannot count all three toward a degree.","PL
AL
OS
PD
AR
DS
SDF
SP
SE"
Discrete Mathematics for Computer Science,"This course instructs students in widely applicable mathematical tools for computer science, including topics from logic, set theory, combinatorics, number theory, probability theory, and graph theory. It provides practice and instruction in reasoning formally and proving theorems.","AL
DS
IAS
IS
NC
SDF"
Unix/Linux Systems Programming,"As an introduction to the fundamental structure and services of the Unix and Linux operating systems, this course combines theory with programming at the system call level. Topics include files and directories, device control, terminal handling, processes and threads, signals, pipes, and sockets. Examples and exercises include directory management utilities, a shell, and a web server.","AR
OS
PD
NC"
Python for Data Science,"Rapid technological advancements have led to generation of data at an incredible rate. The potential for learning from big data is fascinating and what we learn from it is already reshaping the world we live in. But we only analyze a small fraction of the data that we generate. This extraordinary influx of data has necessitated the development of tools for storing, processing, and extracting value from data and defines the field of data science. There are two highly relevant platforms for tackling data analysis problems: the statistics-oriented programming language R, and the multi-purpose, interpreted, general programming language Python. The focus of this course is Python 3 and its application in solving interesting contemporary data problems. We work toward mastering data management with Pandas and creating interactive data visualizations with Bokeh. Students learn to perform statistical modeling, testing, and analysis and how to leverage AWS for tackling big data problems. The course provides introductory guidance in popular Python machine learning library scikit-learn and the KNIME data science analytics platform. We use the leading Python-powered data science ecosystem Anaconda, as well as Jupyter Notebook, Docker, and GitHub.","SDF
GV
IAS
DS
NC
PL
PD
SE"
Introduction to Web Application Development using Node.JS,"This course provides an introduction to web application development by way of JavaScript and the node.js environment. Students learn the basics of server-side web development using the MEAN stack (MongoDB, Express.js, Angular/Angular 2, node.js). Using the MEAN stack, the course introduces students to models of software development that can apply to any web development environment, including the application server (node.js), Model View Controller (MVC) frameworks using Express.js, front-end frameworks (Angular), and databases (MongoDB). The course includes setting up a node.js environment, building web APIs and full-stack JavaScript applications using the MEAN stack, and following good application development practices. Experience with server-side application development is not required, though knowledge of client-side web development (HTML/CSS/JavaScript) is important.","PL
IAS
AL
AR
GV
NC
SP"
Developing International Software,"The course covers the fundamentals and definitions of developing international software. It explains what it means to be world-ready and how to make localization work. We teach the importance of designing for cross-cultural applications. The course ends with several coding challenges where students are able to apply what they learned. The instructors for this course include programmers who have worked on globalization and localization of some of the world's most successful software. They've experienced the good, the bad, and the ugly of creating world-ready software. Students learn to create software with a user experience that works consistently, regardless of where users are from or what languages they speak. The recorded lectures are from the Microsoft course Developing International Software.",IS
Communication Protocols and Internet Architectures,"Networks are now too large, complex, and diverse to be built on an ad hoc basis. This course provides a structured approach to the design, analysis, and implementation of networks and protocols. We study various protocols, including TCP/IP, WWW/HTTP, e-mail/SMTP, multimedia protocols for voice and video, and the IEEE 802 LAN protocol suite. In each case, the protocol's functions and the underlying reference model are discussed. LAN architecture and design, internetworking using switches and routers, and the design and analysis of both private networks and the Internet are presented. The course discusses new areas of work, including network quality of service, voice and video on the Internet, policy-based networks, and broadband/gigabit networks. The recorded lectures are from the fall course.","NC
IAS
AR
SE"
Secure Software Development,"This course explores the implementation of security controls within web applications, mobile applications, utility applications, and traditional applications. Students explore secure coding techniques as well as application security configuration techniques. Specific review of secure coding techniques includes data validation, session management, exception handling, and data encryption. Specific review of application security configuration techniques includes the secure configuration management of the application web server, middleware, and database. Students also review policy-specific requirements necessary to implement a secure development program within enterprise organizations. Specifically, students use source code analysis tools, HTTP proxies, automated scanners, and command-line tools to appraise software security.",SP
How to Assess and Communicate Risk in Information Security,"In simple terms, risk is the likelihood of something bad taking place, and the resulting business impact if it does occur. We often talk about the bad things that could happen—the threats, vulnerabilities, and exploits, and the technologies that are used to defend against them—but these are not risks. Business decision makers need their subject-matter experts in information security to advise them not about the technical details, but about how likely is it for that something bad to occur, about the business impact if it does occur, and about how an investment in given security controls quantifiably reduces that risk. This course covers how to assess security risks, properly defined, how to use these risk assessments to make recommendations for what to do about them, and how to communicate these risks effectively to business decision makers.",SP
"The Cyber World: Governance, Threats, Conflict, Privacy, Identity, and Commerce","Today we all live and work in a participatory cyberspace. Computers, the data networks that interconnect them, and the services available over the networks make up this cyberspace. As cyberspace invades almost all areas of modern day living, playing, and working, it is becoming more important that people understand its technical and political underpinnings and operations, as well as its capabilities, threats, and weaknesses. This is a companion course to CSCI E-45a. The goal of this pair of courses is to give students the tools they need to understand, use, and manage the technologies involved, as well as the ability to appreciate the legal, social, and political dynamics of this ever expanding universe and the interplay between the cyber and physical worlds. The pair of courses covers the essential elements of computing and the history, structure, operation, and governance of the Internet. This course explores the technical and legal aspects of the interactions and tensions between security, usability, privacy, and surveillance in a post NSA-revelation world. We also look at the technical and legal underpinnings that affect the use of cyberspace for businesses. Finally, we explore the rapidly changing dangers of cyberspace from viruses to state-sponsored cyber-conflict.",IAS
Applied Network Security,"This course provides a practical overview of network security and related topics. General threat classifications are discussed as they relate to the CIA triad: eavesdropping (confidentiality), man-in-the-middle (integrity), and denial-of-service (availability). Real-world attack incidents and implementations are used to tie concept to reality. Defensive technologies and techniques, including authentication/authorization, access control, segmentation, log/traffic monitoring, reputation-based security, and secure protocol (SSH, TLS, DNSSEC) usage are discussed and demonstrated. Hands-on labs and exercises are used to reinforce lectures and provide practical implementation experience.",SP
Cloud Security,"Cloud computing infrastructure has become a mainstay of the information technology industry, opening the possibility for on-demand, highly elastic, and infinite computer power with scalability and supporting the delivery of mission-critical secure enterprise applications and services. This course provides the ground-up coverage on the high-level concepts of cloud landscape, architectural principles, techniques, design patterns, and real-world best practices. The course describes the cloud security architecture and explores the guiding security design principles, design patterns, industry standards, and applied technologies, and addresses regulatory compliance requirements critical to the design, implementation, delivery, and management of secure cloud-based services.",SP
Effective C++ for Programmers,"C++ includes many constructs and concepts that stretch students' knowledge of computer science and take their programming skills to the next level. This fast paced, intensive class examines how common programming constructs are implemented in C++ and then delves into the intricacies of C++ / C++ 11, including memory management, pointers and references, objects, abstraction, inheritance and polymorphism, exception handling, the STL (Standard Template Library), templates, and the C++ generic algorithms. The course emphasizes best practices. Weekly programming assignments help students hone their skills and identify good coding practices. This course assumes no C/C++ knowledge, but is intended for programmers with solid experience in other structured programming languages.","PL
SDF
AL
AR
GV
IAS
NC
PD
SE"
Advanced Mobile Application Development Using Swift and iOS,"This course transitions a solid programming background into iOS development as a viable workforce skill. Nearly all conceptual material applies to other graphical user interface (GUI) environments and event­driven programming generally. Attention is paid to structure: model­view­controller, data modeling, and inter­object communication. Patterns and conventions demonstrated in class are strictly enforced in all assignments. For the Swift language, we start from scratch and move quickly, including optionals, exceptions, type inference, protocols, closures, and automatic reference counting (ARC) memory management. For the iOS application program interface (API) Cocoa Touch, we cover UIKit and CoreGraphics, frameworks that allow for rich, realistic apps: scrolling, visual effects, navigation, large data collections, custom drawing, and interactive, guided data entry. For the shared API Foundation, we cover network communication (REST/JSON), asynchronous code generally, and on­device storage. For the Xcode integrated development environment (IDE), we cover the visual UI designer Storyboard, as well as project management, debugging, and versioning control through GitHub. As time allows, additional frameworks such as AVKit (video, audio, image processing), CoreLocation (GPS), MapKit, and physical sensors (gyroscope, accelerometer) help us give our apps exciting, environmentally aware input/output capability.",SP
Database Systems,"This course covers the fundamental concepts of database systems. Topics include data models (ER, relational, and others); query languages (relational algebra, SQL, and others); implementation techniques of database management systems (index structures, concurrency control, recovery, and query processing); management of semistructured and complex data; distributed and noSQL databases.","DS
NC"
Wearable Technologies and the Internet of Things,"The wearable technologies field has been experiencing explosive growth with exciting applications in the fields of medicine, sports, fitness, and entertainment, as well as new ways for people to interact, communicate, and experience the environment around them. The Internet of things works with sensors and software in wearable technologies to provide a communications network that allows data collection and information exchange for wearable devices. The applications range from helping manage chronic diseases to experiencing entertainment, sports, and games in a virtual-reality setting. Enterprise architecture is expanding to include the communications network of the Internet of things, and data from wearable devices is being incorporated in big data analytics frameworks. In this course we review aspects of wearable technologies, including the software, architecture, UX design, communication networks, and data analytics. We review current and proposed uses of this emerging technology.","AR
GV
HCI"
Building the Brain: A Survey of Artificial Intelligence,"Artificial intelligence (AI) is evolving at a blistering pace. The creation of systems that are faster, better, and smarter than ourselves may well be, as I.J. Good wrote in 1965, ""the last invention that man need ever make."" What is it, what is it not, and how does it compare to real brains and where does it fall short",IS
Deep Learning,"Deep learning has emerged as the primary technique for analysis and resolution of many issues in computer science, natural sciences, linguistics, and engineering. We use deep learning for image classification and manipulation, speech recognition and synthesis, natural language translation, sound and music manipulation, self-driving cars, and many other activities. TensorFlow is an API for neural networks and deep learning used internally by Google and recently released to the public. The API has quickly become one of the most popular open source projects with one of the largest number of committers within the Apache family of APIs. In this course, we review theoretical foundations of the neural networks approach to machine learning. Most of our effort goes into learning how to use TensorFlow for the creation of several major categories of neural networks including convolutional neural networks, recurrent neural networks, self-organizing-maps, LSTMs, and others. We learn how to use TensorFlow API to classify, analyze, and manipulate images. A good portion of our effort deals with analysis of text. We learn how to recognize speech, transcribe speech into text, and transform text into speech. We gain an understanding of the natural language translation process. We also master a few commercially important applications of neural networks like sentiment analysis, image-caption generation, object segmentation and classification, and question-answer systems.",IS
Fundamentals of Cloud Computing with Microsoft Azure,"Cloud computing provides for highly scalable consumer and enterprise applications with minimal or no capital investment. Most start-ups and Fortune 500 companies are embracing cloud computing for many reasons including higher profit margins, competitive advantage, elastic scalability, increased security, and global reach. This course starts by introducing the student to the fundamentals of cloud computing and server-less computing. We contrast the challenges and benefits offered by cloud computing, server-less cloud computing and traditional self-managed cloud, and on-premises solutions. We cover the fundamental architecture and design patterns necessary to build highly available and scalable solutions using key Microsoft Azure platform as a service (PaaS) offerings. This includes not only understanding the services offered but providing guidance on when to use one service over another based on performance, maintainability, complexity, and cost. Key services covered include authentication, Azure app services, Azure SQL, Azure API management, Azure functions, Redis Cache, notification hubs, Azure storage and queues, DocumentDB, Azure search, and Azure Internet of things suite. We also cover the fundamentals necessary to make a system ready for users, including always up architecture and deployment strategies, as well as rollback strategies, A/B testing, and testing in production.",SP
Compiler Design and Implementation,"This course is a study of the theory and practice required for the design and implementation of interpreters and compilers for programming languages. Coursework ranges from the abstract, such as categorization of grammars and languages, to the concrete, such as specific algorithms used in compilers and practical performance issues. Topics include lexical analysis, parsing, symbol table generation, type checking, error detection, code generation, optimization, and run-time support. Techniques for top-down and bottom-up parsing both with and without the use of automated tools are studied. Local and global optimization are covered. An extensive programming project is required of all students.",PL
Advanced Topics in Data Science,"Building upon the material in CSCI E-109a, this course introduces advanced methods for data wrangling, data visualization, and statistical modeling and prediction. Topics include big data and database management, interactive visualizations, nonlinear statistical models, and deep learning.","AL
DS
HCI
IM
NC
PL
SDF"
Data Structures and Algorithms,"This is a rigorous course on the design and analysis of efficient algorithms and data structures. Algorithm design methods, graph algorithms, approximation algorithms, and randomized algorithms are covered.","AL
AR
DS
IM
NC
SDF"
Cryptography,"Cryptography is as old as human communication itself, but has undergone a revolution in the last few decades. It is now about much more than secret writing and includes seemingly paradoxical notions such as communicating securely without a shared secret and computing on encrypted data. In this challenging but rewarding course, we start from the basics of private and public key cryptography and go all the way up to advanced notions such as fully homomorphic encryption and software obfuscation. This is a proof-based course that is best appreciated by mathematically mature students.",IS
Programming Languages,"This course is an introduction to the theory, design, and implementation of programming languages. Topics covered in this course include formal semantics of programming languages (operational, axiomatic, denotational, and translational), type systems, higher-order functions and lambda calculus, lazy evaluations, continuations, dynamic types, monads, objects, modules, concurrency, and communication.","PL
AL
OS
PD"
Classics of Computer Science,"This course examines papers every computer scientist should have read, from the 1930s to the present. It is meant to be a synthesizing experience for advanced students in computer science: a way for them to see the field as a whole, not through a survey, but by reliving the experience of its creation. The idea is to create a unified view of the field of computer science, for students who already know something about it, by replaying its entire evolution at an accelerated frame rate.","AL
AR
CN
DS
IAS
IS
NC
PL
SDF
SP"
Big Data Systems,"Big data is everywhere. A fundamental goal across numerous modern businesses and sciences is to be able to exploit as many machines as possible, to consume as much information as possible and as fast as possible. The big challenge is how to turn data into useful knowledge. This is far from a simple task and also a moving target as both the underlying hardware and our ability to collect data evolve. In this course, we discuss how to design data systems and algorithms that can scale up and scale out. Scale up refers to the ability to use a single machine to all its potential, to exploit properly the memory hierarchy and the multiple CPU and GPU cores of modern hardware. Scale out refers to the ability to use more than one machine (typically hundreds or thousands) effectively. This is a research-oriented course. Every week we read two modern research papers; one from the scale up area and one from the scale out area. We use examples from several areas, including relational systems and distributed databases, graph processing systems (for social networks), key-value stores, noSQL and newSQL systems, as well as mobile computing. Each student works on two systems projects and (optionally) on a semester-long data systems research project which can be in any of the above areas and based on an open research question.","AL
DS
IS
SDF"
Software Engineering Capstone,"This course examines how current software engineering methods approach structuring and managing software projects, from requirements gathering to production release. Formal methods in software engineering have a long history, from the older waterfall method to the current agile methods. Students collaborate in small teams to define an architectural model and a project plan, and then implement a system while practicing techniques in software engineering. They present to the Extension School's Master of Liberal Arts, software engineering faculty committee based on the course project. The early programming assignments are in Java.",SE
Technical English for Computer Science (6 credits) ," CourseDescription:  Successful completion of 36 credits of courses in the Common Core Curriculum, comprising at least one and not more than two courses from each Area of Inquiry with not more than 24 credits of courses being selected within one academic year except where candidates are required to make up for failed credits: Running alongside Computer Science project based courses, this one semester, 6-credit course will build and consolidate final year CS and Computing and data analytics students’ ability to compose technical reports, and make technical oral presentations. The focus of this course is on helping students to report on the progress of their Final Year Project in an effective, professional manner in both written and oral communication. Topics include accessing, abstracting, analyzing, organizing and summarizing information; making effective grammatical and lexical choices; technical report writing; and technical presentations. Assessment is wholly by coursework.                 Co-requisite: COMP4801 or COMP4804   Assessment: 100% continuous assessment","SDF
PD"
Computer programming (6 credits)," This course covers both the basic and advanced features of the C/C++ programming languages, including syntax, identifiers, data types, control statements, functions, arrays, file access, objects and classes, class string, structures and pointers. It introduces programming techniques such as recursion, linked lists and dynamic data structures.  The concept and skills of program design, implementation and debugging, with emphasis on problem-solving, will also be covered.   Assessment: 50% continuous assessment, 50% examination","PL
AR
SF"
Introduction to data structures and algorithms (6 credits),"  Arrays, linked lists, trees and graphs; stacks and queues; symbol tables; priority queues, balanced trees; sorting algorithms; complexity analysis.  ","AL
DS"
Computer organization (6 credits)," Introduction to computer organization and architecture; data representations; instruction sets; machine and assembly languages; basic logic design and integrated devices; the central processing unit and its control; memory and caches; I/O and storage systems; computer arithmetic.           Co-requisite: CSIS1117 or COMP1117 or ENGG1002 or ENGG1111 or ENGG1112  Mutually exclusive with: ELEC2441    Assessment: 50% continuous assessment, 50% examination","AR
DS
IAS
IM
AL
PL
SDF
SE"
Discrete mathematics (6 credits),"This course provides students a solid background on discrete mathematics and structures pertinent to computer science. Topics include logic; set theory; mathematical reasoning; counting techniques; discrete probability; trees, graphs, and related algorithms; modeling computation.Mutually exclusive with: MATH3600  Assessment: 50% continuous assessment, 50% examination","AL
AR
CN
DS
GV
HCI
IAS
IM
IS
NC
OS
PBD
PD
PL
SDF
SE
SF
SP"
Programming technologies and tools (6 credits),"  This course introduces various technologies and tools that are useful for software development, including Linux, C++ STL, the C language, shell scripts, python and xml. Learning materials will be provided but there will be no lecture. This strengthens the self-learning ability of the students.     Assessment: 70% continuous assessment, 30% examination","SE
PL"
Object-oriented programming and Java (6 credits), CourseDescription:  Introduction to object-oriented programming; abstract data types and classes; inheritance and polymorphism; object-oriented program design; Java language and its program development environment; user interfaces and GUI programming; collection class and iteration protocol; program documentation.    ,"AL
AR
IAS
NC
PL
SDF
SF
SP"
Principles of operating systems (6 credits)," CourseDescription:  Operating system structures, process and thread, CPU scheduling, process synchronization, deadlocks, memory management, file systems, I/O systems and device driver, mass-storage structure and disk scheduling, case studies.",OS
Computer architecture (6 credits), CourseDescription:  Introduction to computer design process; performance and cost analysis; instruction set design; data-path and controller design; pipelining; memory system; I/O design; GPU architecture and programming; introduction to advanced topics.,"AR
IAS
DS
GV
IS
SE"
Computer and communication networks (6 credits), CourseDescription:  Network structure and architecture; reference models; stop and wait protocol; sliding window protocols; character and bit oriented protocols; virtual circuits and datagrams; routing; flow control; congestion control; local area networks; issues and principles of network interconnection; transport protocols and application layer; and examples of network protocols.,"NC
AL
SP"
Compiling techniques (6 credits), CourseDescription:  Lexical analysis; symbol table management; parsing techniques; error detection; error recovery; error diagnostics; run-time memory management; optimization; code generation.,"PL
AL
AR
SE"
Design and analysis of algorithms (6 credits)," CourseDescription:  The course studies various algorithm design techniques, such as divide and conquer, and dynamic programming. These techniques are applied to design novel algorithms from various areas of computer science. Topics include: advanced data structures; graph algorithms; searching algorithms; geometric algorithms; overview of NP-complete problems.","AL
AR
IS
NC
PL
SDF
SE"
Functional programming (6 credits)," CourseDescription:  The course teaches the basics of functional programming using the language Haskell. The main goal is introduce students to fundamental programming concepts such as recursion, abstraction, lambda expressions and higher-order functions and data types. The course will also study the mathematical reasoning involved in the design of functional programs and techniques for proving properties about functions so defined. With the adoption of lambda expressions recent versions of Java, C++ or C#, functional programming and related programming techniques are becoming increasingly more relevant even for programmers of languages that are not traditionally viewed as functional. This course is important to introduce students to such techniques.",PL
Principles of programming languages (6 credits)," CourseDescription:  Syntax and semantics specification; data types; data control and memory management; expressions, precedence and associativity of operators; control structures; comparative study of existing programming languages; advanced topics such as polymorphism, programming paradigms, exception handling and concurrency.","PL
IS"
Artificial intelligence (6 credits), CourseDescription:  This is an introduction course on the subject of artificial intelligence. Topics include: intelligent agents; search techniques for problem solving; knowledge representation; logical inference; reasoning under uncertainty; statistical models and machine learning.,IS
Computer graphics (6 credits)," CourseDescription:  Overview of graphics hardware, basic drawing algorithms, 2-D transformations, windowing and clipping, interactive input devices, curves and surfaces, 3-D transformations and viewing, hidden-surface and hidden-line removal, shading and colour models, modelling, illumination models, image synthesis, computer animation.","GV
HCI"
Introduction to database management systems (6 credits)," CourseDescription:  This course studies the principles, design, administration, and implementation of database management systems.  Topics include: entity-relationship model, relational model, relational algebra, database design and normalization, database query languages, indexing schemes, integrity, and concurrency control.","IAS
IM"
Software engineering (6 credits)," CourseDescription:  This course introduces the fundamental principles and methodologies of software engineering.  It covers the software process, and methods and tools employed in the development, with focus on the analysis, design, implementation and testing of contemporary object-oriented systems.  The use of the UML and contemporary frameworks are emphasized.  The course includes a team-based project in which students apply their new knowledge to a full lifecycle of iterative and incremental development.",SE
Legal aspects of computing (6 credits), CourseDescription:   Contents include:  theTo  introduce students to the laws affecting computing and the legal issues arising  from the technology. legal system of Hong Kong;  copyright protection for computer programs; intellectual property issues on the Internet; data  privacy; computer-related crimes; codes of professional conduct for computer professionals.,"AL
IS"
Machine learning (6 credits)," CourseDescription:  This course introduces algorithms, tools, practices, and applications of machine learning. Topics include core methods such as supervised learning (classification and regression), unsupervised learning (clustering, principal component analysis), Bayesian estimation, neural networks; common practices in data pre-processing, hyper-parameter tuning, and model evaluation; tools/libraries/APIs such as scikit-learn, Theano/Keras, and multi/many-core CPU/GPU programming.","IS
CN
AL
PD
GV
OS
PL
SDF
SP"
Quantum Information and Computation (6 credits)," CourseDescription:  This course offers a gentle introduction to the interdisciplinary field of quantum information and computation. We will start from the basic principles of quantum theory and become familiar with the counterintuitive notions of quantum superposition and entanglement.  Once the basics have been covered, we will explore the cornerstones of quantum information theory: quantum cloning machines, quantum teleportation, quantum state discrimination, quantum error correction, quantum cryptography and data compression.  Finally, we will provide an overview of quantum computation and of the main quantum algorithms, including Shor's algorithm for prime factorization in polynomial time and Grover's quantum search algorithm.",IS
Computer vision (6 credits)," CourseDescription:  This course introduces the principles, mathematical models and applications of computer vision. Topics include: image processing techniques, feature extraction techniques, imaging models and camera calibration techniques, stereo vision, and motion analysis.",CN
Electronic commerce technology (6 credits)," CourseDescription:  This course aims to help students to understand the technical and managerial challenges they will face as electronic commerce becomes a new locus of economics activities. Topics include Internet and WWW technology, information security technologies, public-key crypto-systems, public-key infrastructure, electronic payment systems, and electronic commerce activities in different sectors.",IS
Modern technologies on World Wide Web (6 credits)," CourseDescription:  Selected network protocols relevant to the World Wide Web (e.g., HTTP, DNS, IP); World Wide Web; technologies for programming the Web (e.g, HTML, XML, style sheets, PHP, JavaScript, Node.js.; other topics of current interest (AJAX, HTML5, web services, cloud computing).","NC
IS
AR"
Advanced database systems (6 credits)," CourseDescription:  The course will study some advanced topics and techniques in database systems, with a focus on the system and algorithmic aspects.  It will also survey the recent development and progress in selected areas.  Topics include: query optimization, spatial-spatiotemporal data management, multimedia and time-series data management, information retrieval and XML, data mining.","IM
IAS"
Computer and network security (6 credits)," CourseDescription:  This course introduces the principles, mechanisms and implementation of computer security and data protection. Knowledge about the attack and defend are included. Topics include notion and terms of information security; introduction to encryption: classic and modern encryption technologies include public-key systems; authentication methods; access control methods; system integrity attacks and defences (e.g. viruses); introduction to network/Internet security; analysis and models of secure systems.",SP
Computer game design and programming (6 credits)," CourseDescription:  The course will study practical topics in game design. Topics includes: types of game, game platforms, design of game, 3D model and kinematics, rendering techniques, collision detection, project management, AI, UI, sound effects, and networking.","GV
HCI
IAS
PD
SDF
SE
SP"
Interactive mobile application design and programming (6 credits)," CourseDescription:  This course introduces the Android platform for developing interactive mobile applications. Topics include user interface, parallel computing, graphics, multimedia, sensors, database, and social computing. Students participate in both individual assignments and group projects to practice ideation, reading, writing, coding, and presentation.","HCI
IM
OS
PD
SF"
Advanced algorithm analysis (6 credits)," This class introduces advanced mathematical techniques for analyzing the complexity and correctness of algorithms.  NP-complete problems are believed to be not solvable in polynomial time and we study how approximation algorithms could give near optimal solutions. In particular, we will see that probability theory gives us a very powerful tool to tackle problems that are otherwise hard to solve.        Assessment: 50% continuous assessment, 50% examination","AL
AR
IAS
IS"
 Algorithmic Game Theory (6 credits),"  Strategic behaviors of users are of increasingly importance in today’s computational problems, from data analysis (where a user may manipulate his data) to routing (where a user may strategically choose a path instead of the one that the algorithm specifies). This is an undergraduate advanced algorithm course that covers various topics at the interface of theoretical computer science and economics, seeking to provide the basic concepts and techniques, both economic and algorithmic ones, that would allow to students to design algorithms that achieve the desirable outcomes in the presence of strategic behaviors of users. This course focuses on three topics: 1) mechanism design, a study on incentivizing users to truthfully report their data for a given computational task; 2) price of anarchy in games, a systematic approach to quantify the inefficiency caused by users’ strategic behaviors; and 3) algorithms and complexity theory for learning and computing Nash and market equilibria. The course will also cover some selected advanced topics such as the use of data of past user behaviors in auction design, and case studies of some important applications including online advertisement auctions and kidney exchange market.    Assessment: 50% continuous assessment, 50% examination",SP
System architecture and distributed computing (6 credits)," CourseDescription:  This course introduces the architecture of modern systems and the concepts and principles of distributed computing.  Topics include: client-server computing, multi-tier architectures, data/object persistence, parallel server systems, naming services, transaction processing, middleware and messaging, component technologies, and web services/APIs.      ","DS
IAS
NC
SDF
SE"
"Implementation, testing and maintenance of software systems (6 credits)"," CourseDescription:  This course examines the theory and practice of software implementation, testing and maintenance. Topics in implementation include: detailed design issues and implementation strategies; coding style and standards; the review process; pattern implementation and reuse. Testing covers strategies and techniques for unit and component testing; integration testing; system, performance and acceptance testing; test documentation and test management. Topics in maintenance include maintenance techniques, tools and metrics; software rejuvenation; and refactoring.",SE
Software quality and project management (6 credits)," CourseDescription:  Topics in software quality include: software quality models; quality assurance; software quality metrics; quality reviews, inspections and audits. Topics in project management include: project planning, cost estimation and scheduling; project monitoring and control; agile, traditional and extreme process models and their management; risk analysis; configuration management and control; software acquisition; contract management; and process improvement.","SE
PD"
Scientific computing (6 credits)," CourseDescription:  This course provides an overview and covers the fundamentals of scientific and numerical computing. Topics include numerical analysis and computation, symbolic computation, scientific visualization, architectures for scientific computing, and applications of scientific computing.","NC
PL
SDF"
Introduction to Object-oriented Programming,"Prereq: Placement into MATH 143, 165, or higher; recommended: a previous high school or college course in programming or equivalent experience.Introduction to object-oriented design and programming techniques. Symbolic and numerical computation, recursion and iteration, modularity procedural and data abstraction, and specifications and subtyping. Object-oriented techniques including encapsulation, inheritance and polymorphism. Imperative programming. Emphasis on principles of programming and object-oriented design through extensive practice in design, writing, running, debugging, and reasoning. Course intended for Com S majors. Credit may not be applied toward graduation for both Com S 207 and 227.",SE
Introduction to Data Structures,"Prereq: Minimum of C- in 227, credit or enrollment in MATH 165An object-oriented approach to data structures and algorithms. Object-oriented analysis, design, and programming, with emphasis on data abstraction, inheritance and subtype polymorphism. Abstract data type specification and correctness. Collections and associated algorithms, such as stacks, queues, lists, trees. Searching and sorting algorithms. Graphs. Data on secondary storage. Analysis of algoritms. Emphasis on object-oriented design, writing and documenting medium-sized programs. This course is designed for majors.","AL
DS
SP
SDF"
Discrete Computational Structures,"Prereq: Minimum of C- in COM S 227 and MATH 165; ENGL 150Concepts in discrete mathematics as applied to computer science. Logic, proof techniques, set theory, relations, graphs, combinatorics, discrete probability and number theory.","DS
AL
PL
SDF"
Digital Logic,"Prereq: sophomore classificationNumber systems and representation. Boolean algebra and logic minimization. Combinational and sequential logic design. Arithmetic circuits and finite state machines. Use of programmable logic devices. Introduction to computer-aided schematic capture systems, simulation tools, and hardware description languages. Design of simple digital systems.",AR
Software Development Practices,"Prereq: Minimum of C- in COM S 228 and MATH 165A practical introduction to methods for managing software development. Process models, requirements analysis, structured and object-oriented design, coding, testing, maintenance, cost and schedule estimation, metrics. Programming projects.","AL
IAS
SDF
SE
SP"
Design and Analysis of Algorithms,"Prereq: Minimum of C- in COM S 228; MATH 166, ENGL 150, and COM S 230 or CPR E 310Basic techniques for design and analysis of efficient algorithms. Sorting, searching, graph algorithms, computational geometry, string processing and NP-completeness. Design techniques such as dynamic programming and the greedy method. Asymptotic, worst-case, average-case and amortized analyses. Data structures including heaps, hash tables, binary search trees and red-black trees. Programming projects.","SDF
AL
SP"
Introduction to Computer Architecture and Machine-Level Programming,"Prereq: Minimum of C- in COM S 228 and MATH 165; CPR E 281 and ENGL 250Introduction to computer architecture and organization. Emphasis on evaluation of performance, instruction set architecture, datapath and control, memory-hierarchy design, and pipelining. Assembly language on a simulator.","AR
CN
IAS
OS
SP"
Advanced Programming Techniques,"Prereq: Minimum of C- in COM S 228 and MATH 165Object-oriented programming experience using a language suitable for exploring advanced topics in programming. Topics include memory management, parameter passing, inheritance, compiling, debugging, and maintaining programs. Significant programming projects.","SDF
AL
GV
HCI
PL
SDF"
Theory of Computing,"Prereq: Minimum of C- in COM S 228, MATH 166, and in COM S 230 or CPR E 310; ENGL 250Models of computation: finite state automata, pushdown automata and Turing machines. Study of grammars and their relation to automata. Limits of digital computation, unsolvability and Church-Turing thesis. Chomsky hierarchy and relations between classes of languages.","AL
AR
IAS
DS"
Principles of Programming Languages,"Prereq: Minimum of C- in COM S 228 and MATH 165; COM S 230 or CPR E 310Study of concepts in programming languages and major programming paradigms, especially functional programming. Special emphasis on design tradeoffs that enable students to make sound choices of programming languages for a given software development task. Programming projects.",PL
Object-Oriented Analysis and Design,Prereq: Minimum of C- in COM S 228 and MATH 165; ENGL 250Object-oriented requirements analysis and systems design. Design notations such as the Unifed Modeling Language. Design Patterns. Group design and programming with large programming projects.,SE
Software Requirements Engineering,"Prereq: COM S 309; for graduate credit: graduate standing or permission of instructorThe requirements engineering process including identification of stakeholders requirements elicitation techniques such as interviews and prototyping, analysis fundamentals, requirements specification, and validation. Use of Models: State-oriented, Function-oriented, and Object-oriented. Documentation for Software Requirements. Informal, semi-formal, and formal representations. Structural, informational, and behavioral requirements. Non-functional requirements. Use of requirements repositories to manage and track requirements through the life cycle. Case studies, software projects, written reports, and oral presentations will be required.",SE
Software Testing,"Prereq: COM S 309; COM S 230 or CPR E 310; ENGL 250, SP CM 212Comprehensive study of software testing, principles, methodologies, management strategies and techniques. Test models, test design techniques (black box and white box testing techniques), test adequacy criteria,integration, regression, system testing methods, and software testing tools.","SF
IS
PL
SP
SE"
High Performance Computing for Scientific and Engineering Applications,"Prereq: COM S 311, COM S 230, ENGL 250, SP CM 212Introduction to high performance computing platforms including parallel computers and workstation clusters. Discussion of parallel architectures, performance, programming models, and software development issues. Sample applications from science and engineering. Practical issues in high performance computing will be emphasized via a number of programming projects using a variety of programming models and case studies. Oral and written reports.","PD
SDF
PL
AR"
Advanced Programming Tools,"Prereq: COM S 311, COM S 362 or COM S 363, ENGL 250, SP CM 212Topics in advanced programming techniques and tools widely used by industry (e.g., event-driven programming and graphical user interfaces, standard libraries, client/server architectures and techniques for distributed applications). Emphasis on programming projects in a modern integrated development environment. Oral and written reports.","AL
DS
PL
SDF
SE
SP"
Computer Game and Media Programming,"Prereq: COM S 336 or permission of instructorStudents will learn video game programming using current game engine interfaces with real hardware. Particular attention is paid to the console architecture, development environment, tool chains, 2D graphics, 3D graphics, controllers, memory management, and audio systems. Students will complete the course by writing a simple game that runs on console hardware.","GV
SDF"
Principles and Internals of Database Systems,"Prereq: COM S 311, ENGL 250, SP CM 212; for graduate credit: graduate standing or permission of instructorModels for structured and semistructured data. Algebraic, first order, and user-oriented query languages. Database schema design. Physical storage, access methods, and query processing. Transaction management, concurrency control, and crash recovery. Database security. Information integration using data warehouses, mediators, wrappers, and data mining. Parallel and distributed databases, and special purpose databases. Students enrolling in Com S 561 will require additional study of advanced concepts in database systems.",IS
"Network Programming, Applications, and Research Issues","Prereq: Com S 352 or CPR E 489 or equivalent; for graduate credit: graduate standing or permission of instructorProgramming paradigms for building distributed and networking applications, including multithreaded client-server programming, socket programming, distributed object frameworks and programming suites, and web computing and security. Introduction to some on-going research issues in distributed and networking applications, including peer-to-peer computing, multimedia communications, and mobile computing and networking. A written report and an oral presentation is required for students enrolling in Com S 587.","NC
DS
AR"
Software Evolution and Maintenance,"Prereq: COM S 309Practical importance of software evolution and maintenance, systematic defect analysis and debugging techniques, tracing and understanding large software, impact analysis, program migration and transformation, refactoring, tools for software evolution and maintenance, experimental studies and quantitative measurements of software evolution. Written reports and oral presentation.",PD
Formal Methods in Software Engineering,"Prereq: COM S 230 or CPR E 310; COM S 311, STAT 330; for graduate credit: graduate standing or permission of instructorA study of formal techniques for model-based specification and verification of software systems. Topics include logics, formalisms, graph theory, numerical computations, algorithms and tools for automatic analysis of systems. Graduate credit requires in-­depth study of concepts.","SF
AR
PL
IAS"
Introduction to Computational Geometry,"Prereq: COM S 311 or permission of instructor; for graduate credit: graduate standing or permission of instructorIntroduction to data structures, algorithms, and analysis techniques for computational problems that involve geometry. Line segment intersection, polygon triangulation, 2D linear programming, range queries, point location, arrangements and duality, Voronoi diagrams and Delaunay triangulation, convex hulls, robot motion planning, visibility graphs. Other selected topics. Programming assignments.","AL
DS"
Introduction to Parallel Algorithms and Programming,"Prereq: CPR E 308 or COM S 321, CPR E 315 or COM S 311Models of parallel computation, performance measures, basic parallel constructs and communication primitives, parallel programming using MPI, parallel algorithms for selected problems including sorting, matrix, tree and graph problems, fast Fourier transforms.","AR
IAS
NC
PD
PL
SDF
SP"
Algorithms for Large Data Sets: Theory and Practice,"Prereq: COM S 228, COM S 230 or CPR E 310, COM S 311 or equivalentChallenges involved in solving computational problems on massive data sets. Discussion of computational problems that arise in the context of web search, social network analysis, recommendation systems, and online advertising etc. Theoretical aspects include modeling the computational problems using graphs, study of similarity measures and hash functions, and design of efficient algorithms for graphs. Practical aspects include implementation and performance evaluation of the algorithms on real world data sets. Graduate credit requires a written report on current research.","AL
DS"
Principles and Practice of Compiling,"Prereq: COM S 331, COM S 342, ENGL 250, SP CM 212; for graduate credit: graduate standing or permission of instructorTheory of compiling and implementation issues of programming languages. Programming projects leading to the construction of a compiler. Projects with different difficulty levels will be given for 440 and 540. Topics: lexical, syntax and semantic analyses, syntax-directed translation, runtime environment and library support. Written reports.",PL
Distributed Systems,"Prereq: COM S 311, COM S 352; for graduate credit: graduate standing or permission of instructor(3-1) Cr. 3. Theoretical and practical issues of design and implementation of distributed systems. The client server paradigm, inter-process communications, synchronization and concurrency control, naming, consistency and replication, fault tolerance, and distributed file systems. Graduate credit requires additional in-depth study of concepts. Programming projects and written reports.","DS
NC
PD
PL
SDF
SE
SP"
Simulation: Algorithms and Implementation,"Prereq: COM S 311 and COM S 230, STAT 330, ENGL 150, SP CM 212; for graduate credit: graduate standing or permission of instructorIntroduction to discrete-event simulation with a focus on computer science applications, including performance evaluation of networks and distributed systems. Overview of algorithms and data structures necessary to implement simulation software. Discrete and continuous stochastic models, random number generation, elementary statistics, simulation of queuing and inventory systems, Monte Carlo simulation, point and interval parameter estimation. Graduate credit requires additional in-depth study of concepts. Oral and written reports.","AL
IAS
IM
NC
SDF"
Principles of Artificial Intelligence,"Prereq: COM S 311, COM S 230 or CPR E 310, STAT 330, ENGL 250, SP CM 212, COM S 342 or comparable programming experience; for graduate credit: graduate standing or permission of instructorSpecification, design, implementation, and selected applications of intelligent software agents and multi-agent systems. Computational models of intelligent behavior, including problem solving, knowledge representation, reasoning, planning, decision making, learning, perception, action, communication and interaction. Reactive, deliberative, rational, adaptive, learning and communicative agents and multiagent systems. Artificial intelligence programming. A research project and a written report is required for students enrolled in Com S 572.",IS
Introduction to Machine Learning,"Prereq: COM S 311, COM S 230 or CPR E 310, STAT 330, MATH 165, ENGL 250, SP CM 212, COM S 342 or comparable programming experienceBasic principles, techniques, and applications of Machine Learning. Design, analysis, implementation, and applications of learning algorithms. Topics include: statistical learning, pattern classification, function approximation, Bayesian learning, linear models, artificial neural networks, support vector machines, decision trees, instance based learning, probabilistic graphical models, unsupervised learning, selected applications in automated knowledge acquisition, pattern recognition, and data mining.",IS
Problem Solving Techniques for Applied Computer Science,"Prereq: COM S 228; COM S 230 or CPR E 310, MATH 166, MATH 207 or MATH 317, or consent of the instructor; for graduate credit: graduate standing or permission of instructorSelected topics in applied mathematics and modern heuristics that have found applications in areas such as geometric modeling, graphics, robotics, vision, human machine interface, speech recognition, computer animation, etc. Homogeneous coordinates and transformations, perspective projection, quaternions and rotations, polynomial interpolation, roots of polynomials, resultants, solution of linear and nonlinear equations, approximation, data fitting, Fourier series and fast Fourier transform, linear programming, nonlinear optimization, Lagrange multipliers, parametric and algebraic curves, curvature, Frenet formulas, Bezier curves. Programming components. A scholarly report is required for graduate credit.",CN
Fundamental Concepts in Computer Networking,"Prereq: COM S 352An introduction to fundamental concepts in the design and implementation of computer communication in both the wired and wireless networks, their protocols, and applications. Layered network architecture in the Internet, applications, transport, Socket APIs, network, and data link layers and their protocols, multimedia networking, and network security.","NC
AR
SP"
Numerical Methods for Differential Equations,"Prereq: MATH 265 and either MATH 266 or MATH 267; knowledge of a programming languageFirst order Euler method, high order Runge-Kutta method, and multistep method for solving ordinary differential equations. Finite difference and finite element methods for solving partial differential equations. Local truncation error, stability, and convergence for finite difference method. Numerical solution space, polynomial approximation, and error estimate for finite element method.","SDF
NC
SE"
Basics of Information System Security,"Prereq: credit or enrollment in CPR E 308 or COM S 352Introduction to and application of basic mechanisms for protecting information systems from accidental and intentional threats. Basic cryptography use and practice. Computer security issues including authentication, access control, and malicious code. Network security mechanisms such as intrusion detection, firewalls, IPSEC, and related protocols. Ethics and legal issues in information security. Wireless security. Programming and system configuration assignments.","SF
IAS"
Computer Networking and Data Communications,"Prereq: CPR E 381 or E E 324Modern computer networking and data communications concepts. TCP/IP, OSI protocols, client server programming, data link protocols, local area networks, and routing protocols.","NC
AR
CN
SP
SF"
Calculus I,"Prereq: Satisfactory performance on placement assessment, 2 years of high school algebra, 1 year of geometry, 1 semester of trigonometry; or MATH 143Differential calculus, applications of the derivative, introduction to integral calculus. Only one of MATH 151 or MATH 160 or the sequence MATH 165-MATH 166, or the sequence MATH 181-MATH 182 may be counted towards graduation.","AR
SP"
Calculus II,"Prereq: Minimum of C- in MATH 165 or high math placement scoresIntegral calculus, applications of the integral, infinite series, parametric curves and polar coordinates. Only one of MATH 151, MATH 160, the sequence MATH 165-MATH 166, or the sequence MATH 181-MATH 182 may be counted towards graduation.","AL
AR
CN
HCI
IAS
IAS
IS
PL
SDF
SP"
Engineering Statistics,"Prereq: MATH 165 (or MATH 165H)Statistics for engineering problem solving. Principles of engineering data collection; descriptive statistics; elementary probability distributions; principles of experimentation; confidence intervals and significance tests; one-, two-, and multi-sample studies; regression analysis; use of statistical software; team project involving engineering experimentation and data analysis. Credit for both Stat 105 and 305 may not be applied for graduation.",SP
Probability and Statistics for Computer Science,Prereq: MATH 166Topics from probability and statistics applicable to computer science. Basic probability; Random variables and their distributions; Stochastic processes including Markov chains; Queuing models; Basic statistical inference; Introduction to regression.,"IS
SP"
Introduction to the Theory of Probability and Statistics I,Prereq: MATH 265 (or MATH 265H)Probability; distribution functions and their properties; classical discrete and continuous distribution functions; multivariate probability distributions and their properties; moment generating functions; simulation of random variables and use of the R statistical package. Credit for both STAT 341 and STAT 447 may not be applied toward graduation.,IS
Matrices and Linear Algebra,"Prereq: 2 semesters of calculusSystems of linear equations, determinants, vector spaces, linear transformations, orthogonality, least-squares methods, eigenvalues and eigenvectors. Emphasis on applications and techniques. Only one of MATH 207 and MATH 317 may be counted toward graduation.","AL
AR
DS"
Calculus III,"Prereq: Minimum of C- in MATH 166 or MATH 166HAnalytic geometry and vectors, differential calculus of functions of several variables, multiple integrals, vector calculus.","AR
DS
IAS
IM
NC
SE"
Elementary Differential Equations,"Prereq: Minimum of C- in MATH 166 or MATH 166HSolution methods for ordinary differential equations. First order equations, linear equations, constant coefficient equations. Eigenvalue methods for systems of first order linear equations. Introduction to stability and phase plane analysis.","AR
IAS
NC
PL
SDF"
Elementary Differential Equations and Laplace Transforms,Prereq: Minimum of C- in MATH 166 or MATH 166HSame as MATH 266 but also including Laplace transforms and series solutions to ordinary differential equations.,"AR
IAS"
Combinatorics,"Prereq: MATH 166 or MATH 166H; MATH 201 or experience with proofsEnumeration strategies involving permutations, combinations, partitions, binomial coefficients, inclusion-exclusion principle, recurrence relations, generating functions. Additional topics selected from probability, algebraic combinatorics, and applications.","AL
DS
IM
PD
PL
SDF"
Graph Theory,"Prereq: MATH 166 or MATH 166H; MATH 201 or experience with proofsStructure and extremal properties of graphs. Topics are selected from: trees, networks, colorings, paths and cycles, connectivity, planarity, directed graphs, matchings, Ramsey theory, forbidden structures, enumeration, applications.","AL
DS"
Theory of Linear Algebra,"Prereq: Credit or enrollment in MATH 201Systems of linear equations, determinants, vector spaces, inner product spaces, linear transformations, eigenvalues and eigenvectors. Emphasis on writing proofs and results. Only one of MATH 207 and MATH 317 may be counted toward graduation.","AL
AR
CN
DS
IAS
IM
NC
PL
SDF
SE
SP"
Introduction to Classical Physics I,"Prereq: Proficiency in algebra, trigonometry, vector manipulation, and topics covered in Math 165, and credit or enrollment in MATH 166.For engineering and science majors. 3 hours of lecture each week plus 3 recitations and 1 laboratory every 2 weeks. Elementary mechanics including kinematics and dynamics of particles, work and energy, linear and angular momentum, conservation laws, rotational motion, oscillations, gravitation. Heat, thermodynamics, kinetic theory of gases; waves and sound.","AR
IAS
PD
SDF
SP"
Introduction to Classical Physics II,"Prereq: PHYS 221 OR PHYS 241, MATH 1663 hours of lecture each week plus 1 recitation and 1 laboratory each week. Electric forces and fields. Electrical currents; DC circuits. Magnetic forces and fields: LR, LC, LCR circuits; Maxwell's equations; ray optics and image formation; wave optics; topics in modern physics.","AL
PD"
  Introduction to Operating Systems,"Prereq: COM S 321, and COM S 327; ENGL 250Survey of operating system issues. Introduction to hardware and software components including: processors, peripherals, interrupts, management of processes, threads and memory, deadlocks, file systems, protection, virtual machines and system organization, and introduction to distributed operating systems. Programming projects.","OS
PL
SP"
Introduction to Computer Programming for Engineers,"Introduces the use of high-level programming language as a problem-solving tool in engineering including basic data structures and algorithms, structured programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. Students should only take one of these courses (CS 104, CS 105, CS 110, CS 115).","PD
PL
AL
SDF"
Introduction to Computer Programming,"Introduces the use of high-level programming language as a problem-solving tool, including basic data structures and algorithms, structured programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. Students should only take one of these courses (CS 104, CS 105, CS 110, CS 115).","AL
AR
DS
HCI
IAS
PL
PD
SDF
SP"
Computing Principles,"An introduction to the following &quot;big ideas&quot; of computer science: (1) computing is a creative activity; (2) abstraction reduces information and detail to facilitate focus on relevant concepts; (3) data and information facilitate the creation of knowledge; (4) algorithms are used to develop and express solutions to computational problems; (5) programming enables problem solving, human expression, and creation of knowledge; (6) the internet pervades modern computing; and (7) computing has global impacts. Students should only take one of these courses (CS 104, CS 105, CS 110, CS 115).",IS
Object-Oriented Programming I,"Introduces the use of a high-level object-oriented programming language as a problem-solving tool, including basic data structures and algorithms, object-oriented programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. For students in CS and CS-related degree programs. Students should only take one of these courses (CS 104, CS 105, CS 110, CS 115).","AL
AR
IAS
PL
SDF
SP"
Object-Oriented Programming II,"Introduces more advanced elements of object-oriented programming, including dynamic data structures, recursion, searching and sorting, and advanced object-oriented programming techniques. For students in CS and CS-related degree programs.","AR
AL
DS
SDF
PL
SE"
Accelerated Introduction to Computer Science,"Problem-solving and design using an object-oriented programming language. Introduces a variety of problem-solving techniques, algorithms, and data structures in object-oriented programming.","AR
IAS
NC
PD
PL
SDF
SP"
Discrete Structures,"Introduction to the use of formal mathematical structures to represent problems and computational processes. Topics covered include Boolean algebra, first-order logic, recursive structures, graphs, and abstract language models. Credit will not be granted for both CS 330 and MATH 230.","PL
GV
IAS"
Data Structures and Algorithms,Implementation and application of the essential data structures used in computer science. Analysis of basic sorting and searching algorithms and their relationship to these data structures. Particular emphasis is given to the use of object-oriented design and data abstraction in the creation and application of data structures.,"DS
AR"
Computer Organization and Assembly Language Programming,"Introduction to the internal architecture of computer systems, including micro-, mini-, and mainframe computer architectures. Focuses on the relationship among a computer&#039;s hardware, its native instruction set, and the implementation of high-level languages on that machine. Uses a set of assembly language programming exercises to explore and analyze a microcomputer architecture. Credit will not be granted for both CS 350 and ECE 242.","AR
DS"
Systems Programming,"Examines the components of sophisticated multilayer software systems, including device drivers, systems software, applications interfaces, and user interfaces. Explores the design and development of interrupt-driven and event-driven software.","OS
SF
AR"
Introduction to Discrete Structures and Algorithms,"This course will provide students with an understanding of some basic discrete mathematics and techniques for designing computer algorithms and measuring and analyzing their behavior. We emphasize the necessary mathematical ideas such as how to prove a mathematical statement, how to analyze the worst case and the average case complexity of an algorithm. We also introduce students to some new techniques used in designing algorithms, such as the approximation algorithms and randomized algorithms.","AL
IAS
DS"
Computer Graphics,"Overview of display devices and applications. Vector graphics in two and three dimensions. Image generation, representation, and manipulation. Homogeneous coordinates. Modeling and hidden line elimination. Introduction to raster graphics. Perspective and parallel projections.","AR
IAS
NC
GV
HCI
IM"
Data Mining,"This course will provide an introductory look at concepts and techniques in the field of data mining. After covering the introduction and terminologies to Data Mining, the techniques used to explore the large quantities of data for the discovery of meaningful rules and knowledge such as market basket analysis, nearest neighbor, decision trees, and clustering are covered. The students learn the material by implementing different techniques throughout the semester.","IS
DS"
Database Organization,"Overview of database architectures, including the Relational, Hierarchical, Network, and Object Models. Database interfaces, including the SQL query language. Database design using the Entity-Relationship Model. Issues such as security, integrity, and query optimization.","IM
CN
IAS"
Information Retrieval,"Overview of fundamental issues of information retrieval with theoretical foundations. The information-retrieval techniques and theory, covering both effectiveness and run-time performance of information-retrieval systems are covered. The focus is on algorithms and heuristics used to find documents relevant to the user request and to find them fast. The course covers the architecture and components of the search engine such as parser, stemmer, index builder, and query processor. The students learn the material by building a prototype of such a search engine. Requires strong programming knowledge.",IS
Introduction to Algorithms,"Introduction to the design, behavior, and analysis of computer algorithms. Searching, sorting, and combinatorial algorithms are emphasized. Worst case, amortized, and expected bounds on time and space usage.","AL
AR
DS"
Programming Languages and Translators,"Study of commonly used computer programming languages with an emphasis on precision of definition and facility in use. Scanning, parsing, and introduction to compiler design. Use of compiler generating tools.",PL
Mobile Applications Development,"Students will learn a variety of software engineering techniques and design patterns to assist in the rapid development and prototyping of applications, leveraging frameworks and APIs provided by current mobile development platforms (such as Android and iOS). Application lifecycles, data management and persistence mechanisms, and user interface design, among other topics, will be covered. Industry speakers will be invited to speak about best practices. Students (individually or in teams) will take ideas from concept to final implementation and will present their work at the end of the semester. When appropriate, students may take the additional step of deploying their work on the appropriate application marketplace(s).",SE
Compiler Construction,This course covers the design and implementation of a compiler for modern languages by implementing the following: abstract syntax trees; intermediate representations; static analysis; fix-point operations; symbol tables and type checking; and first-order and high-order function implementation. Students will incrementally create a series of compilers.,"PL
PD"
Object Oriented Design and Programming,Introduction to methodologies for object-oriented design and programming. Examines the object model and how it is realized in various object-oriented languages. Focuses on methods for developing and implementing object-oriented systems.,"PL
IAS"
Distributed Objects,"This course provides an introduction to architecture, analysis, design, and implementation of distributed, multi-tier applications using distributed object technology. The course focuses on the services and facilities provided by an Object Request Broker (ORB). Students will use a commercially available ORB and Database Management System to develop distributed object applications.",DS
Operating Systems,"Introduction to operating system concepts-including system organization for uniprocessors and multiprocessors, scheduling algorithms, process management, deadlocks, paging and segmentation, files and protection, and process coordination and communication.",OS
Introduction to Parallel and Distributed Computing,"This course covers general introductory concepts in the design and implementation of parallel and distributed systems covering all the major branches such as cloud computing, grid computing, cluster computing, supercomputing, and many-core computing.","PD
DS
NC
SF"
Data Communications,Introduction to data communication concepts and facilities with an emphasis on protocols and interface specifications. Focuses on the lower four layers of the ISO-OSI reference model.,"NC
IAS
SP
SDF"
Introduction to Wireless Networks and Performance,"This class provides an opportunity for students to obtain a fundamental understanding of the nature and operation of the full range of wireless networks (personal, local area, wide area, and satellite) and their performance characteristics, future potential, and challenges through class lectures, assigned readings, homework, projects, and various hands-on experiences.","NC
SP
AL
AR"
Introduction to Information Security,"An introduction to the fundamentals of computer and information security. This course focuses on algorithms and techniques used to defend against malicious software. Topics include an introduction to encryption systems, operating system security, database security, network security, system threats, and risk avoidance procedures.",SP
Computer Architecture,"Introduction to the functional elements and structures of digital computers. Detailed study of specific machines at the register transfer level illustrates arithmetic, memory, I/O and instruction processing.","AR
IAS
IM
OS
PL
SDF
SP"
Artificial Intelligence Planning and Control,"Introduction to computational methods for intelligent control of autonomous agents, and the use of programming paradigms that support development of flexible and reactive systems. These include heuristic search, knowledge representation, constraint satisfaction, probabilistic reasoning, decision-theoretic control, and sensor interpretation. Particular focus will be places on real-world application of the material.","IS
SDF"
Artificial Intelligence Language Understanding,"Theory and programming paradigms that enable systems to understand human language texts and extract useful information and knowledge. For example, extraction of structured event representations from news stories or discovering new research hypotheses by analyzing thousands of medical research articles. the course covers a variety of text analysis and text mining methods, with an emphasis on building working systems. Connections to information retrieval, data mining, and speech recognition will be discussed.","OS
IAS"
Information and Knowledge Management Systems,"This capstone course is designed as a project course whose purpose is to enable students to see how the various algorithms and systems they have learned about in their prerequisite courses can be used in context to create useful knowledge management tools. Class periods will be divided among discussion of design of information and knowledge management systems, lectures on effective project management techniques, and hands-on advising of student project group meetings.",HCI
Software Engineering I,"Study of the principles and practices of software engineering. Topics include software quality concepts, process models, software requirements analysis, design methodologies, software testing and software maintenance. Hands-on experience building a software system using the waterfall life cycle model. Students work in teams to develop all life cycle deliverables: requirements document, specification and design documents, system code, test plan, and user manuals.",SE
Topics in Computer Science,"This course will treat a specific topic, varying from semester to semester, in which there is particular student or staff interest.","AL
IAS
SDF"
Topics in Computer Graphics,"Covers advanced topics in computer graphics. The exact course contents may change based on recent advances in the area and the instructor teaching it. Possible topics include: Geometric modeling, Subdivision surfaces, Procedural modeling, Warping and morphing, Model reconstruction, Image based rendering, Lighting and appearance, Texturing, Natural phenomena, Nonphotorealistic rendering Particle systems, Character animation, Physically based modeling and animation.",GV
Computer Vision,"Introduction to fundamental topics in computer vision and the application of statistical estimation techniques to this area. Intended to give the student a good basis for work in this important field. Topics include: Feature extraction, Probabilistic modeling, Camera calibration, Epipolar geometry, Statistical estimation, Model reconstruction, Statistical filtering, Motion estimation, Recognition, Shape from single image cues.","GV
HCI"
Geospatial Vision and Visualization,"Geospatial information has become ubiquitous in everyday life as evidenced by on-line mapping services such as NOKIA Here Map, Microsoft Bing Map, the &quot;place&quot; features on social network websites such as Facebook, and navigation apps on smart phones. Behind the scenes is digital map content engineering that enables all types of location-based services. Course material will be drawn from the instructor&#039;s research and development experience at NOKIA Location and Commerce (formerly NAVTEQ), the Chicago-based leading global provider of digital map, traffic, and location data. This course will provide a comprehensive treatment of computer vision, image processing and visualization techniques in the context of digital mapping, global positioning and sensing, next generation map making, and three-dimensional map content creations. Real world problems and data and on-site industry visits will comprise part of the course curriculum.","CN
GV"
"Data Integration, Warehousing, and Provenance","This course introduces the basic concepts of data integration, data warehousing, and provenance. We will learn how to resolve structural heterogeneity through schema matching and mapping. The course introduces techniques for querying several heterogeneous datasources at once (data integration) and translating data between databases with different data representations (data exchange). Furthermore, we will cover the data-warehouse paradigm including the Extract-Transform-Load (ETL) process, the data cube model and its relational representations (such as snowflake and star schema), and efficient processing of analytical queries. This will be contrasted with Big Data analytics approaches that (besides other differences) significantly reduce the upfront cost of analytics. When feeding data through complex processing pipelines such as data exchange transformations or ETL workflows, it is easy to lose track of the origin of data. Therefore, in the last part of the course we cover techniques for representing and keeping track of the origin and creation process of data (its provenance). The course emphasizespractical skills through a series of homework assignments that help students develop a strong background in data integration systems and techniques. At the same time, it also addresses the underlying formalisms. For example, we will discuss the logic based languages used for schema mapping and the dimensional data model as well as their practical application (e.g., developing an ETL workflow with rapid miner and creating a mapping between two example schemata). The literature reviews will familiarize students with data integration and provenance research.",IS
Object-Oriented Analysis and Design,"This course describes a methodology that covers a wide range of software engineering techniques used in system analysis, modeling and design. These techniques integrate well with software process management techniques and provide a framework for software engineers to collaborate in the design and development process. The methodology features the integration of concepts, including software reusability, frame works, design patterns, software architecture, software component design, use-case analysis, event-flow analysis, event-message analysis, behavioral-life cycle analysis, feature, multiple-product, risk and rule analysis, and automatic code generation. (Credit will not be given for CS 521 if CS751 is taken)",SE
Advanced Data Mining,Continued exploration of data mining algorithms. More sophisticated algorithms such as support vector machines will be studied in detail. Students will continuously study new contributions to the field. A large project will be required that encourages students to push the limits of existing data mining techniques.,"IS
AL"
Advanced Database Organization,"Comprehensive coverage of the problems involved in database system implementation and an in-depth examination of contemporary structures and techniques used in modern database management systems. Teaches advanced skills appropriate for DBMS architects and developers , database specialist, and the designers and developers of client/server and distributed systems. Focus is on transaction management, database structures and distributed processing.","IS
IAS"
Theory of Computation,"Computability topics such as Turing machines, nondeterministic machines, undecidability, and reducibility. Computational complexity topics such as time complexity, NP-completeness and intractability, time and space hierarchy theorems. Introduces the complexity classes P, NP, NL, L, PSPACE, NC, RNC, BPP and their complete problems.","AL
AR
CN
DS
GV
PL
SDF
SP"
Topics in Automata Theory,"Topics selected from mathematical systems and automata theory, decision problems, realization and minimization, algebraic decomposition theory and machines in a category.","AL
AR
IAS
DS"
Formal Languages,"This course provides an introduction to the theory of formal languages and machines. Topics to be covered include: strings, alphabets, and languages; grammars, the Chomsky Hierarchy of languages and corresponding machines (regular sets and finite automata, context free languages of various types, Turing machines and recursive functions, undecidable problems), and computational complexity, polynomial-time reductions, NP-completeness.","AL
AR
CN
IAS
PL
SDF"
Computational Geometry,"This course covers fundamental algorithms and data structures for convex hulls, Voronoi diagrams, Delauney triangulation, Euclidean spanning trees, point location, and range searching. Also included are lower bounds and discrepancy theory. Optimization in geometry will be covered. This includes fixed dimensional linear programming and shortest paths. Graphic data structures such as BSP trees will be covered.",SDF
Design and Analysis of Algorithms,"Design of efficient algorithms for a variety of problems, with mathematical proof of correctness and analysis of time and space requirements. Topics include lower bounds for sorting and medians, amortized analysis of advanced data structures, graph algorithms (strongly connected components, shortest paths, minimum spanning trees, maximum flows and bipartite matching) and NP-Completeness.","AL
AR
CN
PD
PL
SDF
SE"
Science of Programming,"Formal specification of how programs execute operational semantics , how mathematical functions programs compute denotational semantics , and how to use logic to characterize properties and invariants of the program execution (axiomatic semantics).","PL
AR"
Software Metrics,Theoretical foundations for software metrics. Data collection. Experimental design and analysis. Software metric validation. Measuring the software development and maintenance process. Measuring software systems. Support for metrics. Statistical tools. Setting up a measurement program. Application of software measurement.,"SE
PL
SDF
GV"
Combinatorial Optimization,"Linear programs and their properties. Efficient algorithms for linear programming. Network flows, minimum cost flows, maximum matching, weighted matching, matroids.Prerequisite:CS 430 and a linear algebra course.","AR
IAS
DS"
Game Theory:  Algorithms and Applications,"This course focuses on computational issues in the theory of games, economics, and network design. Interest in the algorithmic aspects of games is motivated by the computational issues of fundamental aspects of games and economic theory, e.g. Nash equilibrium and market equilibrium. Computing and approximating Nash equilibrium will be studied. Of considerable interest to the computer science community are problems that arise from the Internet and computer networks and are similar to issues that arise in traditional transport networks, e.g. Wardrop equilibrium.","AL
AR
IAS
NC
SDF"
Syntactic Analysis of Programming Languages,Formal definition of syntax with emphasis on context-free languages. Elementary techniques for scanning and parsing programming languages. Symbol table management. Semantic routines and code generation. The class will write a simple translator.,"PL
AL
AR"
Topics in Compiler Construction,"Advanced topics in compiler construction, including incremental and interactive compiling, error correction, code optimization, models of code generators, etc. The objective of the course is to provide an in-depth coverage of compiler optimization techniques, including both classical optimization and areas of current interest in compiler research.","PL
PD"
Computer Networks I:  Fundamentals,"This course focuses on the engineering and analysis of network protocols and architecture in terms of the Internet. Topics include content distribution, peer-to-peer networking, congestion control, unicast and multicast routing, router design, mobility, multimedia networking quality of service, security and policy-based networking.","NC
AR
IAS
SP"
Computer Networks II: Network Services,"Qualitative and quantitative analysis of networks. A combination of analytical and experimental analysis techniques will be used to study topics such as protocol delay, end-to-end network response time, intranet models, Internet traffic models, web services availability, and network management.","NC
AR
IAS"
Distributed Computing Landscape,"Introduction to the theory of concurrent programming languages. Topics include formal models of concurrent computation such as process algebras, nets, and actors; high-level concurrent programming languages and their operational semantics; and methods for reasoning about correctness and complexity of concurrent programs.","PL
NC
SP"
Parallel and Distributed Processing,"This course covers general issues of parallel and distributed processing from a user&#039;s point of view which includes system architectures, programming, performance evaluation, applications, and the influence of communication and parallelism on algorithm design.","PD
PL
SDF"
Wireless Networking,"This course introduces cellular/PCS systems, short-range mobile wireless systems, fixed wireless systems, satellites, and ad hoc wireless systems. It explains in detail the underlying technology as well as regulations, politics, and business of these wireless communications systems. It looks beyond the hype, examining just what is and is not possible with present-day and future wireless systems. As an advanced graduate course, it will combine extensive reading and in-class discussion of the research literature with in-depth independent research projects of students&#039; own choosing.","NC
SP"
