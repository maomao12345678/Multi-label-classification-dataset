course_id,course_text,label,KA_label,,,
CSCI 140,"This class covers basic techniques used to analyze problems and algorithms (including asymptotics, upper/lower bounds, best/average/worst case analysis, amortized analysis, complexity), basic techniques used to design algorithms (including divide & conquer / greedy / dynamic programming / heuristics, choosing appropriate data structures), and important classical algorithms (including sorting, string, matrix, and graph algorithms). The goal is for students to be able to apply all of the above to designing solutions for real-world problems.","SDF_Algorithms and Design
AL_Basic Analysis
AL_Algorithmic Strategies
AL_Fundamental Data Structures and Algorithms
AL--basic automata computability and complexity
AL--advanced computational complexity
AL--advanced data structures algorithms and analysis
PD--parallel algorithms, analysis, and programming
PD--formal models and semantics
","SDF
AL
PD",,,
COS 226,"Classical algorithms and data structures, with an emphasis on implementing them in modern programming environments, and using them to solve real-world problems. Particular emphasis is given to algorithms for sorting, searching, string processing, and graph algorithms. Fundamental algorithms in a number of other areas are covered as well, including geometric algorithms and some algorithms from operations research. The course concentrates on developing implementations, understanding their performance characteristics, and estimating their potential effectiveness in applications.
Analysis of algorithms, with an emphasis on using the scientific method to validate hypotheses about algorithm performance.
Data types, APIs, encapsulation.
Linked data structures, resizing arrays, and implementations of container types such as stacks and queues. Sorting algorithms, including insertion sort, selection sort, shellsort, mergesort, randomized quicksort, heapsort.
Priority queue data types and implementations, including binary heaps.
Symbol table data types and implementations (searching algorithms), including binary search trees, red- black trees, and hash tables.
Geometric algorithms (searching in point sets and intersection).
Graph algorithms (breadth-first search, depth-first search, MST, shortest paths, topological sort, strong components, maxflow)
Tries, string sorting, substring search, regular expression pattern matching. Data compression (Huffman, LZW).
Reductions, combinatorial search, P vs. NP, and NP-completeness.
","SDF--Algorithms and Design
PL--Object-oriented programming
SDF--Fundamental Data Structures
AL--Basic Analysis
AL--Algorithmic Strategies
AL--Fundamental Data Structures and Algorithms
AL--Basic Automata, Computability and Complexity
AL--Advanced Automata, Computability and Complexity
AL--Advanced Data Structures and Algorithms
","SDF
PL
AL",,,
CS 256,"Analysis: asymptotic analysis including lower bounds on sorting, recurrence relations and their solutions. Graphs: directed, undirected, planar, and bipartite.
Greedy Algorithms: shortest paths, minimum spanning trees, and the union-find data structure (including amortized analysis).
Divide and Conquer Algorithms: integer and matrix multiplication, the fast-fourier transform. Dynamic Programming: matrix parenthesization, subset sum, RNA secondary structure, DP on trees. Network Flow: Max-Flow, Min-Cut (equivalence, duality, algorithms).
Randomization: randomized quicksort, median, min-cut, universal hashing, skip lists. String Algorithms: string matching, suffix trees and suffix arrays.
Complexity Theory: Complexity classes, reductions, and approximation algorithms.
","AL--Basic Analysis
AL--Algorithmic Strategies
AL--Fundamental Data Structures and Algorithms
AL--Basic Automata, Computability and Complexity
AL--Advanced Data Structures, Algorithms and Analysis
DS--Discrete Probability
","AL
DS",,,
CSE332,"The core of this course is fundamental “classical” data structures and algorithms including balanced trees, hashtables, sorting, priority queues, graphs and graph algorithms like shortest paths, etc. The course includes asymptotic complexity (e.g., big-O notation). The course also includes an introduction to concurrency and parallelism grounded in the data structure material. Concurrent access to shared data motivates mutual exclusion. Independent subcomputations (e.g., recursive calls to mergesort) motivate parallelism and cost models that account for time-to-completion in the presence of parallelism.
More general goals of the course include (1) exposing students to non-obvious algorithms (to make the point that algorithm selection and design is an important and non-trivial part of computer science & engineering) and (2) giving students substantial programming experience in a modern high-level programming language such as Java (to continue developing their software-development maturity).
Asymptotic complexity, algorithm analysis, recurrence relations Review of stacks, queues, and binary search trees (covered in CS2) Priority queues and binary heaps
Dictionaries and AVL trees, B trees, and hashtables
Insertion sort, selection sort, heap sort, merge sort, quicksort, bucket sort, radix sort Lower bound for comparison sorting
Graphs, graph representations, graph traversals, topological sort, shortest paths, minimum spanning trees Simple examples of amortized analysis (e.g., resizing arrays)
Introduction to multiple explicit threads of execution Parallelism via fork-join computations
Basic parallel algorithms: maps, reduces, parallel-prefix computations Parallel-algorithm analysis: Amdahl’s Law, work, span
Concurrent use of shared resources, mutual exclusion via locks
Data races and higher-level race conditions Deadlock
Condition variables
","AL--Basic Analysis
AL--Fundamental Data Structures and Algorithms
AL--Advanced Data Structures Algorithms and Analysis
DS--Graphs and Trees
PD--Parallelism Fundamentals
PD--Parallel Decomposition
PD--Communication and Coordination
PD--Parallel Algorithms, Analysis, and Programming
SDF--Fundamental Data Structures
","AL
DS
PD
SDF",,,
CS/ECE 552,"The goal of the course is to teach the design and operation of a digital computer. It serves students in two ways. First, for those who want to continue studying computer architecture, embedded systems, and other low-level aspects of computer systems, it lays the foundation of detailed implementation experience needed to make the quantitative tradeoffs in more advanced courses meaningful. Second, for those students interested in other areas of computer science, it solidifies an intuition about why hardware is as it is and how software interacts with  hardware.
The subject matter covered in the course includes technology trends and their implications, performance measurement, instruction sets, computer arithmetic, design and control of a datapath, pipelining, memory hierarchies, input and output, and brief introduction to multiprocessors.
The full list of course topics is:
Introduction and Performance Technology trends Measuring CPU performance
Amdahl’s law and averaging performance metrics
Instruction Sets
Components of an instruction set
Understanding instruction sets from an implementation perspective RISC and CISC and example instruction sets
Computer Arithmetic
Ripple carry, carry lookahead, and other adder designs ALU and Shifters
Floating-point arithmetic and floating-point hardware design
Datapath and Control
Single-cycle and multi-cycle datapaths
Control of datapaths and implementing control finite-state machines
Pipelining
Basic pipelined datapath and control
Data dependences, data hazards, bypassing, code scheduling Branch hazards, delayed branches, branch prediction
Memory Hierarchies
Caches (direct mapped, fully associative, set associative) Main memories
Memory hierarchy performance metrics and their use Virtual memory, address translation, TLBs
Input and Output
Common I/O device types and characteristics
Memory mapped I/O, DMA, program-controlled I/O, polling, interrupts Networks
Multiprocessors
Introduction to multiprocessors Cache coherence problem","AR--Introductory Material and Performance
AR--Instruction Set Architecture
AR--Computer Arithmetic
AR--Datapath and Control
AR--Pipelined Datapaths and Control
AR--Memory Hierarchies
AR--Input and Output
AR--Multiprocessors
",AR,,,
CS150,"Design of synchronous digital systems using modern tools and methodologies, in particular, digital logic synthesis tools, digital hardware simulation tools, and field programmable gate array architectures.
Understand the principles and methodology of digital logic design at the gate and switch level, including both combinational and sequential logic elements. Gain experience developing a relatively large and complex digital system. Gain experience with modern computer-aided design tools for digital logic design. Understand clocking methodologies used to control the flow of information and manage circuit state. Appreciate methods for specifying digital logic, as well as the process by which a high-level specification of a circuit is synthesized into logic networks. Appreciate the tradeoffs between hardware and software implementations of a given function.
Appreciate the uses and capabilities of a modern FPGA platform.
","AR--Digital Logic and Digital Systems
AR--Assembly Level Machine Organization
AR--Memory System Organization and Architecture
AR--Interfacing and Communication
AR--Performance Enhancements
",AR,,,
CC152,"Historical Perspectives: RISC vs. CISC, Pipelining, Memory Hierarchy, Virtual Memory, Complex Pipelines and Out-of-Order Execution, Superscaler and VLIW Architecture, Synchronization, Cache Coherency.
The course is intended to provide a foundation for students interested in performance programming, compilers,   and operating systems, as well as computer architecture and engineering. Our goal is for you to better understand how software interacts with hardware, and to understand how trends in technology, applications, and economics drive continuing changes in the field. The course will cover the different forms of parallelism found in applications (instruction-level, data-level, thread-level, gate-level) and how these can be exploited with various architectural features. We will cover pipelining, superscalar, speculative and out-of-order execution, vector machines, VLIW machines, multithreading, graphics processing units, and parallel microprocessors. We will also explore the design of memory systems including caches, virtual memory, and DRAM. An important part of the course is a series of  lab assignments using detailed simulation tools to evaluate and develop architectural ideas while running real applications and operating systems. Our objective is that you will understand all the major concepts used in  modern microprocessors by the end of the semester.","AR--Assembly Level Machine Organization
AR--Memory System Organization and Architecture
AR--Interfacing and Communication
AR--Functional Organization
AR--Multprocessing and Alternative Architecture
AR--Performance Enhancements
",AR,,,
eScience,"eScience’s basic premise is that in addition to the two accepted scientific inquiry methods: theoretical/mathematical formulation and experimentation, computational simulation/modeling has become the third method for doing science. eScience introduces the application of computational methods to scientific exploration and discovery in the social and natural sciences. Both the class and the laboratory include a broad range of well-defined experiments, verified data inputs, predictable/repeatable outcomes, and open questions to be explored. We begin with an Introduction to eScience, Scientific Method, and Models. Thereafter, we have weekly topics including Spread of Epidemics, Spread of Fire, Movement of Ants and Problem Solving, Predator-prey relationships,Altruism/Collaboration/Competition, Economics, Art and Music, Climate Change, E. coli metabolism of lactose, Cancer and Tumors, Games, Complex Systems and Chaos, Networks, and Fractals. Both theory and practice of computational simulation and modeling techniques are examined as tools to support the scientific method. No computer programming knowledge or calculus is required. By popular student demand, Netlogo5 is predominantly used as the modeling tool for this course due to its ease of use and extensive library of relevant models. Such tools have the advantage of embodying principles of a systems approach to non-linear, self-organizing, and emergent phenomena that characterize most interesting problems that societies face today. They also offer a bottom-up approach to problem-solution and experimentation in a non-threatening way that does not require the knowledge of programming. At the same time, these tools also provide more adventurous students with the opportunity to modify the natural language-like computer code to test their own ideas about modeling the societal challenge under consideration.
The first lesson of the week uncovers the nature of the societal problem targeted in that particular knowledge unit. The second lesson of the week offers examples of computer-based simulations and models of the problem. The lessons are followed by a laboratory  session that uses well-defined protocols to guide students through hands-on exploration of computer simulations and models. In the Spring 2013 semester we introduced the use of Audience Response Systems6 (clickers) for quizzes at the end of each lesson or topic; each quiz consisted of four to five questions about the current topic plus one or two review questions from previous topics. We also experimented with “flipped classroom” methods during some of the clicker quizzes. 
Rate of Change, Constrained Growth, Unconstrained Growth and Decay, Drug Dosage, Modeling Falling and Skydiving, Competition, Spread of SARS, Predator-Prey, Errors, Euler's Method, Runge-Kutta Method, Empirical Models, Simulations, Area Through Monte Carlo Simulation, Random Walk, Spreading of Fire, and Movement of Ants. We used Mathematica8 and Vensim9 for lab experiments.
These methods and tools include the science of complexity, the science of networks, fractals, chaos theory, problem solving techniques, and game theory.","CN--Fundamentals
CN--Modeling and Simulation
IS--Agents
","CN
IS",,,
COSC/MATH 201,"The modeling process
Two system dynamics tool tutorials
System dynamics problems with rate proportional to amount: unconstrained growth and decay, constrained growth, drug dosage
System dynamics models with interactions: competition, predator-prey models, spread of disease models Computational error
Simulation techniques: Euler's method, Runge-Kutta 2 method
Additional system dynamics projects throughout, such as modeling falling and skydiving, enzyme kinetics, the carbon cycle, economics and fishing
Six computational toolbox tutorials Empirical models
Introduction to Monte Carlo simulations Cellular automaton random walk simulations
Cellular automaton diffusion simulations: spreading of fire, formation of biofilms
High-performance computing: concurrent processing, parallel algorithms
Additional cellular automaton simulations throughout such as simulating polymer formation, solidification, foraging, pit vipers, mushroom fairy rings, clouds
","CN--Introduction to Modeling and Simulation
CN--Modeling and Simulation
CN--Processing
CN--Interactive Visualization
GV--Fundamental Concepts
SDF--Development Methods
IS--Agents
SE--Software Design
","CN
GV
SDF
IS
SE",,,
MAT 267,"This course will develop advanced mathematics skills appropriate for students pursuing STEM studies such as Engineering, Science, Computer Science, and Mathematics. Topics include sets, numbers, algorithms, logic, computer arithmetic, applied modern algebra, combinations, recursion principles, graph theory, trees, discrete probability, and digraphs.","DS--Sets, Relations, Functions
DS--Basic Logic
DS--Proof Techniques
DS--Basics of Counting
DS--Graphs and Trees
DS--Discrete Probability
",DS,,,
CS103,"Sets
Functions and Relations
Proof techniques (including direct, contradiction, diagonalization and induction) Graphs
Logic (proposition and predicate) Finite Automata (DFAs, NFAs, PDAs) Regular and Context-Free Languages Turing Machines
Complexity Classes (P, NP, Exp) NP-Completeness
Counting
Combinations and Permutations
Probability (including conditional probability, independence, and conditional independence) Expectation and Variance
Covariance and Correlation
Discrete distributions (including Binomial, Negative Binomial, Poisson, and Hypergeometric) Continuous distributions (including Uniform, Normal, Exponential, and Beta) Limit/Concentration results (including Central Limit Theorem, Markov/Chebyshev bounds) Parameter estimation (including maximum likelihood and Bayesian estimation)
Classification (including Naive Bayes Classifier and Logistic Regression) Simulation
","DS--Proof Techniques
DS--Basic Logic
DS--Discrete Probability
AL--Basic Automata, Computability and Complexity
DS--Basics of Counting
DS--Sets, Relations, Functions
DS--Graphs and Trees
IS--Basic Machine Learning
","DS
AL
IS",,,
CS 250,"Introduction to the Peano Axioms and construction of the natural numbers, integer numbers, rational numbers, and real numbers.
Construction and basic properties of monoids, groups, rings, fields, and vector spaces.  Introduction to transfinite ordinals and transfinite cardinals, and Cantor’s diagonalization methods Representation of large finite natural numbers using Knuth’s “arrow notation”
Introduction to first order propositional logic, logical equivalence, valid and invalid arguments Introduction to digital circuits
Introduction to first order monadic predicate logic, universal and existential quantification, and predicate arguments
Elementary number theory, prime factors, Euclid’s algorithm Finite arithmetic, Galois Fields, and RSA encryption
Proof techniques, including direct and indirect proofs, proving universal statements, proving existential statements, proof forms, common errors in proofs
Sequences, definite and indefinite series, recursive sequences and series Developing and validating closed-form solutions for series
Well ordering and mathematical induction Introduction to proving algorithm correctness
Second order linear homogeneous recurrence relations with constant coefficients General recursive definitions and structural induction
Introduction to classical (Cantor) set theory, Russell’s Paradox, introduction to axiomatic set theory (Zermelo-Fraenkel with Axiom of Choice).
Set-theoretic proofs Boolean algebras Halting Problem
","AL--Basic Analysis
DS--Basic Logic
DS--Proof Techniques
DS--Basics of Counting
DS--Sets, Relations, Functions
","DS
AL
IS",,,
CS 251,"Set-based theory of functions, Boolean functions Injection, surjection, bijection
Function composition
Function cardinality and computability General set relations
Equivalence relations Total and partial orderings
Basic counting techniques: multiplication rule, addition rule, Dirichlet’s Box Principle Combinations and permutations
Pascal’s Formula and the Binomial Theorem Kolmogorov Axioms and expected value Markov processes
Conditional probability and Bayes’ Theorem Classical graph theory: Euler and Hamilton circuits Introduction to spectral graph theory, isomorphisms Trees, weighted graphs, spanning trees
Algorithm analysis Formal languages Regular expressions Finite-state automata
","AL--Basic Analysis
DS--Sets, Relations, and Functions
DS--Basics of Counting
DS--Graphs and Trees
DS--Discrete Probability
AL--Basic Automata Computability and Complexity
","AL
DS",,,
CS 175,"Shader-based OpenGL programming Coordinate systems and transformations Quaternions and the Arcball interface Camera modeling and projection
OpenGL fixed functionality including rasterization Material simulation
Basic and advanced use of textures including shadow mapping Image sampling including alpha matting
Image resampling including mip-maps Human color perception
Geometric representations Physical simulation in animation Ray tracing
","GV--Fundamental Concepts
GV--Basic Rendering
GV--Geometric Modeling
SDF--Development Methods
AR--Performance enhancements
CN--Modeling and Simulation
SE--Tools and Environments
SE--Software Design
","GV
SDF
AR
CN
SE",,,
CS371,"Computer graphics and its place in computer science Surface modeling
Light modeling
The Rendering Equation Ray casting
Surface scattering (BSDFs) Spatial data structures Photon  mapping Refraction
Texture Mapping Transformations Rasterization
The graphics pipeline GPU architecture
Film production and effects Deferred shading
Collision detection Shadow maps
","GV--Fundamental Concepts
GV--Basic Rendering
GV--Geometric Modeling
SDF--Development Methods
AR--Performance enhancements
CN--Modeling and Simulation
SE--Tools and Environments
SE--Software Design
","GV
SDF
AR
CN
SE",,,
Human Aspects of Computer Science,"Experimental design and data representation
Inferential statistics Writing up experiments User-Centered Design
Developing requirements through personas and scenarios Conceptual design, interface design
Prototyping: lo-fi and paper Visual Design
Evaluation techniques: heuristics, cognitive walkthrough, experiments
Human-Computer Interaction","HCI--Foundations
HCI--Designing Interaction
HCI--Programming Interactive Systems
HCI--User-Centered Design and Testing
HCI--Statistical methods for HCI
",HCI,,,
FIT3063,"This unit provides a detailed understanding of the underpinning theories, principles and practices of interface design for computer-based systems. It examines issues in the design of system interfaces from a number of perspectives: user, programmer, designer. It explores the application of the relevant theories in practice. The unit will cover topics such as methods and tools for developing effective user interfaces, evaluation methods such as the conduct of usability and heuristic evaluations, design of appropriate interface elements including the design of menus and other interaction styles. The unit also focuses on designing for a diverse range of users and environments.
Background and motivation for HCI Human factors
Theoretical foundations: theories, models, principles, standards, guidelines Interface design elements
Interface design: methods and principles Interface design: data gathering and task analysis Interaction styles
Usability Accessibility Interaction devices Future of HCI
","HCI--Foundations
HCI--Designing Interaction
HCI--User-Centered Design & Testing
HCI--New Interactive Technologies
HCI--Mixed, Augmented and Virtual Reality
",HCI,,,
CO328,"This module provides an introduction to human-computer interaction. Fundamental aspects of human physiology  and psychology are introduced and key features of interaction and common interaction styles delineated. A variety   of analysis and design methods are introduced (e.g., GOMS, heuristic evaluation, user-centred and contextual design techniques). Throughout the course, the quality of design and the need for a professional, integrated and user- centered approach to interface development is emphasized. Rapid and low-fidelity prototyping feature as one aspect of this.
Evaluating interfaces: heuristic evaluation, GOMS Evaluation Data & Empirical Data
Lo-fi Prototyping
Color, Vision & Perception
Some Features of Human Memory Errors
Controls, widgets, icons & symbols Elements of visual design Documentation
","HCI--Foundations
HCI--Designing Interaction
HCI--User-Centered Design and Testing
",HCI,,,
Human Computer Interaction,"The goal is to present HCI as a discipline that is concerned with technical advance, and that must integrate different disciplinary perspectives. Fundamental theoretical issues deal with principles of human perception, visual representation and purposeful action, discussed in the context of novel interactive technologies. Building on a first year course in professional software design, the course ends with an overview of systematic approaches to the design and analysis of user interfaces.
propose design approaches that are suitable to different classes of user and application; identify appropriate techniques for analysis and critique of user interfaces;
be able to design and undertake quantitative and qualitative studies in order to improve the design of interactive systems;
understand the history and purpose of the features of contemporary user interfaces.
The scope and challenges of HCI and Interaction Design. Visual representation
Text and gesture interaction Inference-based approaches
Augmented reality and tangible user interfaces Usability of programming languages
User-centered design research Usability evaluation methods
","HCI--Foundations
HCI--Designing Interactions
HCI--User-Centered Design and Testing
HCI--New Interactive Technologies
HCI--Design-Oriented HCI
",HCI,,,
Human-Computer Interaction,"Short-form description: Helping you build human-centered design skills, so that you have the principles and methods to create excellent interfaces with any technology.
Long-form description: In this course, you will learn how to design technologies that bring people joy, rather than frustration. You'll learn several techniques for rapidly prototyping and evaluating multiple interface alternatives -- and why rapid prototyping and comparative evaluation are essential to excellent interaction design. You'll learn how to conduct fieldwork with people to help you get design ideas. How to make paper prototypes and low-fidelity mockups that are interactive -- and how to use these designs to get feedback from other stakeholders like your teammates, clients, and users. You'll learn principles of visual design so that you can effectively organize and  present information with your interfaces. You'll learn principles of perception and cognition that inform effective interaction design. And you'll learn how to perform and analyze controlled experiments online. In many cases, we'll use Web design as the anchoring domain. A lot of the examples will come from the Web, and we'll talk just a bit about Web technologies in particular. When we do so, it will be to support the main goal of this course, which is helping you build human-centered design skills, so that you have the principles and methods to create excellent interfaces with any technology.
","HCI--Foundations
HCI--Designing Interaction
HCI--User-centered design & testing
HCI--Statistical Methods for HCI
",HCI,,,
Human Information Processing (HIP),"Senses: Short term sensory memory – receptors – stimuli; Perception;
Attention;
Memory: Long-term memory – working memory; Mental models;
Intention: Decision making and response selection;
Action: Response execution (motion or behavior) – responses","CN--Interactive Visualization
GV--Fundamental Concepts
HCI--Foundations
","CN
GV
HCI",,,
Software and Interface Design,"This course introduces principles and methods for the design of software systems in professional contexts. The whole of the software development lifecycle is considered, but with special emphasis on user-centered design, including approaches to capture and analysis of user requirements, iterative prototyping and testing of interactive systems.
The goal is to present HCI as a discipline that is concerned with technical advance, and that must integrate different disciplinary perspectives. Fundamental theoretical issues deal with principles of human perception, visual representation and purposeful action, discussed in the context of novel interactive technologies. Building on a first year course in professional software design, the course ends with an overview of systematic approaches to the design and analysis of user interfaces.
undertake system design in a methodical manner
proceed from a general system or product requirement to a design that addresses user needs develop design models and prototypes in an iterative manner recognizing managerial risks evaluate interactive systems, including identification and correction of faults.
Mental models, leading to gulfs of execution and evaluation. Observing and describing the needs of users in context Methods for iterative modelling and prototyping
Observational and experimental methods for usability evaluation
","HCI--Foundations
HCI--Designing Interactions
HCI--User-Centered Design and Testing
",HCI,,,
CS-475,"This course covers the fundamental concepts and practical applications of computing systems security with a holistic view and an applied approach. Topics include: security concepts and services, physical, operational, and organizational security, the role of people in systems security, introduction to cryptography and public key infrastructure, computing systems hardening, secure code, and secure applications development.
The course emphasis is on developing, deploying, and maintaining a secure computing infrastructure with a hands- on approach.","AR--Machine-level representation of data
HCI--Human Factors and Security
IAS--Foundational Concepts in Security
IAS--Principles of Secure Design
IAS--Defensive Programming
IAS--Threats and Attacks
IAS--Network Security
IAS--Cryptography
IAS--Web Security
IAS--Security Policy and Governance
NC--Introduction
NC--Networked Applications
NC--Local Area Networks
OS--Security and Protection
PL--Language Translation and Execution
SP--Security Policies, Laws, and Computer Crimes
","AR
HCI
IAS
NC
OS
PL
SP",,,
CS430,"Introduction to DBMS concepts 
Data modeling and database design 
Relational database design
Query languages 
Storage and indexing 
Query processing 
Transaction processing 
Recovery","IM--Information Management Concepts
IM--Database Systems
IM--Data Modeling
IM--Relational Databases
IM--Query Languages
IM--Indexing
IM--Physical Database Design
IM--Transaction Processing
IAS--Foundational Concepts
IAS--Security Policy and Governance
","IM
IAS",,,
CSE 262,"Formulate and defend a position on an ethical question related to technology.
Describe the main ethical challenges currently posed by technology.
Describe the results of group discussion on ethical issues as a consensus position or mutually acceptable differences of opinion.
Analyze a proposed course of action in the context of various cultures, communities, and countries.
Demonstrate effective oral and written communication methods to explain a position on the social responsibilities of software developers and IT workers.
Moral theories and reasoning. Includes applying utilitarianism, deontological ethics, and virtue ethics. Discussion of relativism and religious ethics. 
Professional ethics. Includes definitions of “profession,” codes of ethics, and ACM-IEEE Software Engineering Code of Ethics and Professional Practice. 
Privacy. Definitions of privacy, the role of computing in contemporary privacy dilemmas. 
Intellectual and intangible property. Definitions of copyright, trademark, and patent, especially as they apply to computer applications and products. Fair use and other limitations to the rights of creators. Intangible property that is not “creative” in nature. 
Trust, safety, and reliability. Causes of computer failure, case studies (including Therac-25). 
Review and exams. 
Public presentations of independent research projects.
Effects of computing on society and personal identity. Social network analysis, Marshall McLuhan, bullying and trolling, crowd-sourced knowledge, cybernetics. 
Democracy, freedom of speech, and computing. The First Amendment, protection of children, state censorship, corporate censorship, case studies.
Computing and vulnerable groups. Case studies of effects of computing on prisoners, the elderly, the young, racial and ethnic minorities, religious minorities, people with disabilities, people with chronic diseases, developing countries, and so on. 
Autonomous and pervasive technologies. Cases related to data surveillance, moral responsibility for autonomous systems, robots, and systems that function with little human oversight.","SP--Social Context
SP--Analytical Tools
SP--Professional Ethics
SP--Intellectual Property
SP--Privacy and Civil Liberties
SP--Professional Communication
SP--Sustainability
SP--Economies of Computing
SP--Security Policies, Laws and Computer Crimes
HCI--Human Factors and Security
HCI--Collaboration and Communication
GV--Fundamental Concepts
","SP
HCI
GV",,,
CS 662,"An overview of AI, including search, knowledge representation, probabilistic reasoning and decision making under uncertainty, machine learning, and topics from NLP, information retrieval, knowledge engineering and multi-agent systems.","IS--Basic Search Strategies
IS--Basic Knowledge Rep.
IS--Basic Machine Learning
IS--Adv. KR
IS--Advanced Search
IS--Reasoning Under Uncertainty
IS--NLP
",IS,,,
Intelligenza Artificiale (Artificial Intelligence),"INTRODUCTION TO AI. Historical outline of the discipline. Fundamental concepts. Main research areas and application fields.
PROBLEM SOLVING AND SEARCH. State spaces and search methods. Non-informed and informed search strategies. Constraint satisfaction problems. Games and adversarial search.
LOGIC AND REASONING. The use of propositional and first order logic for the representation of knowledge. Knowledge-based reasoning as logical deduction. Inference procedures (forward chaining, backward chaining, resolution).
PLANNING. Plan formation and execution. The STRIPS model. Search in plan spaces. FOUNDATIONS OF AI. Some critical concepts and philosophical problems of AI.","IS--Fundamental Issues
IS--Basic Search Strategies
IS--Basic Knowledge Representation and Reasoning
IS--Advanced Search
IS--Advanced Representation and Reasoning
",IS,,,
CMSC 471,"Course description: “This course will serve as an introduction to artificial intelligence concepts and techniques. We will use the Lisp programming language as a computational vehicle for exploring the techniques and their application. Specific topics we will cover include the history and philosophy of AI, Lisp and functional programming, the agent paradigm in AI systems, search, game playing, knowledge representation and reasoning, logical reasoning, uncertain reasoning and Bayes nets, planning, and machine learning. If time permits, we may also briefly touch on multi-agent systems, robotics, perception, and/or natural language processing.”","IS--Fundamental Issues
IS--Basic Search Strategies
IS--Basic Knowledge Representation and Reasoning
IS--Basic Machine Learning
IS--Advanced Search
IS--Advanced Representation and Reasoning
IS--Reasoning Under Uncertainty
IS--Agents
IS--Advanced Machine Learning
PL--Functional Programming
","IS
PL",,,
Introduction to Artificial Intelligence,"Problem solving with search: uninformed, informed search, search for optimization (hill climbing, simulated annealing, genetic algorithms), adversarial search (minimax, game trees)
Logic and Planning: Propositional Logic, syntactic and model-based inference, first order logic (FOL), FOL inference complexity, unification and resolution, planning as FOL inference, STRIPS encoding, state space and plan space planning, partial order planning.
Probability and Machine Learning: Axioms of probability, basic statistics (expectation and variance), inference by enumeration, Bayesian networks, inference through variable elimination and Monte Carlo, intro to supervised machine learning, probabilistic classification with naive Bayes, parameter estimation with maximum likelihood, Perceptrons, parameter estimation with gradient descent, evaluating algorithms with cross validation, confusion matrices and hypothesis testing.
Decision making under uncertainty: Intro to sequential decision making, Markov decision processes, Bellman equation/optimality, value and policy iteration, model-based and model free reinforcement learning, temporal difference methods, Q learning, Function approximation.
I also have one lecture on natural language processing with a very brief introduction to language models, information retrieval and question answering (Watson), but students are not evaluated on this material.","IS--Fundamental Issues
IS--Basic Search Strategies
IS--Basic Knowledge Representation and Reasoning
IS--Basic Machine Learning
IS--Advanced Search
IS--Advanced Representation and Reasoning
IS--Reasoning Under Uncertainty
IS--Agents
IS--Natural Language Processing
IS--Advanced Machine Learning
",IS,,,
CS188,"This course will introduce the basic ideas and techniques underlying the design of intelligent computer systems. A specific emphasis will be on the statistical and decision-theoretic modeling paradigm. By the end of this course, you will have built autonomous agents that efficiently make decisions in fully informed, partially observable and adversarial settings. Your agents will draw inferences in uncertain environments and optimize actions for arbitrary reward structures. Your machine learning algorithms will classify handwritten digits and photographs. The techniques you learn in this course apply to a wide variety of artificial intelligence problems and will serve as the foundation for further study in any application area you choose to pursue.
Introduction to AI Search
Constraint Satisfaction Game Playing
Markov Decision Processes Reinforcement Learning Bayes Nets
Hidden Markov Modeling Speech
Neural Nets Robotics Computer Vision","IS--Fundamental Issues
IS--Basic Search Strategies
IS--Basic Knowledge Representation and Reasoning
IS--Basic Machine Learning
IS--Advanced Search
",IS,,,
Introduction to Artificial Intelligence,"What is AI? Foundations of AI, History of AI. Intelligent Agents
Agents and Environments, Structure of Agents. Problem Solving by Searching
Problem Solving Agents, Searching for Solutions, Uninformed Search Strategies:
Breadth-First Search, Depth-First Search, Depth-limited Search, Iterative Deepening Depth-first Search, Comparison of Uninformed Search Strategies.
Informed Search and Exploration
Informed (Heuristic) Search Strategies: Greedy Best-first Search, A* Search, Heuristic Functions, Local Search Algorithms, Optimization Problems.
Constraint Satisfaction Problems
Backtracking Search for CSPs, Local Search for CSPs. Adversarial Search
Games, Minimax Algorithm, Alpha-Beta Pruning. Reasoning and Knowledge Representation
Introduction to Reasoning and Knowledge Representation, Propositional Logic, First Order Logic, Semantic Nets, Other Knowledge Representation Schemes.
Reasoning with Uncertainty & Probabilistic Reasoning
Acting Under Uncertainty, Bayes’ Rule, Representing Knowledge in an Uncertain Domain, Bayesian Networks.
Machine Learning
Forms of Learning, Decision Trees and the ID3 Algorithm, Nearest Neighbor, Statistical Learning.","IS--Fundamental Issues
IS--Basic Search Strategies
IS--Advanced Search
IS--Basic Knowledge Representation and Reasoning
IS--Advanced Knowledge Representation and Reasoning
IS--Reasoning Under Uncertainty
IS--Basic Machine Learning
",IS,,,
Computer Networks I,"The course covers various aspects of computer networking, including (1) application layer protocols such as HTTP and SMTP, (2) transport layer (TCP/UDP) and congestion control, (3) routing and IP, and (4) link layer access protocols including Ethernet and 802.11.
Typical schedule:
Week 1: Network architecture, layering, and protocols.
Week 2: Principles of application-layer, application-layer protocols: FTP, SMTP, DNS. Week 3: HTTP, Web Caching and content delivery networks. Peer-to-peer applications. Week 4: Socket programming, introduction to transport layer protocols.
Week 5: Principles of reliable transfer, TCP reliable transfer implementation.
Week 6: TCP reliable transfer cont’d, RTT and timer, flow control, TCP connection management, state transition. Principles of congestion control.
Week 7: TCP congestion control. TCP performance: response time. TCP throughput Week 8: Introduction to network layer. Inside a router.
Week 9: IPv4 and IP Addressing. IPv6 and ICMP. Routing algorithms. Week 10: Internet routing architecture and protocols. Multicast routing. Week 11: Introduction to link layer. Multiple access protocols.
Week 12: Aloha protocol, CSMA. Efficiency of CSMA/CD. Ethernet. Week 13: LAN addressing and ARP. ATM networks.
Week 14: Wireless and mobile networks.","NC--Resource Allocation
NC--Mobility
",NC,,,
CS144,"CS144 is an introductory course on computer networking, specifiically the Internet. The course how the Internet works, ranging from how bits are modulated on wireless networks to application-level protocols like BitTorrent and HTTP. It also explains the principles of network design, such as layering, packet switching, and the end-to-end argument. Students implement a handful of low-level protocols and services, including reliable transport, IP forwarding, and a Network Address Translation device. Students gain experience reading and understanding  RFCs (Internet Protocol specifications) as statements oof what a system should do. The course grounds many of the concepts in current practice and recent developments, such as net neutrality and DNS security.","NC--Introduction
NC--Networked Applications
NC--Reliable Data Delivery
NC--Routing and Forwarding
NC--Local Area Networks
NC--Resource Allocation
NC--Mobility
AR--Interfacing and Communication
SF--Cross-Layer Communications
SF--State and State Machines
SF--Evaluation
SF--Resource Allocation and Scheduling
SF--Reliability through Redundancy
","NC
AR
SF",,,
Computer Networks,The description found in the course catalog says: This course explores the principles underlying the design of computer networks. We will examine techniques for transmitting information efficiently and reliably over a variety of communication media. We will look at the addressing and routing problems that must be solved to ensure that transmitted data gets to the desired destination. We will come to understand the impact that the distributed nature of all network problems has on their difficulty. We will examine the ways in which these issues are addressed by current networking protocols such as TCP/IP and Ethernet. Students will meet weekly with the instructor in pairs to present solutions to problem sets and reports evaluating the technical merit of current solutions to various networking problems.,"AR--Interfacing and Communication
CN--Fundamentals
DS--Discrete Probability
IAS--Network Security
IAS--Cryptography
NC--Introduction
NC--Networked Applications
NC--Data Delivery
NC--Routing and Forwarding
NC--Local Area Networks
NC--Resource Allocation
NC--Mobility
OS--Overview of Operating Systems
SF--State-State Transition-State Machines
SF--Parallelism
SF--Resource Allocation and Scheduling
SF--Reliability through Redundancy
","AR
CN
DS
IAS
NC
OS
SF",,,
CSCI 432,"This course explores the design and implementation of computer operating systems. Topics include historical   aspects of operating systems development, systems programming, process scheduling, synchronization of concurrent processes, virtual machines, memory management and virtual memory, I/O and file systems, system security, OS/architecture interaction, and distributed operating systems. The concepts in this course are not limited to any particular operating system or hardware platform. We discuss examples that are drawn from historically significant and modern operating systems including Unix, Windows, Mach, and the various generations of Mac OS.
The objective of this course is threefold: to demystify the interactions between the software written in other courses and hardware, to familiarize students with the issues involved in the design and implementation of modern operating systems, and to explain the more general systems principles that are used in the design of all computer systems.","OS--Overview of Operating Systems
OS--Operating System Principles
OS--Concurrency
OS--Device Management
OS--File Systems
OS--Fault Tolerance
OS--Scheduling and Dispatch
OS--Memory Management
OS--Security and Protection
OS--Virtual Machines
PD--Communication and Coordination
PD--Parallel Performance
OS--System Performance Evaluation
SF--Resource Allocation and Scheduling
SF--Parallelism
SF--Cross-Layer Communications
SF--Virtualization and Isolation
NC--Reliable Data Delivery
NC--Networked Applications
NC--Routing and Forwarding
","PD
SF
OS
NC",,,
CS 420,"The course will study the basic concepts, design and implementation of operating systems. Topics to be covered include an overview of basic computing hardware components, operating system structures, process management, memory management, file systems, input/output systems, protection and security. The Windows and UNIX/Linux operating systems will be reviewed as implementation examples.
Overview of an Operating System
Computing Hardware Overview
Process Management
CPU Scheduling
Deadlocks and Synchronization
Memory Management
File systems and storage
Distributed Systems","OS--Overview of Operating Systems
OS--Operating System Principles
OS--Security and Protection
OS--Real Time and Embedded Systems
OS--Virtual Machines
OS--Device Management
OS--Scheduling and Dispatch
OS--Concurrency
OS--Memory Management
OS--File Systems
SF--Resource Allocation and Scheduling
SF--Virtualization and Isolation
PD--Parallelism Fundamentals
PD--Distributed Systems
","OS
SF
PD",,,
CPSC 3380,"An operating system (OS) defines an abstraction of hardware and manages resource sharing among the computer’s users. The OS shares the computational resources such as memory, processors, networks, etc. while preventing individual programs from interfering with one another. After successful completion of the course, students will learn how the programming languages, architectures, and OS interact.
After a brief history and evolution of OS, the course will cover the major components of OS. Topics will include process, thread, scheduling, concurrency (exclusion and synchronization), deadlock (prevention, avoidance, and detection), memory management, IO management, file management, virtualization, and OS’ role for realizing distributed systems. The course will also cover protection and security with respect to OS.","OS--Overview of Operating Systems
OS--Operating System Principles
OS--Scheduling and Dispatch
SF--Resource Allocation and Scheduling
OS--Concurrency
OS--Memory Management
OS--File Systems
SF--Virtualization and Isolation
OS--Virtual Machines
OS--Device Management
PD--Parallelism Fundamentals
PD--Distributed Systems
OS--Security and Protection
OS--Real Time and Embedded Systems
","OS
SF
PD",,,
582219,"Understand OS services to applications, concurrency problems and solution methods for them, OS basic structure, principles and methods of OS implementation.
OS history, process, threads, multicore, concurrency problems and their solutions, deadlocks and their prevention, memory management, virtual memory, scheduling, I/O management, disk scheduling, file management, embedded systems, distributed systems.","OS--Overview of Operating Systems
AR--Memory System Organization
SF--Computational Paradigms
SF--Cross-Layer Communication
SF--Parallelism
OS--Operating System Principles
OS--Concurrency
PD--Communication- Coordination
OS--Scheduling and Dispatch
OS--Memory Management
OS--Security and Protection
OS--Virtual Machines
OS--Device Management
OS--File Systems
OS--Real Time and Embedded Systems
PD--Parallel Architectures
","OS
AR
SF
PD",,,
RU STY1,"The operating system abstracts hardware from software through a multitude of interfaces. Operating systems strive  to share devices, memory and other computational resources between competing users and programs in a fast, robust and accurate manner. The course will explain what’s under the hood of typical operating system abstractions, with special emphasis on the treatment of memory and the CPU, including assembly. At the end of the course students will understand how the OS interacts with hardware, how higher level systems interact with the OS, and be able to program against these lower-level abstractions.
The course covers many of the fundamentals of computer architecture and operating systems: x86 assembly, virtual memory, caches, processes, signals, threads, process communication, concurrency and deadlocks, scheduling, dynamic memory management, I/O management, virtual machines and the basics of network programming, file systems, and security.","OS--Overview of Operating Systems
OS--Operating System Principles
AR--Machine-level representation of data
AR--Assembly level machine organization
OS--Scheduling and Dispatch
SF--Resource Allocation and Scheduling
OS--Concurrency
OS--Memory Management
SF--Proximity
AR--Memory system org. and arch.
PL--Runtime systems
OS--File Systems
SF--Virtualization and Isolation
OS--Virtual Machines
IAS--Defensive Programming
OS--Security and Protection
SF--Support For Parallelism
NC--Networked applications
","OS
AR
SF
PL
IAS
NC",,,
Parallel Programming Principle and Practice,"This section covers the very basics of parallel computing, and is intended for someone who is just becoming acquainted with the subject. It begins with a brief overview, including concepts and terminology associated with parallel computing. The topics of parallel memory architectures and programming models are then explored. These topics are followed by a discussion on a number of issues related to designing parallel programs.
Why Parallel Programming? Parallel Architecture
Parallel Programming Models Parallel Programming Methodology Parallel Programming: Performance
Typical Issues Solved by Parallel Programming
This section concludes with several examples of how to parallelize simple serial programs. Including: threads and shared memory programming with TBB and OpenMP, SIMD programming model and Cuda & OpenCL, programming using the Message Passing Paradigm, parallel computing with MapReduce.
Shared Memory Programming and OpenMP: A High Level Introduction Case Studies: Threads programming with TBB
Programming Using the Message Passing Paradigm Introduction to GPGPUs and CUDA Programming Model Parallel Computing with MapReduce
Parallel Programming Case Study and Assignment","PD--Parallelism Fundamentals
PD--Parallel Decomposition
PD--Communication and Coordination
PD--Parallel Algorithms, Analysis, and Programming
PD--Parallel Architecture
PD--Parallel Performance
PD--Distributed Systems
PD--Formal Models and Semantics
",PD,,,
Introduction to Parallel Programming,"Introduction to Parallel Programming 
Overview of Parallel System Architectures
Modeling and Analysis of Parallel 
Computations Communication Complexity Analysis of Parallel Algorithms 
Parallel Programming with MPI
Parallel Programming with OpenMP 
Principles of Parallel Algorithm Design
Parallel Algorithms for Solving Time Consuming Problems (Matrix calculation, System of linear equations, Sorting, Graph algorithms, Solving PDE, Optimization)
Modeling the parallel program executing
","PD--Parallelism Fundamentals
PD--Parallel Decomposition
PD--Communication and Coordination
PD--Parallel Algorithms, Analysis, and Programming
PD--Parallel Architecture
PD--Parallel Performance
PD--Formal Models and Semantics
",PD,,,
CS453,"CS 453 teaches students how to implement compilers. Although most computer science professionals do not end up implementing a full compiler, alumni of this course are surprised by how often the skills they learn are used within industry and academic settings. The subject of compilers ties together many concepts in computer science: the theoretical concepts of regular expressions and context free grammars; the systems concept of layers including programming languages, compilers, system calls, assembly language, and architecture; the embedded systems concept of an architecture with restricted resources; and the software engineering concepts of revision control, debugging, testing, and the visitor design pattern.  Students write a compiler for a subset of Java called  MeggyJava. We compile MeggyJava to the assembly language for the ATmega328p microcontroller in the Meggy Jr RGB devices.
Regular and context free languages including DFAs and NFAs.
Scanning and parsing
Finite state machines and push down automata
FIRST and FOLLOW sets
Top-down predictive parsing
LR parse table generation Meggy Jr Simple runtime library
AVR assembly code including the stack and heap memory model Abstract syntax trees
Visitor design pattern
Semantic analysis including type checking Code generation for method calls and objects Data-flow analysis usage in register allocation Iterative compiler design and development Test-driven development and regression testing Revision control and pair programming","AL--Basic Automata Computability and Complexity
AL--Advanced Automata Computability and Complexity
PL--Event-Driven and Reactive Programming
PL--Program Representation
PL--Language Translation and Execution
PL--Syntax Analysis
PL--Compiler Semantic Analysis
PL--Code Generation
PL--Runtime Systems
PL--Static Analysis
PL--Language Pragmatics
SE--Software Verification and Validation
SE--Software Design
SE--Software Processes
","AL
PL
SE",,,
Csc 453,"This course covers the design and implementation of translator-oriented systems software, focusing specifically on compilers, with some time spent on related topics such as interpreters and linkers.
Background. Compilers as translators. Other examples of translators: document-processing tools such as ps2pdf and latex2html; web browsers; graph-drawing tools such as dot; source-to-source translators such as f2c; etc.
Lexical analysis. Regular expressions; finite-state automata and their implementation. Scanner- generators: flex.
Parsing. Context-free grammars. Top-down and bottom-up parsing. SLR(1) parsers. Parser-generators: yacc, bison.
Semantic analysis. Attributes, symbol tables, type checking.
Run-time environments. Memory organization. Stack-based environments.
Intermediate representations. Abstract syntax trees, three-address code. Code generation for various language constructs. Survey of machine-independent code optimization.
Interpreters. Dispatch mechanisms: byte-code, direct-threading, indirect-threading. Expression evaluation: Registers vs. operand stack. Just-in-time compilers. Examples: JVM vs. Dalvik for Java; Spidermonkey for JavaScript; JIT compilation in the context of web browsers.
Linking. The linking process, linkers and loaders. Dynamic linking.","PL--Program Representation
PL--Language Translation and Execution
PL--Syntax Analysis
PL--Compiler Semantic Analysis
PL--Code Generation
PL--Runtime Systems
",PL,,,
CSCI 434T,"Overview of compilation
Lexical analysis
Context-free grammars, top-down and bottom-up parsing, error recovery Abstract syntax trees, symbol tables
Lexical scoping, types (primitive, record, arrays, references), type checking Object-oriented type systems, subtyping, interfaces, traits
Three-address code and other intermediate representations
Code generation, data representation, memory management, object layout Code transformation and optimization
Class hierarchy analysis Dataflow analysis Register allocation
Run-time systems, just-in-time compilation, garbage collection","PL--Basic Type Systems
PL--Program Representation
PL--Language Translation and Execution
PL--Syntax Analysis
PL--Compiler Semantic Analysis
PL--Code Generation
PL--Runtime Systems
PL--Static Analysis
SE--Software Design
AR--Machine-level representation of data
AR--Assembly level machine organization
","PL
SE
AR",,,
Compilers,"The course covers the design, definition and implementation of programming languages. Students who have been through the class will be able to specify and implement language syntax using regular expressions or context free grammars as appropriate. Students will understand the distinction between no typing, static typing and dynamic typing and be able to implement simple static type systems as well as perform standard syntax analysis for scoping  of global, local, and class-visible names. Students will understand the difference between compile time and run time and be able to reason about and make decisions about what should be done at which time. Students will also be introduced to formal semantics as a form of specification of the behavior of a programming language and be able to use formal semantics in the construction of a compiler. Run-time structures such as the stack, activation records and static data such as string constants and dispatch tables are covered.  All of the topics up to this point will also be   used as part of a large course project to build a simple compiler for a statically typed object oriented language.
Additional topics include register allocation, garbage collection, dataflow analysis, and optimization.","PL--Object-Oriented Programming
PL--Basic Type Systems
PL--Program Representation
PL--Language Translation and Execution
PL--Syntax Analysis
PL--Compiler Semantic Analysis
PL--Code Generation
PL--Runtime Systems
PL--Static Analysis
PL--Type Systems
PL--Formal Semantics
PL--Language Pragmatics
",PL,,,
Languages and Compilers,"To describe structures (i.e., “formulas”) using grammars;
To parse, i.e., to recognize (build) such structures in (from) a sequence of symbols; To analyze grammars to see whether or not specific properties hold;
To compose components such as parsers, analyzers, and code generators; To apply these techniques in the construction of all kinds of programs;  To familiarize oneself with the concept of computability.
Context-free grammars and languages Concrete and abstract syntax
Regular grammars, languages, and expressions Pumping lemmas
Grammar transformations Parsing, parser design
Parser combinators (top-down recursive descent parsing) LL parsing
LR parsing
Semantics: datatypes, (higher-order) folds and algebras","PL--Program representation
PL--Language Translation and Execution
PL--Syntax analysis
PL--Compiler Semantic Analysis
PL--Code Generation
PL--Language Pragmatics
AL--Basic Automata Computability and Complexity
AL--Advanced Automata Theory and Computability
PL--Functional Programming
","PL
AL",,,
COMP 412,"Scanning, parsing, semantic elaboration, intermediate representation, implementation of the procedure as an abstraction, implementation of expressions, assignments, and control-flow constructs, brief overview of optimization, instruction selection, instruction scheduling, register allocation. (Full syllabus is posted on the website, listed above.)","AL--Basic Automata Computability and Complexity
AL--Advanced Automata Theory and Computability
PL--Program Representation
PL--Language Translation and Execution
PL--Syntax Analysis
PL--Compiler Semantic Analysis
PL--Code Generation
","PL
AL",,,
CSC 131,"A thorough examination of issues and features in programming language design and implementation, including language-provided data structuring and data-typing, modularity, scoping, inheritance, and concurrency.
Compilation and run-time issues. Introduction to formal semantics. Specific topics include: Overview of compilers and Interpreters (including lexing & parsing)
Lambda calculus
Functional languages (via Haskell)
Formal semantics (mainly operational semantics) Writing interpreters based on formal semantics Static and dynamic type-checking
Run-time memory management Data abstraction & modules
Object-oriented languages (illustrated via Java and Scala)
Shared memory parallelism/concurrency (semaphores, monitors, locks, etc.)
Distributed parallelism/concurrency via message-passing (Concurrent ML, Scala Actors)","PL--Object-Oriented Programming
PL--Functional Programming
PL--Event-Driven and Reactive Programming
PL--Basic Type Systems
PL--Program Representation
PL--Language Translation and Execution
PL--Syntax Analysis
PL--Compiler Semantic Analysis
PL--Advanced Programming Constructs
PL--Concurrency and Parallelism
PL--Type Systems
PL--Formal Semantics
PL--Language Pragmatics
PD--Parallelism Fundamentals
PD--Parallel Decomposition
PD--Communication & Coordination
","PL
PD",,,
CSCI 1730,"The course uses definitional interpreters and related techniques to teach the core of several programming languages.
The course begins with a quick tour of writing definitional interpreters by covering substitution, environments, and higher-order functions. The course then dives into several topics in depth:
Mutation
Recursion and cycles Objects
Memory management Control operators Types
Contracts
Alternate evaluation models","PL--Object-Oriented Programming
PL--Functional Programming
PL--Basic Type Systems
PL--Language Translation and Execution
PL--Runtime Systems
PL--Advanced Programming Constructs
PL--Type Systems
PL--Language Pragmatics
PL--Logic Programming
",PL,,,
CSC 2/454,"CSC 2/454 is an introduction to the design and implementation of programming languages.  From the design point  of view, it covers language features as tools for expressing algorithms. From the implementation point of view, it covers compilers, interpreters, and virtual machines as tools to map those features efficiently onto modern computer hardware. The course touches on a wide variety of languages, both past and present, with an emphasis on modern imperative languages, such as C++ and Java, and, to a lesser extent, on functional languages such as Scheme and Haskell, and dynamic (scripting) languages such as Perl, Python, and Ruby.  Rather than dwell on the features of  any particular language, it focus on fundamental concepts and on the differences among languages, the reasons for those differences, and the implications those differences have for language implementation.
Specific topics include:
formal aspects of syntax and semantics naming, scoping, and binding
scanning, parsing, semantic analysis, and code generation control flow, subroutines, exception handling, and concurrency type systems, data abstraction mechanisms, and polymorphism run-time systems, virtual machines, and storage management
imperative, functional, logic-based, and object-oriented programming paradigms programming environments and tools","PL--Object-Oriented Programming
PL--Functional Programming
PL--Basic Type Systems
PL--Program Representation
PL--Language Translation and Execution
PL--Syntax Analysis
PL--Compiler Semantic Analysis
PL--Runtime Systems
PL--Advanced Programming Constructs
PL--Concurrency and Parallelism
PL--Type Systems
PL--Language Pragmatics
",PL,,,
CSE341,"Internalize an accurate understanding of what functional and object-oriented programs mean Develop the skills necessary to learn new programming languages quickly
Master specific language concepts such that they can recognize them in strange guises Learn to evaluate the power and elegance of programming languages and their constructs
Attain reasonable proficiency in the ML, Racket, and Ruby languages and, as a by-product, become more proficient in languages they already know
Syntax vs. semantics
Basic ML programming: Pairs, lists, datatypes and pattern-matching, recursion Higher-order functions: Lexical scope, function closures, programming idioms Benefits of side-effect free programming
Type inference
Modules and abstract types Parametric polymorphism Subtyping
Dynamically typed functional programming Static vs. dynamic typing
Lazy evaluation: thunks, streams, memoization Implementing an interpreter
Implementing function closures
Dynamically typed object-oriented programming Inheritance and overriding
Multiple inheritance vs. interfaces vs. mixins
Object-oriented decomposition vs. procedural/functional decomposition
… a few more minor topics in the same basic space","PL--Object-Oriented Programming
PL--Functional Programming
PL--Basic Type Systems
PL--Program Representation
PL--Language Translation and Execution
PL--Advanced Programming Constructs
PL--Type Systems
PL--Language Pragmatics
",PL,,,
CSCI 334,"Functional programming concepts in Lisp Syntax, semantics, and evaluation strategies
ML programming, including basic types, datatypes, pattern matching, recursion, and higher order functions
Types, dynamic/static type checking, type inference, parametric polymorphism Run-time implementations: stacks, heaps, closures, garbage collection Exception handlers
Abstract types and modularity
Object-oriented programming and systems design
Object-oriented language features: objects, dynamic dispatch, inheritance, subtyping, etc. Multiple inheritance vs. interfaces vs. traits
Scala programming, including most basic language features. Language-based security mechanisms and sandboxing Models of concurrency: shared memory and actors","PL--Object-Oriented Programming
PL--Functional Programming
PL--Basic Type Systems
PL--Program Representation
PL--Language Translation and Execution
PL--Advanced Programming Constructs
PL--Concurrency and Parallelism
PL--Type Systems
PL--Formal Semantics
PL--Language Pragmatics
IAS--Secure Software Design and Engineering
PD--Parallelism Fundamentals
PD--Parallel Decomposition
PD--Communication & Coordination
","PL
IAS
PD",,,
Programming Languages and Techniques I,"Programming Design and Testing
Persistent Data Structures & Functional programming Trees & Recursion
Mutable Data Structures (queues, arrays) First-class computation (objects, closures) Types, generics, subtyping
Abstract types and encapsulation
Functional, OO, and Event-driven programming","AL--Fundamental Data Structures and Algorithms
DS--Graphs and Trees
HCI--Programming Interactive Systems
PL--Object-Oriented Programming
PL--Functional Programming
PL--Event-Driven and Reactive Programming
PL--Basic Type Systems
PL--Language Translation and Execution
PL--Advanced Programming Constructs
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Data Structures
SDF--Development Methods
","AL
DS
HCI
PL
SDF",,,
15-312,"This is a course on the theory of programming languages. Why study these principles? Because they are fundamental to the design, implementation, and application of programming languages.
Programming language design is often regarded as largely, or even entirely, a matter of opinion, with few, if any, organizing principles, and no generally accepted facts. Dozens of languages are in everyday use in research laboratories and in industry, each with its adherents and detractors. The relative merits of languages are debated endlessly, but always, it seems, with an inconclusive outcome. Some would even suggest that all languages are equivalent, the only difference being a matter of personal taste. Yet it is obvious that programming languages do matter!
Yet can we really say that Java is “better” (or “worse”) than C++? Is Scheme “better” than Lisp? Is ML “better”   than either of them? Can we hope to give substance to any of these questions? Or should we simply reserve them for late night bull sessions over a glass of beer? While there is certainly an irreducible subjective element in programming language design, there is also a rigorous scientific theory of programming languages that provides a framework for posing, and sometimes answering, such questions. To be sure there are good questions for which current theory offers no solutions, but surprisingly many issues are amenable to a rigorous analysis, providing definite answers to many questions. Programming language theory liberates us from the tar pit of personal opinion, and elevates us to the level of respectable scientific discourse.
Programming language theory is fundamental to the implementation of programming languages, as well as their design. While compiler writers have long drawn on the theory of grammars for parsing and on graph theory for register allocation, the methods used to compile well-known languages such as C do not rely on deep results from programming language theory. For relatively simple languages, relatively simple compilation methods suffice. But as languages become more sophisticated, so must more sophisticated methods be employed to compile them.
For example, some programs can be made substantially more efficient if code generation is deferred until some run- time data is available. A tight inner loop might be ``unrolled'' into a linear instruction sequence once the iteration bound is determined. This is one example of partial evaluation, a technique for program specialization that rests on 
results from programming language theory. To take another example, modern languages such as ML (and proposed extensions of Java) include what are known as parameterized types to support flexible code re-use. Parameterized types complicate compilers considerably because they must account for situations in which the type of a variable or function argument is not known at compile time. The most effective methods for handling parameterized types rely on typed intermediate languages with quite sophisticated type systems. Here again programming language theory provides the foundation for building such compilers.
Programming language theory has many applications to programming practice. For example, “little languages” arise frequently in software systems -- command languages, scripting languages, configuration files, mark-up languages, and so on. All too often the basic principles of programming languages are neglected in their design, with all too familiar results. After all, the argument goes, these are “just” scripting languages, or “just” mark-up languages, why bother too much about them? One reason is that what starts out as “just” an ad hoc little language often grows into much more than that, to the point that it is, or ought to be, a fully-fledged language in its own right. Programming language theory can serve as a guide to the design and implementation of special purpose, as well as general  purpose, languages.
Another application of the theory of programming languages is to provide a rigorous foundation for software engineering. Formal methods for software engineering are grounded in the theory of specification and verification. A specification is a logical formula describing the intended behavior of a program. There are all kinds of specifications, ranging from simple typing conditions (“the result is a floating point number between 0 and 1”) to complex invariants governing shared variables in a concurrent program. Verification is the process of checking that the implementation indeed satisfies the specification. Much work has gone into the development of tools for specifying and verifying programs. Programming language theory makes precise the connection between the code and its specification, and provides the basis for constructing tools for program analysis.
The theory of programming languages provides a “reality check” on programming methodology, that part of  software engineering concerned with the codification of successful approaches to software development. For example, the merits of object-oriented programming for software development are well known and widely touted. Object-oriented methodology relies heavily on the notions of subtyping and inheritance. In many accounts these two notions are confused, or even conflated into one concept, apparently because both are concerned with the idea of one class being an enrichment of another. But careful analysis reveals that the two concepts are, and must be, distinct: confusing them leads to programs that violate abstraction boundaries or even incur run-time faults.
The purpose of this course is to introduce the basic principles, methods, and results of programming languages to undergraduate students who have completed the introductory sequence in computer science at Carnegie Mellon. I intend for students to develop an appreciation for the benefits (and limitations) of the rigorous analysis of programming concepts.
The development is based on type theory, a general theory of computation that encompasses all aspects of programming languages, from the data with which we compute to the means by which we structure programs. Programming language “features” are viewed as manifestations of type structure. Basic data structures such as tuples arise as product types, trees and graphs arise as recursive types, and procedures arise as monadic function types. Each language concept is defined by giving its statics, which specify how it interacts with other parts of a program, and its dynamics, which specifies how it is executed on a computer. Type safety is the coherence of the statics with the dynamics; safety is proved as a mathematical theorem governing each language feature.  The specific topics vary from one semester to the next, but the course typically covers finite and infinite data structures, higher-order functions, continuations, mutable storage, data abstraction and polymorphism, so-called dynamic typing, parallel computation, laziness, and concurrency, all presented in a single unifying framework.","AL--Basic Analysis
DS--Sets, Relations,Functions
DS--Logic
DS--Proof techniques
OS--Concurrency
OS--Scheduling
PD--Parallelism Fundamentals
PD--Parallel Decomposition
PD--Parallel Algorithms, Analysis, and Programming
PL--Object-oriented Programming
PL--Functional Programming
PL--Event-Driven and Reactive Programming
PL--Basic type systems
PL--Program Representation
PL--Language Translation and Execution
PL--Compiler Semantic Analysis
PL--Advanced Programming Constructs
PL--Type Systems
PL--Formal Semantics
","AL
DS
OS
PD
PL",,,
15-150,"to write parallel functional programs
to analyze programs’ sequential and parallel time complexity
to write mathematical specifications and verify that programs meet them 
to structure programs using modules and abstract types
In the first three weeks of the course, students learn to write basic sequential functional programs on numbers and lists, to analyze their time complexity, and to prove mathematical correctness specifications using induction.  Parallelism is introduced in the fourth week:  Students learn to write data-parallel functional programs. They learn to analyze not just the usual sequential complexity of programs, but their parallel complexity, and how this influences algorithm and data structure design. An early example is sorting: One might think that mergesort would have logarithmic parallel complexity, because as a sorting problem is repeatedly divided in half, the length of the longest dependency is logarithmic. However, with lists as the data structure, mergesort has a linear parallel complexity, because just the operation of splitting a list into two halves takes linear time, independently of how many processors are available.  This motivates studying mergesort on trees, which has a sublinear parallel complexity. Because the parallelism is deterministic, students can reason about the behavior of their programs as if they were sequential, but run them in parallel.  These  programming, analysis, and verification skills continue to be interwoven throughout the remainder of the course, as students learn more advanced techniques.
Overall, students learn the following aspects of programming, analyzing, and proving:
The organization of programming languages by types
Computing by calculation: how programs are evaluated
Recursive functions and proofs by induction
Asymptotic analysis and recurrence relations
Tree parallelism
Datatypes, pattern-matching, and structural recursion/induction
Parametric polymorphism
Higher-order functions
Continuation-passing style
Exceptions
Cost semantics
Vector parallelism and map-reduce
Modules and abstract types
Imperative programming
Interaction of parallelism and effects
Laziness and streams
The course is taught in Standard ML. A variety of examples are used to teach these skills, including sequential and parallel sorting, map-reduce algorithms, regular expression matching, n-body simulation, and game-tree search. The assignments integrate parallel programming, analysis, and verification.  For example, in one key assignment,  students write and prove correct a regular expression matcher, combining an advanced programming technique  called continuation-passing-style with sophisticated inductive reasoning.  In another, students implement an algorithm for n-body simulation that has good sequential and parallel complexity, using a mix of tree- and vector- parallelism.","AL--Basic Analysis
AL--Algorithmic Strategies
AL--Fundamental Data Structures and Algorithms
AL--Advanced Data Structures Algorithms and Analysis
DS--Basic logic
DS--Proof techniques
PD--Parallelism Fundamentals
PD--Parallel Decomposition
PD--Parallel Algorithms, Analysis, and Programming
PL--Functional Programming
PL--Basic Type Systems
PL--Advanced Programming Constructs
PL--Concurrency and Parallelism
PL--Type systems
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Data Structures
SDF--Development Methods
SE--Software Verification and Validation
","AL
DS
PD
PL
SDF
SE",,,
CIS 133J,"Object-oriented programming concepts 
Objects, classes
State, behavior
Methods, fields, constructors 
Variables,  parameters Scope, 
lifetime
Abstraction, modularization, encapsulation 
Method overloading
Data types
Conditional statements, logical expressions 
Loops
Collection processing 
Using library classes 
UML class diagrams 
Documentation 
Debugging
Use of an IDE","AL--Fundamental Data Structures and Algorithms
PL--Object-Oriented Programming
PL--Basic Type Systems
PL--Language Translation and Execution
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Data Structures
SDF--Development Methods
","AL
PL
SDF",,,
Introduction to Computer Science,"This course has five distinct modules of roughly three weeks each:
(1) We begin with conditionals and recursion, practicing a functional problem-solving approach to a variety of homework problems. Python is the language in which students solve all of their assignments in this module.
(2) In the second module students investigate the fundamental ideas of binary representation, combinational circuits, machine architecture, and assembly language; they complete assignments in each of these topics using Python, Logisim, and a custom-built assembly language named Hmmm. This unit culminates with the hand- implementation of a recursive function in assembly, pulling back the curtain on the “magic” that recursion can sometimes seem.
(3) Students return to Python in the third module, building imperative/iterative idioms and skills that build from the previous unit’s assembly language jumps. Creating the Mandelbrot set from scratch, Markov text-generation, and John Conway’s Game of Life are part of this module’s student work.
(4) The fourth module introduces object-oriented skills, again in Python, with students implementing a Date calculator, a Board class that can host a game of Connect Four, and a Player class that implements game-tree search.
(5) The fifth module introduces mathematical and theoretical facets of computer science, including finite-state machines, Turing machines, and uncomputable functions such as Kolmogorov complexity and the halting problem. Small assignments use JFLAP to complement this in-class content, even as students’ work centers on a medium-sized Python final project, such as a genetic algorithm, a game using 3d graphics with the VPython library, or a text-analysis web application.","AL--Algorithmic Strategies
AL--Basic Automata, Computability and Complexity
AR--Digital logic and digital systems
AR--Machine level representation of data
AR--Assembly level machine organization
PD--Parallelism Fundamentals
PL--Object-Oriented Programming
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Data Structures
","AL
AR
PD
PL
SDF",,,
CpSc 215,"Major topics covered, in their approximate order of coverage, include the following:
 Java Basics: Introduction, interpreted versus compiled languages
Java Basics: Packages, classpaths, the Java compiler
Java Basics: The Eclipse integrated development environment
Java Basics: Parameter passing, shallow versus deep copying, value versus reference semantics
Java Classes: Fields, methods, accessibility modifiers
Java Classes: Constructors, overloading
Java Classes: Static fields, methods, initializers 
Design Patterns: Introduction, historical context 
Design Patterns: Singleton, Flyweight
Java Libraries: java.io.*, java.util.*, java.net.*, java.math.* 
Java Interfaces: Declaring, implementing, using as types 
Abstract Data Structures: Stacks, queues, sets
Analytical Reasoning: Introduction to interface contracts
Analytical Reasoning: Review of basic mathematical types (integers, tuples, strings, sets) 
Analytical Reasoning: Formal contract specifications
Abstract Data Structures: Partial maps (dictionaries), linked-lists 
Analytical Reasoning: Contract-based Testing and Tracing 
Design Patterns: Decorator
Analytical Reasoning: Assertion-checking wrappers (using Decorator) 
Java Exceptions: Concepts, declaring, throwing, catching
Java Inheritance: Concepts, type system integration, polymorphism 
Design Patterns: Template Method, Strategy
Algorithms as Components: Parameterized sorting implementations 
Java Generics: Concepts, syntax, subclassing issues
Design Patterns: Observer
Analytical Reasoning: Introduction to verification 
Analytical Reasoning: Software verification with objects 
Java Libraries: javax.swing.*, basic Swing development","SDF--Algorithms and Design
SDF--Fundamental Data Structures
SDF--Development Methods
PL--Object-Oriented Programming
PL--Basic Type Systems
SE--Software Design
SE--Formal Methods
","SDF
PL
SE",,,
CS1101,"Upon completion of this course, the student should be able to:
Understand when to use and write programs over structures, lists, and trees 
Develop data models for programming problems
Write recursive and mutually recursive programs using the Racket programming language 
Explain when state is needed in value-oriented programming
Develop test procedures for simple programs
Basic data types (numbers, strings, images, booleans) 
Basic primitive operations (and, or, +, etc.) 
Abstracting over expressions to create functions 
Documenting and commenting functions
What makes a good test case and a comprehensive test suite 
Conditionals
Compound data (records or structs)
Writing and testing programs over lists (of both primitive data and compound data) 
Writing and testing programs over binary trees
Writing and testing programs over n-ary trees
Working with higher-order functions (functions as arguments) 
Accumulator-style programs
Changing contents of data structures 
Mutating variables","AL--Fundamental Data Structures and Algorithms
PL--Functional Programming
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Data Structures
SDF--Development Methods
","AL
PL
SDF",,,
Data Abstraction and Data Structures,"Abstract data types and their implementation as data structures using object-oriented programming. Use of object- oriented principles in the selection and analysis of various ADT implementations. Sequential and linked storage representations: lists, stacks, queues, and tables. Nonlinear data structures: trees and graphs. Recursion, sorting, searching, and algorithm complexity.
Apply appropriate data structures and abstract data types (ADT) such as bags, lists, stacks, queues, trees, tables, and graphs in problem solving.
Apply object-oriented principles of polymorphism, inheritance, and generic programming when implementing ADTs for data structures.
Create alternative representations of ADTs either from implementation or the standard libraries. Apply recursion as a problem solving technique.
Determine appropriate ADTs and data structures for various sorting and searching algorithms. Determine time and space requirements of common sorting and searching algorithms.","SP--Professional Communication
SDF--Fundamental Data Structures
AL--Basic Analysis
","SP
SDF
AL",,,
Software Engineering Practices,"Typical outline of course topics includes:
Introduction to Software Engineering Models of Software Process
Project Planning and Organization Software Requirements and Specifications Software Design Techniques
Software Quality Assurance Software Testing
Software Tools and Environments","SE--Software Processes
SE--Software Project Management
SE--Requirements Engineering
SE--Software Design
SE--Software Construction
SE--Software Verification and Validation
SE--Software Evolution
SE--Formal Methods
",SE,,,
CS169,"Introduction to SaaS and software lifecycles: Waterfall, Spiral, RUP, Agile
Project Management: Pair programming and Scrum vs. Planning and Project manager 
Requirements Elicitation: User Stories vs. Contracts
Testing: Behavior Driven Design and Test Driven Development vs. Code then test 
Maintenance: Legacy, Refactoring, and Agile
Version control systems and releases 
Design patterns
Performance, reliability, and security","SE--Software Processes
SE--Software Project Management
SE--Tools and Environments
SE--Requirements Engineering
SE--Software Design
SE--Software Construction
SE--Software Verification and Validation
SE--Software Evolution
SE--Formal Methods
SE--Software Reliability
",SE,,,
SE-2890,"Introduction to software engineering practices 
Requirements and Use Cases
Software Reviews, Version Control, and Configuration Management 
Design: Object domain analysis, associations, behavior
Design and Design Patterns
Java Review (almost a year since last use) 
Code reviews and software testing  Week 10 - Applications to embedded systems
","SE--Software Processes
SE--Software Project Management
SE--Tools and Environments
SE--Requirements Engineering
SE--Software Design
SE--Software Verification & Validation
",SE,,,
Software Development,"This course presents introductory software engineering concepts including group development, large-scale project work, and theoretical aspects of object-oriented programming. The course expands on material from previous courses. Professional behavior and ethics represent an important component of this course.
This course is being used as an exemplar of how we incorporate communication outcomes into the core curriculum. The catalog description looks very much like other courses for software development; however, the real difference is in the execution of the course and how the communication skills are integrated into the assignments.
CSC 225 (Introduction to Software Development) is an experiential introduction to software development that focuses on learning basic software development principles and communications skills by developing an ongoing project (i.e., the project is carried over and developed during each iteration of the course).  Students work as   software development teams in the context of a workplace scenario where assignments are reports to a supervisor who uses the information reported for subsequent tasks such as reports for upper management. This strategy focuses students’ learning on selecting critical information for the supervisor to use and presenting it in an accessible and persuasive manner. Student learning occurs through two sets of linked assignments that use formative assessment to achieve competence at the first-semester sophomore level.","SP--Professional Communication
SDF--Development Methods
SE--Tools and Environments
SE--Process Management
","SP
SDF
SE",,,
CS2200,"The course represents a novel integrated approach to presenting side by side both the architecture and the operating system of modern computer systems, so that students learn how the two complement each other in making the computer what it is. The course consists of five modules, corresponding to the five major building blocks of any modern computer system: processor, memory, parallelism, storage, and networking. Both the hardware and system software issues are covered concomitantly in presenting the five units. Topics covered include
Processor design including instruction-set design, processor implementation (simple as well as pipelined with the attendant techniques for overcoming different kinds of hazards), processor performance (CPI, IPC, execution time, Amdahl’s law), dealing with program discontinuities (interrupts, traps, exceptions), and design of interrupt handlers
Processor scheduling algorithms including FCFS, SJF, priority, round robin, with Linux scheduler as a real world example
Memory system including principles of memory management in general (paging in particular) and the necessary hardware support (page tables, TLB), page replacement algorithms, working set concepts, the inter-relationship between memory management and processor scheduling, thrashing, and context switching overheads
Memory hierarchy including different organizations of processor caches, the path of memory access from the processor through the different levels of the memory hierarchy, interaction between virtual memory and processor caches, and page coloring
Parallel programming (using pthreads), basic synchronization (mutex locks, condition variables) and communication (shared memory), program invariants, OS support for parallel programming, hardware support for parallel programming, rudiments of multiprocessor TLB and cache consistency
Basics of I/O (programmed data transfer, DMA), interfacing peripherals to the computer, structure of device driver software
Storage subsystem focusing on hard disk (disk scheduling), file systems (naming, attributes, APIs, disk allocation algorithms), example file systems (FAT, ext2, NTFS)
Networking subsystem focusing on the transport layer protocols (stop and wait, pipelined, congestion control, windowing) , network layer protocols (Dijkstra, distance vector) and service models (circuit-, message-, and packet-switching), link layer protocols (Ethernet, token ring)
Networking gear (NIC, hubs/repeater, bridge, switch, VLAN)
Performance of networking (end-to-end latency, throughput, queuing delays, wire delay, time of flight, protocol overhead).","SF--Processor architecture
SF--Program discontinuities
SF--Processor performance metrics
SF--Principles of pipelining
SF--Processor Scheduling
SF--Scheduling performance metrics
SF--Memory management
SF--Page-based memory management
SF--Processor caches
SF--Main memory
SF--Memory system performance metrics
SF--Parallel programming
SF--OS support for parallel programming
SF--Architecture support for parallel programming
SF--Input/output
SF--Disk subsystem
SF--File systems
SF--Transport layer
SF--Network layer
SF--Link layer
SF--Networking gear
SF--Network performance
",SF,,,
CS61C,"Introduction to C: this includes coverage of the Hardware/Software Interface (e.g., machine and assembly language formats, methods of encoding instructions and data, and the mapping processes from high level languages, particularly C, to assembly and machine language instructions). Computer architectures: how processors interpret/execute instructions, Memory Hierarchy, Hardware Building Blocks, Single CPU Datapath and Control, and Instruction Level Parallelism. The concept of parallelisms, in particular, task level parallelism, illustrated with Map-Reduce processing; Data Level Parallelism, illustrated with the Intel SIMD instruction set; Thread Level Parallelism/multicore programming, illustrated with openMP extensions to the C programming language.","SF--Computational Paradigms
SF--Cross-Layer Communications
SF--State-State Transition-State Machines
SF--Parallelism
SF--Performance
SF--Proximity
SF--Virtualization and Isolation
SF--Reliability Through Redundancy
",SF,,,
CSE333,"The major goal of the course is to give students principles, skills, and experience in implementing complex,  layered systems. The course includes a quarter-long programming project in which students: (a) build rudimentary data structures in C, such as linked lists, chained hash tables, AVL trees; (b) use them to build an in-memory inverted index and file system crawler; (c) construct a C++-based access methods for writing indexes to disk and accessing disk-based indexes efficiently; and (d) construct a concurrent (threaded or event-driven) web server that exposes a search application.
A substantial portion of the course focuses on giving students in-depth C and C++ skills and experience with practical engineering tools such as debuggers, unit testing frameworks, and profilers. The course stresses the discipline of producing well-structured and readable code, including techniques such as style guidelines and code reviews. Additionally, the course covers topics such as threaded vs. event-driven concurrency, the Linux system call API, memory management, and some security and defensive programming techniques.
C programming
pointers, structs, casts; arrays, strings dynamic memory allocation
C preprocessors, multifile programs core C libraries
error handling without exceptions
C++ programming
class definitions, constructors and destructors, copy constructors
dynamic memory allocation (new / delete), smart pointers, classes with dynamic data inheritance, overloading, overwriting
C++ templates and STL
Tools and best practices compilers, debuggers, make
leak detectors, profilers and optimization, code coverage version control
code style guidelines; code review
Systems topics: the layers below (OS, compiler, network stack) concurrent programming, including threading and asynchronous I/O file system API
sockets API
understanding the linker / loader
fork / join, address spaces, the UNIX process model

","SF--Cross-layer Communications
SF--Support for Parallelism
SF--Proximity
AR--Assembly level machine org.
AR--Memory system org. and arch.
IM--Indexing
NC--Networked applications
OS--Principles
OS--Concurrency
OS--File systems
PL--Object-oriented Programming
PL--Event-Driven and Reactive Programming
SE--Tools and environments
SE--Software construction
SE--Software Verification and Validation
","SF
AR
IM
NC
OS
PL
SE",,,
IFSM304,"This course is a comprehensive study of ethics and of personal and organizational ethical decision making in the use of information systems in a global environment. The aim is to identify ethical issues raised by existing and emerging technologies, apply a structured framework to analyze risk and decision alternatives, and understand the impact of personal ethics and organizational values on an ethical workplace. 
apply relevant ethical theories, laws, regulations, and policies to decision making to support organizational compliance
recognize business needs, social responsibilities, and cultural differences of ethical decision making to operate in a global environment
identify and address new and/or increased ethical issues raised by existing and emerging technologies
foster and support an ethical workforce through an understanding of the impact of personal ethics and organizational values
apply a decision-making framework to analyze risks and decision alternatives at different levels of an organization
Technology-related Ethical Global issues (multi-national corporation) Decision making frameworks to technology-related ethical issues Organizational policy to address the technology-related ethical issue Research existing or emerging technology and its ethical impact
Study group presentation of research on existing or emerging technology and related ethical issues
a reflective piece on class learning as it applies to ethics in information technology","SP--Social Context
SP--Analytical Tools
SP--Professional Ethics
SP--Intellectual Property
SP--Privacy and Civil Liberties
SP--Professional Communication
",SP,,,
Technology Consulting in the Community,"This course has service, personal, and intellectual goals. Its service goal is to build the technical capacity of community organizations by providing effective technology consultants. To promote this effectiveness, and to enrich the intellectual preparation of Carnegie Mellon students, the course teaches students how to:
Establish a professional working relationship
Quickly assess a complex technical environment and identify problem areas 
Systematically bring structure to unstructured problems
Communicate technical ideas to an often non-technical audience 
Negotiate with the client acceptable deliverables for the consulting period 
Develop and execute a work plan
Use writing skills to maintain working documents that describe, plan, persuade, and coordinate work with others
Reflect and learn from their experience as well as the experience of their colleagues 
Broaden their understanding of the relevance of information systems and computer science.
Students routinely find the experience to be very personally satisfying. Student consultants learn that they can be effective in helping a community organization make better use of its computers, and help its staff and/or volunteers understand more about the technology. Students also often express that it is refreshing to step outside the grind of Carnegie Mellon life and do something worthwhile in the community.
Capacity-Building Consulting and Alternative Consulting Models Establishing and Managing Professional Relationships
Gathering and Analyzing Information Structuring unstructured problems Researching alternative solutions Analyzing Buy vs. Build
Technology Planning
Developing and Communicating a Scope of Work and Work Plan Modelling Technical Problem Solving
Communicating Difficult Technical Concepts to a Nontechnical Audience Documenting and Analyzing Outcomes
Formulating Persuasive Recommendations Synthesizing a Final Consulting Report Orally Presenting Project Outcomes Reflecting on the Consulting Experience","SP--Social Context
SP--Analytical Tools
SP--Professional Ethics
SP--Professional Communication",SP,,,
Issues in Computing,"In the context of widespread computer usage and society’s ever-growing dependence on computer technology, the course focuses on issues of ethics for the computing professional. A list of topics:
Introduction to Computer Ethics Survey of the tools of ethical analysis
Practical applications of the tools of ethical analysis Professional ethics
Privacy issues
Intellectual property protection issues Freedom of expression and the Internet
Ethical dimensions of computer system reliability Digital Divide
Social impact of technology in the workplace, in education, in healthcare","SP--Social Context
SP--Analytical Tools
SP--Professional Ethics
SP--Intellectual Property
SP--Privacy and Civil Liberties
SP--Professional Communication
SP--Economies of Computing
SP--Security Policies, Laws, and Computer Crime
",SP,,,
CSI 194,"Students learn ethics and moral philosophy as a means for providing a framework for ethically grounded decision making in the information age. Topics include the basic concepts and theories of ethics (moral reasoning and normative frameworks); basic concepts of argumentation and inductive reasoning; an introduction to cyberethics; issues related to networking and network security (threats related to breaches, countering breaches; privacy and personal autonomy (anonymity and accountability, identity theft); intellectual property and ownership rights (Digital Millennium Copyright Act, digital rights management, alternatives to the property model); computing and society, social justice, community, and self-identity digital divide, free speech and censorship; professional ethics and codes of conduct. Four hours are assigned to testing.","SP--Social Context
SP--Analytical Tools
SP--Professional Ethics
SP--Intellectual Property
SP--Privacy and Civil Liberties
SP--Security Policies, Laws and Computer Crimes
",SP,,,
Professional Development Seminar,"While the course covers Social and Professional Practice topics such as social context, analytical tools, professional ethics, intellectual property, privacy and civil liberties, this exemplar will focus on professional communications.
The course provides opportunities for students to develop their professional communication skills. This exemplar includes examples of four Professional Communication outcomes:
Write clear, concise, and accurate technical documents following well-defined standards for format and for including appropriate tables, figures, and references.
Develop and deliver a good quality formal presentation.
Plan interactions (e.g. virtual, face-to-face, shared documents) with others in which they are able to get their point across, and are also able to listen carefully and appreciate the points of others, even when they disagree, and are able to convey to others that they have heard.
Describe the strengths and weaknesses of various forms of communication (e.g. virtual, face-to-face, shared documents)
","SP--Professional Communication
",SP,,,
The Digital Age,"The course provides both an introduction to a broad range of computer science topics and discussion of social and ethical issues. Topics vary according to faculty interest and current events.
The technical topics for spring 2013 include: Algorithms & efficiency
Data representation 
Digital  logic 
Computer organization 
HTML
Usability 
Networks
Programming in Python
Discussion topics include: Ethics
Software reliability 
Digital data & copyright
Software as intellectual property 
Artificial intelligence
Data mining 
Privacy & security 
Online education 
Online voting 
Energy
","AL--Basic Analysis
AL--Basic Automata Computability and Complexity
AR--Digital logic and digital systems
AR--Machine-level representation of data
AR--Assembly level machine organization
GV--Fundamental Concepts
HCI--Foundations
NC--Introduction
NC--Networked Applications
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SP--Social Context
SP--Analytical Tools
SP--Professional Ethics
SP--Intellectual Property
SP--Privacy and Civil Liberties
SP--Sustainability
","AL
AR
GV
HCI
NC
SDF
SP",,,
COS 126,"We take an interdisciplinary approach to the traditional CS1 curriculum, where we teach students to program while highlighting the role of computing in other disciplines, then take them through fundamental precepts of the field of computer science. This approach emphasizes for students the essential idea that mathematics, science, engineering, and computing are intertwined in the modern world, while at the same time preparing students to use computers effectively for applications in computer science, physics, biology, chemistry, engineering, and other disciplines.
Instructors teaching students who have successfully completed this course can expect that they have the  knowledge and experience necessary to enable them to adapt to new computational environments and to effectively exploit computers in diverse applications. At the same time, students who choose to major in computer science get a broad background that prepares them for detailed studies in the field.
Roughly, the first half of the course is about learning to program in a modern programming model, with applications. The second half of the course is a broad introduction to the field of computer science.
Introduction to programming in Java. Elementary data types, control flow, conditionals and loops, and arrays.
Input and output. Functions  and libraries.
Analysis of algorithms, with an emphasis on using the scientific method to validate hypotheses about algorithm performance.
Machine organization, instruction set architecture, machine language programming. Data types, APIs, encapsulation.
Linked data structures, resizing arrays, and implementations of container types such as stacks and queues.
Sorting (mergesort) and searching (binary search trees). Programming languages.
Introduction to theory of computation. Regular expressions and finite automata. Universality and computability.
Intractability.
Logic design, combinational and sequential circuits. Processor and memory design.
Introduction to artificial intelligence.","SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Data Structures
SDF--Development Methods
PL--Object-Oriented programming
PL--Basic Type Systems
AL--Basic Analysis
AL--Algorithmic Strategies
AL--Fundamental Data Structures and Algorithms
AL--Basic Automata, Computability and Complexity
AL--Advanced Automata, Computability and Complexity
AR--Architecture and Organization
AR--Machine Representation of Data
AR--Assembly level machine organization
AR--Functional Organization
CN--Fundamentals
IS--Fundamental Issues
SP--History
","SDF
PL
AL
AR
CN
IS
SP",,,
CSCI 0190,"The course is a compressed introduction into programming along with basic algorithms and data structures. It interleaves these two. The data structures cover lists, trees, queues, heaps, DAGs, and graphs; the algorithms go up through classic ones such as graph shortest paths and minimum spanning trees. The programming is done entirely with pure functions. It begins with graphical animations (such as simple video games), then higher-order   functional programming, and encodings of laziness.","AL--Advanced Data Structures, Algorithms, and Analysis
PD--Parallelism Fundamentals
PL--Object-Oriented Programming
PL--Functional Programming
PL--Event-Driven and Reactive Programming
PL--Basic Type Systems
SE--Software Design
SE--Software Verification and Validation
","AL
PD
PL
SE",,,
CSC 221,"This course provides an introduction to problem solving and programming using the Python scripting language. The specific goals of this course are:
To develop problem solving and programming skills to enable the student to design solutions to non- trivial problems and implement those solutions in Python.
To master the fundamental programming constructs of Python, including variables, expressions, functions, control structures, and lists.
To build a foundation for more advanced programming techniques, including object-oriented design and the use of standard data structures (as taught in CSC 222).","SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Data Structures
SDF--Development Methods
PL--Object-Oriented Programming
PL--Basic Type Systems
PL--Language Translation and Execution
AL--Fundamental Data Structures and Algorithms
SP--History
","SDF
PL
AL
SP",,,
CSC 222,"Building upon basic programming skills in Python from CSC 221, this course focuses on the design and analysis of larger, more complex programs using the industry-leading language, Java. The specific goals of this course are:
To know and use basic Java programming constructs for object-oriented problem solving (e.g., classes, polymorphism, inheritance, interfaces)
To appreciate the role of algorithms and data structures in problem solving and software design (e.g., objected-oriented design, lists, files, searching and sorting)
To be able to design and implement a Java program to model a real-world system, and subsequently analyze its behavior.
To develop programming skills that can serve as a foundation for further study in computer science.","SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Data Structures
SDF--Development Methods
PL--Object-Oriented Programming
PL--Basic Type Systems
AL--Basic Analysis
AL--Fundamental Data Structures and Algorithms
SE--Software Design
SE--Software Construction
SE--Software Verification and Validation
","SDF
PL
AL
SE",,,
CSC 151,"This course introduces the discipline of computer science by focusing on functional problem solving with media computation as an integrating theme. In particular, the course explores
mechanisms for representing, making, and manipulating images. The course considers a variety of models of images based on pixels, basic shapes, and objects that draw.
The major objectives for this course include:
Understanding some fundamentals of computer science: algorithms, data structures, and abstraction. Experience with the practice of computer programming (design, documentation, development, testing, and debugging) in a high-level language, Scheme.
Learning problem solving from a functional programming perspective, including the use of recursion and higher-order procedures.
Sharpening general problem solving, teamwork, and study skills.
Fundamentals of functional problem-solving using a high-level functional language
abstraction
modularity
recursion, including helper procedures
higher-order procedures
analyzing of algorithms
Language elements
symbols
data types
conditionals
procedures and parameters
local procedures
scope and binding
Data types and structures
primitive types
lists
pairs, pair structures, and association lists
trees
raster graphics and RGB colors
objects in Scheme
Algorithms
searching
sorting
transforming colors and images
Software development
design
documentation
development
testing, including unit testing
debugging","AL--Fundamental Data Structures and Algorithms
AL--Algorithmic Strategies
GV--Fundamental Concepts
HCI--Designing Interaction
PL--Object-oriented Programming
PL--Type Systems
PL--Language Translation and Execution
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Structures
SE--Software Verification and Validation
","AL
GV
HCI
PL
SDF
SE",,,
CSC 161,"This course utilizes robotics as an application domain in studying imperative problem solving, data representation, and memory management. Additional topics include assertions and invariants, data abstraction, linked data structures, an introduction to the GNU/Linux operating system, and programming the low-level, imperative language C.
This course explores elements of computing that have reasonably close ties to the architecture of computers, compilers, and operating systems. The course takes an imperative view of problem solving, supported by programming in the C programming language. Some topics include:
imperative problem solving: top-down design, common algorithms, assertions, invariants
C programming: syntax and semantics, control structures, functions, parameters, macro processing, compiling, linking, program organization
concepts with data: data abstraction, integer and floating-point representation, string representation, arrays, unions, structures, linked list data structures, stacks, and queues
machine-level issues: data representation, pointers, memory management
GNU/Linux operating system: commands, bash scripts, software development tools","AL--Fundamental Data Structures and Algorithms
AR--Machine level representation of data
CN--Fundamentals
IAS--Fundamental Concepts
IS--Robotics
PL--Type Systems
PL--Program Representation
PL--Language Translation and Execution
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Structures
SDF--Development Methods
SE--Tools and Environments
SE--Software Design
SE--Software Verification and Validation
SP--Social Context
SP--Professional Communication
","AL
AR
CN
IAS
IS
PL
SDF
SE
SP",,,
CSC 207,"CSC 207, Algorithms and Object-Oriented Design, explores object-oriented problem solving using the Java programming language. Topics covered include principles of object-oriented design and problem solving, abstract data types and encapsulation, data structures, algorithms, algorithmic analysis, elements of Java programming, and an integrated development environment (IDE) (e.g., Eclipse).
Principles of object-oriented design and problem solving 
Objects and classes
Encapsulation, abstraction, and information hiding 
Inheritance
Polymorphism 
Unit testing 
Integration testing
Abstract data types, data structures, and algorithms
Dictionaries 
Hash tables
Binary search trees 
Priority queues 
Heaps
Algorithmic analysis
Upper-bound efficiency analysis; Big-O Notation
Comparison of results for small and large data sets 
Introduction of tight-bound analysis (Big-
Elements of Java programming
Basic syntax and semantics 
Interfaces and classes 
Exceptions
Strings
Arrays, ArrayLists, vectors 
Comparators; sorting 
Generics
Java type system 
Iterators
Introduction to the Java class library
An integrated development environment (IDE) (e.g., Eclipse)","AL--Basic Analysis
AL--Algorithmic Strategies
AL--Fundamental Data Structures and Algorithms
CN--Fundamentals
PL--Object-Oriented Programming
PL--Type Systems
PL--Language Translation and Execution
SDF--Algorithms and Design
SDF--Fundamental Programming Concepts
SDF--Fundamental Structures
SDF--Development Methods
SE--Software Design
SE--Software Construction
SE--Software Verification and Validation
SF--Resource Allocation and Scheduling
SP--Professional Ethics
","AL
CN
PL
SDF
SE
SF
SP",,,
COSC 1436,"Introduces the fundamental concepts of structured and object-oriented programming, and provides a comprehensive introduction to programming for computer science and technology majors. Includes topics on software development methodology, data types, control structures, functions, arrays, and the mechanics of running, testing, and debugging. This course assumes computer literacy",,"AL
IAS
GV
HCI
IM
NC
OS
PL
SDF
SE
SP",,,
COSC 1437,"Focuses on the object-oriented programming paradigm, emphasizing the definition and use of classes along with fundamentals of object-oriented design. Includes basic analysis of algorithms, searching and sorting techniques, and an introduction to software engineering processes. Students will apply techniques for testing and debugging software. (This course is included in the Field of Study Curriculum for Computer Science.)",,"AL
AR
IAS
DS
GV
HCI
IM
OS
PL
SDF
SE
SP",,,
COSC 2336,"Provides further applications of programming techniques, introducing the fundamental concepts of data structures and algorithms. Includes topics on recursion, fundamental data structures (including stacks, queues, linked lists, hash tables, trees, and graphs), and algorithmic analysis.",,"AL
CN
IAS
DS
GV
HCI
IM
NC
OS
PL
SDF
SE
SP",,,
COSC 2426,"Provides basic computer organization; machine cycle and digital representation of data and instructions; assembly language programming, assembler, loader, macros, subroutines, and program linkage.",,"AR
IAS
DS
HCI
IM
OS
PD
SDF
SE
SF
SP",,,
INF 120,"An elementary introduction to programming for those with no previous programming experience. Emphasis on understanding of algorithm development, procedural and object-oriented sofware development, secure coding, testing, and execution of program.",,"AL
AR
IAS
HCI
PL
SDF
SE
SP",,,
INF 260,"Object-oriented programming concepts and practice: types, decisions, loops, methods, arrays, classes; design and problem-solving. An intensive introduction intended for students with programming experience. Includes secure coding and data structures.",,"AL
IAS
GV
HCI
PD
PL
SDF
SE
SF
SP",,,
INF 282,"Core concepts for the design, creation, and manipulation of relational databases. Analysis of data requirements, conceptual modeling, definition of the relational model, relational database design and normalization, and database implementation; manipulation of relational databases using relational algebra with SQL.",,"IM
SP",,,
CIT 120,"Promotes understanding of computer programming and logic by teaching students to “think like a computer”. Covers skills needed to develop and design language-independent solutions to solve computer-related problems. Covers development and design basics including use of variables, control and data structures, and principles of command-line and object-oriented languages.",,"AL
AR
GV
HCI
IM
PL
SDF
SP",,,
CIT 111,"Presents a practical view of computer hardware and client operating systems. Covers computer hardware components; troubleshooting, repair, and maintenance; operating system interfaces and management tools; networking components; computer security; and operational procedures.",,"AR
IAS
NC
OS
SP",,,
CS 115,"Covers the basics of solving problems by computers. Emphasis is placed on how to design computer solutions, and then implement these designs using the C++ programming language. Important programming concepts such as data structures, control structures, top-down program design, program debugging, and program testing are covered.",,"AL
AR
IAS
PL
SDF
SE",,,
CS 215,"Covers basic data types, data structures and basic algorithm design and analysis techniques including recursion. Advanced programming skills in an object-oriented programming language is the goal. Students will also become familiar with basic software engineering methodology.",,"AL
AR
IAS
OS
PL
SDF
SE",,,
CS 216,"Implementation of large programming projects using object-oriented design techniques and software tools in a modern development environment. Software engineering topics to include: life cycles, metrics, requirements specifications, design methodologies, validation and verification, testing, reliability and project planning.",,"AR
CN
IAS
HCI
PD
PL
SDF
SE",,,
CS 275,"Topics in Discrete Mathematics aimed at application in Computer Science. Fundamental principles: set theory, induction, relations, functions, Boolean algebra. Techniques of counting: permutations, combinations, recurrences, algorithms to generate them. Introduction to graphs and trees.",,"AL
AR
IAS
DS",,,
CS 270,"This course provides an introduction to computer systems and explores computer architecture, operating systems, and networks from a programmer’s perspective. The course also introduces advanced programming and debugging tools. Topics include hardware instruction sets, machine language and C language program representations, linking/loading, operating systems (process management, scheduling, memory management, interprocess communication, and file systems), network programming (socket programming and web protocols), and common security attacks and solutions.",,"NC
OS
PD
SF",,,
EGR 101,"Introduces students to the engineering and computer science professions, College of Engineering degree programs, and opportunities for career path exploration. Topics and assignments include study skills, team development, ethics, problem solving and basic engineering tools for modeling, analysis and visualization.",,"SE
SP",,,
ITCS1010,"This course provides an introduction to problem-solving techniques, the steps of the program development cycle, and fundamental skills needed for programming in any computer language.Students will develop logic plans and create programs using core programming instructions to solve a variety of problems and will use one or more programming languages to gain experience with the complete program development process. The course includes an introduction to object-oriented and event-driven programming, and to the IDE (Integrated Development Environment).",,"PL
SDF",,,
ITON1011,"This course provides a historical perspective and an overview of operating systems significant to the development of microcomputer. Students will study vocabulary, usage, and basic functionality of a wide variety of previous and current versions.",,"AR
IAS
OS
SF
SP",,,
ITCS1870,"This course introduces students to the Python programming language. Students will write procedural and object-oriented applications. Student programs will include arithmetic operations, strings, functions, decisions and loops, and object-oriented constructs.",,"AL
AR
IAS
IM
PL
SDF
SP",,,
ITCS1820,"This course provides an introduction to application development, object-oriented programming, and the Java development system. Students will write object-oriented Java applications and applets using methods, variables, operators, strings, arrays, loops, selection statements, classes, inheritance, and encapsulation.",,"AR
IAS
IM
PL
SDF
SP",,,
ITCS2080,"This course introduces the basic principles and concepts of software engineering and provides the necessary foundation for subsequent SE courses at the upper division level. Topics include: basic terminology and concepts of software engineering; system requirements, modeling, and testing; object oriented analysis and design using UML; frameworks and APIs; client-server architecture; user interface technology; and the analysis, design, and programming of simple servers and clients.",,"IAS
IM
PD
PL
SDF
SE
SP",,,
ITCS2870,"This traditional computer science course introduces students to advanced data structure concepts including objects and inheritance, algorithm analysis, recursion, stacks, queues, lists, randomization, trees, sorting and searching, hash tables, and graphs and paths.",,"AL
IAS
DS
PL
SDF
SP",,,
ITCS2012,"This course provides an introduction to the foundations of discrete mathematics as they apply to computer science, and focuses on providing a solid theoretical foundation for further work. Topics include logic, set algebra, equivalence relations and partitions, functions, mathematical induction, cardinality, recurrence relations, basic combinatorial methods, and trees and graphs; with an emphasis on applications in computer science.",,"AL
DS",,,
ITCS2875,"This course provides a study of the principles of Von Neumann computer architecture, data representation, and memory addressing as well as processor organization and its impact on system and application software. It also includes discussion and utilization of assembly language and computer processor simulators.",,"AL
AR
IAS
OS
SDF
SF
SP",,,
ITDB1400,"This course provides an introduction to SQL (Structured Query Language) to create and maintain database objects, manipulate data, and to produce readable output displays and reports. Students will use the Oracle relational database management system along with DDL (Data Definition Language), DML (Data Manipulation Language), and SQL*Plus format commands. This course and ITDB 1405 Introduction to Oracle SQL/PL help students prepare for the Introduction to Oracle: SQL and PL/SQL certification exam. Although it is not a prerequisite for this course, students may benefit from taking a programming course prior to taking this course.",,IM,,,
ITON1205,"This course provides an introduction to local area networking concepts including current networking technology for LANs and WANs (Local and Wide Area Networks), and the Internet. It also helps students prepare for CompTIA's Network+ certification.",,"NC
SP",,,
MTHA301,"Review of propositional and predicate logic; methods of theorem proving; strong and weak induction; finite and infinite sets, set operations; introductions to computational complexity, theta and big-O notation; combinatorics, including permutations and combinations; discrete probability and binomial distribution.",,DS,,,
CSCA101,"Introduction to computing; algorithmic thinking, data structures, data transformation and processing, andprogramming in a media and communication context. ",,"SDF
SDF",,,
CSCA102,"Second course in programming languages and systems. Topics include data structures, assemblers, compilers, and syntactical methods; recursion, string manipulation and list processing; concepts of executive programs and operating systems; introduction to time-sharing systems. ",,"HCI
SDF
SE",,,
CSCA201,"Design and analysis techniques for solving domain specific problems, algorithm design strategies, distributedalgorithms.",,"AL
HCI
SE",,,
CSCA202,"Introductory course in computer organization and architecture. Topics include basic hardware and software structure, addressing methods, programs control, processing units, I-O organization, arithmetic, main-memory organization, peripherals, microprocessor families, RISC architectures, and multiprocessors. ",,"AR
AR",,,
CSCA301,"Topics include a review of logic circuits, bus structures, memory organization, interrupt structures, arithmetic units, input-output structures, state generation, central processor organization, control function implementation, and data communication, design of digital systems. ",,AR,,,
CSCA302,"Interfacing of microcomputers to peripherals or other computers for purposes of data acquisition, device monitoring and control, and other communications. The interfacing problem is considered at all levels including computer architecture, logic, timing, loading, protocols, and software laboratory for building andsimulating designs.",,"AR
OS",,,
CSCA303,Introduction to the design and performance analysis of local computer networks. Emphasis is on performance analysis of representative multi-access procedures.,,IM,,,
CSCA401,"Design of embedded digital systems; microcontrollers, embedded programs, real-time operating systems, design methodologies, hardware-software codesign, hardware modeling and computer-aided design, prototyping with FPGAs.",,"SF
AR",,,
CSCA402,"Critical examination of ethical problems associated with computer science and engineering. Legal and quasi-legal (i.e., policy and regulative) issues are also considered. Topics addressed include the process of ethical decision-making,  privacy  and  confidentiality,  computer  crime,  professional  codes  and  responsibilities,  software piracy, the impact of computers on society.",,SP,,,
ELEA201,Study of logic with an introduction to Boolean algebra; number systems and representation of information; use of integrated circuits to implement combinational and sequential logic functions and computing elements; organization and structure of computing systems.,,AR,,,
ELEA202,"DC resistive circuits, Kirchhoff's Laws, Nodal and Mesh emphasis, sources, Thevenin's and Norton's theorems, RC, RL, RCL circuit solutions with initial condition using homogenous or nonhomogenous ordinary differential equations having constant coefficients, sinusoidal steady state solution, three-phase circuits, complex frequency and network functions, frequency response, two-port parameters, magnetically-coupled circuits, Laplace transforms, and introduction to Fourier series and transforms..",,CN,,,
ELEA301,"Introduction to electronic materials and devices; principles of design; design of DC and AC circuits using diodes, bipolar junction transistors, field-effect transistors and use of transistors in digital circuits, physical design of simple gates, flip-flops, and memory circuits. ",,"SF
DS",,,
ELEA302,"Digital processing of signals, sampling, difference equations, discrete-time Fourier transforms, discrete and fast Fourier transforms, digital filter design",,"CN
CN",,,
MTHB202,"Review of propositional and predicate logic; methods of theorem proving; strong and weak induction; finite and infinite sets, set operations; introductions to computational complexity, theta and big-O notation; combinatorics, including permutations and combinations; discrete probability and binomial distribution. ",,DS,,,
CSCB101,"First  course  in  programming  languages,  syntax,  fundamental  data  structures,  algorithms  and  basic  problem-solving.",,SDF,,,
CSCB102,"Second course in programming languages and systems. Topics include assemblers, compilers, and syntactical methods;  string  manipulation  and  list  processing;  concepts  of  executive  programs  and  operating  systems;  introduction to time-sharing systems.",,SDF,,,
CSCB201,"Design and analysis techniques for solving domain specific problems, algorithm design strategies, distributedalgorithms, introduction to database systems and data modeling.",,"AL
SDF",,,
ECEB201,Study  of  logic  with  an  introduction  to  Boolean  algebra;  number  systems  and  representation  of  information;  use of integrated circuits to implement combinational and sequential logic functions and computing elements; organization and structure of computing systems.,,AR,,,
ECEB202,"DC  resistive  circuits,  Kirchhoff's  Laws,  Nodal  and  Mesh  emphasis,  sources,  Thevenin's  and  Norton's  theorems,  RC,  RL,  RCL  circuit  solutions  with  initial  condition  using  homogenous  or  nonhomogenous  ordinary differential equations having constant coefficients. Develop sinusoidal steady state solution.",,CN,,,
ECEB203,"Hands-on experience in using digital electronics by way of logic gates and integrated circuits; practical construction, testing, and implementation of combinational and sequential logic circuits.",,AR,,,
ECEB204,"Time-domain  and  frequency-domain  methods  for  modeling  and  analyzing  continuous  and  discrete-data  signals  and  systems,  Laplace  transforms,  Fourier  series  and  transforms,  sampling,  discrete  signals,  z-transforms, digital filters.",,"CN
CN",,,
ECEB205,"Principles  of  measurement  and  instruments  used  to  measure  parameters  and  dynamic  variables  in  electric  circuits, steady state and transient measurements in DC and AC circuits, and data analysis methods.",,CN,,,
ECEB206,"Introduction  to  electronic  materials  and  devices;  principles  of  design;  design  of  DC  and  AC  circuits  using  diodes, bipolar junction transistors, field-effect transistors and use of transistors in digital circuits, includingcombinational and sequential circuits.",,"SF
DS",,,
ECEB207,"Introductory  course  in  computer  organization  and  architecture.  Topics  include  basic  hardware  and  software  structure,  addressing  methods,  programs  control,  processing  units,  I-O  organization,  arithmetic,  main-memory organization, peripherals, microprocessor families, RISC architectures, and multiprocessors.",,"AR
AR",,,
ECEB301,"Basic operating system components and their functions, concurrency, scheduling and dispatch, memory and device management, file systems, and performance evaluation.",,"OS
AR",,,
ECEB302,"Computer bus structures, memory organization, interrupt structures, arithmetic units, input-output structures, central  processor  organization,  control  function  implementation,  pipelining,  performance  measurement,  and  distributed system models.",,"AR
AR",,,
ECEB303,"Laboratory experiments include interfacing memory and peripheral devices to a microcomputer, the design ofsoftware to control these devices, and the integration of computer hardware and software to control a system.",,AR,,,
ECEB304,"Hierarchical  modular  design  of  digital  systems,  design  modeling  with  a  hardware  description  language,  functional and timing simulation of digital systems, implementation in programmable logic devices and field-programmable  gate  arrays,  formal  verification,  fault  models  and  testing.    Designs  are  developed,  simulatedand implemented in field-programmable gate arrays in laboratory sessions.",,"AR
AR
DS",,,
ECEB305,"Digital  system  designs  are  developed,  modeled,  simulated  and  implemented  in  field-programmable  gate  arrays.",,"AR
AR
DS",,,
ECEB306,Design  and  analysis  of  single-stage  and  multistage  transistor  amplifiers;  biasing  for  integrated  circuit  design;small-signal  modeling;  operational  amplifier  circuits;  IC  design  techniques;  noise  and  RF  amplifiers;  D/A  andA/D converters. ,,SF,,,
ECEB307,"Introduction to engineering problems of a probabilistic nature. Systems transformations, statistical averages, simulation, and estimation of system parameters.",,AL,,,
ECEB401,"Foundations  of  software  design,  reasoning  about  software,  the  calculus  of  programs,  survey  of  formal  specification  techniques  and  design  languages,  human-computer  interaction,  input/output,  graphical  userinterfaces. ",,"SE
AR
HCI",,,
ECEB402,"Interfacing  of  microcomputers  to  peripherals  or  other  computers  for  purposes  of  data  acquisition,  device  monitoring  and  control,  and  other  communications.  The  interfacing  problem  is  considered  at  all  levels  including  computer  architecture,  logic,  timing,  loading,  protocols,  and  software  laboratory  for  building  and  simulating designs.",,"SF
AR
SF",,,
ECEB403,"Introduction  to  the  design  and  performance  analysis  of  computer  networks.  Architectures,  protocols,  standards  and  technologies  of  computer  networks;  design  and  implementation  of  networks  based  on  requirements; applications of information networks for data, audio and video communications; performance analysis.",,IM,,,
ECEB404,"Critical examination of ethical problems associated with computer engineering. Discussion of these problems is conducted within the framework of classical philosophical ethical theories. Legal and quasi-legal (i.e., policy and regulative) issues are also considered. Topics addressed include the process of ethical decision-making, privacy and confidentiality, computer crime, professional codes and responsibilities, software piracy, the impact of computers on society.",,SP,,,
CSCC101,"Review of propositional and predicate logic; methods of theorem proving; strong and weak induction; finite and infinite sets, set operations; introductions to computational complexity, theta and big-O notation; combinatorics, including permutations and combinations; discrete probability and binomial distribution. ",,DS,,,
CSCC102,"Introduction to computer science with emphasis on problem solving, programming and algorithm design; use of a high-level programming language for solving problems and emphasizing program design anddevelopment; topics include basic programming constructs, expressions, conditional statements, loop statements, functions, classes and objects, data types, arrays, and strings.",,"SDF
SE",,,
CSCC103,"Investigate  the  essential  properties  of  data  structures,  abstract  data  types,  and  algorithms  for  operating  on  them;  to  use  these  structures  as  tools  to  assist  algorithm  design;  introduction  of  searching  and  sortingtechniques.",,"SDF
SE",,,
CSCC201,"The study of representations for lists, stacks, queues, trees, and graphs; fundamental algorithms and theirimplementation for sorting, searching, merging, hashing, graph theoretic models, and recursive procedures. ",,"AL
SE",,,
CSCC202,"Internal organization of computers; registers, organization, control mechanisms; instruction sets,microprogramming, hardware interfaces; datapaths and pipelining; structural, data, and branch hazards; optimization; memory and caching; non-von Neumann designs.",,AR,,,
CSCC301,"A study of the internal design of operating systems; topics include memory management, multiprogramming, virtual memory, paging and segmentation; job and process scheduling; multiprocessor systems; device andfile management; thrashing, cache memory.",,"SDF
OS",,,
CSCC302,"Critical examination of ethical problems associated with computer technology; discussion of these problems conducted within the framework of classical philosophical ethical theories; legal and quasi-legal (i.e., policyand regulative) issues; topics addressed include the process of ethical decision-making, privacy and confidentiality, computer crime, professional codes and responsibilities, software piracy, the impact of computers on society.",,"HCI
SP",,,
CSCC303,"Technical introduction to data communication; OSI reference model, layer services, protocols, LANs, packet switching and X.25, ISDN; file transfer, virtual terminals, system management and distributed processing.",,IM,,,
CSCC304,"Systematic development of the concept of probability and random process theory; topics include probabilityand set theory, random variables, density and distribution functions, multivariate distributions, sampling statistics and distributions, central limit theorem, estimation and the philosophy of applied statistics; application to problems in the physical sciences and engineering. ",,AL,,,
CSCC401,"Study of computer architecture from classical to advanced perspectives; explores architectural characteristics of modern computer systems such as performance, instruction sets, assemblers, datapaths, pipelining, caching, memory management, I/O considerations, multiprocessing, wireless communication, and other advanced systems. ",,AR,,,
CSCC402,"Study of the nature of the program development task when many people, modules and versions are involvedin designing, developing and maintaining a large program or system; issues addressed include software design, specification, version control, testing, cost estimation and management; study of software systems in different domains such as database systems and HCI systems are also addressed.",,"SDF
SE
HCI",,,
CSCC403,"Experiments provide laboratory experience in the designs and operations of different types of computer architecture, memory architectures, I/O and bus subsystems, special purpose architectures, parallel processing, and distributed systems; explore hardware and software issues and tradeoffs in the design, implementation, and simulation of working computer systems.",,AR,,,
CSCC404,"Fundamental principles of modeling and simulation; methodology including model formation, design of simulation experiments, analysis of generated data and validation of results; survey of applications; designproject.",,AR,,,
ENGC101,"Overview of the engineering profession, its genesis and evolution to the present day, including fields of engineering and career paths within same; study of ethics and with emphasis on the engineering workplace; engineering design and analysis techniques, development of problem-solving skills, communication skills;student design projects.",,"HCI
SP",,,
ENGC201,Principles of linear system analysis introduced through the study of electric networks containing lumped circuit elements; DC resistive circuit analysis techniques; transient  analysis with capacitors and inductors; steady-state AC analysis using phasors to study impedance and resonance.,,CN,,,
ENGC202,"nternal structure of computers; number systems and arithmetic, two’s-complement arithmetic; Booleanalgebra, logic design, gates,  synthesis of combinatorial networks; flip-flops, registers, sequential circuits, control mechanisms, timing; data and control flow in a typical computer. ",,AR,,,
ENGC203,"The laboratory is designed to enhance the understanding and proper use of selected principles from circuit theory; experiments introduce basic measurement techniques and problem solving; comparisons between theoretical and experimental results are investigated in a written laboratory report; topics include metercalibration, oscilloscope use, transient and steady-state analysis, AC parallel and series circuits, electricfilters, Thevenin’s theorem, and operational amplifiers.",,CN,,,
ENGC301,"Principles of semiconductor electronic devices: operational amplifiers, diodes and bipolar junction transistors; amplifier specification and external characteristics; analysis of electronic circuits using graphicalmethods and electronic device models; analysis and design of electronic application circuits such as rectifiers, clippers, inverting amplifiers and voltage followers; introduction to digital simulators.",,SF,,,
ENGC302,"Hands-on experience in using digital electronics by way of integrated circuits without engineering bias; practical construction, testing, and implementation of circuits useful in digital circuits and modules.",,AR,,,
ENGC303,"Implementation of microprocessors and microcontrollers in embedded digital computer systems; topicsinclude architecture, operations, software; hardware/software design methodology.",,SF,,,
ENGC304,Analysis of discrete time and continuous-time signals and systems; development of Fourier analysis; determination of transfer functions and impulse response of linear systems; design of continuous-time electric filters; sampling and the Nyquist criterion; introduction of state-variable concepts.,,CN,,,
ENGC305,Study of basic methods of circuit design are presented followed by execution analysis and optimization using algorithms developed by the student; emphasis will be on structured design methodologies for MOS systems with focus on performance considerations and design methodologies for VLSI IC chips; VLSI ASIC design software packages are used to design and simulate a small CMOS chip.,,DS,,,
ENGC306,"The  laboratory  is  designed  to  enhance  the  understanding  and  proper  use  of  selected  principles  of  electronic  circuits; topics cover diode and transistor applications, including feedback analysis and design, BJT and FET amplifier design and the analysis of measurement limitations of selected instruments.",,SF,,,
ENGC401,"Study of basic digital communication principles; digital spectral analysis, discrete Fourier transforms, sampling and quantization; digital signal processing basics such as transformation, filtering, and basic audio and image processing concepts.",,CN,,,
ENGC402,"The interrelationship between technology and society in the past and present is established; technological achievements of major civilizations from the Egyptians and Babylonians through the classical Mediterranean, Medieval, Renaissance, and modern industrialized eras; worldviews of different cultures toward technology are investigated, as well as both the desired and the unforeseen consequences of technological change.",,"HCI
SP",,,
ENGC403,Integration of physical principles with mathematical analysis and/or experimental techniques; develop a basis for an individually required design project in computer engineering; design of suitable project. ,,AR,,,
CPED101,"Range of illustrations of the applicability of developments in computer engineering exhibiting the use of hardware and software systems in a variety of different contexts including simple devices, embedded systems, systems with an important human computer interface, systems involving computer communications, and systems of a sensitive nature such as safety critical systems; issues involved in electronics, software, human computer interface, use of tools, systems, and the engineering dimension.",,AR,,,
CPED201,The fundamental elements of digital logic and their use in computer construction; register level description ofcomputer execution and the functional organization of a computer; essential elements of computer architecture; major functional components of a modern computer system.  Characteristics of machine codes: instruction formats and addressing modes. The elements of machine and assembly code programming.  Memory hierarchy and organization. Interfacing and communication between processor and peripheraldevices. Experiments provide laboratory experience in hardware and software to interface memory and peripheral components to a computer system.,,AR,,,
CPED202,"Critical examination of ethical problems associated with computer engineering; discussion of these problems conducted within the framework of classical philosophical ethical theories; legal and quasi-legal (i.e., policyand regulative) issues; topics addressed include the process of ethical decision-making, privacy and confidentiality, computer crime, professional codes and responsibilities, professional practice, systemsecurity, impact of computers on society. ",,SP,,,
CPED203,"The functionality and role of an operating system; major components, design considerations; layered approach to the design of an operating system, including the major influences on design, including high level languages,  real-time issues, networking, multimedia, security; file systems, hierarchical design; process management, scheduling strategies; resource allocation strategies including memory allocation strategies; segmentation, virtual memory, cache; concurrency, synchronization principles, deadlock avoidance; operating system routines; class libraries; scripting languages, capabilities and possibilities; device management, buffering issues, interrupts, device drivers; technical issues, and in particular the software architectures,  associated with net-centric computing.  Basic concepts in networking and communications. Security issues.",,"OS
IM",,,
CPED204,"Approaches to the development of systems in computer engineering; the special problems and the issues; concept of a life cycle, nature of life cycle models, phases of typical life cycles, quality issues; process and process improvement; issues of teams, team selection, roles in teams, elements of team work; selection ofsupport tools, standards and technologies; techniques and approaches associated with the different phases; special problems of design and the issues associated with  tradeoffs, special problem of hardware/software tradeoffs; testing; maintenance; project management.",,AR,,,
CPED301,"Computers and computer communication; problems of security, reliability; speeds, capacity measures, reliability measures; physical realities and the limitations; wireless possibilities; communications network architectures, computer network protocols; variants on the basic topologies; local and wide area networks; client server computing; data integrity and data security, problems and solutions; performance issues; network management; nature and special problems of mobile computing.",,IM,,,
CPED302,"Nature of embedded systems, particular problems, special issues; role in computer engineering; embedded microcontrollers, embedded software; real time systems, problems of timing and scheduling; testing and performance issues, reliability; low power computing, energy sources, leakage; design methodologies, software tool support for development of such systems; problems of maintenance and upgrade; networked embedded systems.",,SF,,,
CPED303,"Design principles associated with modern computer architectures; performance and cost considerations; architectural features influenced by such features as operating systems and window systems, high level languages, networking, security considerations; processor implementation strategies, micro-programming, pipelining, CISC and RISC, vector processors; memory hierarchy, cache, virtual memory organization for high performance machines; special purpose components and devices; simple demonstrations provide experience in the designs and operations of different types of computer architecture such as memory architectures, I/O and bus subsystems, special purpose architectures, parallel processing, and distributed systems; explore hardware and software issues and tradeoffs in the design, implementation, and simulation ofworking computer systems. ",,AR,,,
CPED401,"Project initiation, management, and success, appraisal and risk, quality systems and implementation, environmental impacts; contracts, costs, finance, planning, organization, personnel management; contract strategies and policy; turnkey operations, global issues, international commerce, negotiation, customs, and law. ",,"AR
SP",,,
CPED405,"Discusses current trends towards universal presence of mobile computing, computer networks, and wireless communication; how network devices are aware of their environment; identification of current status, fundamental issues, future problems and applications; current research topics in the area of ubiquitous and pervasive computing; design issues; integration and processing of sensor-based input; wireless infrastructures; security and user-interfaces; integrated, multimodal input and output and application areas.",,IM,,,
CSCD101,"Representation of data of different kinds; elements of machine code and assembly language coding; role andfunction of an operating system (including networking, e-mail and distributed systems) and the associated functionality; programming language level, facilities and libraries; applications including description of the functionality of the relevant software (word processors, databases, spreadsheets) and their use; human interaction, importance and relevance of interface software; elements of computer interaction including desirable properties of screen design and interfaces; fundamentals of the web; use of browsers and search engines in information retrieval; simple web page construction; illustrations of information servers; search strategies; information storage and retrieval; legal issues of copyright and intellectual property rights.",,"HCI
SDF",,,
CSCD201,"Elementary ideas and results on discrete probability; mathematical foundations needed to support measures of complexity and performance; basic concepts from counting; concepts of graphs and trees; basic strategies that underpin the design of algorithms; fundamental algorithms for counting, searching, sorting, manipulation of hash tables, symbol tables, queues, trees, and graphs; distributed algorithms for certain simple tasks; fundamentals of computability theory; relevance to security; relevance of design and analysis of algorithms to software design and implementation.",,"AL
SDF",,,
CSCD202,"Relevance of information management in the context of computer engineering; introduction to database systems and the relational model; normal forms and their benefits; building databases, underlying methodology, database languages; issues associated with information retrieval; SQL, its use and power; information systems in the context of networks, intranets, extranets; special systems and applications; particular issues, access, security, and integrity; relevant legal and ethical issues. ",,SDF,,,
CSCD301,"History of the development of languages; different flavors of languages, programming, scripting, mark-up, specification; language role, characteristics, comparisons; different programming paradigms, significance, main areas of application, imperative, functional, logic, object-oriented languages; concurrency; aims and objectives of language design; principles of language design, including limitations; interaction between language design and the translation process; basic approaches to translation; aims and objectives of translation; major components of translation and their implementation; library design, separate compilation, design considerations, and implementation.",,SE,,,
ELED101,"Introduction to basic electrical quantities such as charge, current, voltage, energy and power.  Introduction to classical dynamics, electrostatics, and magnetism.  Basic laws such as Kirchoff’s law,  Ohm’s law; Thevenin’s theorem, Norton’s theorem.  Resistive circuits and networks, reactive circuits and networks.  Capacitance,  inductance, damping, transformers. Electronic properties of materials. Diodes and diode circuits.  MOS transistors and biasing. MOS logic families.",,"CN
SF
DS",,,
ELED102,"Basic switching theory, combinational logic circuits; modular design of combinational circuits; memoryelements; sequential logic circuits; digital systems design; understanding and analysis of the basic types of circuits and electrical networks as used in electronics, communications, and power applications.",,"AR
DS",,,
ELED201,"Review of MOS families and circuits; bipolar transistors and logic families; digital parameters and issues; storage elements; interfacing logic families and standard busses; fundamentals of digital systems design including state diagrams; modeling and simulation, use of relevant tools; use of CAD tools; design carried out for testability and for other such characteristics; problems of verification and validation; formal verification. ",,"AR
SF",,,
ELED202,"Data conversion issues, A/D and D/A circuits; electronic voltage and current sources; low and high pass filters, Chebyshev and Butterworth approximations, Sallen-Key; negative feedback; operational amplifier circuits; introduction to bipolar junction transistors.",,SF,,,
ELED301,"The concept of signals and systems, both continuous and discrete-time; signal manipulation; signal symmetry and orthogonality; system linearity and time invariants; system impulse response and step response; frequency response, sinusoidal analysis, convolution, and correlation; sampling in time and quantizing in amplitude; Laplace transform; Fourier analysis, filters; analysis of discrete time signals and systems using z-transforms; inverse transformation procedures.",,"CN
CN",,,
ELED302,"Review of complex numbers, superposition, compound systems; frequency domain representation; Laplace transform representation; system representation in time domain; first and second order systems; damping,stability, poles, and zeros; feedback block diagrams; open loop and closed loop systems; steady state error; introduction to Bode plots and Bode plot analysis introduction to proportional control.",,CN,,,
ELED303,"Purpose of digital signal processing (DSP), theories and concepts, role of DSP in the context of computer engineering; analysis of digital spectra; application of discrete Fourier transforms, convolution types; filtering, digital filtering; transforms; discrete time signals; sampling issues; applications to include imageprocessing, audio processing; use of relevant software tools.",,CN,,,
SWED101,"Introduction to the concepts of requirements and specification; basic concepts associated with programming languages and their translation; elementary programming, primitive data types, operations, simple language constructs; simple algorithms and problem solving involving counting, scanning elements, selecting elements (such as maxima and minima), iteration; use of arrays, strings and simple pre-defined classes; routines or methods as a fundamental abstraction mechanism; principles associated with and the design and constructionof these; use of simple libraries, classes; simple aspects of quality of software; the related activities of software testing and validation. ",,"SDF
SE",,,
SWED102,"Concepts from predicate logic; ideas from object-oriented programming, methods, classes, informationhiding, and inheritance; fundamental algorithms, sorting and searching; fundamental data structures, linkeddata structures, user defined classes; concept of recursion, benefits and problems; exception handling; using APIs; simple graphics programming; concept of software design.",,"SDF
SE",,,
SWED201,"Concepts of open source, shareware, freeware; issues of quality, conditions of use, availability; issues of software reuse; program libraries, software components; creation of additional libraries and othercomponents; application program interfaces; use of separate compilations; use of software libraries and othersoftware components; problems of building large systems; assessment of software including interfaces suchas metrics and measures; criteria; simple principles of interface design; multimedia issues; special problems associated with color, sound, video and multimedia; advanced issues in object-oriented programming, modularity, storage management issues, parallelism; client server computing, different kinds of servers, the role of middleware; overview of the software support needed for client services and server services; illustrations of the use of object oriented techniques applied to the building of certain commonly used software tools; applets and servelets; simple design patterns; nature of the software life cycle and its different phases; concept of process; differences across various developments and the reasons for the differences. ",,"HCI
SDF
SE",,,
SWED301,"Software engineering, role of software engineers; evaluation of software and principles thereof, software lifecycle models; notions of requirements, specification, design implementation; main techniques; importantof maintenance; quality concerns at all stages of the software development process; concept of process; software process maturity models; software process improvement; aspects of software engineering, important benefits of and good practice in software re-use; verification and validation; the use of metrics; selection of and use of tools; the nature and structure of teams; human computer interface as a software engineering activity; related life cycles; standards; use of relevant libraries; importance of practical activity; group activityas an important skill for these engineers. ",,SE,,,
MTHD101,"Basic mathematical notions of sets, relations, and functions, and operations involving the same; logic and its role, propositional logic, truth tables, issues of equivalence, limitations; predicate logic, its power and its limitations, relevance in the context of computer engineering; proof techniques; commonly occurring mathematical concepts such as graphs, trees; representational issues; relevance of these to computer engineering; recursion; counting; combinatorics; relevance of these ideas to computer engineering. ",,DS,,,
MTHD102,"Randomness, finite probability space, probability measure, events; conditional probability, independence, Bayes’ theorem; discrete random variables; binomial and Poisson distributions; concepts of mean and variance; continuous random variables; exponential and normal distribution, probability density functions, calculation of mean and variance; central limit theorem and the implications for the normal distribution; purpose and the nature of sampling; nature of estimates, point estimates, interval estimates; maximum likelihood principle approach, least squares approach; confidence intervals; estimates for one or two samples; development of models and associated hypotheses; nature of hypothesis formulation, null and alternate hypotheses, testing hypotheses; criteria for acceptance of hypothesis t-test, chi-squared test; correlation and regression; Markov processes, discrete time systems and continuous time systems; queuing theory including system simulation and modeling, queuing methods; use of appropriate statistical packages. ",,AL,,,
CSCA101,Introductory problem solving and computer programming using object-oriented techniques; theoretical and practical aspects of programming and problem solving,,SDF,,,
CSCA102,"Object-oriented problem solving, design, and programming; introduction to data structures, algorithm design and complexity",,SDF,,,
CSCA201,"Non-linear data structures and their associated algorithms; trees, graphs, hash tables, relational data model, file organization; advanced softwaredesign and development",,SDF,,,
CSCA301,"Study of complexity of algorithms and algorithm design; tools for analyzing efficiency; design of algorithms, including recurrence, divide-and-conquer, dynamic programming and greedy algorithms",,AL,,,
CSCA302,"Design of software systems for use in distributed environments; client/Server models, multithreaded programming, server-side web programming, graphical user interfaces, group projects involving client/server systems",,"SDF
SF",,,
ECEA101,"What it means to be an engineer, engineering ethics, engineering modeling, the design process, areas of ECE, communication skills",,SP,,,
ECEA201,"Binary codes, Booleanalgebra, combinational logic design, flip-flops, counters, synchronous sequential logic, programmable logic devices, MSI logic devices, adder circuits",,SF,,,
ECEA202,"Architecture of microprocessor-based systems; study of microprocessor operation, assembly language, arithmetic operations, and interfacing",,"SF
AR
SF",,,
ECEA203,Fundamentals of electric circuits and network analysis; transient analysis and frequency response of networks; introduction to operational amplifiers; AC power,,SF,,,
ECEA301,Operation circuit models and application of diodes and field-effect and bipolar junction transistors; electronic instrumentation; foundations of electrical communications systems,,SF,,,
ECEA302,"Modern digital design techniques using logic synthesis, hardware description languages; field programmable gate arrays, and modular building blocks",,SF,,,
ECEA303,"Modeling of analog and discrete-time signals and systems, time domain analysis;Fourier series, continuous and discrete-time Fourier transforms and applications, sampling, z-transform, state variables",,SF,,,
ECEA304,The concepts and practices of data communications and networking to provide the student with an understanding of the hardware and software used for datacommunications,,"NC
OS",,,
ECEA305,"Detailed design and implementation of a stored-program digital computer system; designs for the CPU, I/O subsystems, and memory organizations;ALU design and computer arithmetic",,AR,,,
ECEA401,"Lectures on teaming, project management, engineering standards, economics, and ethical and professional issues;student selectsfaculty mentor, performsproject design, and presentsorally",,"SF
SP",,,
ECEA402,"Lectures on teaming, project management, engineering standards, economics, and ethical and professional issues;student selectsfaculty mentor, performsproject design, and presentsorally",,"SF
SP",,,
ECEA403,"Advanced challengesin embedded systems design using contemporary practice; interrupt-driven, reactive, real-time, object-oriented, and distributed client/server embedded systems",,"SF
SF
SF
SDF",,,
ECEA404,"Basic and advanced concepts in cryptography and network security: symmetric and asymmetric cryptography, key management, wired and wireless network security protocols, network systems security",,IAS,,,
ECEA405,"Historical development of operating systems to control complex computing systems; process management, communication, scheduling techniques; file systems concepts and operation; data communication,distributed process management",,"OS
SF
AL",,,
MTHA204,"Concepts of algorithms, induction, recursion, proofs, logic, set theory, combinatorics, graph theory fundamental to study of computer science",,DS,,,
CSCB101,"Introduction to computing; algorithmic thinking, problem solving in the context of a modern programming language and its associated development environment",,SDF,,,
CSCB102,"Second course in programming languages and systems; object-oriented design, data structures, recursion, data modeling, fundamental concepts in software engineering",,SDF,,,
CSCB201,"Analysis and design of algorithms, algorithm design strategies, searching and sorting algorithms, parallel algorithms, tradeoffs in algorithmic performance, algorithmic complexity",,AL,,,
CSCB202,"Introductory course in computer organization and architecture; processor organization, instruction set architecture, memory system organization, performance, and interfacing fundamentals",,AR,,,
CSCB301,"Computer bus structures, memory organization and structure, interrupt structures, arithmetic units, input-output structures, central processor organization, control function implementation, pipelining, performance measurement, and distributed system models",,"AR
SF",,,
CSCB302,"Characteristics of embedded systems, techniques for embedded applications, parallel input and output, synchronous and asynchronous serial communication, interrupt handling, applications involving data acquisition, control, sensors, and actuators, implementation strategies for complex embedded systems",,SF,,,
CSCB303,"Introduction tothe design and performance analysis of local computer networks; architectures, protocols, standards,and technologies of computer networks; principles of information security, authentication, sources of vulnerability, malware, defenses against attack, network security",,"NC
IAS",,,
CSCB304,"Basic operating systems and their components; concurrency, scheduling and dispatch, memory and device management, file systems and performance evaluation, real-time operating systems, operating systems for mobile devices ",,SF,,,
CSCB401,"Individually designed projects oriented toward providing experience in project management, risk management, specification of systemrequirements and architecture, system design, integration, testing, and deployment; solution of open-ended problems; emerging technologies discussed in the context of these projects",,"SP
SF",,,
CSCB402,Continuation of Senior Project I focused on implementation of a project design,,"SP
SF",,,
CSCB403,"Critical examination of ethical problems associated with computer science and engineering; legal and quasi-legal (i.e., policy and regulative) issues are also considered; the process of ethicaldecision-making, privacy and confidentiality, computer crime, professional codes and responsibilities,software piracy, the impact of computers on society",,SP,,,
ELEB201,Number systems and representation of information;computer arithmetic; analysis and synthesis of combinational and sequential logic circuits; use of a modern hardware description language; organization and structure of computing systems,,"SF
AR",,,
ELEB202,"Fundamentals of electric circuits andnetwork analysis; transient analysis, frequency response, Laplace transforms, Fourier series, introduction to electronic materials and devices, diodes, bipolar transistors and logic families, MOS technology",,SF,,,
ELEB301,"Sinusoidal and transient analysis, convolution, transform analysis, frequency response, digital processing of signals, difference equations, sampling and aliasing, discrete time transforms and digital filter design",,SF,,,
MTHB202,"Sets, functions, and relations, Boolean algebra, first order logic, proof techniques, counting arguments, iteration and recursion, graphs,and trees",,DS,,,
CSCC101,"Introductory problem solving and computer programming concepts, including object-oriented programming, procedural and data abstraction,and program modularity",,SDF,,,
CSCC201,"Intermediate problem solving and computer programming concepts, including algorithmic strategies, recursion, and effective design and use of data structures and application programming interfaces (APIs)",,"AL
SDF",,,
CSCC202,"Concepts of discrete structures including Boolean algebra, first-order algebra, proof techniques, set theory, and graph theory",,DS,,,
CSCC301,"Design of basic data structures (e.g., stacks, queues, heaps, link structures, trees, graphs) and their manipulation; design and analysis of classic algorithms for common tasks (e.g., sorting,searching, graph algorithms)",,"AL
SDF",,,
CSCC401,"Basic operating systems and their components: scheduling, resource management, process management, interrupt handling, concurrent processing, and system performance evaluation",,SF,,,
ECEC201,"Elements of digital design (e.g., Boolean algebra, basic logic circuits), analysis and synthesis of combinational and sequential logic circuits, introduction into finitestate machines, hardware description language (HDL), and programmable logic devices (e.g., FPGAs)",,SF,,,
ECEC202,"Fundamentals of circuit analysis: basic concepts (e.g., voltage, current, Ohm's law); transient analysis and frequency response of networks; introduction to operational amplifiers, electronic materials and devices, bipolar transistors and logic families, and MOS technology",,SF,,,
ECEC301,"Microprocessor-based embedded systems, synchronous and asynchronous serial communication, interfacing, interrupt handling, data acquisition, real-time processing",,"AR
SF",,,
ECEC302,"Advanced digital design: modular design ofcombinational and sequential logic building blocks, control-datapath; extensive use of hardware description language (HDL) and programmable logic devices (e.g., FPGAs); system architecture design and evaluation",,"SF
SF",,,
ECEC401,"Continuous-time and discrete-time signal analysis including Fourier series and discrete-time Fourier transforms; sampling; finite and infinite impulse response (FIR and IIR) filter design; frequency response, and system function",,SF,,,
CEC201,"Introduction to computer architecture and system organization including instruction set architecture, processor organization, bus structures, memory sub-systems, input/output interfacing and communication, pipelining, and performance measurement",,"AR
AL",,,
CEC301,"Fundamental concepts in computer system engineering including project management; architectural design; concurrent hardware and software design; system integration, testing, and validation; and concepts such as maintainability, sustainability, manufacturability",,"SF
SP
SF
SDF",,,
CEC302,"Architectures, protocols, standards,and technologies of computer networks includinglocal and wide area networks, wireless and mobile networks, network applications, and network management and security",,"AL
NC
IAS",,,
CEC401,"Concepts in computer and network security including data security and integrity, vulnerabilities and exploitation, social engineering, cryptography, authentication, network and web security, and trust computing",,"NC
IAS",,,
CEC402,"First of a two-semester computer engineering capstone project which cumulates in a product with emphasis on teaming, project management, concurrent hardware and software design; system integration, testing, and validation",,SP,,,
CEC403,"Second of a two-semester computer engineering capstone project which cumulates in a product with emphasis on teaming, project management, concurrent hardware and software design; system integration, testing, and validation",,SP,,,
CSTD101,"Introduction to the basic concepts of computer programming, including problem solving, algorithmic thinking, simple data structure,and some fundamental algorithms",,SDF,,,
CSTD102,Introductory course in information science; fundamental problems and solving methodsincludingsome emerging technologies in information science,,OS,,,
CSTD201,"The basics of C++ programming, object-oriented programming,introductory problem solving,and computer programming using object-oriented techniques",,SDF,,,
CSTD301,"Highly practical course aimingat students’ innovative ideas and hands-on skills; through teaching and experiments, students developgeneral knowledge about C language and basic programming algorithms",,SDF,,,
CSTD401,"Data abstraction and representation, data structure (e.g. vector, array, list, stack, queue, tree, priority queue, hash table and graph) design and implementation, design of classic algorithms (e.g. search, sort and select, traverse, pattern matching, topological search, hash), as well as algorithm evaluation and analysis",,AL,,,
CSTD402,"Fundamentals of electric circuits, including the basic concepts (e.g. voltage, current, power), basic components (e.g. resistance, inductance, capacity, MOS transistor, operational amplifier), basic laws (e.g.,Ohm’s law, Kirchhoff’s law, equivalent resistance exchange) and methods of circuit analysis",,SF,,,
CSTD501,"Emphasison the analysis, design, and implementation of the digital logic circuit; Boolean algebra and logic simplification, design and analysis of combinational circuits and sequential circuits, competition and risk management in logic design",,SF,,,
CSTD504,"Organization of high performance computer, design methods of parallel programming, performance model of programs, performance evaluation and optimization techniques, programming in MPI and OpenMPand algorithms in high performance computing",,AR,,,
CSTD601,"The basic theory, programming tools, programming methods and applications of assembly language",,AR,,,
CSTD602,"Java programming, Java’s history and evolution, development tools, object-oriented programming methods and network programming technologies",,SDF,,,
CSTD701,"Introductionto single CPU computer organization and architecture; instruction setarchitecture, datapath and controller, pipelining and performance measurement, hierarchical memory organization, bus structures, I/O interfacing and communications, peripheral equipment",,"AR
SF",,,
CSTD702,"Computer network architecture, typical protocols and standards of LAN, WAN, wireless and mobile networks, classical network applications, network management and security; networks social effects, network engineer’sprofessional and responsibilities ",,"NC
SP
IAS",,,
CSTD704,"Focusing on the software developmentmethods, software life cycle, design methods, software testing and performance evaluation, software development management",,"SF
SP",,,
CSTD705,"Concepts on signal and signal processing, continuous-time Fourier transform, discrete-time Fourier transform, Z-transform and discrete time system analysis, design,and implementation of filters",,SF,,,
CSTD706,"Entity-relationship model and relational model; concepts, logic, and physical design of database, key techniques in database management system (e.g.,query, transaction management, concurrency control and error recovery),expansion of database system structure, current research in database research, and new applications",,SDF,,,
CSTD801,"Introduction to the computer operating system, process management, process scheduling, storage management, file management and device management",,SF,,,
CSTD802,"Focusingon the structure, design principles, and other key concepts in computer architecture; design principles and performance evaluation of computerarchitecture, parallel technology in timing and space, multicore processor and multiprocessor system, high performance computing and networks, memory hierarchy architecture for single core and multicore systems",,"AR
OS",,,
CSTD804,"Introduction tothe frontier researches of software technology, includingsystem software, data and knowledge engineering, software engineering,computer aided design technology",,OS,,,
CSTD901,"Practice course on the design and implement of whole computer system—two or three studentsworking together to design and implement a mini-computer withthe basic hardware, operating system,and complier ",,SF,,,
CSTD1001,"Foundations of cryptography, symmetric cryptography, public key cryptography, Hash algorithms, digital signature, user authentication technology, network security techniques, structure,and protocol standards for network managementand operations",,"IAS
NC",,,
CSTD1002,"Components of embedded system (e.g.,embedded processor; flash embedded memory; bus and communication in embedded systems, sensors,and drivers), power source design, boot process, real time operating systems, driver design, mid-ware and other embedded software, development,and test methods",,SF,,,
CSTD1101,"The capstone project for graduation to ensure that all graduates have significant design experience, as well as experience with teamwork and modern engineering tools",,SP,,,
MTHD101,"Introduction to the basic knowledge of limit theorem,includingfunctional limit, continuity of function,and the calculation of limit;includescalculus methods such as derivative and differential, integral, ordinary differential equation and Improper integrals; series, convergence criteria, convergence domain and uniform convergence of function series, term-by-term limit, term-by-term summation, term-by-term integral",,DS,,,
MTHD102,"One of the basic math courses in higher education, introducingthe fundamental knowledge related to geometry, algebra,and the relationship between these two fields; covermapping, geometry order, and basic concepts of group, ring, and field, as well as vectors in geometry spaces, linear space,and inner product space; algebra-related contents includinglinear mapping, matrix, concept and properties of determinant, linear equation system, orthogonal matrixes and similar matrixes",,DS,,,
MTHD103,"Logic proposition and propositional calculus, first order predicate logic and predicate calculus, natural formal system of reasoning in propositional calculus and predicate calculus, as well as, operation and property of set and binary relation, functions on set and their properties",,DS,,,
MTHD201,"Knowledge related to multivariate functions; derivative, integral, line/surface integrals of the first type, line/surface integrals of the second type, plane vector field and Green formula, space vector field and Gauss formula, Stokes formula, path independent integral, linear ordinary differential equation of second order and system of linear ordinary differential equation of first order",,DS,,,
MTHD202,"Quadratic forms, quadratic curve and its categorization, common curved surface, space curve equation, quadratic surface and its categorizations, as well as, plane orthogonal transformation, plane affine transformation, projection plane and homogeneous coordinates, projective transformation and projective mapping, vector function and its calculus, arc length of a curve and Frenet frame",,DS,,,
MTHD203,"Graphingand itsalgebraic representation; path, cycle, and connectivity, as well as, tree, algebraic structure, group, ring, field, lattice, and Boolean algebra",,DS,,,
MTHD501,"Mathematical descriptions of random phenomenon, focusing on the core concepts of probability and statistics; probability space, determining the probability of random events, conditional probability and its applications in probability calculation, statistical independence of random events, random variable and its distribution, quantitative statistical analysis of random phenomenon, basic methods of statistical analysis and statistical inference using probability models",,DS,,,
CEE101,"Range of illustrations of the applicability of developments in computer engineering exhibiting the use of hardware and software systems in a variety of different contexts including simple devices, embedded systems, systems with an important human computer interface, systems involving computer communications, and systems of a sensitive nature such as safety critical systems; issues involved in electronics, software, human computer interface, use of tools, systems, and the engineering dimension",,"IAS
SF",,,
CEE201,"Computers and computer communication; problems of security, reliability; speeds, capacity measures, reliability measures; physical realities and the limitations; wireless possibilities; communications network architectures, computer network protocols; variants on the basic topologies; local and wide area networks; client server computing; data integrity and data security, problems,and solutions; performance issues; networkmanagement; nature and special problems of mobile computing",,NC,,,
CEE202,The fundamental elements of digital logic and their use in computer construction; register level description of computer execution and the functional organization of a computer; essential elements of computer architecture; major functional components of a modern computer system; characteristics of machine codes: instruction formats and addressing modes;the elements of machine and assembly code programming; memory hierarchy and organization; interfacing and communication between processor and peripheral devices; experiments provide laboratory experience in hardware and software to interface memory and peripheral components to a computer system,,AR,,,
CEE203,"Critical examination of ethical problems associated with computer engineering; discussion of these problems conducted within the framework of classical philosophical ethical theories; legal and quasi-legal (i.e., policy and regulative) issues; process of ethical decision-making, privacy and confidentiality, computer crime, professional codes and responsibilities, professional practice, system security and more generally cyber security,impactof computers on society",,SP,,,
CEE204,"Approaches to the development of systems in computer engineering; the special problems and the issues; concept of a life cycle, nature of life cycle models, phases of typical life cycles, quality issues; process and process improvement; issues of teams, team selection, roles in teams, elements of team work; selection of support tools, standards and technologies; techniques and approaches associated with the different phases; special problems of design and the issues associated with tradeoffs, special problem of hardware/software tradeoffs; testing; maintenance; project management",,"IAS
SF",,,
CEE205,"Nature of embedded systems, specificproblems, special issues; role in computer engineering; embedded microcontrollers, embedded software; real time systems, problems of timing and scheduling; testing and performance issues, reliability; low power computing, energy sources, leakage; design methodologies, software tool support for development of such systems; problems of maintenance and upgrade; networked embedded systems",,SF,,,
CEE303,"Design principles associated with modern computer architectures; performance and cost considerations; architectural features influenced by such features as operating systems and window systems, high level languages, networking, security considerations; processor implementation strategies, micro-programming, pipelining, CISC and RISC, vector processors; memory hierarchy, cache, virtual memory organization for high performance machines; special purpose components and devices; simple demonstrations provide experience in the designs and operations of different types of computer architecture such as memory architectures, I/O and bus subsystems, special purpose architectures,parallel processing, and distributed systems; explore hardware and software issues and tradeoffs in the design, implementation, and simulation of working computer systems",,AR,,,
CSCE101,"Representation of data of different kinds; elements of machine code and assembly language coding; role and function of an operating system (including networking, e-mail and distributed systems) and the associated functionality; programming language level, facilities and libraries; applications including description of the functionality of the relevant software (word processors, databases, spreadsheets) and their use; human interaction, importance and relevance of interface software; elements of computer interaction including desirable properties of screen design and interfaces; fundamentals of the web; use of browsers and search engines in information retrieval; simple web page construction; illustrations of information servers; search strategies; information storage and retrieval; legal issues of copyright and intellectual property rights",,"NC
AL
SF
SF",,,
CSCE201,"Elementary ideas and results on discrete probability; mathematical foundations needed to support measures of complexity and performance; basic concepts from counting; concepts of graphs and trees; basic strategies that underpin the design of algorithms; fundamental algorithms for counting, searching, sorting, manipulation of hash tables, symbol tables, queues, trees, and graphs; distributed algorithms for certain simpletasks; fundamentals of computability theory; relevance to security; relevance of design and analysis of algorithms to software design and implementation",,AL,,,
CSCE202,"The functionality and role of an operating system; major components; design considerations; layered approach to the design of an operating system, including the major influences on design; high-level languages, real-time issues, networking, security, multimedia; file systems, hierarchical design; process management, scheduling strategies; resource allocation strategies; concurrency, synchronization principles, deadlock avoidance; device drivers and interfacing; net centric computing; considerations about different platforms and mobility",,"NC
IAS
SF",,,
CSCE301,"History of the development of languages; different flavors of languages, programming, scripting, mark-up, specification; language role, characteristics, comparisons; different programming paradigms, significance, main areas of application, imperative, functional, logic, object-oriented languages; concurrency; aims and objectives of language design; principles of language design, including limitations; interaction between language design and the translation process; basic approaches to translation; aims and objectives of translation; major components of translation and their implementation; library design, separate compilation, design considerations, and implementation",,SDF,,,
ELEE101,"Introduction to basic electrical quantities such as charge, current, voltage, energy,and power;introduction to classical dynamics, electrostatics, and magnetism; basic laws such as Kirchoff’s law, Ohm’s law, Thevenin’s theorem, Norton’s theorem; resistive circuits and networks, reactive circuits and networks; capacitance, inductance, damping, transformers; electrical properties of materials; diodes and diode circuits;MOS transistors and biasing,MOS logic families",,SF,,,
ELEE102,"Basic switching theory, combinational logic circuits; modular design of combinational circuits; memory elements; sequential logic circuits; digital systems design; understanding and analysis of the basic types of circuits and electrical networks as used in electronics, communications, and power applications",,SF,,,
ELEE201,"Review of MOS families and circuits; bipolar transistors and logic families; digital parameters and issues; storage elements; interfacing logic families and standard busses; fundamentals of digital systems design including state diagrams; modeling and simulation, use of relevant tools; use of CAD tools; design carried out for testability and for other such characteristics; problems of verification and validation; formal verification",,"SF
SF",,,
ELEE202,"Data conversion issues, A/D and D/A circuits; electronic voltage and current sources; low and high pass filters, Chebyshev and Butterworth approximations, Sallen-Key; negative feedback; operational amplifier circuits; introduction to bipolar junction transistors",,SF,,,
ELEE301,"The concept of signals and systems, both continuous and discrete-time; signal manipulation; signal symmetry and orthogonality; system linearity and time invariants; system impulse response and step response; frequency response, sinusoidal analysis, convolution, and correlation; sampling in time and quantizing in amplitude; Laplace transform; Fourier analysis, filters; analysis of discrete time signals and systems using z-transforms; inverse transformation procedures",,SF,,,
ELEE302,"Review of complex numbers, superposition, compound systems; frequency domain representation; Laplace transform representation; system representation in time domain; first andsecond order systems; damping",,SF,,,
ELEE303,"Purpose of digital signal processing (DSP), theories and concepts, role of DSP in the context of computer engineering; analysis of digital spectra; application of discrete Fourier transforms, convolution types; filtering, digital filtering; transforms; discrete time signals; sampling issues; applications to include image processing, audio processing; use of relevant software tools",,SF,,,
MTHE101,"Basic mathematical notions of sets, relations, and functions, and operations involving the same; logic and its role, propositional logic, truth tables, issuesof equivalence, limitations; predicate logic, its power and its limitations, relevance in the context of computer engineering; proof techniques; commonly occurring mathematical concepts such as graphs, trees; representational issues; relevance of these tocomputer engineering; recursion; counting; combinatorics; relevance of these ideas to computer engineering",,DS,,,
MTHE102,"Randomness, finite probability space, probability measure, events; conditional probability, independence, Bayes’ theorem; discrete random variables; binomial and Poisson distributions; concepts of mean and variance; continuous random variables; exponential and normal distribution, probability density functions, calculation of mean and variance; central limit theorem and the implications for the normal distribution; purpose and the nature of sampling; nature of estimates, point estimates, interval estimates; maximum likelihood principle approach, least squares approach; confidence intervals; estimates for one or two samples; development of models and associated hypotheses; nature of hypothesis formulation, null and alternate hypotheses, testing hypotheses; criteria for acceptance of hypothesis t-test, chi-squared test; correlation and regression; Markov processes, discrete time systems and continuous time systems; packages supporting data analysis",,DS,,,
MTHE103,Review of basic differential and integral calculus;techniques and approaches; single and double integrals; simple differential equations and their solutions; complex numbers; vector calculus; graphical concepts supported by appropriategraphics packages,,DS,,,
MTHE104,"Bases, vector spaces and orthogonality; matrix representation of linear systems; matrix inversion; linear transformations; solution of linear systems; solution of non-linear systems; determinants; eigenvectors and eigenvalues; use of appropriate packages for linear algebra",,DS,,,
SWEE101,"Introduction to the concepts of requirements and specification; basic concepts associated with programming languages and their translation; elementary programming, primitive data types, operations, simple language constructs; simple algorithms and problem solving involving counting, scanning elements, selecting elements (such as maxima and minima), iteration; use of arrays, strings and simple pre-defined classes; routines or methods as a fundamental abstraction mechanism; principles associated with and the design and construction of these; use of simple libraries, classes; simple aspects of quality of software; the related activities of software testing and validation",,SDF,,,
SWEE102,"Concepts from predicate logic; ideas from object-oriented programming, methods, classes, information hiding, and inheritance; fundamental algorithms, sorting and searching; fundamental data structures, linked data structures, user defined classes; concept of recursion, benefits,and problems; exception handling; using APIs; simple graphics programming; concept of software design",,AL,,,
SWEE301,"Software engineering, role of software engineers; evaluation of software and principles thereof, software lifecycle models; notions of requirements, specification, design implementation; main techniques; important of maintenance; quality concerns at all stages of the software development process; concept of process; software process maturity models; software process improvement; aspects of software engineering, important benefits of and good practice in software re-use; verification and validation; the use of metrics; selection of and use of tools; the nature and structure of teams; human computer interface as a software engineering activity; related life cycles; standards; use of relevant libraries; importance of practical activity; group activity as an important skill for these engineers",,SDF,,,
ITU 101,"Planning and preparing for a successful career in information technology. Developing skills with computers, problem solving, studying, and time management. Comparing information technology to computer science, computer engineering, and information systems. Introduction to networking, databases, computing systems and platforms, cybersecurity, web systems, and computer programming.",,"NC
IM
IM
SDF
OS
IM
HCI
SE
IAS",,,
ITU 201,"Web  technologies  including  distributed  architecture,  networking,  database  concepts, client and server development, infrastructure management, and web system integration.",,"IM
IM",,,
ITU 202,"Principles  of  computer  hardware  and  instruction  set  architecture.  Subjects  include:  internal  CPU  organization  and  implementation,  peripheral  interconnect and IO systems, and low-level programming and security issues.",,SE,,,
ITU 301,"Database  theory  and  architecture;  data  modeling;  designing  application  databases.  Query  languages,  data  security,  database  appl  ications on the Web.",,IM,,,
ITU 302,"Applying and using computer operating systems. Configuration, file systems, security, administration, network interfacing, multitasking, multiuser, device driver installation. Analyzing operating system performance.",,OS,,,
ITU 303,Computer  networks.  Local  and  wide-area  networking  for  enterprises  and  service  providers.  Workgroups/routers/hubs/switches;  network  server  administration; internet protocols and routing; security and privacy.,,NC,,,
ITU 304,"User experience design techniques and best practices including requirements analysis, usability studies, prototyping methods, evaluation techniques, and cognitive, social, and emotional theories.",,HCI,,,
ITU 401,"Administration activities and domains for computing systems, including performance analysis, backup, and recovery.",,SE,,,
ITU 402,"Meet with IT professionals to learn about professional issues and responsibilities, employability skills, and careers in IT. Meet every two weeks for four semesters.",,SE,,,
ITU 420,"Computer  security  principles.  Incident  prevention  and  management.  Information  assurance  dimensions  of  availability,  integrity,  authentication,  confidentiality and non-repudiations to ensure transmission, storage, and processing of information.",,IAS,,,
ITU 451,"IT senior project proposal and feasibility studies. Project management, teamwork principles, intellectual property, supplier interactions, identifying and using professional technical literature, oral and written presentations.",,SE,,,
ITU 452,"Senior  project  design  and  integration.  Second  class  of  two-course  sequence.  Implementing  design.  Project  management,  teamwork,  and  presentations.",,SE,,,
CMPU 101,Introduction to object-oriented program design and development. Principles of algorithm formulation and implementation.,,SDF,,,
CMPU 201,"Fundamental data structures and algorithms of computer science; basic algorithm analysis; recursion; sorting and searching; lists, stacks, queues, trees, hashing; object-oriented data abstraction.",,SDF,,,
ITU 201,"Foundational principles and practices of individual and organizational leadership in a global context from an integrated moral, technical and social perspective. Emphasis on developing integrity, valuing and leveraging diversity, acquiring and applying leadership skills.",,SE,,,
CMPS 104,"This course will introduce the student to a body of mathematical concepts essential for the proficiency in some of the higher-level computer science courses. Topics include: Set theory, Functions and relations, Propositional and predicate logic, Proof techniques, Recursive Algorithms, Elementary combinatorics and Counting methods, Graph theory, and Discrete probability.",,DS,,,
CMPS 140,"The  course  introduces  students  to  structured  programming  techniques.  Topics  include  different  control  statements  (sequence,  selection,  and  repetition), functions, fundamental data types, and data structures (arrays and pointers). Upon successful completion of the course, students will solve computer problems by using structured programming techniques and adequate tools (text editor, compiler, and debugger).",,SDF,,,
CMPS 141,"This course will introduce the student to the concepts of object oriented programming. Programming topics include data hiding/encapsulation and abstraction using classes and objects, inheritance, polymorphism, generic programming using template, operator overloading and file I/O.",,SDF,,,
CMPS 242,"This course provides the students with understanding of the concepts on data representation and organization used in development of computer applications. The topics to be covered include: 1) Abstraction and encapsulation through Abstract Data Types (ADT); 2) Knowledge of basic and advanced data structures such as Linked Lists, Stacks, Queues, Trees, and Graphs; 3) Knowledge of basic algorithmic analysis: Asymptotic analysis of  worst  and  average  complexity  bounds;  identifying  differences  among  best,  average,  and  worst-case  behaviors;  big  “O”  notation;  4)  Various  sorting and searching algorithms are taught to illustrate the above concepts.",,SDF,,,
ITS 280,"This  course  is  intended  to  be  at  the  introductory  level  and  to  provide  foundation  skills  for  subsequent  courses.  It  provides  an  overview  of  the  discipline of IT, describes how it relates to other computing disciplines, and begins to instill an IT mindset. The goal is to help students understand the diverse contexts in which IT is used and the challenges inherent in the diffusion of innovative technology. ",,"NC
IM
IM
OS
IM
HCI
SE
IAS
SE",,,
ITS 300,"This  course  introduces  the  field  of  human-computer  interaction  (HCI),  an  interdisciplinary  field  that  integrates  cognitive  psychology,  design,  computer science and others. This course will examine human performance, components of technology, methods and techniques used in design and  evaluation  of  IT.  Societal  impacts  of  HCI  such  as  accessibility;  introduction  and  evaluation  of  user-centered  design  methods;  introductionstudents to the contemporary technologies used in empirical evaluation methods.",,HCI,,,
ITS 301,"This course discusses the processes, methods, techniques and tools that organizations use to manage their information systems projects. The course covers a systematic methodology for initiating, planning, executing, controlling, and closing projects. This course assumes that project management in the modern organization is a complex team based activity, where various types of technologies (including project management software as well as software to support group collaboration) are an inherent part of the project management process. ",,SE,,,
ITS 310,"The  course  provides  students  with  principles  of  data  and  technology  that  frame  and  define  cybersecurity.  Students  will  gain  insight  into  the  importance of cybersecurity and the integral role of cybersecurity professionals. The interactive, self-guided format will provide a dynamic learning experience where users can explore foundational cybersecurity principles, security architecture, risk management, attacks, incidents, and emerging IT technologies.",,IAS,,,
ITS 315,This course provides an intensive and comprehensive introduction to the basic communication and computer skills required to work in a technical support environment. Students will develop skills through various hands-on activities: to effectively troubleshoot personal computers; to use and implement safety strategies; to disassemble and assemble a computer; to install and troubleshoot operating systems; and to troubleshoot a variety of network and peripheral devices. ,,SE,,,
ITS 320,"This course will introduce the basic concepts in database systems and architectures, including data models, database design, database programming, and database implementation. It emphasizes topics in ER model and relational databases, including relational data model, relational algebra and calculus, SQL, functional dependency and normalization, and database design process.",,IM,,,
ITS 331,"This course examines the evolution of n-tier database application development, the roles of the various tiers in n-tier architectures. It explores the options for marshaling data across tiers and presents the advantages of using component-oriented designs.",,IM,,,
ITS 340,"This  course  is  to  select,  design,  deploy,  integrate,  and  administer  network  and  communication  infrastructures  in  an  organization.  It  includes  fundamental concepts in the design and implementation of computer networks and their protocols. Also, it includes layered network architectures, applications, transport, congestion, routing, data link protocols, local area networks. An emphasis is on the protocols used in the internet. A top-down approach is emphasized during the course starting from the application layer down to the data link layer.",,NC,,,
ITS 360,"This  course  is  about  the  basics  of  computer  operating  systems,  including  configuration,  file  systems,  security,  administration,  interfacing,  multitasking, and performance analysis. Parallelism or concurrency aspects explained using the concepts of process management, synchronization, deadlocks, job and process scheduling.",,OS,,,
ITS 390,"This course covers the design, implementation, and testing of web-based applications including related software, databases, interfaces, and digital media. It also covers social, ethical, and security issues arising from the web and social software.",,IM,,,
ITS 410,"This course provides the principles and topics of Information Technology Security and Risk Management at the organizational level. Students will learn critical security principles that enable them to plan, develop, and perform security tasks. The course will address hardware, software, processes, communications, applications, and policies and procedures with respect to organizational IT Security and Risk Management. ",,IAS,,,
ITS 412,"The course covers the IT governance framework and roadmap for planning and implementing a successful IT governance process and drills down into its major components in more detail. Key topics covered are: executive view of IT governance, overview of Industry Best Practice Standards, Model and Guidelines covering some aspect of IT governance. In addition, the course includes: principles of Business/IT Alignment Excellence, principles of Program/Project Management Excellence, principles of IT Service Management and Delivery Excellence and principles of Vendor Management and Outsourcing Excellence. Finally, it presents some lessons learned and critical success factors and some select case studies. ",,SE,,,
ITS 420,"This course introduces a variety of database administration topics, including capacity planning, database management system (DBMS) architecture, performance tuning, backup, recovery and disaster planning, archiving, reorganization and defragmentation. ",,IM,,,
ITS 490,The  course  includes  intensive  study  of  a  broad  selection  of  conceptual  and  theoretical  problems  in  information  technology.  A  written  student  research project and an oral presentation are required.,,SE,,,
ITS 491,Training is an important aspect of the educational process. Students must join an IT center in a government or private sector full time for at least 8 weeks to complete 280 hours. The aim of the student training is to acquire the experience in applying what the   student learned in real life and in team working as well as to get familiar with the work environment in this field.,,SE,,,
ITS 492,"The course aims to introduce the required techniques for implementing systems, writing technical reports and the skills for presenting the work for audiences. This course focuses on topics related to the field of information technology. The course will also provide guidance to the students in selecting their projects and understanding the research process and introduce the tools needed to support implementing the system and writing its proposal and report. The student should get the supervisor approval for his proposal during this course.",,SE,,,
ITS 493,"This a continuation of the graduation project started in IT 492. The focus in this part will be on low-level design, implementation, testing and quality assurance  as  well  as  management  of  the  project.  The  outcome  of  this  project  must  be  a  significant  information technology  product,  employing  knowledge gained from courses through the curriculum. Students must deliver the code, a final report, and must present the demonstration of their work.",,SE,,,
CMPC 101,"Overview of data types and expression; controlling structures (sequence, switch, loop); function; arrays; pointers; structures; file operations; basic debugging techniques; common algorithms.",,SDF,,,
CMPC 102,Discussion concerning specialty knowledge and courses; computing process and programming; data processing and information systems; mobile internet and applications; computer networks and security; societal and occupation issues.,,SDF,,,
CMPC 103,"Topics include basic concepts of data structures; evaluating methods for algorithms; logical structures of data (including linear list, stack, queue, tree,  graph,  etc.);  storage  structures  of  data  (including  sequence  storage  and  link  storage);  materializing  methods  on  types  of  basic  operations;  common methods of sorting algorithms and searching algorithms.",,SDF,,,
CMPC 501,"Data types and expression; controlling structures (sequence, switch, loop); functions; arrays; pointers; structures; file operations; basic debugging; common algorithms.",,SDF,,,
CMPC 201,"Topics include computer system introduction; machine-level programs; program execution mechanism; storage systems and accessing; executable code generation, exception and interruption,  I/O and file operations.",,OS,,,
CMPC 203,Overview of database system management; data models; organization of database systems; relational-databases; relational algebra and relational calculations; SQL language; query optimization.,,IM,,,
CMPC 206,Role and purpose of operating systems; process and thread management; process synchronization and concurrency; storage management: memory management and virtual memory; process scheduling; I/O device management and file management.,,OS,,,
CMPC 208,"Approaches to database application development; database application analysis and design methodology; development of database  applications with typical tools such as: MS SQL Server, JDBC, and Eclipse.",,IM,,,
CMPC 209,Introduction to computer networks; network architectures and network protocols; physical layer and data link layer; MAC sublayer; network layer; transport layer; application layer; network security.,,NC,,,
CMPC 601,Database fault diagnosis and analysis; Oracle Listener configuration and management; Oracle console management; SCN and Checkpoint; database startup and shutdown; database space management and monitoring; Oracle performance optimization; SGA performance optimization; database physical backup and recovery; physical data guard configuration and management; comprehensive practical projects. ,,"SE
IAS",,,
CMPC 301,Software processes; specification and requirement analysis; software analysis and design; programming techniques and tools; software verification and validation; software metrics.,,"SE
SE",,,
CMPC 311,"Mobile  internet  application  basic  and  features;  Android  application  basics;  UI  design;  data  storage;  networking  application  design;  advanced  application design (sensors, camera, GPS, Audio etc.); graphics and games; web-based hybrid application design.",,"IM
SDF
HCI",,,
CMPC 312,Network  structure  of  IoT;  software  and  hardware  platform  and  system  composition  of  IoT;  cloud  computing;  node  sensing  and  identification technologies  including  the  basic  principle  of  radio  frequency  identification;  RFID  system  and  its  typical  application;  sensor  and  detection  technologies. ,,NC,,,
CMPC 331,"Main  character  and  basic  knowledge  of  Java  and  XML;  character  and  method  of  object-oriented,  stream  disposal  of  Java;  multi-thread programming; GUI programming.",,"IM
SDF",,,
CMPC 327,"Overview  of  iOS  platform  application  programming;  introduction  to  iOS  architectures;  objective-C  programming  language;  view  and  view  controller;  touch  event  handling;  usage  of  interface  controls;  use  of  development  tools;  data  persistence,  multimedia,  networking,  game  development. ",,"IM
SDF
HCI",,,
CMPC 314,JavaScript  basics;  JavaScript  design  patterns;  script  modularization;  script  deployment  and  packaging;  JavaScript  frontend  design;  JavaScript backend design; backbone.js; node.js; solution architectures; cross-platform applications.,,IM,,,
CMPC 333,"Basic concepts of J2EE; programming techniques; server level techniques (Enterprise JavaBean); client level techniques, network level techniques (Servlet / JSP); EJB query language, data transaction and security, packing, deploying.",,SE,,,
CMPC 711,Responsive UI designs; web app design; hybrid app design; interact with backend service; backend service design; requirement analyze and mobile internet context based design; app tools; integration and deploy. ,,"SDF
HCI",,,
CMPC 323,Risk analysis of software development; schedule management; workload analysis; requirement analysis; code specifications; test specifications; quality assurance; communication management.,,"IM
SE
SE",,,
CMPC 401,"Participation in the development and research of a real project; student in charge of making a relatively independent sub-function module by using gained knowledge and mastered tools; execution may be out of school, to take part in the real project offered by other organizations or in school, to take part in a teacher’s research projects.",,SE,,,
CMPC 402,"Students do literature translation, literature survey, opening report, system design and development, thesis writing and defending; students acquire scientific research ability, system design and development ability, develop a basis for future work. ",,SE,,,
CS101I,"Introduces the fundamental concepts of SEcedural SEgramming. Topics include data types, control structures, functions, arrays, files, and the mechanics of running, testing, and debugging. The course also offers an introduction to the historical and social context of computing and an overview of computer science as a discipline. ",,"SDF
SE
SE
SE
SE",,,
CS102I,"Introduces the concepts of object-oriented SEgramming to students with a background in the SEcedural paradigm. The course begins with a review of control structures and data types with emphasis on structured data types and array SEcessing. It then moves on to introduce the object-oriented SEgramming paradigm, focusing on the definition and use of classes along with the fundamentals of object-oriented SEign. Other topics include an overview of SEgramming language principles, simple analysis of algorithms, basic searching and sorting techniques, and an introduction to software engineering issues.",,"SDF
SE
SE
SE",,,
CS103,"Builds on the foundation SEvided by the CS101I-102I sequence to introduce the fundamental concepts of data structures and the algorithms that SEceed from them. Topics include recursion, the underlying philosophy of object-oriented SEgramming, fundamental data structures (including stacks, queues, linked lists, hash tables, trees, and graphs), the basics of algorithmic analysis, and an introduction to the principles of language translation. ",,"SDF
SE",,,
CS220,"Introduces students to the organization and architecture of computer systems, beginning with the standard von Neumann model and then moving forward to more recent architectural concepts. Prerequisites: introduction to computer science (any implementation of CS103 or CS112), discrete structures (CS106 or CS115) ",,SDF,,,
CS226,Introduces the fundamentals of operating systems together with the basics of networking and communications.,,SDF,,,
CS270T,"Introduces the concepts and techniques of database systems. Prerequisites: introduction to computer science (any implementation of CS103 or CS112), discrete structures (CS106 or CS115)",,"SDF
SE",,,
CS105,"Introduces the foundations of discrete mathematics as they apply to computer science, focusing on SEviding a solid theoretical foundation for further work. Topics include functions, relations, sets, simple SEof techniques, Boolean algebra, SEpositional logic, digital logic, elementary number theory, and the fundamentals of counting. ",,"SDF
SE",,,
CS106,"Continues the discussion of discrete mathematics introduced in CS105. Topics in the second course include predicate logic, recurrence relations, graphs, trees, matrices, computational complexity, elementary computability, and discrete SEbability. ",,"SDF
SE
SE",,,
MA271,"Principles of discrete SEbability with applications to computing. Basics of SEcriptive statistics. Distributions, including normal (Gaussian), binomial and Poisson. Least sSEred concept, correlation and regression. Statistical tests most useful to software engineering: t-test, ANOVA and chi-sSEred. SEign of experiments and testing of hypotheses. Statistical analysis of data from a variety of sources. Applications of statistics to performance analysis, reliability engineering, usability engineering, cost estimation, as well as SEcess control evaluation. ",,SE,,,
NT272,"The scope of engineering economics; mesoeconomics; supply, demand, and SEduction; cost-benefit analysis and break-even analysis; return on investment; analysis of options; time value of money; management of money: economic analysis, accounting for risk. ",,"SE
SE",,,
NT181,"Essentials of oral, written, and graphical communication for software engineers. Principles of technical writing; types of documents and strategies for gathering information and writing documents, including presentations. ApSEpriate use of tables, graphics, and references. How to be convincing and how to express rationale for one’s decisions or conclusions. Basics of how to work effectively with others; notion of what motivates people; concepts of group dynamics. Principles of effective oral communication, both at the interpersonal level and when making presentations to groups. Strategies for listening, persuasion, and negotiation.",,"SE
SE",,,
NT291,History of computing and software engineering. Principles of SEfessional software engineering practice and ethics. Societal and environmental obligations of the software engineer. Role of SEfessional organizations. Intellectual SEperty and other laws relevant to software engineering practice. ,,"SE
SE",,,
SE101,"Overview of software engineering:  Systems; customers, users, and their requirements. General principles of computing: SEblem solving, abstraction, division of the system into manageable components, reuse, simple interfaces. SEgramming concepts: Control constructs; expressions; use of APIs; simple data including  arrays and strings; classes and inheritance. SEign concepts: Evaluation of alternatives. Basics of testing. ",,"SDF
SE
SE
SE
SE
SE",,,
SE102,"Requirements, SEign, implementation, reviewing, and testing of simple software that interacts with the operating system, databases, and network, and that involves graphical user interfaces. Use of simple data structures, such as stacks and queues. Effective use of the facilities of a SEgramming language. SEign and analysis of simple algorithms, including those using recursion. Use of simple SEign patterns such as delegation. Drawing simple UML class, package, and component diagrams. Dealing with change: SElution principles; handling requirements changes; SEblem reporting and tracking. ",,"SDF
SE
SE
SE
SE
SE",,,
SE200,"Software SEcess; planning and tracking ones work. Analysis, architecture, and SEign of simple client-server systems using UML, with an emphasis on class and state diagrams. Evaluating SEigns. Implementing SEigns using apSEpriate data structures, frameworks, and APIs. ",,"SDF
SE
SE
SE
SE
SE
SE
SE",,,
SE201,"Principles of software engineering: Requirements, SEign and testing. Review of principles of object orientation. Object oriented analysis using UML. Frameworks and APIs. Introduction to the client-server architecture. Analysis, SEign and SEgramming of simple servers and clients. Introduction to user interface technology.",,"SDF
SE
SE
SE
SE
SE
SE
SE",,,
SE211,General principles and techniques for disciplined low-level software SEign. BNF and basic theory of grammars and parsing. Use of parser generators. Basics of language and SEtocol SEign. Formal languages. State-transition and table-based software SEign. Formal methods for software construction. Techniques for handling concurrency and inter-SEcess communication. Techniques for SEigning numerical software. Tools for model-driven construction. Introduction to Middleware. Hot-spot analysis and performance tuning. ,,"SDF
SE
SE",,,
SE212,"Psychological principles of human-computer interaction. Evaluation of user interfaces. Usability engineering. Task analysis, user-centered SEign, and SEtotyping. Conceptual models and metaphors. Software SEign rationale. SEign of windows, menus, and commands. Voice and natural language I/O. Response time and feedback. Color, icons, and sound. Internationalization and localization. User interface architectures and APIs. Case studies and SEject. ",,"SDF
SE
SE
SE
SE
SE
SE",,,
SE213,Modeling and SEign of flexible software at the architectural level. Basics of model-driven architecture. Architectural styles and patterns. Middleware and application frameworks. Configurations and configuration management. SEduct lines. SEign using Commercial Off-The-Shelf (COTS) software. ,,"SE
SE
SE
SE",,,
SE221,"Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing. Types of defects. Black-box vs. Structural testing. Testing strategies: Unit testing, integration testing, SEfiling, test driven development. State based testing; configuration testing; compatibility testing; web site testing. Alpha, beta, and acceptance testing. Coverage criteria. Test instrumentation and tools. Developing test plans. Managing the testing SEcess. SEblem reporting, tracking, and analysis. ",,"SE
SE
SE",,,
SE311,"An in-depth look at software SEign. Continuation of the study of SEign patterns, frameworks, and architectures. Survey of current middleware architectures. SEign of distributed systems using middleware. Component based SEign. Measurement theory and apSEpriate use of metrics in SEign. SEigning for SElities such as performance, safety, security, reusability, reliability, etc. Measuring internal SElities and complexity of software. Evaluation and SElution of SEigns. Basics of software SElution, reengineering, and reverse engineering.",,"SDF
SE
SE
SE",,,
SE312,Detailed software SEign and construction in depth. In-depth coverage of SEign patterns and refactoring. Introduction to formal apSEaches to SEign. Analysis of SEigns based on internal SElity criteria. Performance and maintainability imSEvement. Reverse engineering. Disciplined apSEaches to SEign change.,,"SDF
SE
SE
SE",,,
SE313,"Review of mathematical foundations for formal methods. Formal languages and techniques for specification and SEign, including specifying syntax using grammars and finite state machines. Analysis and verification of specifications and SEigns. Use of assertions and SEofs. Automated SEgram and SEign transformation.",,"SDF
SE
SE
SE
SE",,,
SE321,"SElity: how to assure it and verify it, and the need for a culture of SElity. Avoidance of errors and other SElity SEblems. Inspections and reviews. Testing, verification and validation techniques. SEcess assurance vs. SEduct assurance. SElity SEcess standards. SEduct and SEcess assurance. SEblem analysis and reporting. Statistical apSEaches to SElity control. ",,"SE
SE
SE
SE",,,
SE322,"Domain engineering. Techniques for discovering and eliciting requirements. Languages and models for representing requirements. Analysis and validation techniques, including need, goal, and use case analysis. Requirements in the context of system engineering. Specifying and measuring external SElities: performance, reliability, availability, safety, security, etc.  Specifying and analyzing  requirements for various types of systems: embedded systems, consumer systems, web-based systems, business systems, systems for scientists and other engineers. Resolving feature interactions. Requirements documentation standards. Traceability. Human factors. Requirements in the context of agile SEcesses. Requirements management: Handling requirements changes.",,SE,,,
SE323,"SEject planning, cost estimation, and scheduling. SEject management tools. Factors influencing SEductivity and success. SEductivity metrics. Analysis of options and risks. Planning for change. Management of expectations. Release and configuration management. Software SEcess standards and SEcess implementation. Software contracts and intellectual SEperty. ApSEaches to maintenance and long-term software development. Case studies of real industrial SEjects. ",,"SE
SE
SE",,,
SE324,"Software SEcesses: standards, implementation, and assurance. SEject management with a focus on requirements management and long-term SElution: Eliciting and prioritizing requirements, cost estimation, planning and tracking SEjects, risk analysis, SEject control, change management. ",,"SE
SE
SE
SE
SE",,,
SE400,"Development of significant software system, employing knowledge gained from courses throughout the SEgram. IncluSE development of requirements, SEign, implementation, and SElity assurance. Students may follow any suitable SEcess model, must pay attention to SElity issues, and must manage the SEject themselves, following all apSEpriate SEject management techniques. Success of the SEject is determined in large part by whether students have aSEEtely solved their customer’s SEblem. ",,"SDF
SE
SE
SE
SE
SE",,,
CSE 4223,"Three hours lecture. Concepts in software SEject management functions such as planning, organizing, staffing, directing and control, estimating, scheduling, monitoring, risk management, and use of tools.",,"SE
SE",,,
CSSE 371,"Basic concepts and principles of software SEuirements engineering, itstools and techniques, and methods for modeling software systems. Topics include SEuirementselicitation, SEtotyping, functional and non-functional SEuirements, object-oriented techniques, andSEuirements tracking.",,"SE
SE
SE
SE
SE",,,
CSSE 372,"Major issues and techniques of SEject management. SEject evaluation and selection, scope management, team building, stakeholder management, risk assessment, scheduling, SElity, rework, negotiation, and conflict management. SEfessional issues including career planning, lifelong learning, software engineering ethics, and the licensing and certification of software SEfessionals.",,"SE
SE
SE",,,
CSSE 373,"Introduction to the use of mathematical models of software systems for their specification and validation. Topics include finite state machine models, models of concurrent systems, verification of models, and limitations of these techniques.",,"SE
SE
SE
SE
IAS",,,
CSSE 374,"Introduction to the SEign of complete software systems, building on components and patterns.Topics include architectural principles and alternatives, SEign documentation, and relationships between levels of abstraction.",,"SE
SE
SE
SE",,,
CSSE 375,"Issues, methods and techniques associated with constructing software. Topics include detailed SEign methods and notations, implementation tools, coding standards and styles, peer review techniques, and maintenance issues.",,"SE
SDF
SE",,,
CSSE 376,"Theory and practice of determining whether a SEduct conforms to its specification and intended use. Topics include software SElity assurance methods, test plans and strategies, unit level and system level testing, software reliability, peer review methods, and configurationcontrol responsibilities in SElity assurance.",,"SE
SE",,,
CSSE 477,"This is a IASond course in the architecture and SEign of complete software systems, building on components and patterns. Topics include architectural principles and alternatives, SEign documentation, relationships between levels of abstraction, theory and practice of human interface SEign, creating systems which can evolve, choosing software sources and strategies, SEtotyping and documenting SEigns, and employing patterns for reuse. How to SEign systems which a team of developers can implement, and which will be successful in the real world.",,"SE
SE
SE
IAS",,,
SWE 3643,"This course shows how to define software SElity and how it is assessed through various testing techniques. Topics include review/inspection techniques for non-executable software, black-box and white-box testing techniques for executable software and test analysis. Specific test-case development techniques such as boundary value, equivalence class, control paths, and dataflow paths test are introduced. Different levels of testing such as functional, component, and system/regression tests are discussed with the concept of configuration management.",,"SE
SE
SE
SE",,,
IT Fundamentals,Introduces students to the academic discipline of IT. Pervasive IT themes; IT history; Organizational issues; Relationship of IT to other computing disciplines Pervasive themes in IT; Organizational issues; History of IT; IT and its Related and Informing Disciplines; Application Domains; Applications of Math and Statistics to IT,,"SF
SP
SDF",,,
Programming Fundamentals ,"Introduces students to the basics of programming, including data structures, programming constructs, object-oriented programming, algorithms and problem solving, event-driven programming, and recursion. Fundamental data structures and programming constructs; Object-oriented programming; Algorithms and problem solving; Event-driven programming; Recursion; Overview of programming languages",,"SDF
PL",,,
Computing Platforms ,"Principles of computer hardware and low-level software, including logic circuits, assembly language, I/O, storage, program execution;  Basics of computer operating systems, including configuration, file systems, security, administration, interfacing, multitasking, performance analysis Architecture and organization; Computing infrastructures; Operating systems",,"SF
SE
SP",,,
IT Systems,"Introduction to the basic components of IT systems, including networking, web systems, databases, scripting, system administration and maintenance, and system integration Foundations of networking; Database systems; Web technologies; Scripting techniques; Integrative coding; Applications; Integration; History of computing",,"SP
IM
PL
NC
SDF
SF
SE
SE
IM",,,
Web Systems,"Introduction to web technologies and systems, including hypertext, self-descriptive text, web page design, web navigational systems, database integration and digital media. Data administration; Database administration;  Scripting techniques; Integrative coding; Web technologies; Information architecture; Digital media; Web development; Vulnerabilities. Data administration; Database administration;  Scripting techniques; Integrative coding; Web technologies; Information architecture; Digital media; Web development; Vulnerabilities",,"IAS
IM
PL
IM",,,
Networking,"Builds a deeper understanding of how networks work, including the topics of LANs, WANs, service providers, packets, hubs, routers, switches, Internet protocols. Routing and switching; Physical layer; Security; Application Areas",,NC,,,
Databases,"Builds a deeper understanding of how databases work, including the topics of database theory and architecture, data modeling, normalization, query languages, security, and Web applications. Data organization and retrieval; Data modeling; Database query languages; Database systems; Information models and systems; Properties of data; Specification of data requirements; Data and database administration",,IM,,,
Human-Computer Interaction,"Introduction to the basic concepts of human-computer interaction, including human factors, performance analysis, cognitive processing, usability studies, environment, and training. Professional Communications",,SP,,,
Technical and Professional Communica-tions,"Introduction to written and oral technical and professional communication, including proposals, reports, presentations, formal papers. Professional Communications",,SP,,,
Information Assurance & Security,"Introduction to the concepts of data security, including policies, attacks, vulnerabilities, encryption, information states, and forensics. Security mechanisms; Fundamental aspects; Security services; Information states; Threat analysis model; Vulnerabilities; Attacks; Policy; Operational issues; Forensics; Security domains",,IAS,,,
IT Capstone I,"IT senior project-first semester, including project proposal, feasibility studies, intellectual property, teamwork, budgets, schedule management. Requirements; Acquisition/ sourcing; Integration; Project management; Architecture; Teamwork concepts and issues; Intellectual property; Organizational context",,"SE
SP",,,
IT Capstone II,"IT senior project-second semester, including teamwork, professional communications (reports and presentations), design implementation, testing. Testing and QA; Organizational context; Professional communications; Teamwork concepts and issues;",,"SE
SE
SP",,,
Professional Ethics,Covers all the areas of ethics in the computing profession. Professional and Ethical Issues and Responsibilities; Privacy and Civil Liberties,,SP,,,
IT Fundamentals,Introduces students to the academic discipline of IT as well as the general meaning of IT.,,"SF
SP",,,
Programming Fundamentals ,"Introduces students to the basics of programming.  Includes data structures, programming constructs, algorithms and problem-solving, object-oriented and event-driven programming, and recursion. ",,SDF,,,
Fundamentals of Networking,"Introduces students to the fundamentals of networks and networking in IT.  Includes routing, switching, physical layer, security, and application areas. ",,NC,,,
Fundamentals of Web Systems,"Introduces students to web systems and technologies.  Includes information architecture, digital media, web development and vulnerabilities of web systems.",,IM,,,
Technical and Professional Communication ,"Introduces teamwork concepts, group dynamics, leadership styles, technical writing and documentation, presentation development and delivery. ",,SP,,,
Fundamentals of Information Management ,"Introduces students to databases and information management.  Includes query languages, data organization architecture, data modeling, managing the database environment and special-purpose databases. ",,IM,,,
Fundamentals of Human Computer Interaction,"Introduces students to HCI.  Includes human factors, HCI aspects of application domains, human-centered evaluation, developing effective interfaces, accessibility, emerging technologies, human –centered software development ",,SP,,,
System Administration and Maintenance,"Introduces students to system administration and maintenance as well as platform technologies.  Includes operating systems, applications, administrative activities and domains, computer architecture and organization, and computing infrastructures.",,"SF
SE",,,
Integrative Programming ,"Introduces students to integrative programming.  Includes intersystems communication, data mapping and exchange, integrative coding, scripting techniques, software security and an overview of programming languages.",,PL,,,
Information Assurance and Security,"Introduces students to IAS.  Includes fundamental aspects, security mechanism, operational issues, policy, attacks, security domains, forensics, information states, security services, threat analysis and vulnerabilities. ",,IAS,,,
System Integration and Architecture,"Includes requirements analysis, acquisition, sourcing, integration, project management, testing and quality assurance, organizational context and architecture.",,SE,,,
Information Assurance and Security II,Provides a follow-up to IT380.  Includes advanced outcomes from IAS.,,IAS,,,
IT Capstone,"IT senior project including project proposal, feasibility studies, intellectual property, teamwork, budgets, schedule management; professional communications (reports and presentations), design implementation, testing.",,"SE
SP",,,
Social and Professional Issues in IT,"Includes professional communications, history of computing, social and organizational context of computing, Teamwork concepts and issues, intellectual property, legal issues, professional and ethical issues, privacy and civil liberties. ",,SP,,,
CIS 128,"Students learn the functionality of hardware and software components as well as suggested best practices in maintenance and safety issues. The students, through hands-on activities and labs, will learn to assemble and configure a computer, install operating systems and software, and troubleshoot hardware and software problems. In addition, an introduction to networking is included with this course. This course helps students prepare for CompTIA's A+ certification.",,"IM
OS
SE
IM",,,
CIS 129,"A study of the types of hardware available to add on to a basic microcomputer system, and which of these are compatible with a particular microcomputer. The course includes such hardware as memory, monitors, printers, modems and hard disks. Simple troubleshooting techniques also will be explained. Students experiment with various software and hardware components during labs.",,"IM
NC
SE
IM
SP
IM",,,
CIS 164,"This course focuses on the following: network terminology and protocols, Local Area Networks (LANs), Wide Area Networks (WANs), Open System Interconnection (OSI) models, cabling, cabling tools, routers, router programming, Ethernet, Internet Protocol (IP) addressing, network standards. This is the first of four courses leading to the Cisco Certified Network Associate (CCNA) certifications.",,"IM
NC
IM",,,
CIS 165,"This course focuses on the following: initial router configuration, Cisco IOS software management, routing protocol configuration, TCP/IP, and Access control lists (ACLs). Students will develop skills in configuring a router, managing Cisco IOS Software, configuring routing protocols, and creating access lists that control access to a router. The second of four courses leading to the Cisco Certified Network Associate CCNA) certification.",,"IM
NC
OS
SE
IM
SP
SP
IM",,,
CIS 181,Students create web sites using a current version of a graphical user interface (GUI) web authoring tool.,,"IM
IM
HCI
SDF
IM",,,
CIS 212,"The course helps learners to gain the knowledge and skills to install, configure, customize, optimize, and troubleshoot a desktop operating system in a stand-alone and network environment. Windows 7, Windows 8, and Linux and Mac OS are the current focus of the class. The purpose of this course is to offer all the critical information students need to successfully move into a role as an IT professional and support client computers in a business environment. Many hands-on exercises are included which allow students to practice skills as they are learned.",,"IM
HCI
NC
OS
SP",,,
CIS 215,"This course provides students with the knowledge and skills necessary to install and configure Microsoft Windows Server 2012 Enterprise and stand-alone and client computers that are part of a workgroup or domain. In addition, this course provides the skills and knowledge necessary to install and configure Linux server, and Mac OS X Server to create file, print, Web and terminal servers.",,"IM
IM
HCI
NC
SDF
OS
IM
SP
IM",,,
CIS 297,This provides the student with the opportunity to experience the world of work in conjunction with their program of study. Each semester hour of credit is equivalent to forty-five (45) contact hours. Prerequisite: Students through adviser approval will only be allowed to complete internship within the last two semesters of the degree plan.,,"IM
IM
NC
OS
SE
IM
SP
SP
IM",,,
CSCI 101,"Emphasis will be placed on the use of microcomputers in business. Focus will be placed on the hardware (computer components) and software (operating system, word processing, database, and spreadsheets programs) used in business.",,IM,,,
CSCI 122,Introduction to programming in the BASIC/Visual BASIC language.,,"IM
HCI
SDF
IM",,,
CSCI 133,"This course provides the student with an introduction to the structure and function of database systems, with emphasis on practical applications. Data structures, hierarchical relationships, sequential and indexed searching, updating and deleting records, and data security and recovery will be discussed. The students will use the select statement to query the database and produce the correct outcomes. Students will use functions, join multiple tables and create sub-queries.",,"IM
IM
HCI
NC
SDF
OS
IM
SP",,,
CSCI 160,"An introduction to computer science including problem-solving, algorithm development and structured programming in a high-level language. Emphasis on design, coding, testing and documentation of programs using accepted standards of style.",,"IM
HCI
SDF
OS
IM",,,
ENS 211,This course will teach students to use Geographical Information System software and Global Position System (GPS) technology. Students will learn to collect waypoints using GPS technology and will download the waypoint data onto GIS mapping software. Students will develop maps and enter attribute data to correspond to maps that are created. This course will serve as a thorough introduction to GIS software and GPS technology.,,"IM
HCI
IM
SP",,,
CIS 133J,"Covers design, implementation and testing software using Java. Introduces how to write Java programs that solve practical, real world, business-oriented problems using object-oriented design techniques.",,"SDF
IM",,,
CIS 233J,Covers the use of Java to access databases and files including XML. Includes creating collections and arrays and using inheritance in Java programs.,,"IM
SDF
IM",,,
CIS 234J,"Learn to use Java/J2EE to build scalable n-tiered web applications. Covers servlets, JSP, JDBC database connectivity, Enterprise JavaBeans, and SOAP Web Services Technologies. Learn advanced Apache Tomcat web server configuration including how to secure web resources, authenticate users and mask URLs.",,"IM
NC
SDF
IM",,,
AD 300,"This course focuses on object-oriented programming using Java with an emphasis in the creation and use of software components. It also presents other programming concepts such as reusability, the model-view-controller (MVC) design pattern, elementary data structures (linked lists, binary trees), recursion, and algorithmic analysis using Big-O notation. Prerequisite: Program entry.",,"IM
SDF",,,
AD 310,"An overview of tools, processes and practical approaches that support a software product's life cycle, from inception to obsolescence. Topics include: software project life-cycle management; team member roles; defining target customers; project tasks and timelines; responding to changing project requirements; dealing with limited time and resources; development paradigms such as waterfall and agile; quality documentation; and tools for source code management, automated unit testing and debugging. The course also covers legal and ethical issues as they relate to any part of the software product's life cycle; such as legal and ethical impacts of software failures; functionality and expandability limitation; and licensing and support agreements. Prerequisite: Program entry.",,"IM
IM
SDF
SDF",,,
AD 325,"Covers fundamental data strategies and their algorithms and applications in problem solving by programming. Includes linked lists, stacks, queues, priority queues, binary and multi-way trees, directed graphs, hashing, and internal and external sorting. Prerequisite: AD 300 Component Software.",,"SDF
SP",,,
AD 330,"This course presents strategies for effective communication in professional settings with an emphasis on the technology environment. Students apply best practices in formal and informal situations, for in-person and virtual communication. Best practices to support effective development team collaboration are examined and discussed in the context of various case studies. Students apply communication styles to specific situations and audiences. The course also examines technical and professional communication in light of the ethical considerations, as well as the intersection with legal issues, such as copyright fair use, and intellectual property. Prerequisite: Program entry.",,"HCI
SE
IM
SP",,,
AD 350,"Covers intermediate programming in a relational database. Provides an introduction to non-relational databases as used in Cloud Computing and Big Data. The RDMS topics include stored procedures, triggers, indexing and abstraction techniques, query construct efficiency. Compare and contrast RDMS to noSQL databases: uses, terminology, indexing, storage, compute consumption, ROI, reliability. Program entry.",,"IM
NC
OS",,,
AD 400,"This course provides a comprehensive overview of current processes, practices and tools used to manage software development projects. Using a combination of industry-relevant case studies and projects, students learn and apply best practices for planning, organizing, scheduling, and controlling software projects, and how to adapt strategies to specific project needs and constraints. Topics also include requirement identification and analysis, project documentation, and legal and licensing requirements. The course emphasizes legal and ethical issues that relate to all aspects of project management; such as issues relating to contractual agreements and licensing, resource acquisition and management, testing and deliverable, and customer support and management. Prerequisite: Completed at least one practicum.",,"IM
SDF
IM
SP
SP",,,
AD 420,"This course introduces students to the fundamentals of cloud computing, both in terms of software as a service (SaaS) and infrastructure as a service (IaaS). Students learn tools and strategies to build Web applications based on cloud services, integrate third party APIs and integrate big data tools such as predictive analytics. Students explore legal and ethical issues that are specific to the cloud computing environment, such as security, integrity and privacy of data; and continuity of service. Prerequisite: Web Apps and Data Structures.",,"IM
OS",,,
ICS 101,"ICS 101 provides hands-on computer instruction with an emphasis on producing professional-level documents, spreadsheets, presentations, databases, and Web pages for problem solving. This course includes concepts, terminology, and a contemporary operating system.",,"IM
HCI",,,
ITS 124,"ITS 124 provides students with an overview of essential networking concepts, terminology and skills. The course gives students a fundamental understanding of the technological, business and legal issues related to a networked organization. The course also introduces the student to security concepts such as cryptography, digital signatures, key management and authentication. Some students may opt to take the CompTIA Network+ exam upon the completion of ITS 124 because much of the CompTIA Network+ exam material is covered in class.",,"IM
NC",,,
ITS 128,"ITS 128 introduces students to the development of problem solving, logical and programming skills used in a business computing environment. Step-by-step logic is diagrammed into flowcharts and implemented in computer programs in a language deemed most appropriate for this course. Emphases are placed on valid solution designs and correct language syntax usage. Basic programming structures and concepts, common to all programming languages, are major components of this course.",,SDF,,,
ITS 129,"ITS 129 is an introduction to databases. The course covers the tools needed to query and modify database objects. The course also introduces the student to database design concepts. A substantial part of the course involves the understanding of the relationship between databases, tables, records and fields. The course includes hands-on use in a computer environment that provides the students with experience designing, creating, and manipulating a database using the appropriate information technology tools.",,"IM
HCI",,,
ITS 144,"ITS 144 provides PC operating system and hardware concepts and hands-on activities relating to the following topics: PC computer architecture, operating system theory, current PC operating systems, hard drive formatting and partitioning, operating system installation and upgrading, peripheral device drivers, network connectivity, resource sharing over a network, construction, installation, upgrading, troubleshooting, and maintenance of hardware and software components of microcomputer systems. Course will cover specification, selection, installation and configuration of hardware components including memory, floppy disk drives, microprocessors, hard drives, DVDs/CDs and DVD/CD-writers, video cards, NIC cards, sound cards, monitors and printers as related to a business environment.",,IM,,,
ITS 148,"ITS 148 is an introductory course in using the Visual Studio Integrated Development Environment (IDE) to provide viable computing solutions in a business environment. It is assumed that the student is familiar with computer programming. Applications with forms, controls, and code are developed in Visual Studio, using one of its programming languages deemed most appropriate for the course. Computer applications are executed, debugged and undergo tests of their validity. Introductory object oriented programming concepts are emphasized and realized through the creation of user defined classes and their properties and methods. Data validation and general procedure development are also components of this course.",,SDF,,,
ITS 149AD,"ITS 149AD is designed to give students a firm foundation in basic database administration. In this class, students learn how to install and maintain a database server. They will gain a conceptual understanding of database server architecture and how its components work and interact with one another. They will also learn how to create an operational database and properly manage the various structures in an effective and efficient manner including performance monitoring, database security, user management, and backup/recovery techniques.",,"IM
OS",,,
ITS 224,"ITS 224 introduces the Information Technology student to the key concepts and skills of Help Desk operation. Students will study what a Help Desk is, characteristics of its users, common problems, and tools. Students will learn about how a Help Desk fits into an organization’s structure and mission. Students will learn about the protocol and processing of incidents, and the different support levels and methods. Students will learn about knowledge, asset and security management and how important these are to an organization’s integrity. Students will have opportunities to both study and practice Help Desk operations in a controlled setting.",,"IM
IM",,,
ITS 227,"ITS 227 introduces the student to the Internet and its effects on modern society. Students will review its history, concepts, and terminology. Hands-on activities will include how to connect to and navigate the Internet, create World Wide Web pages, and develop World Wide Web sites. A variety of Internet resources will be demonstrated and subsequently explored by students.",,"HCI
SDF
SE
IM
SP
SP
IM",,,
ITS 228,"ITS 228 is an advanced-intermediate course in using the Visual Studio Integrated Development Environment (IDE) to provide viable computing solutions in a business environment. It is assumed that the student is familiar with Visual Studio. Enhanced user interfaces, especially those used in multi-form applications are covered. Also included in this course are the development and processing of XML documents. Object oriented programming concepts regarding inheritance are emphasized and realized through the creation of user defined derived classes that overload and override base classes. Database application development is also a component of this course.",,"SDF
OS",,,
ITS 229AD,"ITS 229AD advances students’ knowledge of database administration. In this class, students will learn how to configure a database server for multilingual applications. They will practice various methods of recovering the database using RMAN and Flashback technology. Database performance monitoring tools will be covered, in addition to the steps to take to resolve common problems and improve performance. Students will also learn how to administer a database efficiently by using database technologies such as the Resource Manager, the Scheduler, Automatic Storage Management (ASM), and VLDB features. They will set up a secure database using Virtual Private Database, and learn how to efficiently move data from database to database.",,IM,,,
ITS 293,"ITS 293 is a cooperative internship education course involving the student and an employer or the college that integrates classroom learning with supervised, structured practical experience. Students’ interests, ITS program content and the availability of jobs are considered when making practicum assignments. It offers the opportunity to develop workplace soft skills as well as technical skills.",,SP,,,
IST 105,"Laboratory course to provide students with proficiency in Windows and the applications ofword processing, spreadsheet, presentation and database management functions. Class exerciseswill focus on business situations and instructional software packages refl ecting current businessusage. The Internet will also be covered, with topics including use of an Internet browser, e-mail,and using the Web. (Three hours lecture/no assigned lab periods – students need to allow time to complete lab assignments during open lab periods.) ** an exemption test is available for this course.",,"IM
IM
HCI
SDF
IM
SP
SP",,,
IST 106,"This course will present students with basic concepts and terminology for computer hardware;software; networks; the Internet; mobile devices such as cell phones, PDAs and laptops. Hands-on exercises will expose students to Microsoft Office applications (Word, Excel, PowerPoint, and Access). Course will explore use of Internet for research and how to evaluate web sources. Students will also learn computational thinking and explore object-oriented programming concepts and techniques as they create movies and interactive games using ALICE software. Ethical issues will be discussed throughout the course.",,"IM
HCI
SDF
IM
SP",,,
IST 181,"Learn functions and major components of systems software, and identify and define the important features of current operating systems. Install an operating system. Use OS for data and file management, backup, hard-drive maintenance functions, etc. Be familiar with general utility programs. Demonstrate familiarity with both stand-alone and network operating systems. Create,use and maintain system configuration. Change configuration parameters to optimize performance. Describe major features and functions of major categories of applications software (word processing, spreadsheet, database, browsers, e-mail, etc.). Use basic features of office productivity software. Demonstrate ability to learn a new feature in software package, and ability to learn a known application (such as word processing) in another vendor’s package. Install and test an application software package.",,"IM
IM
SP
SP",,,
IST 203,"Design and compose computer graphics in the first half of the semester, and then produce and publish those graphics in both print and web formats. Computer animation will also be introduced. Course will focus on theory and technique, using currently popular graphic and publishing software.Prerequisite: IST 105 or IST 106.",,"HCI
IM
SP",,,
IST 205,"This course explores current information management techniques. The system development life cycle is reviewed from initial needs analysis to final testing and implementation. Topics include benefit/cost analysis, data flow diagrams, top-down design, techniques for planning program development (including modular coding, implementation, and maintenance.) Various types of programming will be reviewed, including Third and Fourth Generation Languages, Object-Oriented Programming, and CASE tools.Prerequisites: IST 105 or passing grade on exemption test and BA 101 or relevant business experience (approval of program director)",,"IM
IM
HCI
SDF
OS
SE
IM
SP
SP
IM",,,
IST 206,"Based on the objectives of the International Association of Computer Investigative Specialists (IACIS) certification, this course prepares students to understand computer investigations and current computer forensic tools. Various components of digital investigation and presentation of evidence as an expert witness will be explored. Application of these concepts for network security and control will be explored.Prerequisite: IST 105 or IST 106",,"IM
IM
SP",,,
IST 210,"An introductory contemporary computer programming language course to overview basic structured programming concepts, and provide students with the ability to write simple programs. Course will consist of lectures and hands-on exercises, with projects assigned to be completed using the Manor Student Network. (3 lecture hours, 2 laboratory hours)Prerequisites: IST 106",,"IM
HCI
SDF
IM
SP",,,
IST 211,"Detailed course in problem solving, expanding upon programming language skills acquired in IST 210. This course emphasizes concepts of system design, coding, testing and implementation and introduce object oriented programming concepts. Course will involve extensive coding using structured programming techniques. (3 lecture hours, 2 laboratory hours)Prerequisites: IST 210.",,"IM
HCI
SDF
IM
SP",,,
IST 212,"Visual Basic will be used to create applications for the Windows operating system. Students will learn how to work with pre-built objects, graphics, enter commands, use variables and constants, use programming control structures and work with classes. The course will include an introduction to Active X Data Objects and functions of the Application Programming Interface.(3 lecture hours, 2 laboratory hours)Prerequisites: IST 106.",,"IM
HCI
SDF
SE
IM
SP",,,
IST 215,"Concepts, procedures, design, implementation and management issues of database systems, following database development life cycle. Stresses importance of needs analysis, requirements statement, and testing final product against initial requirements definition. Database management and security issues will be explored. Programming will be based on currently used business application database software, and SQL. Theory will be reinforced with projects to be completed using database software on the Manor Student Network.Prerequisites: IST 105 and IST 205.",,"IM
IM
HCI
SDF
OS
IM
SP
SP
IM",,,
IST 217,"This course introduces students to the fundamentals of World Wide Web home page design using the Hypertext Markup Language (HTML) and a simple HTML editor. Students will gain extensive hands-on experience creating Web pages using HTML tags for links, tables, forms, and incorporating images. Additionally, the course will present an introduction to basic web page scripting and web database interfacing. Web publishing software such as Microsoft Front Page will also be explored. Quality design elements and style will be considered throughout the course.Prerequisite: IST 105 or IST 106.",,"IM
HCI
IM
SP",,,
IST 218,"An overview of computer communications, hardware and software requirements, protocols and applications (including terminal emulation, remote login and file transfer). Explore local area network topologies, installation and administration issues.Prerequisite: IST 105 or IST 106.",,"IM
HCI
NC
OS
SE
IM
SP
SP
IM",,,
IST 219,"Course provides an overview of data structures, including arrays, lists, stacks, queues, classes and trees. Abstract data types (ADTs) are also covered. Other topics included are: recursion, linked-lists, big-O notation, linear and binary searches, hashing and sorting. Prerequisite: IST 210",,"HCI
SDF
IM
SP",,,
IST 299,"Students complete a minimum of 80 hours of computer-related work experience. Job functions can include programming, user support, network support and administration, web site development or other related responsibilities (subject to approval by the program director). Students are responsible for placement search, interviewing, and transportation to and from the work site. Students will be required to keep a journal of their hours, and employer feedback will impact student’s course grade. There will be six (6) sessions with the course instructor to discuss various work-related topics, including appropriate work dress and ethics, working in teams, managing your manager, how to deal with stress, etc.Prerequisite: Students must have successfully completed (C or better) at least nine credits in IST courses.",,"IM
SP
IM",,,
CNSS 105,"This course covers the basic principles of electricity and digital electronics involved in the operation of computers and network systems. Topics include waveform generation and transmission, Boolean Arithmetic, and basic circuit operations. All topics are covered with respect to their effort on modern computer and network systems.",,"IM
OS
IM
SP
SP
IM",,,
CNSS 130,"Employment in information technology, whether in a software or hardware field, requires in-depth knowledge of computers and networks and the vast amount of terminology relating to this area. This course is designed to prepare students very well for both employment and CompTIA network+ certification.",,"IM
HCI
NC
OS
SE
IM
SP
SP
IM",,,
CNSS 150,"This course is an introduction to Personal Computer hardware and software. Using a theoretical and hands-on approach, students will learn the skills needed to install, configure, and service hardware, operating systems, and applications. In addition, students will learn to configure stand alone or networked computers for reliability and security. This course maps to CompTIA A+ objectives.",,"IM
NC
OS
SE
IM
SP
SP
IM",,,
CNSS 220,"This course provides hands-on understanding of how to design network topologies, and install and manage network devices (switch, router, AP) and identify network problems, and troubleshoot. Students will also learn Cisco Command Line interface and terminology. Prerequisite: CNSS-130.",,"IM
IM
HCI
NC
OS
IM
SP
SP
IM",,,
CNSS 230,This course is intended to teach the fundamentals of the Unix operating system to students with little or no prior experience in Unix. It will cover open source topics and tools needed to work effectively in a Unix system environment. Familiarity with computers and with the Windows operating system is required to be successful. This course also covers open source software and Linux distributions. Prerequisites: CNSS-150.,,"IM
IM
HCI
NC
SDF
OS
IM
SP
SP
IM",,,
CNSS 231,"In depth look at Linux, focusing on proper installation, user administration, and system monitoring. This course will be presented (in seat or hybrid online) in a ""hands-on approach."" Students will either install Linux on their own or lab system or use VMWare operating system images to perform work. Labs include user\group management, logging, NFS, SAMBA, RAID, DHCP, IPTABLES, and implementing Security. Prerequisite: CNSS-230.",,"IM
IM
HCI
NC
SDF
OS
IM
SP
SP
IM",,,
CNSS 250,"Course introduces students to Network Administration using the latest Microsoft Network Operating System. Students will load server, configure Active Directory, and use server to perform labs. Course maps directly to Microsoft Certified Technology Specialist (MCTS) and prepares the student for certification. Emphasis on administration of users, group policies, Active Directory design and concepts, and security concepts. Accepted by most universities as CSCI transfer. Prerequisites: CNSS-130 and CNSS-150.",,"IM
IM
HCI
NC
SDF
OS
IM
SP
SP
IM",,,
CNSS 251,"Course focuses on advanced Windows network administration. Course maps directly to Microsoft Certified Systems Administrator and Microsoft Certified Systems Engineer certifications. Emphasis on role of administration of network devices, fault tolerance, Active Directory and DNS troubleshooting. Group Policies, Web Servers, Virtual Private Networking, Interoperability with other NOS' and IP routed networking. Students load and administer Windows servers, workstations, hubs, routers, switches, UPS and security software. Prerequisite: CNSS-250",,"IM
IM
HCI
NC
SDF
OS
SE
IM
SP
SP
IM",,,
CNSS 260,"This course covers the skills needed to protect computer systems, network systems, and information assets (information assurance). Students will apply the latest methods, with a focus on information system security protection. Understanding key elements like the ""Human Firewall"" are explored in depth. Prerequisite: CNSS-220; and Student must pass a criminal background check.",,"IM
IM
NC
SDF
OS
IM
SP
SP
IM",,,
CNSS 272,"Directly related Information Technology work experience designed to provide students with “on-the-job” experience at a business workplace. Outcomes of this experience will include employability skills, interpersonal communication skills, and information technology skills. Prerequisites: Student has taken 24 credits in the CNSS program. Student must pass a criminal background check.",,"IM
NC
OS
SE
IM
SP
SP
IM",,,
CIT 105,"Provides an introduction to the computer and the convergence of technology as used in today’s global environment. Introduces topics including computer hardware and software, file management, the Internet, e-mail, the social web, green computing, security and computer ethics. Presents basic use of application, programming, systems, and utility software.",,"IM
HCI
NC
SDF
OS
SP
SP",,,
CIT 111,"Presents a practical view of computer hardware and client operating systems. Covers computer hardware components; troubleshooting, repair, and maintenance; operating system interfaces and management tools; networking components; computer security; and operational procedures.",,"IM
IM
NC
OS
IM
SP",,,
CIT 120,"Promotes understanding of computer programming and logic by teaching students to “think like a computer”. Covers skills needed to develop and design language-independent solutions to solve computer-related problems. Covers development and design basics including use of variables, control and data structures, and principles of command-line and object-oriented languages.",,"NC
SDF
IM",,,
CIT 149,"Introduces students to fundamental programming concepts using the Java programming language. Topics include data types, control structures, simple data structures, error-handling, object-oriented programming, graphical user interfaces, and modular programming.",,"IM
HCI
SDF
IM",,,
CIT 150,"Provides students with a study of traditional and emerging Internet technologies. Covers topics including Internet fundamentals, Internet applications, Internet delivery systems, and Internet client/server computing. Provides a hands-on experience and some rudimentary programming in an Internet environment.",,"HCI
NC
SDF
OS",,,
CIT 160,"Introduces technical level concepts of non-vendor specific networking including technologies, media, topologies, devices, management tools, and security. Provides the basics of how to manage, maintain, troubleshoot, install, operate, and configure basic network infrastructure.",,"IM
HCI
NC",,,
CIT 170,"Provides an overview of database and database management system concepts, internal design models, normalization, network data models, development tools, and applications.",,"IM
SDF",,,
CIT 180,"Introduces basic computer and network security concepts and methodologies. Covers principles of security; compliance and operational security; threats and vulnerabilities; network security; application, data, and host security; access control and identity management; and cryptography.",,"IM
NC
OS",,,
CIT 291,"Apply acquired techniques, knowledge, and skills to successfully analyze, design, and plan a CIT project. Develop key project management and system analysis deliverables in a portfolio.",,"IM
SDF
SE
IM
SP
IM",,,
CET2472C,"This course provides students with important know- ledge and skills required to implement a defined network architecture with basic network security to configure, maintain,and troubleshoot network devices using appropriate network tools, to understand the features and purpose of network technologies, and to make basic solution recommendations, analyze network traffic, and be familiar with common protocols and media types.",,"IM
HCI
NC
SDF
OS
SE
SP
IM",,,
CGS1060C,"This is an introductory course in basic computer and internet use. It covers computer hardware and software fundamentals (including the use of Windows), key productivity applications (including word processing, spreadsheets, and presentation systems), and living in an online world (including network fundamentals, e-mails, and the effective use of the Internet as a communication tool and information resource). Students will develop basic computer skills to aid them with college studies and workforce readiness. Hands-on use of a personal computer is required.",,"IM
SE
SP
IM",,,
CGS1540C,"This course is an introduction to database management. Using appropriate database software, students will learn to maintain and manipulate data in an organized, accessible and accurate manner. Emphasis is placed on the use of microcomputer database management software for common business applications.",,"IM
SDF
OS
SE
IM
IM",,,
CGS1557C,"This course is an entry-level course that provides students with baseline technical knowledge and skills of Internet, intranet, and extranet technologies. Students will gain a basic knowledge and/or competency of Internet skills and tasks in 3 core content areas: Internet Business Foundations, Site Development Foundations, and Network Technology Foundations.",,"IM
IM
HCI
NC
SDF
OS
SE
IM
SP
SP
IM",,,
CIS1000C,"This course is designed to provide students with a broad perspective of the field of Computer Science, from core issues and concepts inherent to the discipline of computing, to the various sub-disciplines of computer science. Topics include: Number Systems and Data Representation; Computer Components and Architecture including Gates and Circuits; Problem Solving and Systems Development Methodologies; Low-Level and High- Level Programming Languages; Abstract Data Representations and Algorithms; Operating Systems, File Systems and Directories; Information Systems; Artificial Intelligence; Simulation, Graphics, and Other Applications; Networks and The World Wide Web.",,"IM
HCI
SDF
OS
SE
IM
SP
SP
IM",,,
CIS1513C,"This course examines the organization, planning, and controlling of projects and provides practical knowledge on managing project scope, schedule and resources. Topics include project life cycle, work breakdown structure and Gantt charts, network diagrams, scheduling techniques, and resource allocation decisions. Concepts are applied through team projects and tutorials using project management software. Prerequisite: CGS1060C or placement.",,"IM
IM
HCI
SDF
SE
IM
SP
SP
IM",,,
COP1334C,"This course provides an introduction to computer program design and development using the C++ language. A structured, multi-phase, program development process featuring a series of steps involving problem definition, top-down design, and formal program specification is stressed. The course is intended to provide the novice programming student with the techniques needed to develop well-documented, structured computer programs.",,"IM
SDF
IM
SP
IM",,,
CTS1133C,"This course provides students with the knowledge required to assemble components based on customer requirements, install, configure and maintain devices, PCs and software for end users, understand the basics of networking and security/ forensics, properly and safely diagnose, resolve and document common hardware and software issues while applying troubleshooting skills. Successful candidates will also provide appropriate customer support; understand the basics of virtualization, desktop imaging, and deployment.",,"IM
HCI
NC",,,
CTS2120C,"This course provides the student with an understanding of the computer, network, infrastructure, and information security issues faced by industry worldwide. Expertise necessary to combat and protect intellectual property from theft and destruction are also developed. The skills developed by students who complete this course will prepare them for the Security+ certification exam.",,"IM
HCI
NC
SDF
OS
SE
IM
SP
SP
IM",,,
CTS2131C,"This course provides students with the skills required to install, configure, upgrade, and maintain PC workstations, the Windows OS and SOHO networks, in addition the student will be able to utilize troubleshooting techniques and tools to effectively and efficiently resolve PC, OS, and network connectivity issues and implement security practices.",,"IM
HCI
NC",,,
CIS126DL,"Introduction to the Linux Operating system. Develop knowledge and skills required to install, configure and troubleshoot a Linux-based workstation including basic network functions. Learn basic command line and Graphical User Interface (GUI) desktop environment utilities and applications. Fundamental abilities to achieve the entry-level industry certification covered",,"IM
HCI
NC
SDF
IM
SP",,,
CIS238DL,"Managing Linux Operating Systems including sophisticated manipulation of file structures, backup systems, printing processes, troubleshooting, user account management, hard disk maintenance and configuration, process monitoring and prioritizing, kernel customization, and system resource control. Preparation for industry certifications such as the SAIR/GNU LCP and LCA certificates, CompTIA's Linux+, RHCT, RHCE, and LPIC",,"IM
NC
OS",,,
